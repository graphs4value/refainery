/*
 * SPDX-FileCopyrightText: 2021-2024 The Refinery Authors <https://refinery.tools/>
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package tools.refinery.gradle

import java.io.FileInputStream
import java.io.FileNotFoundException
import java.io.FileOutputStream
import java.util.Properties

plugins {
	id("tools.refinery.gradle.internal.frontend-conventions")
}

frontend {
	installScript.set(provider {
		if (project.hasProperty("ci")) "install --immutable --inline-builds" else "install"
	})
}

abstract class FrontendPropertiesHandler @Inject constructor(objectFactory: ObjectFactory) {
	companion object {
		private const val INSTALLED_NODE_VERSION_PROPERTY = "installedNodeVersion"
	}

	val frontedPropertiesFile = objectFactory.property(String::class)

	val nodeVersion = objectFactory.property(String::class)

	private fun readFrontendProperties(): Properties {
		val props = Properties()
		try {
			FileInputStream(frontedPropertiesFile.get()).use { inputStream ->
				props.load(inputStream)
			}
		} catch (ignored: FileNotFoundException) {
			// Ignore missing file.
		}
		return props
	}

	private fun getFrontendProperty(propertyName: String): String? {
		val props = readFrontendProperties()
		return props[propertyName]?.toString()
	}

	private fun putFrontedProperty(propertyName: String, propertyValue: String) {
		val props = readFrontendProperties()
		props[propertyName] = propertyValue
		FileOutputStream(frontedPropertiesFile.get()).use { outputStream ->
			props.store(outputStream, "generated by refinery-frontend-worktree")
		}
	}

	fun needsInstall(): Boolean {
		return getFrontendProperty(INSTALLED_NODE_VERSION_PROPERTY) != nodeVersion.get()
	}

	fun markAsInstalled() {
		putFrontedProperty(INSTALLED_NODE_VERSION_PROPERTY, nodeVersion.get())
	}
}

tasks {
	installNode {
		val handler = project.objects.newInstance<FrontendPropertiesHandler>()
		handler.frontedPropertiesFile = frontend.nodeInstallDirectory.map { dir -> "$dir/frontend.properties" }
		handler.nodeVersion = frontend.nodeVersion
		onlyIf {
			handler.needsInstall()
		}
		doLast {
			handler.markAsInstalled()
		}
	}

	installFrontend {
		inputs.files("package.json", "yarn.lock")
		outputs.files(".pnp.cjs", ".pnp.loader.mjs")
	}

	register("clobberFrontend", Delete::class) {
		delete(frontend.nodeInstallDirectory)
		delete(".yarn/cache")
		delete(".yarn/install-state.gz")
		delete(".yarn/sdks")
		delete(".yarn/unplugged")
		delete(".pnp.cjs")
		delete(".pnp.loader.mjs")
	}
}
