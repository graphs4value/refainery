Type-safe dependency accessors is an incubating feature.
> Task :buildSrc:extractPluginRequests UP-TO-DATE
> Task :buildSrc:generatePluginAdapters UP-TO-DATE
> Task :buildSrc:compileJava UP-TO-DATE
> Task :buildSrc:compileGroovy NO-SOURCE
> Task :buildSrc:compileGroovyPlugins UP-TO-DATE
> Task :buildSrc:pluginDescriptors UP-TO-DATE
> Task :buildSrc:processResources UP-TO-DATE
> Task :buildSrc:classes UP-TO-DATE
> Task :buildSrc:jar UP-TO-DATE
> Task :buildSrc:assemble UP-TO-DATE
> Task :buildSrc:pluginUnderTestMetadata UP-TO-DATE
> Task :buildSrc:compileTestJava NO-SOURCE
> Task :buildSrc:compileTestGroovy NO-SOURCE
> Task :buildSrc:processTestResources NO-SOURCE
> Task :buildSrc:testClasses UP-TO-DATE
> Task :buildSrc:test NO-SOURCE
> Task :buildSrc:validatePlugins UP-TO-DATE
> Task :buildSrc:check UP-TO-DATE
> Task :buildSrc:build UP-TO-DATE
> Task :refinery-store:compileJava UP-TO-DATE
> Task :refinery-store:processResources NO-SOURCE
> Task :refinery-store:classes UP-TO-DATE
> Task :refinery-store:compileTestJava UP-TO-DATE
> Task :refinery-store:processTestResources NO-SOURCE
> Task :refinery-store:testClasses UP-TO-DATE
> Task :refinery-store:compileJmhJava UP-TO-DATE
> Task :refinery-store:processJmhResources NO-SOURCE
> Task :refinery-store:jmhClasses UP-TO-DATE

> Task :refinery-store:jmh
# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 16, nKeys = 32, nValues = 2)

# Run progress: 0.00% complete, ETA 00:44:00
# Fork: 1 of 1
# Warmup Iteration   1: 5466.144 ns/op
# Warmup Iteration   2: 5121.870 ns/op
# Warmup Iteration   3: 5143.122 ns/op
# Warmup Iteration   4: 5576.251 ns/op
# Warmup Iteration   5: 5658.937 ns/op
Iteration   1: 5303.508 ns/op
Iteration   2: 5202.710 ns/op
Iteration   3: 5705.930 ns/op
Iteration   4: 5235.701 ns/op
Iteration   5: 5136.154 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  5316.801 ±(99.9%) 869.227 ns/op [Average]
  (min, avg, max) = (5136.154, 5316.801, 5705.930), stdev = 225.735
  CI (99.9%): [4447.574, 6186.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 16, nKeys = 32, nValues = 3)

# Run progress: 0.38% complete, ETA 00:45:54
# Fork: 1 of 1
# Warmup Iteration   1: 5695.575 ns/op
# Warmup Iteration   2: 5295.382 ns/op
# Warmup Iteration   3: 5114.967 ns/op
# Warmup Iteration   4: 5158.729 ns/op
# Warmup Iteration   5: 5144.924 ns/op
Iteration   1: 5112.297 ns/op
Iteration   2: 5071.985 ns/op
Iteration   3: 5105.735 ns/op
Iteration   4: 5108.861 ns/op
Iteration   5: 5126.262 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  5105.028 ±(99.9%) 77.272 ns/op [Average]
  (min, avg, max) = (5071.985, 5105.028, 5126.262), stdev = 20.067
  CI (99.9%): [5027.756, 5182.300] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 16, nKeys = 1000, nValues = 2)

# Run progress: 0.76% complete, ETA 00:45:39
# Fork: 1 of 1
# Warmup Iteration   1: 200814.874 ns/op
# Warmup Iteration   2: 182462.857 ns/op
# Warmup Iteration   3: 181843.965 ns/op
# Warmup Iteration   4: 181567.659 ns/op
# Warmup Iteration   5: 185086.858 ns/op
Iteration   1: 192414.697 ns/op
Iteration   2: 181230.169 ns/op
Iteration   3: 182648.671 ns/op
Iteration   4: 184712.334 ns/op
Iteration   5: 179878.332 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  184176.841 ±(99.9%) 19025.102 ns/op [Average]
  (min, avg, max) = (179878.332, 184176.841, 192414.697), stdev = 4940.759
  CI (99.9%): [165151.739, 203201.942] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 16, nKeys = 1000, nValues = 3)

# Run progress: 1.14% complete, ETA 00:45:28
# Fork: 1 of 1
# Warmup Iteration   1: 199622.898 ns/op
# Warmup Iteration   2: 181016.201 ns/op
# Warmup Iteration   3: 184420.594 ns/op
# Warmup Iteration   4: 180165.192 ns/op
# Warmup Iteration   5: 181635.840 ns/op
Iteration   1: 180256.043 ns/op
Iteration   2: 180616.830 ns/op
Iteration   3: 181224.193 ns/op
Iteration   4: 181642.779 ns/op
Iteration   5: 179984.236 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  180744.816 ±(99.9%) 2632.769 ns/op [Average]
  (min, avg, max) = (179984.236, 180744.816, 181642.779), stdev = 683.722
  CI (99.9%): [178112.047, 183377.586] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 16, nKeys = 100000, nValues = 2)

# Run progress: 1.52% complete, ETA 00:45:16
# Fork: 1 of 1
# Warmup Iteration   1: 27238652.632 ns/op
# Warmup Iteration   2: 24938004.878 ns/op
# Warmup Iteration   3: 24923060.976 ns/op
# Warmup Iteration   4: 24593880.952 ns/op
# Warmup Iteration   5: 23842218.605 ns/op
Iteration   1: 24712904.762 ns/op
Iteration   2: 23711179.070 ns/op
Iteration   3: 24818121.951 ns/op
Iteration   4: 22798540.000 ns/op
Iteration   5: 24751739.024 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  24158496.961 ±(99.9%) 3413843.701 ns/op [Average]
  (min, avg, max) = (22798540.000, 24158496.961, 24818121.951), stdev = 886564.368
  CI (99.9%): [20744653.260, 27572340.663] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 16, nKeys = 100000, nValues = 3)

# Run progress: 1.89% complete, ETA 00:45:22
# Fork: 1 of 1
# Warmup Iteration   1: 27635240.541 ns/op
# Warmup Iteration   2: 23947404.762 ns/op
# Warmup Iteration   3: 24344483.333 ns/op
# Warmup Iteration   4: 24115271.429 ns/op
# Warmup Iteration   5: 25603095.000 ns/op
Iteration   1: 24252138.095 ns/op
Iteration   2: 23721862.791 ns/op
Iteration   3: 23539967.442 ns/op
Iteration   4: 23764504.651 ns/op
Iteration   5: 25028924.390 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  24061479.474 ±(99.9%) 2316642.173 ns/op [Average]
  (min, avg, max) = (23539967.442, 24061479.474, 25028924.390), stdev = 601624.616
  CI (99.9%): [21744837.300, 26378121.647] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 32, nKeys = 32, nValues = 2)

# Run progress: 2.27% complete, ETA 00:45:20
# Fork: 1 of 1
# Warmup Iteration   1: 10845.055 ns/op
# Warmup Iteration   2: 11115.291 ns/op
# Warmup Iteration   3: 10268.735 ns/op
# Warmup Iteration   4: 10382.214 ns/op
# Warmup Iteration   5: 10125.140 ns/op
Iteration   1: 10293.498 ns/op
Iteration   2: 10310.547 ns/op
Iteration   3: 10260.897 ns/op
Iteration   4: 10303.393 ns/op
Iteration   5: 10295.874 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  10292.842 ±(99.9%) 73.438 ns/op [Average]
  (min, avg, max) = (10260.897, 10292.842, 10310.547), stdev = 19.072
  CI (99.9%): [10219.404, 10366.280] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 32, nKeys = 32, nValues = 3)

# Run progress: 2.65% complete, ETA 00:45:07
# Fork: 1 of 1
# Warmup Iteration   1: 10703.003 ns/op
# Warmup Iteration   2: 10433.264 ns/op
# Warmup Iteration   3: 10255.244 ns/op
# Warmup Iteration   4: 10402.328 ns/op
# Warmup Iteration   5: 10271.731 ns/op
Iteration   1: 10229.989 ns/op
Iteration   2: 10217.576 ns/op
Iteration   3: 10165.563 ns/op
Iteration   4: 10295.953 ns/op
Iteration   5: 10228.498 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  10227.516 ±(99.9%) 178.835 ns/op [Average]
  (min, avg, max) = (10165.563, 10227.516, 10295.953), stdev = 46.443
  CI (99.9%): [10048.681, 10406.351] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 32, nKeys = 1000, nValues = 2)

# Run progress: 3.03% complete, ETA 00:44:52
# Fork: 1 of 1
# Warmup Iteration   1: 394202.509 ns/op
# Warmup Iteration   2: 366717.445 ns/op
# Warmup Iteration   3: 362520.757 ns/op
# Warmup Iteration   4: 363602.582 ns/op
# Warmup Iteration   5: 361457.225 ns/op
Iteration   1: 363198.272 ns/op
Iteration   2: 364369.264 ns/op
Iteration   3: 364567.968 ns/op
Iteration   4: 362968.984 ns/op
Iteration   5: 361831.643 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  363387.226 ±(99.9%) 4300.420 ns/op [Average]
  (min, avg, max) = (361831.643, 363387.226, 364567.968), stdev = 1116.806
  CI (99.9%): [359086.806, 367687.647] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 32, nKeys = 1000, nValues = 3)

# Run progress: 3.41% complete, ETA 00:44:39
# Fork: 1 of 1
# Warmup Iteration   1: 332561.078 ns/op
# Warmup Iteration   2: 309034.035 ns/op
# Warmup Iteration   3: 306478.158 ns/op
# Warmup Iteration   4: 305938.892 ns/op
# Warmup Iteration   5: 311185.670 ns/op
Iteration   1: 306581.181 ns/op
Iteration   2: 309593.582 ns/op
Iteration   3: 307366.371 ns/op
Iteration   4: 313909.739 ns/op
Iteration   5: 308319.523 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  309154.079 ±(99.9%) 11113.903 ns/op [Average]
  (min, avg, max) = (306581.181, 309154.079, 313909.739), stdev = 2886.245
  CI (99.9%): [298040.176, 320267.982] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 32, nKeys = 100000, nValues = 2)

# Run progress: 3.79% complete, ETA 00:44:27
# Fork: 1 of 1
# Warmup Iteration   1: 56061289.474 ns/op
# Warmup Iteration   2: 51638545.000 ns/op
# Warmup Iteration   3: 48404900.000 ns/op
# Warmup Iteration   4: 50813295.238 ns/op
# Warmup Iteration   5: 50236895.000 ns/op
Iteration   1: 49114066.667 ns/op
Iteration   2: 49144795.238 ns/op
Iteration   3: 47046872.727 ns/op
Iteration   4: 51318545.000 ns/op
Iteration   5: 49806719.048 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  49286199.736 ±(99.9%) 5923480.144 ns/op [Average]
  (min, avg, max) = (47046872.727, 49286199.736, 51318545.000), stdev = 1538308.983
  CI (99.9%): [43362719.592, 55209679.880] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 32, nKeys = 100000, nValues = 3)

# Run progress: 4.17% complete, ETA 00:44:25
# Fork: 1 of 1
# Warmup Iteration   1: 52010270.000 ns/op
# Warmup Iteration   2: 50275895.000 ns/op
# Warmup Iteration   3: 47406031.818 ns/op
# Warmup Iteration   4: 46667509.091 ns/op
# Warmup Iteration   5: 46647486.364 ns/op
Iteration   1: 44919360.870 ns/op
Iteration   2: 48802476.190 ns/op
Iteration   3: 46430995.455 ns/op
Iteration   4: 46286218.182 ns/op
Iteration   5: 44868417.391 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  46261493.618 ±(99.9%) 6157394.054 ns/op [Average]
  (min, avg, max) = (44868417.391, 46261493.618, 48802476.190), stdev = 1599055.682
  CI (99.9%): [40104099.564, 52418887.671] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 64, nKeys = 32, nValues = 2)

# Run progress: 4.55% complete, ETA 00:44:20
# Fork: 1 of 1
# Warmup Iteration   1: 21336.074 ns/op
# Warmup Iteration   2: 18777.590 ns/op
# Warmup Iteration   3: 21228.259 ns/op
# Warmup Iteration   4: 20180.959 ns/op
# Warmup Iteration   5: 20312.458 ns/op
Iteration   1: 19986.762 ns/op
Iteration   2: 19947.220 ns/op
Iteration   3: 20176.714 ns/op
Iteration   4: 20049.184 ns/op
Iteration   5: 20130.371 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  20058.050 ±(99.9%) 369.117 ns/op [Average]
  (min, avg, max) = (19947.220, 20058.050, 20176.714), stdev = 95.859
  CI (99.9%): [19688.933, 20427.167] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 64, nKeys = 32, nValues = 3)

# Run progress: 4.92% complete, ETA 00:44:07
# Fork: 1 of 1
# Warmup Iteration   1: 21076.216 ns/op
# Warmup Iteration   2: 19147.320 ns/op
# Warmup Iteration   3: 20097.245 ns/op
# Warmup Iteration   4: 19847.753 ns/op
# Warmup Iteration   5: 19765.953 ns/op
Iteration   1: 19904.651 ns/op
Iteration   2: 19922.811 ns/op
Iteration   3: 19798.776 ns/op
Iteration   4: 19701.647 ns/op
Iteration   5: 19800.608 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  19825.699 ±(99.9%) 346.598 ns/op [Average]
  (min, avg, max) = (19701.647, 19825.699, 19922.811), stdev = 90.010
  CI (99.9%): [19479.101, 20172.297] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 64, nKeys = 1000, nValues = 2)

# Run progress: 5.30% complete, ETA 00:43:54
# Fork: 1 of 1
# Warmup Iteration   1: 781884.538 ns/op
# Warmup Iteration   2: 705138.987 ns/op
# Warmup Iteration   3: 706731.863 ns/op
# Warmup Iteration   4: 710328.682 ns/op
# Warmup Iteration   5: 705583.826 ns/op
Iteration   1: 711340.310 ns/op
Iteration   2: 703612.299 ns/op
Iteration   3: 710507.093 ns/op
Iteration   4: 713852.276 ns/op
Iteration   5: 707521.973 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  709366.790 ±(99.9%) 15139.468 ns/op [Average]
  (min, avg, max) = (703612.299, 709366.790, 713852.276), stdev = 3931.672
  CI (99.9%): [694227.322, 724506.258] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 64, nKeys = 1000, nValues = 3)

# Run progress: 5.68% complete, ETA 00:43:42
# Fork: 1 of 1
# Warmup Iteration   1: 756295.124 ns/op
# Warmup Iteration   2: 692692.350 ns/op
# Warmup Iteration   3: 704659.202 ns/op
# Warmup Iteration   4: 704554.330 ns/op
# Warmup Iteration   5: 696773.739 ns/op
Iteration   1: 702905.664 ns/op
Iteration   2: 702693.916 ns/op
Iteration   3: 706754.029 ns/op
Iteration   4: 710117.419 ns/op
Iteration   5: 704520.294 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  705398.265 ±(99.9%) 11931.701 ns/op [Average]
  (min, avg, max) = (702693.916, 705398.265, 710117.419), stdev = 3098.625
  CI (99.9%): [693466.563, 717329.966] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 64, nKeys = 100000, nValues = 2)

# Run progress: 6.06% complete, ETA 00:43:30
# Fork: 1 of 1
# Warmup Iteration   1: 106035210.000 ns/op
# Warmup Iteration   2: 97189081.818 ns/op
# Warmup Iteration   3: 100039654.545 ns/op
# Warmup Iteration   4: 93460200.000 ns/op
# Warmup Iteration   5: 92073718.182 ns/op
Iteration   1: 96256663.636 ns/op
Iteration   2: 97922372.727 ns/op
Iteration   3: 98974390.909 ns/op
Iteration   4: 95761000.000 ns/op
Iteration   5: 89642950.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  95711475.455 ±(99.9%) 13971705.854 ns/op [Average]
  (min, avg, max) = (89642950.000, 95711475.455, 98974390.909), stdev = 3628407.641
  CI (99.9%): [81739769.601, 109683181.308] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 64, nKeys = 100000, nValues = 3)

# Run progress: 6.44% complete, ETA 00:43:28
# Fork: 1 of 1
# Warmup Iteration   1: 107503050.000 ns/op
# Warmup Iteration   2: 98707627.273 ns/op
# Warmup Iteration   3: 96256500.000 ns/op
# Warmup Iteration   4: 92718281.818 ns/op
# Warmup Iteration   5: 102085163.636 ns/op
Iteration   1: 99888318.182 ns/op
Iteration   2: 96211463.636 ns/op
Iteration   3: 90822233.333 ns/op
Iteration   4: 103027200.000 ns/op
Iteration   5: 93369983.333 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  96663839.697 ±(99.9%) 18870916.765 ns/op [Average]
  (min, avg, max) = (90822233.333, 96663839.697, 103027200.000), stdev = 4900717.157
  CI (99.9%): [77792922.932, 115534756.462] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 128, nKeys = 32, nValues = 2)

# Run progress: 6.82% complete, ETA 00:43:28
# Fork: 1 of 1
# Warmup Iteration   1: 43403.020 ns/op
# Warmup Iteration   2: 38980.579 ns/op
# Warmup Iteration   3: 38580.367 ns/op
# Warmup Iteration   4: 38213.296 ns/op
# Warmup Iteration   5: 39721.711 ns/op
Iteration   1: 40362.058 ns/op
Iteration   2: 38996.461 ns/op
Iteration   3: 39714.177 ns/op
Iteration   4: 39723.041 ns/op
Iteration   5: 39500.484 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  39659.244 ±(99.9%) 1891.839 ns/op [Average]
  (min, avg, max) = (38996.461, 39659.244, 40362.058), stdev = 491.305
  CI (99.9%): [37767.405, 41551.083] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 128, nKeys = 32, nValues = 3)

# Run progress: 7.20% complete, ETA 00:43:15
# Fork: 1 of 1
# Warmup Iteration   1: 42908.340 ns/op
# Warmup Iteration   2: 38285.967 ns/op
# Warmup Iteration   3: 38422.769 ns/op
# Warmup Iteration   4: 38232.553 ns/op
# Warmup Iteration   5: 39367.195 ns/op
Iteration   1: 40285.023 ns/op
Iteration   2: 39449.280 ns/op
Iteration   3: 39657.061 ns/op
Iteration   4: 39327.403 ns/op
Iteration   5: 39387.427 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  39621.239 ±(99.9%) 1506.765 ns/op [Average]
  (min, avg, max) = (39327.403, 39621.239, 40285.023), stdev = 391.302
  CI (99.9%): [38114.473, 41128.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 128, nKeys = 1000, nValues = 2)

# Run progress: 7.58% complete, ETA 00:43:03
# Fork: 1 of 1
# Warmup Iteration   1: 1526297.594 ns/op
# Warmup Iteration   2: 1419426.346 ns/op
# Warmup Iteration   3: 1412894.109 ns/op
# Warmup Iteration   4: 1410207.521 ns/op
# Warmup Iteration   5: 1407465.411 ns/op
Iteration   1: 1413270.588 ns/op
Iteration   2: 1409806.276 ns/op
Iteration   3: 1410649.650 ns/op
Iteration   4: 1416545.391 ns/op
Iteration   5: 1428939.716 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  1415842.324 ±(99.9%) 29953.923 ns/op [Average]
  (min, avg, max) = (1409806.276, 1415842.324, 1428939.716), stdev = 7778.939
  CI (99.9%): [1385888.401, 1445796.247] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 128, nKeys = 1000, nValues = 3)

# Run progress: 7.95% complete, ETA 00:42:51
# Fork: 1 of 1
# Warmup Iteration   1: 1515325.898 ns/op
# Warmup Iteration   2: 1422366.339 ns/op
# Warmup Iteration   3: 1419597.899 ns/op
# Warmup Iteration   4: 1413889.291 ns/op
# Warmup Iteration   5: 1397708.575 ns/op
Iteration   1: 1402436.212 ns/op
Iteration   2: 1408756.162 ns/op
Iteration   3: 1402337.673 ns/op
Iteration   4: 1384503.425 ns/op
Iteration   5: 1404638.227 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  1400534.340 ±(99.9%) 35931.874 ns/op [Average]
  (min, avg, max) = (1384503.425, 1400534.340, 1408756.162), stdev = 9331.394
  CI (99.9%): [1364602.466, 1436466.214] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 128, nKeys = 100000, nValues = 2)

# Run progress: 8.33% complete, ETA 00:42:39
# Fork: 1 of 1
# Warmup Iteration   1: 210835940.000 ns/op
# Warmup Iteration   2: 186683033.333 ns/op
# Warmup Iteration   3: 188729366.667 ns/op
# Warmup Iteration   4: 178467116.667 ns/op
# Warmup Iteration   5: 190295183.333 ns/op
Iteration   1: 188731933.333 ns/op
Iteration   2: 174365000.000 ns/op
Iteration   3: 183770250.000 ns/op
Iteration   4: 184608750.000 ns/op
Iteration   5: 168946750.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  180084536.667 ±(99.9%) 31377068.967 ns/op [Average]
  (min, avg, max) = (168946750.000, 180084536.667, 188731933.333), stdev = 8148525.168
  CI (99.9%): [148707467.700, 211461605.633] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 128, nKeys = 100000, nValues = 3)

# Run progress: 8.71% complete, ETA 00:42:39
# Fork: 1 of 1
# Warmup Iteration   1: 210933240.000 ns/op
# Warmup Iteration   2: 187624050.000 ns/op
# Warmup Iteration   3: 184001766.667 ns/op
# Warmup Iteration   4: 175552116.667 ns/op
# Warmup Iteration   5: 194654933.333 ns/op
Iteration   1: 186208566.667 ns/op
Iteration   2: 174196950.000 ns/op
Iteration   3: 191353850.000 ns/op
Iteration   4: 176051000.000 ns/op
Iteration   5: 182851416.667 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  182132356.667 ±(99.9%) 27372232.177 ns/op [Average]
  (min, avg, max) = (174196950.000, 182132356.667, 191353850.000), stdev = 7108481.772
  CI (99.9%): [154760124.490, 209504588.844] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 256, nKeys = 32, nValues = 2)

# Run progress: 9.09% complete, ETA 00:42:37
# Fork: 1 of 1
# Warmup Iteration   1: 83191.058 ns/op
# Warmup Iteration   2: 74557.671 ns/op
# Warmup Iteration   3: 74955.251 ns/op
# Warmup Iteration   4: 75999.775 ns/op
# Warmup Iteration   5: 75848.073 ns/op
Iteration   1: 75788.266 ns/op
Iteration   2: 75605.540 ns/op
Iteration   3: 74565.239 ns/op
Iteration   4: 78659.799 ns/op
Iteration   5: 80330.343 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  76989.837 ±(99.9%) 9270.877 ns/op [Average]
  (min, avg, max) = (74565.239, 76989.837, 80330.343), stdev = 2407.617
  CI (99.9%): [67718.960, 86260.715] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 256, nKeys = 32, nValues = 3)

# Run progress: 9.47% complete, ETA 00:42:25
# Fork: 1 of 1
# Warmup Iteration   1: 80725.234 ns/op
# Warmup Iteration   2: 74455.397 ns/op
# Warmup Iteration   3: 73792.027 ns/op
# Warmup Iteration   4: 74484.506 ns/op
# Warmup Iteration   5: 74882.782 ns/op
Iteration   1: 75422.573 ns/op
Iteration   2: 73910.520 ns/op
Iteration   3: 74883.886 ns/op
Iteration   4: 75929.876 ns/op
Iteration   5: 76834.570 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  75396.285 ±(99.9%) 4228.755 ns/op [Average]
  (min, avg, max) = (73910.520, 75396.285, 76834.570), stdev = 1098.194
  CI (99.9%): [71167.530, 79625.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 256, nKeys = 1000, nValues = 2)

# Run progress: 9.85% complete, ETA 00:42:12
# Fork: 1 of 1
# Warmup Iteration   1: 3070241.159 ns/op
# Warmup Iteration   2: 2829105.571 ns/op
# Warmup Iteration   3: 2783142.149 ns/op
# Warmup Iteration   4: 2828083.473 ns/op
# Warmup Iteration   5: 2771212.397 ns/op
Iteration   1: 2805480.223 ns/op
Iteration   2: 2915470.520 ns/op
Iteration   3: 2919710.057 ns/op
Iteration   4: 2884452.149 ns/op
Iteration   5: 2863340.793 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  2877690.749 ±(99.9%) 179157.713 ns/op [Average]
  (min, avg, max) = (2805480.223, 2877690.749, 2919710.057), stdev = 46526.689
  CI (99.9%): [2698533.035, 3056848.462] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 256, nKeys = 1000, nValues = 3)

# Run progress: 10.23% complete, ETA 00:42:00
# Fork: 1 of 1
# Warmup Iteration   1: 2682669.519 ns/op
# Warmup Iteration   2: 2479356.897 ns/op
# Warmup Iteration   3: 2484031.852 ns/op
# Warmup Iteration   4: 2436384.578 ns/op
# Warmup Iteration   5: 2486769.630 ns/op
Iteration   1: 2473276.773 ns/op
Iteration   2: 2493594.030 ns/op
Iteration   3: 2492399.752 ns/op
Iteration   4: 2495785.679 ns/op
Iteration   5: 2467348.537 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  2484480.954 ±(99.9%) 50669.475 ns/op [Average]
  (min, avg, max) = (2467348.537, 2484480.954, 2495785.679), stdev = 13158.702
  CI (99.9%): [2433811.479, 2535150.429] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 256, nKeys = 100000, nValues = 2)

# Run progress: 10.61% complete, ETA 00:41:47
# Fork: 1 of 1
# Warmup Iteration   1: 431913966.667 ns/op
# Warmup Iteration   2: 389556466.667 ns/op
# Warmup Iteration   3: 398261466.667 ns/op
# Warmup Iteration   4: 372455166.667 ns/op
# Warmup Iteration   5: 391931666.667 ns/op
Iteration   1: 406714600.000 ns/op
Iteration   2: 365392166.667 ns/op
Iteration   3: 381111933.333 ns/op
Iteration   4: 392368633.333 ns/op
Iteration   5: 375826233.333 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  384282713.333 ±(99.9%) 61096454.423 ns/op [Average]
  (min, avg, max) = (365392166.667, 384282713.333, 406714600.000), stdev = 15866555.194
  CI (99.9%): [323186258.910, 445379167.756] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 256, nKeys = 100000, nValues = 3)

# Run progress: 10.98% complete, ETA 00:41:50
# Fork: 1 of 1
# Warmup Iteration   1: 421811166.667 ns/op
# Warmup Iteration   2: 383121866.667 ns/op
# Warmup Iteration   3: 379642066.667 ns/op
# Warmup Iteration   4: 362045900.000 ns/op
# Warmup Iteration   5: 387357900.000 ns/op
Iteration   1: 363980533.333 ns/op
Iteration   2: 383467433.333 ns/op
Iteration   3: 387959633.333 ns/op
Iteration   4: 354598666.667 ns/op
Iteration   5: 377925533.333 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  373586360.000 ±(99.9%) 53628405.640 ns/op [Average]
  (min, avg, max) = (354598666.667, 373586360.000, 387959633.333), stdev = 13927126.640
  CI (99.9%): [319957954.360, 427214765.640] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 512, nKeys = 32, nValues = 2)

# Run progress: 11.36% complete, ETA 00:41:49
# Fork: 1 of 1
# Warmup Iteration   1: 193128.280 ns/op
# Warmup Iteration   2: 178409.844 ns/op
# Warmup Iteration   3: 177704.319 ns/op
# Warmup Iteration   4: 177774.055 ns/op
# Warmup Iteration   5: 177534.574 ns/op
Iteration   1: 176203.332 ns/op
Iteration   2: 177689.101 ns/op
Iteration   3: 176880.315 ns/op
Iteration   4: 180459.428 ns/op
Iteration   5: 177608.936 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  177768.222 ±(99.9%) 6242.166 ns/op [Average]
  (min, avg, max) = (176203.332, 177768.222, 180459.428), stdev = 1621.071
  CI (99.9%): [171526.056, 184010.388] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 512, nKeys = 32, nValues = 3)

# Run progress: 11.74% complete, ETA 00:41:36
# Fork: 1 of 1
# Warmup Iteration   1: 192394.705 ns/op
# Warmup Iteration   2: 175723.621 ns/op
# Warmup Iteration   3: 175636.604 ns/op
# Warmup Iteration   4: 178983.882 ns/op
# Warmup Iteration   5: 177027.836 ns/op
Iteration   1: 179274.786 ns/op
Iteration   2: 178677.924 ns/op
Iteration   3: 179937.013 ns/op
Iteration   4: 178171.190 ns/op
Iteration   5: 178860.502 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  178984.283 ±(99.9%) 2555.957 ns/op [Average]
  (min, avg, max) = (178171.190, 178984.283, 179937.013), stdev = 663.774
  CI (99.9%): [176428.326, 181540.240] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 512, nKeys = 1000, nValues = 2)

# Run progress: 12.12% complete, ETA 00:41:23
# Fork: 1 of 1
# Warmup Iteration   1: 6206243.293 ns/op
# Warmup Iteration   2: 5603227.473 ns/op
# Warmup Iteration   3: 5561342.308 ns/op
# Warmup Iteration   4: 5661003.352 ns/op
# Warmup Iteration   5: 5568967.222 ns/op
Iteration   1: 5691755.367 ns/op
Iteration   2: 5630144.693 ns/op
Iteration   3: 5594071.978 ns/op
Iteration   4: 5552532.240 ns/op
Iteration   5: 5595941.436 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  5612889.143 ±(99.9%) 200102.941 ns/op [Average]
  (min, avg, max) = (5552532.240, 5612889.143, 5691755.367), stdev = 51966.098
  CI (99.9%): [5412786.202, 5812992.084] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 512, nKeys = 1000, nValues = 3)

# Run progress: 12.50% complete, ETA 00:41:11
# Fork: 1 of 1
# Warmup Iteration   1: 6074181.325 ns/op
# Warmup Iteration   2: 5577576.796 ns/op
# Warmup Iteration   3: 5623988.268 ns/op
# Warmup Iteration   4: 5604352.222 ns/op
# Warmup Iteration   5: 5648903.911 ns/op
Iteration   1: 5598388.333 ns/op
Iteration   2: 5635998.883 ns/op
Iteration   3: 5614907.778 ns/op
Iteration   4: 5573995.028 ns/op
Iteration   5: 5677371.910 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  5620132.386 ±(99.9%) 151071.723 ns/op [Average]
  (min, avg, max) = (5573995.028, 5620132.386, 5677371.910), stdev = 39232.847
  CI (99.9%): [5469060.663, 5771204.109] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 512, nKeys = 100000, nValues = 2)

# Run progress: 12.88% complete, ETA 00:40:58
# Fork: 1 of 1
# Warmup Iteration   1: 1023277700.000 ns/op
# Warmup Iteration   2: 826512200.000 ns/op
# Warmup Iteration   3: 746193400.000 ns/op
# Warmup Iteration   4: 791216300.000 ns/op
# Warmup Iteration   5: 691284300.000 ns/op
Iteration   1: 753113450.000 ns/op
Iteration   2: 725483700.000 ns/op
Iteration   3: 788953650.000 ns/op
Iteration   4: 744524550.000 ns/op
Iteration   5: 700542950.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  742523660.000 ±(99.9%) 126612888.184 ns/op [Average]
  (min, avg, max) = (700542950.000, 742523660.000, 788953650.000), stdev = 32880964.985
  CI (99.9%): [615910771.816, 869136548.184] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 512, nKeys = 100000, nValues = 3)

# Run progress: 13.26% complete, ETA 00:41:17
# Fork: 1 of 1
# Warmup Iteration   1: 895724250.000 ns/op
# Warmup Iteration   2: 695644000.000 ns/op
# Warmup Iteration   3: 715778800.000 ns/op
# Warmup Iteration   4: 734807550.000 ns/op
# Warmup Iteration   5: 703619200.000 ns/op
Iteration   1: 698480950.000 ns/op
Iteration   2: 739631500.000 ns/op
Iteration   3: 686318100.000 ns/op
Iteration   4: 701683950.000 ns/op
Iteration   5: 720174050.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  709257710.000 ±(99.9%) 80345226.586 ns/op [Average]
  (min, avg, max) = (686318100.000, 709257710.000, 739631500.000), stdev = 20865400.197
  CI (99.9%): [628912483.414, 789602936.586] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 1024, nKeys = 32, nValues = 2)

# Run progress: 13.64% complete, ETA 00:41:33
# Fork: 1 of 1
# Warmup Iteration   1: 387953.091 ns/op
# Warmup Iteration   2: 361114.904 ns/op
# Warmup Iteration   3: 357119.767 ns/op
# Warmup Iteration   4: 359023.195 ns/op
# Warmup Iteration   5: 358010.993 ns/op
Iteration   1: 358511.484 ns/op
Iteration   2: 357868.417 ns/op
Iteration   3: 350889.196 ns/op
Iteration   4: 360026.280 ns/op
Iteration   5: 355540.354 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  356567.146 ±(99.9%) 13713.482 ns/op [Average]
  (min, avg, max) = (350889.196, 356567.146, 360026.280), stdev = 3561.348
  CI (99.9%): [342853.665, 370280.628] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 1024, nKeys = 32, nValues = 3)

# Run progress: 14.02% complete, ETA 00:41:19
# Fork: 1 of 1
# Warmup Iteration   1: 383833.409 ns/op
# Warmup Iteration   2: 356992.792 ns/op
# Warmup Iteration   3: 353811.919 ns/op
# Warmup Iteration   4: 355094.818 ns/op
# Warmup Iteration   5: 353879.289 ns/op
Iteration   1: 358351.504 ns/op
Iteration   2: 354599.894 ns/op
Iteration   3: 361424.973 ns/op
Iteration   4: 354604.668 ns/op
Iteration   5: 354976.937 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  356791.595 ±(99.9%) 11676.518 ns/op [Average]
  (min, avg, max) = (354599.894, 356791.595, 361424.973), stdev = 3032.355
  CI (99.9%): [345115.078, 368468.113] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 1024, nKeys = 1000, nValues = 2)

# Run progress: 14.39% complete, ETA 00:41:06
# Fork: 1 of 1
# Warmup Iteration   1: 12179704.819 ns/op
# Warmup Iteration   2: 11173800.000 ns/op
# Warmup Iteration   3: 11225904.444 ns/op
# Warmup Iteration   4: 11096938.462 ns/op
# Warmup Iteration   5: 11167792.222 ns/op
Iteration   1: 11169842.857 ns/op
Iteration   2: 11209384.444 ns/op
Iteration   3: 10999657.609 ns/op
Iteration   4: 11149582.418 ns/op
Iteration   5: 11026495.652 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  11110992.596 ±(99.9%) 355891.462 ns/op [Average]
  (min, avg, max) = (10999657.609, 11110992.596, 11209384.444), stdev = 92423.883
  CI (99.9%): [10755101.134, 11466884.059] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 1024, nKeys = 1000, nValues = 3)

# Run progress: 14.77% complete, ETA 00:40:52
# Fork: 1 of 1
# Warmup Iteration   1: 12050618.824 ns/op
# Warmup Iteration   2: 11412322.472 ns/op
# Warmup Iteration   3: 11398670.787 ns/op
# Warmup Iteration   4: 11282033.333 ns/op
# Warmup Iteration   5: 11282985.556 ns/op
Iteration   1: 11184808.889 ns/op
Iteration   2: 11372037.079 ns/op
Iteration   3: 11268704.444 ns/op
Iteration   4: 11264357.778 ns/op
Iteration   5: 11432847.727 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  11304551.183 ±(99.9%) 376561.993 ns/op [Average]
  (min, avg, max) = (11184808.889, 11304551.183, 11432847.727), stdev = 97791.954
  CI (99.9%): [10927989.190, 11681113.176] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 1024, nKeys = 100000, nValues = 2)

# Run progress: 15.15% complete, ETA 00:40:39
# Fork: 1 of 1
# Warmup Iteration   1: 1856619300.000 ns/op
# Warmup Iteration   2: 1614744200.000 ns/op
# Warmup Iteration   3: 1625379800.000 ns/op
# Warmup Iteration   4: 1600675300.000 ns/op
# Warmup Iteration   5: 1599747600.000 ns/op
Iteration   1: 1432019400.000 ns/op
Iteration   2: 1481417200.000 ns/op
Iteration   3: 1628166800.000 ns/op
Iteration   4: 1387082500.000 ns/op
Iteration   5: 1591704700.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  1504078120.000 ±(99.9%) 396776904.870 ns/op [Average]
  (min, avg, max) = (1387082500.000, 1504078120.000, 1628166800.000), stdev = 103041702.176
  CI (99.9%): [1107301215.130, 1900855024.870] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 1024, nKeys = 100000, nValues = 3)

# Run progress: 15.53% complete, ETA 00:40:58
# Fork: 1 of 1
# Warmup Iteration   1: 1833573000.000 ns/op
# Warmup Iteration   2: 1864848100.000 ns/op
# Warmup Iteration   3: 1383410400.000 ns/op
# Warmup Iteration   4: 1465677900.000 ns/op
# Warmup Iteration   5: 1289440600.000 ns/op
Iteration   1: 1441438200.000 ns/op
Iteration   2: 1422716500.000 ns/op
Iteration   3: 1364212800.000 ns/op
Iteration   4: 1461567600.000 ns/op
Iteration   5: 1430184800.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  1424023980.000 ±(99.9%) 140559328.572 ns/op [Average]
  (min, avg, max) = (1364212800.000, 1424023980.000, 1461567600.000), stdev = 36502811.265
  CI (99.9%): [1283464651.428, 1564583308.572] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 2048, nKeys = 32, nValues = 2)

# Run progress: 15.91% complete, ETA 00:41:11
# Fork: 1 of 1
# Warmup Iteration   1: 762075.338 ns/op
# Warmup Iteration   2: 709017.834 ns/op
# Warmup Iteration   3: 708102.029 ns/op
# Warmup Iteration   4: 704906.452 ns/op
# Warmup Iteration   5: 716339.152 ns/op
Iteration   1: 718278.760 ns/op
Iteration   2: 710064.366 ns/op
Iteration   3: 704912.056 ns/op
Iteration   4: 718709.950 ns/op
Iteration   5: 714345.378 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  713262.102 ±(99.9%) 22450.293 ns/op [Average]
  (min, avg, max) = (704912.056, 713262.102, 718709.950), stdev = 5830.270
  CI (99.9%): [690811.809, 735712.394] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 2048, nKeys = 32, nValues = 3)

# Run progress: 16.29% complete, ETA 00:40:56
# Fork: 1 of 1
# Warmup Iteration   1: 757585.210 ns/op
# Warmup Iteration   2: 707404.948 ns/op
# Warmup Iteration   3: 703696.508 ns/op
# Warmup Iteration   4: 706636.345 ns/op
# Warmup Iteration   5: 703102.521 ns/op
Iteration   1: 706618.010 ns/op
Iteration   2: 709095.148 ns/op
Iteration   3: 701263.763 ns/op
Iteration   4: 705978.261 ns/op
Iteration   5: 702032.083 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  704997.453 ±(99.9%) 12641.780 ns/op [Average]
  (min, avg, max) = (701263.763, 704997.453, 709095.148), stdev = 3283.030
  CI (99.9%): [692355.673, 717639.233] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 2048, nKeys = 1000, nValues = 2)

# Run progress: 16.67% complete, ETA 00:40:42
# Fork: 1 of 1
# Warmup Iteration   1: 24440547.619 ns/op
# Warmup Iteration   2: 22513595.556 ns/op
# Warmup Iteration   3: 22314052.174 ns/op
# Warmup Iteration   4: 22327663.043 ns/op
# Warmup Iteration   5: 22339230.435 ns/op
Iteration   1: 22374628.261 ns/op
Iteration   2: 22106489.362 ns/op
Iteration   3: 22050228.261 ns/op
Iteration   4: 22561744.444 ns/op
Iteration   5: 22326430.435 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  22283904.153 ±(99.9%) 801533.078 ns/op [Average]
  (min, avg, max) = (22050228.261, 22283904.153, 22561744.444), stdev = 208155.595
  CI (99.9%): [21482371.075, 23085437.230] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 2048, nKeys = 1000, nValues = 3)

# Run progress: 17.05% complete, ETA 00:40:28
# Fork: 1 of 1
# Warmup Iteration   1: 24451750.000 ns/op
# Warmup Iteration   2: 22079732.609 ns/op
# Warmup Iteration   3: 22343873.913 ns/op
# Warmup Iteration   4: 22539831.111 ns/op
# Warmup Iteration   5: 22667100.000 ns/op
Iteration   1: 22291876.087 ns/op
Iteration   2: 22345146.667 ns/op
Iteration   3: 22191393.478 ns/op
Iteration   4: 22150304.348 ns/op
Iteration   5: 22374966.667 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  22270737.449 ±(99.9%) 373566.550 ns/op [Average]
  (min, avg, max) = (22150304.348, 22270737.449, 22374966.667), stdev = 97014.047
  CI (99.9%): [21897170.899, 22644303.999] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 2048, nKeys = 100000, nValues = 2)

# Run progress: 17.42% complete, ETA 00:40:15
# Fork: 1 of 1
# Warmup Iteration   1: 3720611000.000 ns/op
# Warmup Iteration   2: 3481894200.000 ns/op
# Warmup Iteration   3: 2827579300.000 ns/op
# Warmup Iteration   4: 3102611900.000 ns/op
# Warmup Iteration   5: 3140909700.000 ns/op
Iteration   1: 3280162400.000 ns/op
Iteration   2: 3195107500.000 ns/op
Iteration   3: 3227041100.000 ns/op
Iteration   4: 3234613900.000 ns/op
Iteration   5: 3223257500.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  3232036480.000 ±(99.9%) 118505422.527 ns/op [Average]
  (min, avg, max) = (3195107500.000, 3232036480.000, 3280162400.000), stdev = 30775481.900
  CI (99.9%): [3113531057.473, 3350541902.527] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 2048, nKeys = 100000, nValues = 3)

# Run progress: 17.80% complete, ETA 00:41:45
# Fork: 1 of 1
# Warmup Iteration   1: 3686005700.000 ns/op
# Warmup Iteration   2: 3304495200.000 ns/op
# Warmup Iteration   3: 3249529600.000 ns/op
# Warmup Iteration   4: 3046639000.000 ns/op
# Warmup Iteration   5: 3022102500.000 ns/op
Iteration   1: 3102140700.000 ns/op
Iteration   2: 2959586000.000 ns/op
Iteration   3: 3314882300.000 ns/op
Iteration   4: 3188472200.000 ns/op
Iteration   5: 3462570700.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  3205530380.000 ±(99.9%) 744421732.722 ns/op [Average]
  (min, avg, max) = (2959586000.000, 3205530380.000, 3462570700.000), stdev = 193323959.975
  CI (99.9%): [2461108647.278, 3949952112.722] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 4096, nKeys = 32, nValues = 2)

# Run progress: 18.18% complete, ETA 00:43:10
# Fork: 1 of 1
# Warmup Iteration   1: 1507181.587 ns/op
# Warmup Iteration   2: 1408065.963 ns/op
# Warmup Iteration   3: 1443348.494 ns/op
# Warmup Iteration   4: 1421276.587 ns/op
# Warmup Iteration   5: 1411666.713 ns/op
Iteration   1: 1434912.553 ns/op
Iteration   2: 1424687.836 ns/op
Iteration   3: 1455375.181 ns/op
Iteration   4: 1442433.190 ns/op
Iteration   5: 1453295.231 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  1442140.798 ±(99.9%) 49331.437 ns/op [Average]
  (min, avg, max) = (1424687.836, 1442140.798, 1455375.181), stdev = 12811.218
  CI (99.9%): [1392809.361, 1491472.236] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 4096, nKeys = 32, nValues = 3)

# Run progress: 18.56% complete, ETA 00:42:51
# Fork: 1 of 1
# Warmup Iteration   1: 1520961.329 ns/op
# Warmup Iteration   2: 1399131.704 ns/op
# Warmup Iteration   3: 1400556.492 ns/op
# Warmup Iteration   4: 1403909.205 ns/op
# Warmup Iteration   5: 1411480.839 ns/op
Iteration   1: 1399935.833 ns/op
Iteration   2: 1396844.398 ns/op
Iteration   3: 1405090.014 ns/op
Iteration   4: 1415978.741 ns/op
Iteration   5: 1419179.577 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  1407405.713 ±(99.9%) 37768.891 ns/op [Average]
  (min, avg, max) = (1396844.398, 1407405.713, 1419179.577), stdev = 9808.461
  CI (99.9%): [1369636.822, 1445174.604] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 4096, nKeys = 1000, nValues = 2)

# Run progress: 18.94% complete, ETA 00:42:33
# Fork: 1 of 1
# Warmup Iteration   1: 51889495.000 ns/op
# Warmup Iteration   2: 45422334.783 ns/op
# Warmup Iteration   3: 44954943.478 ns/op
# Warmup Iteration   4: 45033860.870 ns/op
# Warmup Iteration   5: 44944604.348 ns/op
Iteration   1: 45103234.783 ns/op
Iteration   2: 44998139.130 ns/op
Iteration   3: 44536930.435 ns/op
Iteration   4: 44864165.217 ns/op
Iteration   5: 44024143.478 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  44705322.609 ±(99.9%) 1680297.122 ns/op [Average]
  (min, avg, max) = (44024143.478, 44705322.609, 45103234.783), stdev = 436367.826
  CI (99.9%): [43025025.487, 46385619.730] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 4096, nKeys = 1000, nValues = 3)

# Run progress: 19.32% complete, ETA 00:42:16
# Fork: 1 of 1
# Warmup Iteration   1: 53342742.105 ns/op
# Warmup Iteration   2: 45457591.304 ns/op
# Warmup Iteration   3: 44843247.826 ns/op
# Warmup Iteration   4: 45469765.217 ns/op
# Warmup Iteration   5: 44961569.565 ns/op
Iteration   1: 45723256.522 ns/op
Iteration   2: 45831563.636 ns/op
Iteration   3: 45140021.739 ns/op
Iteration   4: 45873343.478 ns/op
Iteration   5: 45452656.522 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  45604168.379 ±(99.9%) 1181736.475 ns/op [Average]
  (min, avg, max) = (45140021.739, 45604168.379, 45873343.478), stdev = 306893.210
  CI (99.9%): [44422431.904, 46785904.855] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 4096, nKeys = 100000, nValues = 2)

# Run progress: 19.70% complete, ETA 00:41:59
# Fork: 1 of 1
# Warmup Iteration   1: 7613803400.000 ns/op
# Warmup Iteration   2: 6879547500.000 ns/op
# Warmup Iteration   3: 6907732700.000 ns/op
# Warmup Iteration   4: 6523804500.000 ns/op
# Warmup Iteration   5: 7112795000.000 ns/op
Iteration   1: 7177591400.000 ns/op
Iteration   2: 6825226900.000 ns/op
Iteration   3: 7017529700.000 ns/op
Iteration   4: 7365657600.000 ns/op
Iteration   5: 6997508800.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  7076702880.000 ±(99.9%) 786056543.309 ns/op [Average]
  (min, avg, max) = (6825226900.000, 7076702880.000, 7365657600.000), stdev = 204136388.068
  CI (99.9%): [6290646336.691, 7862759423.309] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 4096, nKeys = 100000, nValues = 3)

# Run progress: 20.08% complete, ETA 00:45:48
# Fork: 1 of 1
# Warmup Iteration   1: 7467972300.000 ns/op
# Warmup Iteration   2: 7476155100.000 ns/op
# Warmup Iteration   3: 7092922100.000 ns/op
# Warmup Iteration   4: 7283603900.000 ns/op
# Warmup Iteration   5: 7079890800.000 ns/op
Iteration   1: 7444719500.000 ns/op
Iteration   2: 7354752700.000 ns/op
Iteration   3: 6796970500.000 ns/op
Iteration   4: 7136717100.000 ns/op
Iteration   5: 7236264800.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  7193884920.000 ±(99.9%) 965355933.398 ns/op [Average]
  (min, avg, max) = (6796970500.000, 7193884920.000, 7444719500.000), stdev = 250699870.284
  CI (99.9%): [6228528986.602, 8159240853.398] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 8192, nKeys = 32, nValues = 2)

# Run progress: 20.45% complete, ETA 00:49:35
# Fork: 1 of 1
# Warmup Iteration   1: 3157526.875 ns/op
# Warmup Iteration   2: 2839701.983 ns/op
# Warmup Iteration   3: 2825375.350 ns/op
# Warmup Iteration   4: 2862791.477 ns/op
# Warmup Iteration   5: 2846356.180 ns/op
Iteration   1: 2838985.714 ns/op
Iteration   2: 2832493.820 ns/op
Iteration   3: 2875890.571 ns/op
Iteration   4: 2855169.972 ns/op
Iteration   5: 2866611.681 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  2853830.352 ±(99.9%) 70146.777 ns/op [Average]
  (min, avg, max) = (2832493.820, 2853830.352, 2875890.571), stdev = 18216.895
  CI (99.9%): [2783683.575, 2923977.129] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 8192, nKeys = 32, nValues = 3)

# Run progress: 20.83% complete, ETA 00:49:06
# Fork: 1 of 1
# Warmup Iteration   1: 3107707.975 ns/op
# Warmup Iteration   2: 2844349.575 ns/op
# Warmup Iteration   3: 2824833.989 ns/op
# Warmup Iteration   4: 2854872.034 ns/op
# Warmup Iteration   5: 2850358.873 ns/op
Iteration   1: 2849404.802 ns/op
Iteration   2: 2870764.773 ns/op
Iteration   3: 2831649.020 ns/op
Iteration   4: 2884637.822 ns/op
Iteration   5: 2829696.078 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  2853230.499 ±(99.9%) 92898.249 ns/op [Average]
  (min, avg, max) = (2829696.078, 2853230.499, 2884637.822), stdev = 24125.380
  CI (99.9%): [2760332.250, 2946128.748] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 8192, nKeys = 1000, nValues = 2)

# Run progress: 21.21% complete, ETA 00:48:38
# Fork: 1 of 1
# Warmup Iteration   1: 105834260.000 ns/op
# Warmup Iteration   2: 90411708.333 ns/op
# Warmup Iteration   3: 88667525.000 ns/op
# Warmup Iteration   4: 89992400.000 ns/op
# Warmup Iteration   5: 89568533.333 ns/op
Iteration   1: 90420066.667 ns/op
Iteration   2: 89598841.667 ns/op
Iteration   3: 89206075.000 ns/op
Iteration   4: 90744600.000 ns/op
Iteration   5: 90751475.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  90144211.667 ±(99.9%) 2711123.876 ns/op [Average]
  (min, avg, max) = (89206075.000, 90144211.667, 90751475.000), stdev = 704070.261
  CI (99.9%): [87433087.791, 92855335.543] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 8192, nKeys = 1000, nValues = 3)

# Run progress: 21.59% complete, ETA 00:48:14
# Fork: 1 of 1
# Warmup Iteration   1: 107388640.000 ns/op
# Warmup Iteration   2: 91846408.333 ns/op
# Warmup Iteration   3: 90864041.667 ns/op
# Warmup Iteration   4: 93066718.182 ns/op
# Warmup Iteration   5: 92083127.273 ns/op
Iteration   1: 92398733.333 ns/op
Iteration   2: 91206763.636 ns/op
Iteration   3: 91587025.000 ns/op
Iteration   4: 91839158.333 ns/op
Iteration   5: 90858333.333 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  91578002.727 ±(99.9%) 2276138.458 ns/op [Average]
  (min, avg, max) = (90858333.333, 91578002.727, 92398733.333), stdev = 591105.929
  CI (99.9%): [89301864.269, 93854141.185] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 8192, nKeys = 100000, nValues = 2)

# Run progress: 21.97% complete, ETA 00:47:50
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark(ImmutableGetAllBenchmark.java:75)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_avgt_jmhStub(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_AverageTime(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 8192, nKeys = 100000, nValues = 3)

# Run progress: 22.35% complete, ETA 00:47:56
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark(ImmutableGetAllBenchmark.java:75)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_avgt_jmhStub(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_AverageTime(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 16384, nKeys = 32, nValues = 2)

# Run progress: 22.73% complete, ETA 00:48:11
# Fork: 1 of 1
# Warmup Iteration   1: 7061675.694 ns/op
# Warmup Iteration   2: 6080562.424 ns/op
# Warmup Iteration   3: 6079781.437 ns/op
# Warmup Iteration   4: 5965525.000 ns/op
# Warmup Iteration   5: 5768710.920 ns/op
Iteration   1: 5769743.182 ns/op
Iteration   2: 5639189.888 ns/op
Iteration   3: 5658267.222 ns/op
Iteration   4: 5670692.135 ns/op
Iteration   5: 5765474.857 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  5700673.457 ±(99.9%) 239292.396 ns/op [Average]
  (min, avg, max) = (5639189.888, 5700673.457, 5769743.182), stdev = 62143.475
  CI (99.9%): [5461381.061, 5939965.852] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 16384, nKeys = 32, nValues = 3)

# Run progress: 23.11% complete, ETA 00:47:45
# Fork: 1 of 1
# Warmup Iteration   1: 6202095.706 ns/op
# Warmup Iteration   2: 5785927.586 ns/op
# Warmup Iteration   3: 5765574.857 ns/op
# Warmup Iteration   4: 5707608.989 ns/op
# Warmup Iteration   5: 5703791.525 ns/op
Iteration   1: 5711884.831 ns/op
Iteration   2: 5675807.345 ns/op
Iteration   3: 5766132.000 ns/op
Iteration   4: 5730394.915 ns/op
Iteration   5: 5969624.118 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  5770768.642 ±(99.9%) 446076.730 ns/op [Average]
  (min, avg, max) = (5675807.345, 5770768.642, 5969624.118), stdev = 115844.710
  CI (99.9%): [5324691.912, 6216845.372] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 16384, nKeys = 1000, nValues = 2)

# Run progress: 23.48% complete, ETA 00:47:19
# Fork: 1 of 1
# Warmup Iteration   1: 212438720.000 ns/op
# Warmup Iteration   2: 185646633.333 ns/op
# Warmup Iteration   3: 181986400.000 ns/op
# Warmup Iteration   4: 181142833.333 ns/op
# Warmup Iteration   5: 181193050.000 ns/op
Iteration   1: 180771633.333 ns/op
Iteration   2: 179909216.667 ns/op
Iteration   3: 178922016.667 ns/op
Iteration   4: 180463183.333 ns/op
Iteration   5: 180419283.333 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  180097066.667 ±(99.9%) 2795986.011 ns/op [Average]
  (min, avg, max) = (178922016.667, 180097066.667, 180771633.333), stdev = 726108.688
  CI (99.9%): [177301080.656, 182893052.677] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 16384, nKeys = 1000, nValues = 3)

# Run progress: 23.86% complete, ETA 00:46:55
# Fork: 1 of 1
# Warmup Iteration   1: 214000000.000 ns/op
# Warmup Iteration   2: 184892916.667 ns/op
# Warmup Iteration   3: 180570116.667 ns/op
# Warmup Iteration   4: 182317866.667 ns/op
# Warmup Iteration   5: 180711133.333 ns/op
Iteration   1: 183110866.667 ns/op
Iteration   2: 180273350.000 ns/op
Iteration   3: 182161333.333 ns/op
Iteration   4: 181213233.333 ns/op
Iteration   5: 180451666.667 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  181442090.000 ±(99.9%) 4597205.023 ns/op [Average]
  (min, avg, max) = (180273350.000, 181442090.000, 183110866.667), stdev = 1193879.545
  CI (99.9%): [176844884.977, 186039295.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 16384, nKeys = 100000, nValues = 2)

# Run progress: 24.24% complete, ETA 00:46:33
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark(ImmutableGetAllBenchmark.java:75)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_avgt_jmhStub(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_AverageTime(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGetAll = 16384, nKeys = 100000, nValues = 3)

# Run progress: 24.62% complete, ETA 00:46:38
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark(ImmutableGetAllBenchmark.java:75)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_avgt_jmhStub(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_AverageTime(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 16, nKeys = 32, nValues = 2)

# Run progress: 25.00% complete, ETA 00:46:50
# Fork: 1 of 1
# Warmup Iteration   1: 4439.836 ns/op
# Warmup Iteration   2: 4319.324 ns/op
# Warmup Iteration   3: 4207.405 ns/op
# Warmup Iteration   4: 4216.190 ns/op
# Warmup Iteration   5: 4146.163 ns/op
Iteration   1: 4237.990 ns/op
Iteration   2: 4252.148 ns/op
Iteration   3: 4216.587 ns/op
Iteration   4: 4222.154 ns/op
Iteration   5: 4221.623 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  4230.100 ±(99.9%) 56.657 ns/op [Average]
  (min, avg, max) = (4216.587, 4230.100, 4252.148), stdev = 14.714
  CI (99.9%): [4173.443, 4286.758] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 16, nKeys = 32, nValues = 3)

# Run progress: 25.38% complete, ETA 00:46:25
# Fork: 1 of 1
# Warmup Iteration   1: 4189.731 ns/op
# Warmup Iteration   2: 3862.376 ns/op
# Warmup Iteration   3: 4144.795 ns/op
# Warmup Iteration   4: 4099.421 ns/op
# Warmup Iteration   5: 4152.229 ns/op
Iteration   1: 4167.552 ns/op
Iteration   2: 4180.057 ns/op
Iteration   3: 4084.770 ns/op
Iteration   4: 4113.565 ns/op
Iteration   5: 4121.044 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  4133.397 ±(99.9%) 152.261 ns/op [Average]
  (min, avg, max) = (4084.770, 4133.397, 4180.057), stdev = 39.542
  CI (99.9%): [3981.137, 4285.658] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 16, nKeys = 1000, nValues = 2)

# Run progress: 25.76% complete, ETA 00:46:00
# Fork: 1 of 1
# Warmup Iteration   1: 123562.306 ns/op
# Warmup Iteration   2: 119665.304 ns/op
# Warmup Iteration   3: 118852.826 ns/op
# Warmup Iteration   4: 118107.891 ns/op
# Warmup Iteration   5: 119006.272 ns/op
Iteration   1: 118798.976 ns/op
Iteration   2: 119557.330 ns/op
Iteration   3: 118686.505 ns/op
Iteration   4: 118662.440 ns/op
Iteration   5: 119026.144 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  118946.279 ±(99.9%) 1427.216 ns/op [Average]
  (min, avg, max) = (118662.440, 118946.279, 119557.330), stdev = 370.644
  CI (99.9%): [117519.063, 120373.495] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 16, nKeys = 1000, nValues = 3)

# Run progress: 26.14% complete, ETA 00:45:35
# Fork: 1 of 1
# Warmup Iteration   1: 120958.510 ns/op
# Warmup Iteration   2: 118256.986 ns/op
# Warmup Iteration   3: 116711.002 ns/op
# Warmup Iteration   4: 117349.796 ns/op
# Warmup Iteration   5: 116350.770 ns/op
Iteration   1: 117195.089 ns/op
Iteration   2: 117620.115 ns/op
Iteration   3: 118179.374 ns/op
Iteration   4: 115939.576 ns/op
Iteration   5: 116269.487 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  117040.728 ±(99.9%) 3583.055 ns/op [Average]
  (min, avg, max) = (115939.576, 117040.728, 118179.374), stdev = 930.508
  CI (99.9%): [113457.673, 120623.783] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 16, nKeys = 100000, nValues = 2)

# Run progress: 26.52% complete, ETA 00:45:11
# Fork: 1 of 1
# Warmup Iteration   1: 16928096.667 ns/op
# Warmup Iteration   2: 16273947.619 ns/op
# Warmup Iteration   3: 16263974.194 ns/op
# Warmup Iteration   4: 16157304.762 ns/op
# Warmup Iteration   5: 16161871.429 ns/op
Iteration   1: 16431782.258 ns/op
Iteration   2: 16259587.097 ns/op
Iteration   3: 16364641.935 ns/op
Iteration   4: 16187680.952 ns/op
Iteration   5: 16401243.548 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  16328987.158 ±(99.9%) 393834.921 ns/op [Average]
  (min, avg, max) = (16187680.952, 16328987.158, 16431782.258), stdev = 102277.678
  CI (99.9%): [15935152.237, 16722822.079] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 16, nKeys = 100000, nValues = 3)

# Run progress: 26.89% complete, ETA 00:44:48
# Fork: 1 of 1
# Warmup Iteration   1: 18256592.857 ns/op
# Warmup Iteration   2: 17900231.579 ns/op
# Warmup Iteration   3: 17836564.912 ns/op
# Warmup Iteration   4: 17855961.404 ns/op
# Warmup Iteration   5: 18271023.214 ns/op
Iteration   1: 21427119.149 ns/op
Iteration   2: 19201456.604 ns/op
Iteration   3: 18044812.500 ns/op
Iteration   4: 18134703.571 ns/op
Iteration   5: 18092453.571 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  18980109.079 ±(99.9%) 5584852.768 ns/op [Average]
  (min, avg, max) = (18044812.500, 18980109.079, 21427119.149), stdev = 1450368.528
  CI (99.9%): [13395256.311, 24564961.847] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 32, nKeys = 32, nValues = 2)

# Run progress: 27.27% complete, ETA 00:44:26
# Fork: 1 of 1
# Warmup Iteration   1: 8793.107 ns/op
# Warmup Iteration   2: 7870.447 ns/op
# Warmup Iteration   3: 8427.126 ns/op
# Warmup Iteration   4: 8218.774 ns/op
# Warmup Iteration   5: 8456.535 ns/op
Iteration   1: 8326.327 ns/op
Iteration   2: 8416.124 ns/op
Iteration   3: 8306.514 ns/op
Iteration   4: 8302.387 ns/op
Iteration   5: 8289.799 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  8328.230 ±(99.9%) 195.828 ns/op [Average]
  (min, avg, max) = (8289.799, 8328.230, 8416.124), stdev = 50.856
  CI (99.9%): [8132.402, 8524.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 32, nKeys = 32, nValues = 3)

# Run progress: 27.65% complete, ETA 00:44:03
# Fork: 1 of 1
# Warmup Iteration   1: 8735.311 ns/op
# Warmup Iteration   2: 7919.334 ns/op
# Warmup Iteration   3: 8313.667 ns/op
# Warmup Iteration   4: 8152.686 ns/op
# Warmup Iteration   5: 8337.614 ns/op
Iteration   1: 8223.698 ns/op
Iteration   2: 8251.004 ns/op
Iteration   3: 8198.142 ns/op
Iteration   4: 8274.831 ns/op
Iteration   5: 8213.021 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  8232.139 ±(99.9%) 118.231 ns/op [Average]
  (min, avg, max) = (8198.142, 8232.139, 8274.831), stdev = 30.704
  CI (99.9%): [8113.908, 8350.370] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 32, nKeys = 1000, nValues = 2)

# Run progress: 28.03% complete, ETA 00:43:40
# Fork: 1 of 1
# Warmup Iteration   1: 235373.663 ns/op
# Warmup Iteration   2: 234851.595 ns/op
# Warmup Iteration   3: 229509.841 ns/op
# Warmup Iteration   4: 230474.446 ns/op
# Warmup Iteration   5: 232159.301 ns/op
Iteration   1: 231913.181 ns/op
Iteration   2: 237964.020 ns/op
Iteration   3: 253427.014 ns/op
Iteration   4: 253179.453 ns/op
Iteration   5: 249015.467 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  245099.827 ±(99.9%) 37271.867 ns/op [Average]
  (min, avg, max) = (231913.181, 245099.827, 253427.014), stdev = 9679.386
  CI (99.9%): [207827.960, 282371.694] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 32, nKeys = 1000, nValues = 3)

# Run progress: 28.41% complete, ETA 00:43:18
# Fork: 1 of 1
# Warmup Iteration   1: 242067.044 ns/op
# Warmup Iteration   2: 240724.216 ns/op
# Warmup Iteration   3: 235606.404 ns/op
# Warmup Iteration   4: 235404.430 ns/op
# Warmup Iteration   5: 235540.770 ns/op
Iteration   1: 236807.640 ns/op
Iteration   2: 236660.933 ns/op
Iteration   3: 237801.126 ns/op
Iteration   4: 239610.232 ns/op
Iteration   5: 234648.201 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  237105.627 ±(99.9%) 6963.774 ns/op [Average]
  (min, avg, max) = (234648.201, 237105.627, 239610.232), stdev = 1808.470
  CI (99.9%): [230141.852, 244069.401] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 32, nKeys = 100000, nValues = 2)

# Run progress: 28.79% complete, ETA 00:42:56
# Fork: 1 of 1
# Warmup Iteration   1: 34052753.333 ns/op
# Warmup Iteration   2: 32975164.516 ns/op
# Warmup Iteration   3: 33813563.333 ns/op
# Warmup Iteration   4: 33872536.667 ns/op
# Warmup Iteration   5: 33133206.452 ns/op
Iteration   1: 33242241.935 ns/op
Iteration   2: 33437054.839 ns/op
Iteration   3: 33346335.484 ns/op
Iteration   4: 33522341.935 ns/op
Iteration   5: 33746876.667 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  33458970.172 ±(99.9%) 738290.341 ns/op [Average]
  (min, avg, max) = (33242241.935, 33458970.172, 33746876.667), stdev = 191731.657
  CI (99.9%): [32720679.831, 34197260.513] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 32, nKeys = 100000, nValues = 3)

# Run progress: 29.17% complete, ETA 00:42:35
# Fork: 1 of 1
# Warmup Iteration   1: 37233321.429 ns/op
# Warmup Iteration   2: 35857593.103 ns/op
# Warmup Iteration   3: 36061400.000 ns/op
# Warmup Iteration   4: 36094546.429 ns/op
# Warmup Iteration   5: 36344696.429 ns/op
Iteration   1: 36647389.286 ns/op
Iteration   2: 36475582.143 ns/op
Iteration   3: 35940079.310 ns/op
Iteration   4: 35943389.655 ns/op
Iteration   5: 35892157.143 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  36179719.507 ±(99.9%) 1364428.632 ns/op [Average]
  (min, avg, max) = (35892157.143, 36179719.507, 36647389.286), stdev = 354337.783
  CI (99.9%): [34815290.875, 37544148.139] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 64, nKeys = 32, nValues = 2)

# Run progress: 29.55% complete, ETA 00:42:14
# Fork: 1 of 1
# Warmup Iteration   1: 16994.407 ns/op
# Warmup Iteration   2: 16092.986 ns/op
# Warmup Iteration   3: 16094.530 ns/op
# Warmup Iteration   4: 16565.508 ns/op
# Warmup Iteration   5: 16544.630 ns/op
Iteration   1: 16697.525 ns/op
Iteration   2: 16770.291 ns/op
Iteration   3: 16476.346 ns/op
Iteration   4: 16628.239 ns/op
Iteration   5: 16558.561 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  16626.192 ±(99.9%) 442.760 ns/op [Average]
  (min, avg, max) = (16476.346, 16626.192, 16770.291), stdev = 114.983
  CI (99.9%): [16183.432, 17068.953] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 64, nKeys = 32, nValues = 3)

# Run progress: 29.92% complete, ETA 00:41:53
# Fork: 1 of 1
# Warmup Iteration   1: 17641.723 ns/op
# Warmup Iteration   2: 16511.468 ns/op
# Warmup Iteration   3: 16357.018 ns/op
# Warmup Iteration   4: 16398.224 ns/op
# Warmup Iteration   5: 16512.029 ns/op
Iteration   1: 16268.799 ns/op
Iteration   2: 16292.177 ns/op
Iteration   3: 16365.457 ns/op
Iteration   4: 16222.059 ns/op
Iteration   5: 16526.467 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  16334.992 ±(99.9%) 457.884 ns/op [Average]
  (min, avg, max) = (16222.059, 16334.992, 16526.467), stdev = 118.911
  CI (99.9%): [15877.108, 16792.876] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 64, nKeys = 1000, nValues = 2)

# Run progress: 30.30% complete, ETA 00:41:32
# Fork: 1 of 1
# Warmup Iteration   1: 484484.830 ns/op
# Warmup Iteration   2: 474256.994 ns/op
# Warmup Iteration   3: 468756.572 ns/op
# Warmup Iteration   4: 477001.321 ns/op
# Warmup Iteration   5: 478471.591 ns/op
Iteration   1: 473282.292 ns/op
Iteration   2: 470278.074 ns/op
Iteration   3: 468863.119 ns/op
Iteration   4: 475208.808 ns/op
Iteration   5: 466314.569 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  470789.372 ±(99.9%) 13578.886 ns/op [Average]
  (min, avg, max) = (466314.569, 470789.372, 475208.808), stdev = 3526.394
  CI (99.9%): [457210.486, 484368.259] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 64, nKeys = 1000, nValues = 3)

# Run progress: 30.68% complete, ETA 00:41:12
# Fork: 1 of 1
# Warmup Iteration   1: 475648.227 ns/op
# Warmup Iteration   2: 469631.395 ns/op
# Warmup Iteration   3: 458037.705 ns/op
# Warmup Iteration   4: 457737.307 ns/op
# Warmup Iteration   5: 461932.099 ns/op
Iteration   1: 463101.195 ns/op
Iteration   2: 462132.403 ns/op
Iteration   3: 466135.797 ns/op
Iteration   4: 469635.032 ns/op
Iteration   5: 462939.230 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  464788.732 ±(99.9%) 11965.800 ns/op [Average]
  (min, avg, max) = (462132.403, 464788.732, 469635.032), stdev = 3107.480
  CI (99.9%): [452822.931, 476754.532] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 64, nKeys = 100000, nValues = 2)

# Run progress: 31.06% complete, ETA 00:40:51
# Fork: 1 of 1
# Warmup Iteration   1: 69534460.000 ns/op
# Warmup Iteration   2: 64565337.500 ns/op
# Warmup Iteration   3: 64224887.500 ns/op
# Warmup Iteration   4: 64396850.000 ns/op
# Warmup Iteration   5: 64927262.500 ns/op
Iteration   1: 64581868.750 ns/op
Iteration   2: 64170512.500 ns/op
Iteration   3: 63875818.750 ns/op
Iteration   4: 64283287.500 ns/op
Iteration   5: 63613637.500 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  64105025.000 ±(99.9%) 1437486.269 ns/op [Average]
  (min, avg, max) = (63613637.500, 64105025.000, 64581868.750), stdev = 373310.619
  CI (99.9%): [62667538.731, 65542511.269] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 64, nKeys = 100000, nValues = 3)

# Run progress: 31.44% complete, ETA 00:40:32
# Fork: 1 of 1
# Warmup Iteration   1: 73874714.286 ns/op
# Warmup Iteration   2: 71005486.667 ns/op
# Warmup Iteration   3: 71502840.000 ns/op
# Warmup Iteration   4: 71011346.667 ns/op
# Warmup Iteration   5: 72104235.714 ns/op
Iteration   1: 71430386.667 ns/op
Iteration   2: 70754373.333 ns/op
Iteration   3: 70043073.333 ns/op
Iteration   4: 71082980.000 ns/op
Iteration   5: 69595893.333 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  70581341.333 ±(99.9%) 2896505.710 ns/op [Average]
  (min, avg, max) = (69595893.333, 70581341.333, 71430386.667), stdev = 752213.335
  CI (99.9%): [67684835.623, 73477847.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 128, nKeys = 32, nValues = 2)

# Run progress: 31.82% complete, ETA 00:40:13
# Fork: 1 of 1
# Warmup Iteration   1: 34451.621 ns/op
# Warmup Iteration   2: 32811.393 ns/op
# Warmup Iteration   3: 32996.393 ns/op
# Warmup Iteration   4: 32449.111 ns/op
# Warmup Iteration   5: 32926.796 ns/op
Iteration   1: 33168.431 ns/op
Iteration   2: 33204.895 ns/op
Iteration   3: 32527.495 ns/op
Iteration   4: 33307.871 ns/op
Iteration   5: 33397.851 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  33121.308 ±(99.9%) 1324.284 ns/op [Average]
  (min, avg, max) = (32527.495, 33121.308, 33397.851), stdev = 343.912
  CI (99.9%): [31797.024, 34445.593] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 128, nKeys = 32, nValues = 3)

# Run progress: 32.20% complete, ETA 00:39:54
# Fork: 1 of 1
# Warmup Iteration   1: 34647.914 ns/op
# Warmup Iteration   2: 32802.698 ns/op
# Warmup Iteration   3: 32800.346 ns/op
# Warmup Iteration   4: 31693.979 ns/op
# Warmup Iteration   5: 33822.201 ns/op
Iteration   1: 33193.278 ns/op
Iteration   2: 33296.025 ns/op
Iteration   3: 33346.440 ns/op
Iteration   4: 33372.872 ns/op
Iteration   5: 33261.806 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  33294.084 ±(99.9%) 273.343 ns/op [Average]
  (min, avg, max) = (33193.278, 33294.084, 33372.872), stdev = 70.986
  CI (99.9%): [33020.741, 33567.427] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 128, nKeys = 1000, nValues = 2)

# Run progress: 32.58% complete, ETA 00:39:34
# Fork: 1 of 1
# Warmup Iteration   1: 942032.375 ns/op
# Warmup Iteration   2: 931721.947 ns/op
# Warmup Iteration   3: 933285.148 ns/op
# Warmup Iteration   4: 936489.372 ns/op
# Warmup Iteration   5: 925051.287 ns/op
Iteration   1: 924177.717 ns/op
Iteration   2: 934261.353 ns/op
Iteration   3: 934272.921 ns/op
Iteration   4: 931046.488 ns/op
Iteration   5: 933400.093 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  931431.714 ±(99.9%) 16418.685 ns/op [Average]
  (min, avg, max) = (924177.717, 931431.714, 934272.921), stdev = 4263.880
  CI (99.9%): [915013.030, 947850.399] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 128, nKeys = 1000, nValues = 3)

# Run progress: 32.95% complete, ETA 00:39:15
# Fork: 1 of 1
# Warmup Iteration   1: 969796.268 ns/op
# Warmup Iteration   2: 962037.689 ns/op
# Warmup Iteration   3: 945889.067 ns/op
# Warmup Iteration   4: 931136.280 ns/op
# Warmup Iteration   5: 947005.155 ns/op
Iteration   1: 940769.424 ns/op
Iteration   2: 954139.354 ns/op
Iteration   3: 950274.763 ns/op
Iteration   4: 947490.458 ns/op
Iteration   5: 943210.393 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  947176.878 ±(99.9%) 20643.165 ns/op [Average]
  (min, avg, max) = (940769.424, 947176.878, 954139.354), stdev = 5360.964
  CI (99.9%): [926533.713, 967820.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 128, nKeys = 100000, nValues = 2)

# Run progress: 33.33% complete, ETA 00:38:56
# Fork: 1 of 1
# Warmup Iteration   1: 136285212.500 ns/op
# Warmup Iteration   2: 130183300.000 ns/op
# Warmup Iteration   3: 127986550.000 ns/op
# Warmup Iteration   4: 130126650.000 ns/op
# Warmup Iteration   5: 129608300.000 ns/op
Iteration   1: 130245275.000 ns/op
Iteration   2: 129701725.000 ns/op
Iteration   3: 129151387.500 ns/op
Iteration   4: 129084425.000 ns/op
Iteration   5: 129143550.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  129465272.500 ±(99.9%) 1936253.391 ns/op [Average]
  (min, avg, max) = (129084425.000, 129465272.500, 130245275.000), stdev = 502838.857
  CI (99.9%): [127529019.109, 131401525.891] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 128, nKeys = 100000, nValues = 3)

# Run progress: 33.71% complete, ETA 00:38:38
# Fork: 1 of 1
# Warmup Iteration   1: 154124942.857 ns/op
# Warmup Iteration   2: 143205742.857 ns/op
# Warmup Iteration   3: 144616057.143 ns/op
# Warmup Iteration   4: 143776642.857 ns/op
# Warmup Iteration   5: 142456437.500 ns/op
Iteration   1: 143270825.000 ns/op
Iteration   2: 144434657.143 ns/op
Iteration   3: 157623500.000 ns/op
Iteration   4: 148283300.000 ns/op
Iteration   5: 142594600.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  147241376.429 ±(99.9%) 23901116.036 ns/op [Average]
  (min, avg, max) = (142594600.000, 147241376.429, 157623500.000), stdev = 6207043.933
  CI (99.9%): [123340260.393, 171142492.464] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 256, nKeys = 32, nValues = 2)

# Run progress: 34.09% complete, ETA 00:38:21
# Fork: 1 of 1
# Warmup Iteration   1: 66858.121 ns/op
# Warmup Iteration   2: 63593.059 ns/op
# Warmup Iteration   3: 63125.392 ns/op
# Warmup Iteration   4: 63305.932 ns/op
# Warmup Iteration   5: 64188.550 ns/op
Iteration   1: 64021.003 ns/op
Iteration   2: 63855.363 ns/op
Iteration   3: 65714.401 ns/op
Iteration   4: 65490.456 ns/op
Iteration   5: 66156.648 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  65047.574 ±(99.9%) 4013.759 ns/op [Average]
  (min, avg, max) = (63855.363, 65047.574, 66156.648), stdev = 1042.360
  CI (99.9%): [61033.816, 69061.333] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 256, nKeys = 32, nValues = 3)

# Run progress: 34.47% complete, ETA 00:38:02
# Fork: 1 of 1
# Warmup Iteration   1: 69467.367 ns/op
# Warmup Iteration   2: 67130.812 ns/op
# Warmup Iteration   3: 67308.200 ns/op
# Warmup Iteration   4: 66598.684 ns/op
# Warmup Iteration   5: 66163.307 ns/op
Iteration   1: 67350.674 ns/op
Iteration   2: 65569.995 ns/op
Iteration   3: 63278.972 ns/op
Iteration   4: 68280.455 ns/op
Iteration   5: 69504.568 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  66796.933 ±(99.9%) 9376.966 ns/op [Average]
  (min, avg, max) = (63278.972, 66796.933, 69504.568), stdev = 2435.168
  CI (99.9%): [57419.967, 76173.899] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 256, nKeys = 1000, nValues = 2)

# Run progress: 34.85% complete, ETA 00:37:44
# Fork: 1 of 1
# Warmup Iteration   1: 1929293.487 ns/op
# Warmup Iteration   2: 1906221.576 ns/op
# Warmup Iteration   3: 1901304.545 ns/op
# Warmup Iteration   4: 1908109.074 ns/op
# Warmup Iteration   5: 1884056.903 ns/op
Iteration   1: 1881684.916 ns/op
Iteration   2: 1912179.017 ns/op
Iteration   3: 1923212.121 ns/op
Iteration   4: 1902517.235 ns/op
Iteration   5: 1897102.072 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  1903339.072 ±(99.9%) 60320.087 ns/op [Average]
  (min, avg, max) = (1881684.916, 1903339.072, 1923212.121), stdev = 15664.935
  CI (99.9%): [1843018.985, 1963659.159] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 256, nKeys = 1000, nValues = 3)

# Run progress: 35.23% complete, ETA 00:37:26
# Fork: 1 of 1
# Warmup Iteration   1: 1944370.713 ns/op
# Warmup Iteration   2: 1917729.502 ns/op
# Warmup Iteration   3: 1909590.000 ns/op
# Warmup Iteration   4: 1908091.856 ns/op
# Warmup Iteration   5: 1902962.101 ns/op
Iteration   1: 1869454.917 ns/op
Iteration   2: 1878463.197 ns/op
Iteration   3: 1900001.316 ns/op
Iteration   4: 1889203.933 ns/op
Iteration   5: 1910018.631 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  1889428.399 ±(99.9%) 62535.046 ns/op [Average]
  (min, avg, max) = (1869454.917, 1889428.399, 1910018.631), stdev = 16240.153
  CI (99.9%): [1826893.352, 1951963.445] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 256, nKeys = 100000, nValues = 2)

# Run progress: 35.61% complete, ETA 00:37:08
# Fork: 1 of 1
# Warmup Iteration   1: 287924300.000 ns/op
# Warmup Iteration   2: 256899775.000 ns/op
# Warmup Iteration   3: 260120125.000 ns/op
# Warmup Iteration   4: 263355125.000 ns/op
# Warmup Iteration   5: 260476075.000 ns/op
Iteration   1: 267176200.000 ns/op
Iteration   2: 258218625.000 ns/op
Iteration   3: 263962275.000 ns/op
Iteration   4: 258902950.000 ns/op
Iteration   5: 258755800.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  261403170.000 ±(99.9%) 15315435.659 ns/op [Average]
  (min, avg, max) = (258218625.000, 261403170.000, 267176200.000), stdev = 3977370.004
  CI (99.9%): [246087734.341, 276718605.659] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 256, nKeys = 100000, nValues = 3)

# Run progress: 35.98% complete, ETA 00:36:51
# Fork: 1 of 1
# Warmup Iteration   1: 318238250.000 ns/op
# Warmup Iteration   2: 288972250.000 ns/op
# Warmup Iteration   3: 287769625.000 ns/op
# Warmup Iteration   4: 288582850.000 ns/op
# Warmup Iteration   5: 283498350.000 ns/op
Iteration   1: 288474550.000 ns/op
Iteration   2: 285850650.000 ns/op
Iteration   3: 291994250.000 ns/op
Iteration   4: 286111350.000 ns/op
Iteration   5: 287312525.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  287948665.000 ±(99.9%) 9592931.028 ns/op [Average]
  (min, avg, max) = (285850650.000, 287948665.000, 291994250.000), stdev = 2491253.724
  CI (99.9%): [278355733.972, 297541596.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 512, nKeys = 32, nValues = 2)

# Run progress: 36.36% complete, ETA 00:36:36
# Fork: 1 of 1
# Warmup Iteration   1: 134073.894 ns/op
# Warmup Iteration   2: 127290.219 ns/op
# Warmup Iteration   3: 128449.421 ns/op
# Warmup Iteration   4: 127963.111 ns/op
# Warmup Iteration   5: 127302.168 ns/op
Iteration   1: 127890.565 ns/op
Iteration   2: 127863.967 ns/op
Iteration   3: 125847.968 ns/op
Iteration   4: 128361.300 ns/op
Iteration   5: 126191.434 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  127231.047 ±(99.9%) 4350.856 ns/op [Average]
  (min, avg, max) = (125847.968, 127231.047, 128361.300), stdev = 1129.904
  CI (99.9%): [122880.190, 131581.903] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 512, nKeys = 32, nValues = 3)

# Run progress: 36.74% complete, ETA 00:36:19
# Fork: 1 of 1
# Warmup Iteration   1: 136043.267 ns/op
# Warmup Iteration   2: 130431.904 ns/op
# Warmup Iteration   3: 129613.944 ns/op
# Warmup Iteration   4: 130235.096 ns/op
# Warmup Iteration   5: 127887.521 ns/op
Iteration   1: 129340.574 ns/op
Iteration   2: 130429.701 ns/op
Iteration   3: 127610.727 ns/op
Iteration   4: 131099.779 ns/op
Iteration   5: 131004.308 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  129897.018 ±(99.9%) 5610.995 ns/op [Average]
  (min, avg, max) = (127610.727, 129897.018, 131099.779), stdev = 1457.158
  CI (99.9%): [124286.023, 135508.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 512, nKeys = 1000, nValues = 2)

# Run progress: 37.12% complete, ETA 00:36:01
# Fork: 1 of 1
# Warmup Iteration   1: 3888242.636 ns/op
# Warmup Iteration   2: 3811992.884 ns/op
# Warmup Iteration   3: 3704908.824 ns/op
# Warmup Iteration   4: 3744614.126 ns/op
# Warmup Iteration   5: 3714572.527 ns/op
Iteration   1: 3656842.391 ns/op
Iteration   2: 3689521.978 ns/op
Iteration   3: 3754122.015 ns/op
Iteration   4: 3687699.636 ns/op
Iteration   5: 3738645.185 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  3705366.241 ±(99.9%) 154053.758 ns/op [Average]
  (min, avg, max) = (3656842.391, 3705366.241, 3754122.015), stdev = 40007.272
  CI (99.9%): [3551312.483, 3859420.000] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 512, nKeys = 1000, nValues = 3)

# Run progress: 37.50% complete, ETA 00:35:44
# Fork: 1 of 1
# Warmup Iteration   1: 3913982.946 ns/op
# Warmup Iteration   2: 3827981.887 ns/op
# Warmup Iteration   3: 3837597.719 ns/op
# Warmup Iteration   4: 3800463.910 ns/op
# Warmup Iteration   5: 3854924.427 ns/op
Iteration   1: 3837991.985 ns/op
Iteration   2: 3811368.302 ns/op
Iteration   3: 3830234.470 ns/op
Iteration   4: 3817370.677 ns/op
Iteration   5: 3853248.659 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  3830042.818 ±(99.9%) 64175.858 ns/op [Average]
  (min, avg, max) = (3811368.302, 3830042.818, 3853248.659), stdev = 16666.267
  CI (99.9%): [3765866.960, 3894218.676] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 512, nKeys = 100000, nValues = 2)

# Run progress: 37.88% complete, ETA 00:35:27
# Fork: 1 of 1
# Warmup Iteration   1: 624792250.000 ns/op
# Warmup Iteration   2: 521747950.000 ns/op
# Warmup Iteration   3: 518281150.000 ns/op
# Warmup Iteration   4: 525255400.000 ns/op
# Warmup Iteration   5: 522183500.000 ns/op
Iteration   1: 527086550.000 ns/op
Iteration   2: 518598400.000 ns/op
Iteration   3: 514831750.000 ns/op
Iteration   4: 530842550.000 ns/op
Iteration   5: 527601550.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  523792160.000 ±(99.9%) 25998017.305 ns/op [Average]
  (min, avg, max) = (514831750.000, 523792160.000, 530842550.000), stdev = 6751602.534
  CI (99.9%): [497794142.695, 549790177.305] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 512, nKeys = 100000, nValues = 3)

# Run progress: 38.26% complete, ETA 00:35:11
# Fork: 1 of 1
# Warmup Iteration   1: 678822750.000 ns/op
# Warmup Iteration   2: 583011600.000 ns/op
# Warmup Iteration   3: 575737000.000 ns/op
# Warmup Iteration   4: 574194500.000 ns/op
# Warmup Iteration   5: 578428550.000 ns/op
Iteration   1: 575702550.000 ns/op
Iteration   2: 576787150.000 ns/op
Iteration   3: 575216600.000 ns/op
Iteration   4: 575739500.000 ns/op
Iteration   5: 578097600.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  576308680.000 ±(99.9%) 4437926.216 ns/op [Average]
  (min, avg, max) = (575216600.000, 576308680.000, 578097600.000), stdev = 1152515.345
  CI (99.9%): [571870753.784, 580746606.216] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 1024, nKeys = 32, nValues = 2)

# Run progress: 38.64% complete, ETA 00:34:56
# Fork: 1 of 1
# Warmup Iteration   1: 285273.463 ns/op
# Warmup Iteration   2: 272845.538 ns/op
# Warmup Iteration   3: 273569.639 ns/op
# Warmup Iteration   4: 271188.221 ns/op
# Warmup Iteration   5: 273631.316 ns/op
Iteration   1: 273807.162 ns/op
Iteration   2: 271649.544 ns/op
Iteration   3: 271636.982 ns/op
Iteration   4: 273959.181 ns/op
Iteration   5: 275717.514 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  273354.077 ±(99.9%) 6672.601 ns/op [Average]
  (min, avg, max) = (271636.982, 273354.077, 275717.514), stdev = 1732.853
  CI (99.9%): [266681.476, 280026.677] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 1024, nKeys = 32, nValues = 3)

# Run progress: 39.02% complete, ETA 00:34:40
# Fork: 1 of 1
# Warmup Iteration   1: 272208.147 ns/op
# Warmup Iteration   2: 257091.014 ns/op
# Warmup Iteration   3: 255674.994 ns/op
# Warmup Iteration   4: 255031.918 ns/op
# Warmup Iteration   5: 254125.277 ns/op
Iteration   1: 254045.071 ns/op
Iteration   2: 256852.946 ns/op
Iteration   3: 255552.454 ns/op
Iteration   4: 255164.309 ns/op
Iteration   5: 254418.102 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  255206.576 ±(99.9%) 4219.372 ns/op [Average]
  (min, avg, max) = (254045.071, 255206.576, 256852.946), stdev = 1095.757
  CI (99.9%): [250987.205, 259425.948] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 1024, nKeys = 1000, nValues = 2)

# Run progress: 39.39% complete, ETA 00:34:23
# Fork: 1 of 1
# Warmup Iteration   1: 8312997.541 ns/op
# Warmup Iteration   2: 8302202.459 ns/op
# Warmup Iteration   3: 8196119.355 ns/op
# Warmup Iteration   4: 8141781.452 ns/op
# Warmup Iteration   5: 8206926.829 ns/op
Iteration   1: 8157685.484 ns/op
Iteration   2: 8169349.194 ns/op
Iteration   3: 8171186.992 ns/op
Iteration   4: 8154855.645 ns/op
Iteration   5: 8282938.525 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  8187203.168 ±(99.9%) 207883.038 ns/op [Average]
  (min, avg, max) = (8154855.645, 8187203.168, 8282938.525), stdev = 53986.565
  CI (99.9%): [7979320.130, 8395086.206] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 1024, nKeys = 1000, nValues = 3)

# Run progress: 39.77% complete, ETA 00:34:06
# Fork: 1 of 1
# Warmup Iteration   1: 8554458.824 ns/op
# Warmup Iteration   2: 8292339.024 ns/op
# Warmup Iteration   3: 8345937.705 ns/op
# Warmup Iteration   4: 8168152.419 ns/op
# Warmup Iteration   5: 8286059.836 ns/op
Iteration   1: 8265556.557 ns/op
Iteration   2: 8316639.669 ns/op
Iteration   3: 8239036.290 ns/op
Iteration   4: 8143200.000 ns/op
Iteration   5: 8376154.545 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  8268117.413 ±(99.9%) 336149.642 ns/op [Average]
  (min, avg, max) = (8143200.000, 8268117.413, 8376154.545), stdev = 87296.995
  CI (99.9%): [7931967.770, 8604267.055] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 1024, nKeys = 100000, nValues = 2)

# Run progress: 40.15% complete, ETA 00:33:50
# Fork: 1 of 1
# Warmup Iteration   1: 1270139400.000 ns/op
# Warmup Iteration   2: 1276148500.000 ns/op
# Warmup Iteration   3: 1058717700.000 ns/op
# Warmup Iteration   4: 1071745800.000 ns/op
# Warmup Iteration   5: 1059556200.000 ns/op
Iteration   1: 1055221000.000 ns/op
Iteration   2: 1050524400.000 ns/op
Iteration   3: 1072652600.000 ns/op
Iteration   4: 1057807900.000 ns/op
Iteration   5: 1053426900.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  1057926560.000 ±(99.9%) 33304692.260 ns/op [Average]
  (min, avg, max) = (1050524400.000, 1057926560.000, 1072652600.000), stdev = 8649122.816
  CI (99.9%): [1024621867.740, 1091231252.260] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 1024, nKeys = 100000, nValues = 3)

# Run progress: 40.53% complete, ETA 00:33:35
# Fork: 1 of 1
# Warmup Iteration   1: 1355727800.000 ns/op
# Warmup Iteration   2: 1334910100.000 ns/op
# Warmup Iteration   3: 1140664800.000 ns/op
# Warmup Iteration   4: 1154310200.000 ns/op
# Warmup Iteration   5: 1140390200.000 ns/op
Iteration   1: 1158786600.000 ns/op
Iteration   2: 1150360500.000 ns/op
Iteration   3: 1158084800.000 ns/op
Iteration   4: 1159026200.000 ns/op
Iteration   5: 1136747400.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  1152601100.000 ±(99.9%) 36832238.374 ns/op [Average]
  (min, avg, max) = (1136747400.000, 1152601100.000, 1159026200.000), stdev = 9565215.340
  CI (99.9%): [1115768861.626, 1189433338.374] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 2048, nKeys = 32, nValues = 2)

# Run progress: 40.91% complete, ETA 00:33:22
# Fork: 1 of 1
# Warmup Iteration   1: 535264.308 ns/op
# Warmup Iteration   2: 511519.727 ns/op
# Warmup Iteration   3: 515126.758 ns/op
# Warmup Iteration   4: 514961.456 ns/op
# Warmup Iteration   5: 509647.605 ns/op
Iteration   1: 510606.492 ns/op
Iteration   2: 513949.259 ns/op
Iteration   3: 507729.935 ns/op
Iteration   4: 511994.848 ns/op
Iteration   5: 511700.963 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  511196.299 ±(99.9%) 8788.143 ns/op [Average]
  (min, avg, max) = (507729.935, 511196.299, 513949.259), stdev = 2282.253
  CI (99.9%): [502408.157, 519984.442] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 2048, nKeys = 32, nValues = 3)

# Run progress: 41.29% complete, ETA 00:33:05
# Fork: 1 of 1
# Warmup Iteration   1: 529861.514 ns/op
# Warmup Iteration   2: 506694.383 ns/op
# Warmup Iteration   3: 504394.422 ns/op
# Warmup Iteration   4: 509748.342 ns/op
# Warmup Iteration   5: 505693.725 ns/op
Iteration   1: 506782.181 ns/op
Iteration   2: 508165.425 ns/op
Iteration   3: 509044.934 ns/op
Iteration   4: 503549.875 ns/op
Iteration   5: 507996.526 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  507107.788 ±(99.9%) 8264.488 ns/op [Average]
  (min, avg, max) = (503549.875, 507107.788, 509044.934), stdev = 2146.261
  CI (99.9%): [498843.300, 515372.276] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 2048, nKeys = 1000, nValues = 2)

# Run progress: 41.67% complete, ETA 00:32:49
# Fork: 1 of 1
# Warmup Iteration   1: 16900065.000 ns/op
# Warmup Iteration   2: 16411206.452 ns/op
# Warmup Iteration   3: 16404100.000 ns/op
# Warmup Iteration   4: 16457109.836 ns/op
# Warmup Iteration   5: 16413745.161 ns/op
Iteration   1: 16224957.143 ns/op
Iteration   2: 16319076.190 ns/op
Iteration   3: 16417375.806 ns/op
Iteration   4: 16439361.290 ns/op
Iteration   5: 16247349.206 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  16329623.927 ±(99.9%) 373225.544 ns/op [Average]
  (min, avg, max) = (16224957.143, 16329623.927, 16439361.290), stdev = 96925.489
  CI (99.9%): [15956398.383, 16702849.471] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 2048, nKeys = 1000, nValues = 3)

# Run progress: 42.05% complete, ETA 00:32:33
# Fork: 1 of 1
# Warmup Iteration   1: 16705198.361 ns/op
# Warmup Iteration   2: 16357111.290 ns/op
# Warmup Iteration   3: 16160507.937 ns/op
# Warmup Iteration   4: 16233011.290 ns/op
# Warmup Iteration   5: 16256837.097 ns/op
Iteration   1: 16394933.871 ns/op
Iteration   2: 16163165.079 ns/op
Iteration   3: 16350885.484 ns/op
Iteration   4: 16366345.161 ns/op
Iteration   5: 16230190.476 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  16301104.014 ±(99.9%) 383107.740 ns/op [Average]
  (min, avg, max) = (16163165.079, 16301104.014, 16394933.871), stdev = 99491.864
  CI (99.9%): [15917996.274, 16684211.755] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 2048, nKeys = 100000, nValues = 2)

# Run progress: 42.42% complete, ETA 00:32:18
# Fork: 1 of 1
# Warmup Iteration   1: 2524046100.000 ns/op
# Warmup Iteration   2: 2492138000.000 ns/op
# Warmup Iteration   3: 2148460000.000 ns/op
# Warmup Iteration   4: 2155125500.000 ns/op
# Warmup Iteration   5: 2150239200.000 ns/op
Iteration   1: 2155925700.000 ns/op
Iteration   2: 2159710100.000 ns/op
Iteration   3: 2147013000.000 ns/op
Iteration   4: 2128170900.000 ns/op
Iteration   5: 2147950400.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  2147754020.000 ±(99.9%) 46916681.905 ns/op [Average]
  (min, avg, max) = (2128170900.000, 2147754020.000, 2159710100.000), stdev = 12184113.300
  CI (99.9%): [2100837338.095, 2194670701.905] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 2048, nKeys = 100000, nValues = 3)

# Run progress: 42.80% complete, ETA 00:32:18
# Fork: 1 of 1
# Warmup Iteration   1: 2703914800.000 ns/op
# Warmup Iteration   2: 2665409700.000 ns/op
# Warmup Iteration   3: 2289542200.000 ns/op
# Warmup Iteration   4: 2270859600.000 ns/op
# Warmup Iteration   5: 2277754500.000 ns/op
Iteration   1: 2258128100.000 ns/op
Iteration   2: 2282002000.000 ns/op
Iteration   3: 2272318200.000 ns/op
Iteration   4: 2278041400.000 ns/op
Iteration   5: 2282402400.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  2274578420.000 ±(99.9%) 38700315.165 ns/op [Average]
  (min, avg, max) = (2258128100.000, 2274578420.000, 2282402400.000), stdev = 10050348.950
  CI (99.9%): [2235878104.835, 2313278735.165] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 4096, nKeys = 32, nValues = 2)

# Run progress: 43.18% complete, ETA 00:32:20
# Fork: 1 of 1
# Warmup Iteration   1: 1089378.332 ns/op
# Warmup Iteration   2: 1038983.058 ns/op
# Warmup Iteration   3: 1018380.302 ns/op
# Warmup Iteration   4: 1033630.848 ns/op
# Warmup Iteration   5: 1017627.649 ns/op
Iteration   1: 1029959.286 ns/op
Iteration   2: 1023946.083 ns/op
Iteration   3: 1043465.400 ns/op
Iteration   4: 1022616.481 ns/op
Iteration   5: 1037547.131 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  1031506.876 ±(99.9%) 34338.306 ns/op [Average]
  (min, avg, max) = (1022616.481, 1031506.876, 1043465.400), stdev = 8917.549
  CI (99.9%): [997168.570, 1065845.183] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 4096, nKeys = 32, nValues = 3)

# Run progress: 43.56% complete, ETA 00:32:04
# Fork: 1 of 1
# Warmup Iteration   1: 1091115.033 ns/op
# Warmup Iteration   2: 1056544.838 ns/op
# Warmup Iteration   3: 1043145.717 ns/op
# Warmup Iteration   4: 1041150.462 ns/op
# Warmup Iteration   5: 1033282.245 ns/op
Iteration   1: 1036255.988 ns/op
Iteration   2: 1048355.326 ns/op
Iteration   3: 1038765.667 ns/op
Iteration   4: 1036882.413 ns/op
Iteration   5: 1043090.609 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  1040670.000 ±(99.9%) 19480.927 ns/op [Average]
  (min, avg, max) = (1036255.988, 1040670.000, 1048355.326), stdev = 5059.135
  CI (99.9%): [1021189.074, 1060150.927] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 4096, nKeys = 1000, nValues = 2)

# Run progress: 43.94% complete, ETA 00:31:48
# Fork: 1 of 1
# Warmup Iteration   1: 34268153.333 ns/op
# Warmup Iteration   2: 32812683.871 ns/op
# Warmup Iteration   3: 32974090.323 ns/op
# Warmup Iteration   4: 32882383.871 ns/op
# Warmup Iteration   5: 32611948.387 ns/op
Iteration   1: 32440287.500 ns/op
Iteration   2: 32464209.677 ns/op
Iteration   3: 32806367.742 ns/op
Iteration   4: 32795616.129 ns/op
Iteration   5: 32704806.452 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  32642257.500 ±(99.9%) 685739.900 ns/op [Average]
  (min, avg, max) = (32440287.500, 32642257.500, 32806367.742), stdev = 178084.474
  CI (99.9%): [31956517.600, 33327997.400] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 4096, nKeys = 1000, nValues = 3)

# Run progress: 44.32% complete, ETA 00:31:32
# Fork: 1 of 1
# Warmup Iteration   1: 30762921.212 ns/op
# Warmup Iteration   2: 29034228.571 ns/op
# Warmup Iteration   3: 28867040.000 ns/op
# Warmup Iteration   4: 28878488.571 ns/op
# Warmup Iteration   5: 28586080.556 ns/op
Iteration   1: 28684352.778 ns/op
Iteration   2: 28798597.222 ns/op
Iteration   3: 28857825.714 ns/op
Iteration   4: 28336586.111 ns/op
Iteration   5: 28765813.889 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  28688635.143 ±(99.9%) 795301.371 ns/op [Average]
  (min, avg, max) = (28336586.111, 28688635.143, 28857825.714), stdev = 206537.240
  CI (99.9%): [27893333.772, 29483936.513] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 4096, nKeys = 100000, nValues = 2)

# Run progress: 44.70% complete, ETA 00:31:16
# Fork: 1 of 1
# Warmup Iteration   1: 4896130200.000 ns/op
# Warmup Iteration   2: 4863545000.000 ns/op
# Warmup Iteration   3: 4205823100.000 ns/op
# Warmup Iteration   4: 4172457100.000 ns/op
# Warmup Iteration   5: 4188582800.000 ns/op
Iteration   1: 4202658400.000 ns/op
Iteration   2: 4155303300.000 ns/op
Iteration   3: 4148718100.000 ns/op
Iteration   4: 4158572000.000 ns/op
Iteration   5: 4203538200.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  4173758000.000 ±(99.9%) 104043668.085 ns/op [Average]
  (min, avg, max) = (4148718100.000, 4173758000.000, 4203538200.000), stdev = 27019810.197
  CI (99.9%): [4069714331.915, 4277801668.085] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 4096, nKeys = 100000, nValues = 3)

# Run progress: 45.08% complete, ETA 00:31:41
# Fork: 1 of 1
# Warmup Iteration   1: 5304068400.000 ns/op
# Warmup Iteration   2: 5269107100.000 ns/op
# Warmup Iteration   3: 4538427400.000 ns/op
# Warmup Iteration   4: 4560184400.000 ns/op
# Warmup Iteration   5: 4546865600.000 ns/op
Iteration   1: 4540457200.000 ns/op
Iteration   2: 4562109500.000 ns/op
Iteration   3: 4554159400.000 ns/op
Iteration   4: 4306020900.000 ns/op
Iteration   5: 3651099600.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  4322769320.000 ±(99.9%) 1503273125.569 ns/op [Average]
  (min, avg, max) = (3651099600.000, 4322769320.000, 4562109500.000), stdev = 390395256.862
  CI (99.9%): [2819496194.431, 5826042445.569] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 8192, nKeys = 32, nValues = 2)

# Run progress: 45.45% complete, ETA 00:32:08
# Fork: 1 of 1
# Warmup Iteration   1: 2326308.121 ns/op
# Warmup Iteration   2: 2206051.522 ns/op
# Warmup Iteration   3: 2189231.739 ns/op
# Warmup Iteration   4: 2180478.017 ns/op
# Warmup Iteration   5: 2163883.084 ns/op
Iteration   1: 2147664.378 ns/op
Iteration   2: 2178710.991 ns/op
Iteration   3: 2197415.584 ns/op
Iteration   4: 2194539.348 ns/op
Iteration   5: 2187400.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  2181146.060 ±(99.9%) 77256.575 ns/op [Average]
  (min, avg, max) = (2147664.378, 2181146.060, 2197415.584), stdev = 20063.287
  CI (99.9%): [2103889.486, 2258402.635] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 8192, nKeys = 32, nValues = 3)

# Run progress: 45.83% complete, ETA 00:31:51
# Fork: 1 of 1
# Warmup Iteration   1: 2151035.608 ns/op
# Warmup Iteration   2: 2065138.889 ns/op
# Warmup Iteration   3: 2056482.209 ns/op
# Warmup Iteration   4: 2068916.598 ns/op
# Warmup Iteration   5: 2046883.976 ns/op
Iteration   1: 2216871.082 ns/op
Iteration   2: 2049855.758 ns/op
Iteration   3: 2037348.081 ns/op
Iteration   4: 2031302.012 ns/op
Iteration   5: 2049060.204 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  2076887.427 ±(99.9%) 302844.510 ns/op [Average]
  (min, avg, max) = (2031302.012, 2076887.427, 2216871.082), stdev = 78647.757
  CI (99.9%): [1774042.917, 2379731.937] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 8192, nKeys = 1000, nValues = 2)

# Run progress: 46.21% complete, ETA 00:31:34
# Fork: 1 of 1
# Warmup Iteration   1: 68070673.333 ns/op
# Warmup Iteration   2: 65958856.250 ns/op
# Warmup Iteration   3: 66280987.500 ns/op
# Warmup Iteration   4: 66266575.000 ns/op
# Warmup Iteration   5: 66447700.000 ns/op
Iteration   1: 66045075.000 ns/op
Iteration   2: 66185800.000 ns/op
Iteration   3: 67036506.667 ns/op
Iteration   4: 66665525.000 ns/op
Iteration   5: 66004675.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  66387516.333 ±(99.9%) 1725286.484 ns/op [Average]
  (min, avg, max) = (66004675.000, 66387516.333, 67036506.667), stdev = 448051.421
  CI (99.9%): [64662229.849, 68112802.818] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 8192, nKeys = 1000, nValues = 3)

# Run progress: 46.59% complete, ETA 00:31:18
# Fork: 1 of 1
# Warmup Iteration   1: 64948100.000 ns/op
# Warmup Iteration   2: 57866683.333 ns/op
# Warmup Iteration   3: 58033383.333 ns/op
# Warmup Iteration   4: 57308677.778 ns/op
# Warmup Iteration   5: 57162133.333 ns/op
Iteration   1: 57277061.111 ns/op
Iteration   2: 57355016.667 ns/op
Iteration   3: 57094572.222 ns/op
Iteration   4: 57381811.111 ns/op
Iteration   5: 56308838.889 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  57083460.000 ±(99.9%) 1722489.859 ns/op [Average]
  (min, avg, max) = (56308838.889, 57083460.000, 57381811.111), stdev = 447325.146
  CI (99.9%): [55360970.141, 58805949.859] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 8192, nKeys = 100000, nValues = 2)

# Run progress: 46.97% complete, ETA 00:31:01
# Fork: 1 of 1
# Warmup Iteration   1: 10495591700.000 ns/op
# Warmup Iteration   2: 10376420200.000 ns/op
# Warmup Iteration   3: 8145945700.000 ns/op
# Warmup Iteration   4: 8187397500.000 ns/op
# Warmup Iteration   5: 8177209800.000 ns/op
Iteration   1: 7462313600.000 ns/op
Iteration   2: 7488765500.000 ns/op
Iteration   3: 7481164300.000 ns/op
Iteration   4: 7500875200.000 ns/op
Iteration   5: 7503088800.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  7487241480.000 ±(99.9%) 63788035.693 ns/op [Average]
  (min, avg, max) = (7462313600.000, 7487241480.000, 7503088800.000), stdev = 16565550.302
  CI (99.9%): [7423453444.307, 7551029515.693] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 8192, nKeys = 100000, nValues = 3)

# Run progress: 47.35% complete, ETA 00:32:06
# Fork: 1 of 1
# Warmup Iteration   1: 10652591200.000 ns/op
# Warmup Iteration   2: 10652863600.000 ns/op
# Warmup Iteration   3: 9157682100.000 ns/op
# Warmup Iteration   4: 9152691100.000 ns/op
# Warmup Iteration   5: 8060355800.000 ns/op
Iteration   1: 7591892400.000 ns/op
Iteration   2: 7592308300.000 ns/op
Iteration   3: 7566964000.000 ns/op
Iteration   4: 7569080900.000 ns/op
Iteration   5: 7604793500.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  7585007820.000 ±(99.9%) 63020520.250 ns/op [Average]
  (min, avg, max) = (7566964000.000, 7585007820.000, 7604793500.000), stdev = 16366228.979
  CI (99.9%): [7521987299.750, 7648028340.250] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 16384, nKeys = 32, nValues = 2)

# Run progress: 47.73% complete, ETA 00:33:11
# Fork: 1 of 1
# Warmup Iteration   1: 4457226.754 ns/op
# Warmup Iteration   2: 4198844.770 ns/op
# Warmup Iteration   3: 4215256.723 ns/op
# Warmup Iteration   4: 4222219.167 ns/op
# Warmup Iteration   5: 4265257.203 ns/op
Iteration   1: 4206824.896 ns/op
Iteration   2: 4220333.333 ns/op
Iteration   3: 4253867.364 ns/op
Iteration   4: 4228376.569 ns/op
Iteration   5: 4165763.223 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  4215033.077 ±(99.9%) 124910.759 ns/op [Average]
  (min, avg, max) = (4165763.223, 4215033.077, 4253867.364), stdev = 32438.928
  CI (99.9%): [4090122.318, 4339943.836] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 16384, nKeys = 32, nValues = 3)

# Run progress: 48.11% complete, ETA 00:32:52
# Fork: 1 of 1
# Warmup Iteration   1: 4365514.719 ns/op
# Warmup Iteration   2: 4160389.300 ns/op
# Warmup Iteration   3: 4151127.984 ns/op
# Warmup Iteration   4: 4132676.327 ns/op
# Warmup Iteration   5: 4144530.041 ns/op
Iteration   1: 4214147.083 ns/op
Iteration   2: 4137659.671 ns/op
Iteration   3: 4160523.457 ns/op
Iteration   4: 4174571.605 ns/op
Iteration   5: 4200485.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  4177477.363 ±(99.9%) 117985.432 ns/op [Average]
  (min, avg, max) = (4137659.671, 4177477.363, 4214147.083), stdev = 30640.442
  CI (99.9%): [4059491.931, 4295462.795] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 16384, nKeys = 1000, nValues = 2)

# Run progress: 48.48% complete, ETA 00:32:34
# Fork: 1 of 1
# Warmup Iteration   1: 137199962.500 ns/op
# Warmup Iteration   2: 118190400.000 ns/op
# Warmup Iteration   3: 114052433.333 ns/op
# Warmup Iteration   4: 113820377.778 ns/op
# Warmup Iteration   5: 113656133.333 ns/op
Iteration   1: 114032244.444 ns/op
Iteration   2: 115817577.778 ns/op
Iteration   3: 112853500.000 ns/op
Iteration   4: 116520533.333 ns/op
Iteration   5: 113496733.333 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  114544117.778 ±(99.9%) 6010316.087 ns/op [Average]
  (min, avg, max) = (112853500.000, 114544117.778, 116520533.333), stdev = 1560860.001
  CI (99.9%): [108533801.691, 120554433.865] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 16384, nKeys = 1000, nValues = 3)

# Run progress: 48.86% complete, ETA 00:32:16
# Fork: 1 of 1
# Warmup Iteration   1: 136912137.500 ns/op
# Warmup Iteration   2: 131505062.500 ns/op
# Warmup Iteration   3: 130839675.000 ns/op
# Warmup Iteration   4: 130725050.000 ns/op
# Warmup Iteration   5: 130927912.500 ns/op
Iteration   1: 129196025.000 ns/op
Iteration   2: 129291050.000 ns/op
Iteration   3: 130570262.500 ns/op
Iteration   4: 129446375.000 ns/op
Iteration   5: 131493812.500 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  129999505.000 ±(99.9%) 3856492.669 ns/op [Average]
  (min, avg, max) = (129196025.000, 129999505.000, 131493812.500), stdev = 1001518.899
  CI (99.9%): [126143012.331, 133855997.669] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 16384, nKeys = 100000, nValues = 2)

# Run progress: 49.24% complete, ETA 00:31:58
# Fork: 1 of 1
# Warmup Iteration   1: 19433561600.000 ns/op
# Warmup Iteration   2: 19342829600.000 ns/op
# Warmup Iteration   3: 16282081600.000 ns/op
# Warmup Iteration   4: 15353902100.000 ns/op
# Warmup Iteration   5: 15375512900.000 ns/op
Iteration   1: 15291514300.000 ns/op
Iteration   2: 15275729000.000 ns/op
Iteration   3: 15288404600.000 ns/op
Iteration   4: 15263024900.000 ns/op
Iteration   5: 15279858000.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  15279706160.000 ±(99.9%) 43445790.103 ns/op [Average]
  (min, avg, max) = (15263024900.000, 15279706160.000, 15291514300.000), stdev = 11282733.722
  CI (99.9%): [15236260369.897, 15323151950.103] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGetAll = 16384, nKeys = 100000, nValues = 3)

# Run progress: 49.62% complete, ETA 00:34:14
# Fork: 1 of 1
# Warmup Iteration   1: 20895229400.000 ns/op
# Warmup Iteration   2: 20721247200.000 ns/op
# Warmup Iteration   3: 15863656000.000 ns/op
# Warmup Iteration   4: 15279670200.000 ns/op
# Warmup Iteration   5: 15043216800.000 ns/op
Iteration   1: 15080410000.000 ns/op
Iteration   2: 15028376400.000 ns/op
Iteration   3: 15001058200.000 ns/op
Iteration   4: 15001515200.000 ns/op
Iteration   5: 14973704400.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  15017012840.000 ±(99.9%) 155447289.874 ns/op [Average]
  (min, avg, max) = (14973704400.000, 15017012840.000, 15080410000.000), stdev = 40369167.536
  CI (99.9%): [14861565550.126, 15172460129.874] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 16, nKeys = 32, nValues = 2)

# Run progress: 50.00% complete, ETA 00:36:26
# Fork: 1 of 1
# Warmup Iteration   1: 3843.710 ns/op
# Warmup Iteration   2: 3661.249 ns/op
# Warmup Iteration   3: 3527.876 ns/op
# Warmup Iteration   4: 3405.194 ns/op
# Warmup Iteration   5: 3253.293 ns/op
Iteration   1: 3572.042 ns/op
Iteration   2: 3353.342 ns/op
Iteration   3: 3440.239 ns/op
Iteration   4: 3296.985 ns/op
Iteration   5: 3359.903 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  3404.502 ±(99.9%) 410.745 ns/op [Average]
  (min, avg, max) = (3296.985, 3404.502, 3572.042), stdev = 106.669
  CI (99.9%): [2993.757, 3815.247] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 16, nKeys = 32, nValues = 3)

# Run progress: 50.38% complete, ETA 00:36:04
# Fork: 1 of 1
# Warmup Iteration   1: 5384.093 ns/op
# Warmup Iteration   2: 5248.102 ns/op
# Warmup Iteration   3: 6169.845 ns/op
# Warmup Iteration   4: 6051.153 ns/op
# Warmup Iteration   5: 6186.212 ns/op
Iteration   1: 5921.347 ns/op
Iteration   2: 5919.997 ns/op
Iteration   3: 5922.968 ns/op
Iteration   4: 5998.316 ns/op
Iteration   5: 6216.386 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  5995.803 ±(99.9%) 491.836 ns/op [Average]
  (min, avg, max) = (5919.997, 5995.803, 6216.386), stdev = 127.728
  CI (99.9%): [5503.966, 6487.639] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 16, nKeys = 1000, nValues = 2)

# Run progress: 50.76% complete, ETA 00:35:41
# Fork: 1 of 1
# Warmup Iteration   1: 96050.452 ns/op
# Warmup Iteration   2: 88222.326 ns/op
# Warmup Iteration   3: 87416.970 ns/op
# Warmup Iteration   4: 86260.089 ns/op
# Warmup Iteration   5: 86716.276 ns/op
Iteration   1: 86020.990 ns/op
Iteration   2: 87080.718 ns/op
Iteration   3: 88231.751 ns/op
Iteration   4: 87666.484 ns/op
Iteration   5: 87188.641 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  87237.717 ±(99.9%) 3151.551 ns/op [Average]
  (min, avg, max) = (86020.990, 87237.717, 88231.751), stdev = 818.448
  CI (99.9%): [84086.165, 90389.268] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 16, nKeys = 1000, nValues = 3)

# Run progress: 51.14% complete, ETA 00:35:19
# Fork: 1 of 1
# Warmup Iteration   1: 127064.482 ns/op
# Warmup Iteration   2: 117273.967 ns/op
# Warmup Iteration   3: 119720.697 ns/op
# Warmup Iteration   4: 118885.094 ns/op
# Warmup Iteration   5: 120716.790 ns/op
Iteration   1: 119053.301 ns/op
Iteration   2: 118799.800 ns/op
Iteration   3: 118333.626 ns/op
Iteration   4: 117779.650 ns/op
Iteration   5: 116777.249 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  118148.725 ±(99.9%) 3494.079 ns/op [Average]
  (min, avg, max) = (116777.249, 118148.725, 119053.301), stdev = 907.401
  CI (99.9%): [114654.646, 121642.805] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 16, nKeys = 100000, nValues = 2)

# Run progress: 51.52% complete, ETA 00:34:57
# Fork: 1 of 1
# Warmup Iteration   1: 17052543.333 ns/op
# Warmup Iteration   2: 14219316.901 ns/op
# Warmup Iteration   3: 14209177.465 ns/op
# Warmup Iteration   4: 14037800.000 ns/op
# Warmup Iteration   5: 14418415.714 ns/op
Iteration   1: 14234856.338 ns/op
Iteration   2: 14048361.111 ns/op
Iteration   3: 14152873.239 ns/op
Iteration   4: 14282004.225 ns/op
Iteration   5: 14221030.986 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  14187825.180 ±(99.9%) 348988.772 ns/op [Average]
  (min, avg, max) = (14048361.111, 14187825.180, 14282004.225), stdev = 90631.276
  CI (99.9%): [13838836.408, 14536813.952] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 16, nKeys = 100000, nValues = 3)

# Run progress: 51.89% complete, ETA 00:34:35
# Fork: 1 of 1
# Warmup Iteration   1: 24817953.659 ns/op
# Warmup Iteration   2: 20395668.000 ns/op
# Warmup Iteration   3: 20210964.000 ns/op
# Warmup Iteration   4: 19999950.980 ns/op
# Warmup Iteration   5: 20011203.922 ns/op
Iteration   1: 19692976.923 ns/op
Iteration   2: 20054858.824 ns/op
Iteration   3: 20008954.902 ns/op
Iteration   4: 20347874.000 ns/op
Iteration   5: 20018590.196 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  20024650.969 ±(99.9%) 894138.289 ns/op [Average]
  (min, avg, max) = (19692976.923, 20024650.969, 20347874.000), stdev = 232204.874
  CI (99.9%): [19130512.680, 20918789.258] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 32, nKeys = 32, nValues = 2)

# Run progress: 52.27% complete, ETA 00:34:14
# Fork: 1 of 1
# Warmup Iteration   1: 6736.547 ns/op
# Warmup Iteration   2: 6163.997 ns/op
# Warmup Iteration   3: 7169.184 ns/op
# Warmup Iteration   4: 7093.722 ns/op
# Warmup Iteration   5: 6766.439 ns/op
Iteration   1: 7326.170 ns/op
Iteration   2: 6846.424 ns/op
Iteration   3: 7023.768 ns/op
Iteration   4: 6748.896 ns/op
Iteration   5: 6910.177 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  6971.087 ±(99.9%) 855.586 ns/op [Average]
  (min, avg, max) = (6748.896, 6971.087, 7326.170), stdev = 222.193
  CI (99.9%): [6115.501, 7826.673] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 32, nKeys = 32, nValues = 3)

# Run progress: 52.65% complete, ETA 00:33:52
# Fork: 1 of 1
# Warmup Iteration   1: 8786.937 ns/op
# Warmup Iteration   2: 8608.033 ns/op
# Warmup Iteration   3: 8308.789 ns/op
# Warmup Iteration   4: 8427.246 ns/op
# Warmup Iteration   5: 7992.261 ns/op
Iteration   1: 8194.842 ns/op
Iteration   2: 8290.626 ns/op
Iteration   3: 8060.098 ns/op
Iteration   4: 7968.747 ns/op
Iteration   5: 8171.067 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  8137.076 ±(99.9%) 480.676 ns/op [Average]
  (min, avg, max) = (7968.747, 8137.076, 8290.626), stdev = 124.830
  CI (99.9%): [7656.400, 8617.752] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 32, nKeys = 1000, nValues = 2)

# Run progress: 53.03% complete, ETA 00:33:31
# Fork: 1 of 1
# Warmup Iteration   1: 196567.059 ns/op
# Warmup Iteration   2: 178755.257 ns/op
# Warmup Iteration   3: 181610.594 ns/op
# Warmup Iteration   4: 179976.834 ns/op
# Warmup Iteration   5: 180535.276 ns/op
Iteration   1: 179558.304 ns/op
Iteration   2: 178276.174 ns/op
Iteration   3: 179380.942 ns/op
Iteration   4: 179244.026 ns/op
Iteration   5: 177136.927 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  178719.275 ±(99.9%) 3906.695 ns/op [Average]
  (min, avg, max) = (177136.927, 178719.275, 179558.304), stdev = 1014.556
  CI (99.9%): [174812.579, 182625.970] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 32, nKeys = 1000, nValues = 3)

# Run progress: 53.41% complete, ETA 00:33:10
# Fork: 1 of 1
# Warmup Iteration   1: 250654.100 ns/op
# Warmup Iteration   2: 230521.901 ns/op
# Warmup Iteration   3: 233605.286 ns/op
# Warmup Iteration   4: 232260.184 ns/op
# Warmup Iteration   5: 232995.976 ns/op
Iteration   1: 229502.871 ns/op
Iteration   2: 229395.332 ns/op
Iteration   3: 233217.381 ns/op
Iteration   4: 230225.896 ns/op
Iteration   5: 228837.767 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  230235.850 ±(99.9%) 6693.919 ns/op [Average]
  (min, avg, max) = (228837.767, 230235.850, 233217.381), stdev = 1738.389
  CI (99.9%): [223541.931, 236929.768] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 32, nKeys = 100000, nValues = 2)

# Run progress: 53.79% complete, ETA 00:32:49
# Fork: 1 of 1
# Warmup Iteration   1: 32990461.290 ns/op
# Warmup Iteration   2: 27605416.216 ns/op
# Warmup Iteration   3: 27837751.351 ns/op
# Warmup Iteration   4: 27457840.541 ns/op
# Warmup Iteration   5: 28229016.667 ns/op
Iteration   1: 28354072.222 ns/op
Iteration   2: 27546824.324 ns/op
Iteration   3: 27498518.919 ns/op
Iteration   4: 28188847.222 ns/op
Iteration   5: 27896686.486 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  27896989.835 ±(99.9%) 1460582.402 ns/op [Average]
  (min, avg, max) = (27498518.919, 27896989.835, 28354072.222), stdev = 379308.612
  CI (99.9%): [26436407.433, 29357572.237] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 32, nKeys = 100000, nValues = 3)

# Run progress: 54.17% complete, ETA 00:32:28
# Fork: 1 of 1
# Warmup Iteration   1: 49563423.810 ns/op
# Warmup Iteration   2: 41022204.000 ns/op
# Warmup Iteration   3: 40669504.000 ns/op
# Warmup Iteration   4: 40536796.000 ns/op
# Warmup Iteration   5: 40316276.000 ns/op
Iteration   1: 39729826.923 ns/op
Iteration   2: 40558304.000 ns/op
Iteration   3: 40448788.000 ns/op
Iteration   4: 40144173.077 ns/op
Iteration   5: 40350808.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  40246380.000 ±(99.9%) 1257287.022 ns/op [Average]
  (min, avg, max) = (39729826.923, 40246380.000, 40558304.000), stdev = 326513.447
  CI (99.9%): [38989092.978, 41503667.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 64, nKeys = 32, nValues = 2)

# Run progress: 54.55% complete, ETA 00:32:07
# Fork: 1 of 1
# Warmup Iteration   1: 14412.806 ns/op
# Warmup Iteration   2: 13680.762 ns/op
# Warmup Iteration   3: 12474.528 ns/op
# Warmup Iteration   4: 13191.743 ns/op
# Warmup Iteration   5: 13233.808 ns/op
Iteration   1: 13710.944 ns/op
Iteration   2: 13055.031 ns/op
Iteration   3: 12507.104 ns/op
Iteration   4: 12917.124 ns/op
Iteration   5: 12472.006 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  12932.442 ±(99.9%) 1938.984 ns/op [Average]
  (min, avg, max) = (12472.006, 12932.442, 13710.944), stdev = 503.548
  CI (99.9%): [10993.458, 14871.426] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 64, nKeys = 32, nValues = 3)

# Run progress: 54.92% complete, ETA 00:31:47
# Fork: 1 of 1
# Warmup Iteration   1: 13935.121 ns/op
# Warmup Iteration   2: 13283.604 ns/op
# Warmup Iteration   3: 15237.833 ns/op
# Warmup Iteration   4: 15986.761 ns/op
# Warmup Iteration   5: 15279.032 ns/op
Iteration   1: 15644.965 ns/op
Iteration   2: 16196.341 ns/op
Iteration   3: 15210.785 ns/op
Iteration   4: 15089.625 ns/op
Iteration   5: 15409.698 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  15510.283 ±(99.9%) 1684.612 ns/op [Average]
  (min, avg, max) = (15089.625, 15510.283, 16196.341), stdev = 437.488
  CI (99.9%): [13825.671, 17194.895] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 64, nKeys = 1000, nValues = 2)

# Run progress: 55.30% complete, ETA 00:31:26
# Fork: 1 of 1
# Warmup Iteration   1: 368206.373 ns/op
# Warmup Iteration   2: 346867.082 ns/op
# Warmup Iteration   3: 352986.944 ns/op
# Warmup Iteration   4: 351728.761 ns/op
# Warmup Iteration   5: 343248.279 ns/op
Iteration   1: 349461.967 ns/op
Iteration   2: 347089.873 ns/op
Iteration   3: 349068.674 ns/op
Iteration   4: 347440.262 ns/op
Iteration   5: 352069.944 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  349026.144 ±(99.9%) 7633.759 ns/op [Average]
  (min, avg, max) = (347089.873, 349026.144, 352069.944), stdev = 1982.463
  CI (99.9%): [341392.385, 356659.903] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 64, nKeys = 1000, nValues = 3)

# Run progress: 55.68% complete, ETA 00:31:06
# Fork: 1 of 1
# Warmup Iteration   1: 525699.377 ns/op
# Warmup Iteration   2: 476395.433 ns/op
# Warmup Iteration   3: 484740.979 ns/op
# Warmup Iteration   4: 475215.678 ns/op
# Warmup Iteration   5: 477256.042 ns/op
Iteration   1: 474511.734 ns/op
Iteration   2: 480466.874 ns/op
Iteration   3: 473903.742 ns/op
Iteration   4: 473892.369 ns/op
Iteration   5: 470811.899 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  474717.324 ±(99.9%) 13572.413 ns/op [Average]
  (min, avg, max) = (470811.899, 474717.324, 480466.874), stdev = 3524.713
  CI (99.9%): [461144.910, 488289.737] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 64, nKeys = 100000, nValues = 2)

# Run progress: 56.06% complete, ETA 00:30:45
# Fork: 1 of 1
# Warmup Iteration   1: 68663553.333 ns/op
# Warmup Iteration   2: 56705927.778 ns/op
# Warmup Iteration   3: 56088094.737 ns/op
# Warmup Iteration   4: 56680161.111 ns/op
# Warmup Iteration   5: 56541788.889 ns/op
Iteration   1: 56183127.778 ns/op
Iteration   2: 56246955.556 ns/op
Iteration   3: 56116878.947 ns/op
Iteration   4: 56175611.111 ns/op
Iteration   5: 55052405.263 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  55954995.731 ±(99.9%) 1950980.764 ns/op [Average]
  (min, avg, max) = (55052405.263, 55954995.731, 56246955.556), stdev = 506663.509
  CI (99.9%): [54004014.967, 57905976.495] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 64, nKeys = 100000, nValues = 3)

# Run progress: 56.44% complete, ETA 00:30:26
# Fork: 1 of 1
# Warmup Iteration   1: 99845190.909 ns/op
# Warmup Iteration   2: 82717500.000 ns/op
# Warmup Iteration   3: 81891476.923 ns/op
# Warmup Iteration   4: 81962953.846 ns/op
# Warmup Iteration   5: 81092400.000 ns/op
Iteration   1: 82039376.923 ns/op
Iteration   2: 80335484.615 ns/op
Iteration   3: 80919530.769 ns/op
Iteration   4: 81213769.231 ns/op
Iteration   5: 81376876.923 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  81177007.692 ±(99.9%) 2404291.056 ns/op [Average]
  (min, avg, max) = (80335484.615, 81177007.692, 82039376.923), stdev = 624386.752
  CI (99.9%): [78772716.636, 83581298.749] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 128, nKeys = 32, nValues = 2)

# Run progress: 56.82% complete, ETA 00:30:06
# Fork: 1 of 1
# Warmup Iteration   1: 26456.280 ns/op
# Warmup Iteration   2: 24060.952 ns/op
# Warmup Iteration   3: 22829.086 ns/op
# Warmup Iteration   4: 31725.559 ns/op
# Warmup Iteration   5: 29847.557 ns/op
Iteration   1: 30021.887 ns/op
Iteration   2: 31022.800 ns/op
Iteration   3: 29688.093 ns/op
Iteration   4: 29365.310 ns/op
Iteration   5: 30328.192 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  30085.256 ±(99.9%) 2449.086 ns/op [Average]
  (min, avg, max) = (29365.310, 30085.256, 31022.800), stdev = 636.020
  CI (99.9%): [27636.171, 32534.342] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 128, nKeys = 32, nValues = 3)

# Run progress: 57.20% complete, ETA 00:29:46
# Fork: 1 of 1
# Warmup Iteration   1: 36927.439 ns/op
# Warmup Iteration   2: 34453.829 ns/op
# Warmup Iteration   3: 34158.370 ns/op
# Warmup Iteration   4: 33614.972 ns/op
# Warmup Iteration   5: 37140.222 ns/op
Iteration   1: 37324.230 ns/op
Iteration   2: 37434.881 ns/op
Iteration   3: 37100.664 ns/op
Iteration   4: 38217.483 ns/op
Iteration   5: 36356.076 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  37286.667 ±(99.9%) 2576.188 ns/op [Average]
  (min, avg, max) = (36356.076, 37286.667, 38217.483), stdev = 669.028
  CI (99.9%): [34710.478, 39862.855] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 128, nKeys = 1000, nValues = 2)

# Run progress: 57.58% complete, ETA 00:29:26
# Fork: 1 of 1
# Warmup Iteration   1: 814426.839 ns/op
# Warmup Iteration   2: 749768.563 ns/op
# Warmup Iteration   3: 753914.820 ns/op
# Warmup Iteration   4: 741362.125 ns/op
# Warmup Iteration   5: 736614.725 ns/op
Iteration   1: 749700.667 ns/op
Iteration   2: 740921.114 ns/op
Iteration   3: 743918.102 ns/op
Iteration   4: 748956.815 ns/op
Iteration   5: 745251.299 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  745749.599 ±(99.9%) 13991.954 ns/op [Average]
  (min, avg, max) = (740921.114, 745749.599, 749700.667), stdev = 3633.666
  CI (99.9%): [731757.645, 759741.554] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 128, nKeys = 1000, nValues = 3)

# Run progress: 57.95% complete, ETA 00:29:07
# Fork: 1 of 1
# Warmup Iteration   1: 987470.374 ns/op
# Warmup Iteration   2: 926919.561 ns/op
# Warmup Iteration   3: 914062.636 ns/op
# Warmup Iteration   4: 937412.384 ns/op
# Warmup Iteration   5: 925619.689 ns/op
Iteration   1: 915127.149 ns/op
Iteration   2: 904241.869 ns/op
Iteration   3: 914086.504 ns/op
Iteration   4: 908559.946 ns/op
Iteration   5: 910398.826 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  910482.859 ±(99.9%) 16917.687 ns/op [Average]
  (min, avg, max) = (904241.869, 910482.859, 915127.149), stdev = 4393.470
  CI (99.9%): [893565.172, 927400.546] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 128, nKeys = 100000, nValues = 2)

# Run progress: 58.33% complete, ETA 00:28:47
# Fork: 1 of 1
# Warmup Iteration   1: 145152957.143 ns/op
# Warmup Iteration   2: 113187677.778 ns/op
# Warmup Iteration   3: 111368320.000 ns/op
# Warmup Iteration   4: 113854100.000 ns/op
# Warmup Iteration   5: 111819360.000 ns/op
Iteration   1: 111230150.000 ns/op
Iteration   2: 110308610.000 ns/op
Iteration   3: 111339870.000 ns/op
Iteration   4: 110446740.000 ns/op
Iteration   5: 110231900.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  110711454.000 ±(99.9%) 2043274.672 ns/op [Average]
  (min, avg, max) = (110231900.000, 110711454.000, 111339870.000), stdev = 530631.944
  CI (99.9%): [108668179.328, 112754728.672] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 128, nKeys = 100000, nValues = 3)

# Run progress: 58.71% complete, ETA 00:28:28
# Fork: 1 of 1
# Warmup Iteration   1: 233271380.000 ns/op
# Warmup Iteration   2: 207854440.000 ns/op
# Warmup Iteration   3: 159175885.714 ns/op
# Warmup Iteration   4: 158777714.286 ns/op
# Warmup Iteration   5: 156162542.857 ns/op
Iteration   1: 160238042.857 ns/op
Iteration   2: 158214400.000 ns/op
Iteration   3: 159125285.714 ns/op
Iteration   4: 158851257.143 ns/op
Iteration   5: 159293742.857 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  159144545.714 ±(99.9%) 2835886.171 ns/op [Average]
  (min, avg, max) = (158214400.000, 159144545.714, 160238042.857), stdev = 736470.633
  CI (99.9%): [156308659.543, 161980431.885] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 256, nKeys = 32, nValues = 2)

# Run progress: 59.09% complete, ETA 00:28:10
# Fork: 1 of 1
# Warmup Iteration   1: 61495.839 ns/op
# Warmup Iteration   2: 57018.629 ns/op
# Warmup Iteration   3: 51891.987 ns/op
# Warmup Iteration   4: 53825.631 ns/op
# Warmup Iteration   5: 52550.402 ns/op
Iteration   1: 51193.912 ns/op
Iteration   2: 58905.538 ns/op
Iteration   3: 69585.934 ns/op
Iteration   4: 71192.889 ns/op
Iteration   5: 71390.515 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  64453.758 ±(99.9%) 34788.174 ns/op [Average]
  (min, avg, max) = (51193.912, 64453.758, 71390.515), stdev = 9034.378
  CI (99.9%): [29665.584, 99241.932] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 256, nKeys = 32, nValues = 3)

# Run progress: 59.47% complete, ETA 00:27:51
# Fork: 1 of 1
# Warmup Iteration   1: 64511.324 ns/op
# Warmup Iteration   2: 60582.020 ns/op
# Warmup Iteration   3: 57681.440 ns/op
# Warmup Iteration   4: 59051.709 ns/op
# Warmup Iteration   5: 58894.774 ns/op
Iteration   1: 57951.795 ns/op
Iteration   2: 63152.546 ns/op
Iteration   3: 80881.061 ns/op
Iteration   4: 77427.663 ns/op
Iteration   5: 76016.917 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  71085.997 ±(99.9%) 38309.596 ns/op [Average]
  (min, avg, max) = (57951.795, 71085.997, 80881.061), stdev = 9948.880
  CI (99.9%): [32776.400, 109395.593] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 256, nKeys = 1000, nValues = 2)

# Run progress: 59.85% complete, ETA 00:27:32
# Fork: 1 of 1
# Warmup Iteration   1: 1550302.137 ns/op
# Warmup Iteration   2: 1428940.825 ns/op
# Warmup Iteration   3: 1452729.598 ns/op
# Warmup Iteration   4: 1425637.712 ns/op
# Warmup Iteration   5: 1420660.112 ns/op
Iteration   1: 1453065.079 ns/op
Iteration   2: 1430151.140 ns/op
Iteration   3: 1439871.960 ns/op
Iteration   4: 1432840.825 ns/op
Iteration   5: 1432098.151 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  1437605.431 ±(99.9%) 36159.984 ns/op [Average]
  (min, avg, max) = (1430151.140, 1437605.431, 1453065.079), stdev = 9390.633
  CI (99.9%): [1401445.447, 1473765.415] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 256, nKeys = 1000, nValues = 3)

# Run progress: 60.23% complete, ETA 00:27:13
# Fork: 1 of 1
# Warmup Iteration   1: 2098004.555 ns/op
# Warmup Iteration   2: 1897544.090 ns/op
# Warmup Iteration   3: 1913144.847 ns/op
# Warmup Iteration   4: 1933630.725 ns/op
# Warmup Iteration   5: 1902840.000 ns/op
Iteration   1: 1881015.169 ns/op
Iteration   2: 1885998.127 ns/op
Iteration   3: 1912403.977 ns/op
Iteration   4: 1895967.917 ns/op
Iteration   5: 1897977.444 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  1894672.527 ±(99.9%) 46717.273 ns/op [Average]
  (min, avg, max) = (1881015.169, 1894672.527, 1912403.977), stdev = 12132.328
  CI (99.9%): [1847955.253, 1941389.800] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 256, nKeys = 100000, nValues = 2)

# Run progress: 60.61% complete, ETA 00:26:54
# Fork: 1 of 1
# Warmup Iteration   1: 322778100.000 ns/op
# Warmup Iteration   2: 307476275.000 ns/op
# Warmup Iteration   3: 242994760.000 ns/op
# Warmup Iteration   4: 224699540.000 ns/op
# Warmup Iteration   5: 225957700.000 ns/op
Iteration   1: 222704680.000 ns/op
Iteration   2: 221295540.000 ns/op
Iteration   3: 222576360.000 ns/op
Iteration   4: 219880460.000 ns/op
Iteration   5: 220986340.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  221488676.000 ±(99.9%) 4530738.682 ns/op [Average]
  (min, avg, max) = (219880460.000, 221488676.000, 222704680.000), stdev = 1176618.448
  CI (99.9%): [216957937.318, 226019414.682] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 256, nKeys = 100000, nValues = 3)

# Run progress: 60.98% complete, ETA 00:26:36
# Fork: 1 of 1
# Warmup Iteration   1: 507860100.000 ns/op
# Warmup Iteration   2: 409247533.333 ns/op
# Warmup Iteration   3: 439463100.000 ns/op
# Warmup Iteration   4: 364891933.333 ns/op
# Warmup Iteration   5: 323038950.000 ns/op
Iteration   1: 328361650.000 ns/op
Iteration   2: 322184750.000 ns/op
Iteration   3: 326091700.000 ns/op
Iteration   4: 325333650.000 ns/op
Iteration   5: 325705750.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  325535500.000 ±(99.9%) 8522401.587 ns/op [Average]
  (min, avg, max) = (322184750.000, 325535500.000, 328361650.000), stdev = 2213240.628
  CI (99.9%): [317013098.413, 334057901.587] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 512, nKeys = 32, nValues = 2)

# Run progress: 61.36% complete, ETA 00:26:19
# Fork: 1 of 1
# Warmup Iteration   1: 118913.191 ns/op
# Warmup Iteration   2: 111011.811 ns/op
# Warmup Iteration   3: 98881.159 ns/op
# Warmup Iteration   4: 104116.359 ns/op
# Warmup Iteration   5: 101611.554 ns/op
Iteration   1: 98968.394 ns/op
Iteration   2: 105312.574 ns/op
Iteration   3: 98632.985 ns/op
Iteration   4: 101067.848 ns/op
Iteration   5: 98132.539 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  100422.868 ±(99.9%) 11372.447 ns/op [Average]
  (min, avg, max) = (98132.539, 100422.868, 105312.574), stdev = 2953.388
  CI (99.9%): [89050.422, 111795.315] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 512, nKeys = 32, nValues = 3)

# Run progress: 61.74% complete, ETA 00:26:00
# Fork: 1 of 1
# Warmup Iteration   1: 151124.367 ns/op
# Warmup Iteration   2: 138162.182 ns/op
# Warmup Iteration   3: 140870.314 ns/op
# Warmup Iteration   4: 133962.620 ns/op
# Warmup Iteration   5: 135589.798 ns/op
Iteration   1: 134356.164 ns/op
Iteration   2: 131881.218 ns/op
Iteration   3: 128996.746 ns/op
Iteration   4: 139277.241 ns/op
Iteration   5: 131098.279 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  133121.930 ±(99.9%) 15167.684 ns/op [Average]
  (min, avg, max) = (128996.746, 133121.930, 139277.241), stdev = 3938.999
  CI (99.9%): [117954.246, 148289.614] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 512, nKeys = 1000, nValues = 2)

# Run progress: 62.12% complete, ETA 00:25:42
# Fork: 1 of 1
# Warmup Iteration   1: 3091006.383 ns/op
# Warmup Iteration   2: 2795425.895 ns/op
# Warmup Iteration   3: 2822651.541 ns/op
# Warmup Iteration   4: 2819562.011 ns/op
# Warmup Iteration   5: 2798356.233 ns/op
Iteration   1: 2794945.152 ns/op
Iteration   2: 2763717.857 ns/op
Iteration   3: 2836100.000 ns/op
Iteration   4: 2803368.245 ns/op
Iteration   5: 2831116.807 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  2805849.612 ±(99.9%) 113147.132 ns/op [Average]
  (min, avg, max) = (2763717.857, 2805849.612, 2836100.000), stdev = 29383.951
  CI (99.9%): [2692702.480, 2918996.745] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 512, nKeys = 1000, nValues = 3)

# Run progress: 62.50% complete, ETA 00:25:23
# Fork: 1 of 1
# Warmup Iteration   1: 4008219.920 ns/op
# Warmup Iteration   2: 3671132.601 ns/op
# Warmup Iteration   3: 3659234.420 ns/op
# Warmup Iteration   4: 3681614.182 ns/op
# Warmup Iteration   5: 3668417.153 ns/op
Iteration   1: 3592418.929 ns/op
Iteration   2: 3587140.426 ns/op
Iteration   3: 3692939.194 ns/op
Iteration   4: 3649393.841 ns/op
Iteration   5: 3583410.993 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  3621060.676 ±(99.9%) 186246.628 ns/op [Average]
  (min, avg, max) = (3583410.993, 3621060.676, 3692939.194), stdev = 48367.658
  CI (99.9%): [3434814.048, 3807307.304] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 512, nKeys = 100000, nValues = 2)

# Run progress: 62.88% complete, ETA 00:25:05
# Fork: 1 of 1
# Warmup Iteration   1: 687247500.000 ns/op
# Warmup Iteration   2: 548456200.000 ns/op
# Warmup Iteration   3: 616482000.000 ns/op
# Warmup Iteration   4: 616604150.000 ns/op
# Warmup Iteration   5: 528181100.000 ns/op
Iteration   1: 447263933.333 ns/op
Iteration   2: 458197000.000 ns/op
Iteration   3: 462478033.333 ns/op
Iteration   4: 452286933.333 ns/op
Iteration   5: 459828733.333 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  456010926.667 ±(99.9%) 23702273.584 ns/op [Average]
  (min, avg, max) = (447263933.333, 456010926.667, 462478033.333), stdev = 6155405.180
  CI (99.9%): [432308653.082, 479713200.251] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 512, nKeys = 100000, nValues = 3)

# Run progress: 63.26% complete, ETA 00:24:49
# Fork: 1 of 1
# Warmup Iteration   1: 921928600.000 ns/op
# Warmup Iteration   2: 773675750.000 ns/op
# Warmup Iteration   3: 859726750.000 ns/op
# Warmup Iteration   4: 862010150.000 ns/op
# Warmup Iteration   5: 754353650.000 ns/op
Iteration   1: 651625650.000 ns/op
Iteration   2: 649075550.000 ns/op
Iteration   3: 644058450.000 ns/op
Iteration   4: 641772650.000 ns/op
Iteration   5: 649657550.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  647237970.000 ±(99.9%) 15930439.417 ns/op [Average]
  (min, avg, max) = (641772650.000, 647237970.000, 651625650.000), stdev = 4137084.527
  CI (99.9%): [631307530.583, 663168409.417] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 1024, nKeys = 32, nValues = 2)

# Run progress: 63.64% complete, ETA 00:24:33
# Fork: 1 of 1
# Warmup Iteration   1: 206030.436 ns/op
# Warmup Iteration   2: 189452.958 ns/op
# Warmup Iteration   3: 183259.809 ns/op
# Warmup Iteration   4: 176453.568 ns/op
# Warmup Iteration   5: 174434.357 ns/op
Iteration   1: 176432.869 ns/op
Iteration   2: 176830.310 ns/op
Iteration   3: 168439.151 ns/op
Iteration   4: 177633.322 ns/op
Iteration   5: 169316.544 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  173730.439 ±(99.9%) 17180.197 ns/op [Average]
  (min, avg, max) = (168439.151, 173730.439, 177633.322), stdev = 4461.643
  CI (99.9%): [156550.242, 190910.636] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 1024, nKeys = 32, nValues = 3)

# Run progress: 64.02% complete, ETA 00:24:15
# Fork: 1 of 1
# Warmup Iteration   1: 241921.490 ns/op
# Warmup Iteration   2: 227212.192 ns/op
# Warmup Iteration   3: 207739.027 ns/op
# Warmup Iteration   4: 221217.457 ns/op
# Warmup Iteration   5: 213912.423 ns/op
Iteration   1: 201655.985 ns/op
Iteration   2: 222528.935 ns/op
Iteration   3: 204342.915 ns/op
Iteration   4: 206372.987 ns/op
Iteration   5: 205929.182 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  208166.001 ±(99.9%) 31724.518 ns/op [Average]
  (min, avg, max) = (201655.985, 208166.001, 222528.935), stdev = 8238.757
  CI (99.9%): [176441.483, 239890.519] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 1024, nKeys = 1000, nValues = 2)

# Run progress: 64.39% complete, ETA 00:23:57
# Fork: 1 of 1
# Warmup Iteration   1: 5881882.558 ns/op
# Warmup Iteration   2: 5583748.352 ns/op
# Warmup Iteration   3: 5580092.222 ns/op
# Warmup Iteration   4: 5502641.848 ns/op
# Warmup Iteration   5: 5434712.903 ns/op
Iteration   1: 5532813.115 ns/op
Iteration   2: 5505829.508 ns/op
Iteration   3: 5599382.778 ns/op
Iteration   4: 5477392.391 ns/op
Iteration   5: 5525002.732 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  5528084.105 ±(99.9%) 174135.511 ns/op [Average]
  (min, avg, max) = (5477392.391, 5528084.105, 5599382.778), stdev = 45222.439
  CI (99.9%): [5353948.594, 5702219.616] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 1024, nKeys = 1000, nValues = 3)

# Run progress: 64.77% complete, ETA 00:23:39
# Fork: 1 of 1
# Warmup Iteration   1: 7977129.134 ns/op
# Warmup Iteration   2: 7294179.856 ns/op
# Warmup Iteration   3: 7552892.537 ns/op
# Warmup Iteration   4: 7428114.815 ns/op
# Warmup Iteration   5: 7346624.638 ns/op
Iteration   1: 7259839.568 ns/op
Iteration   2: 7433818.382 ns/op
Iteration   3: 7419564.444 ns/op
Iteration   4: 7338480.435 ns/op
Iteration   5: 7322596.377 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  7354859.841 ±(99.9%) 277401.450 ns/op [Average]
  (min, avg, max) = (7259839.568, 7354859.841, 7433818.382), stdev = 72040.276
  CI (99.9%): [7077458.391, 7632261.291] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 1024, nKeys = 100000, nValues = 2)

# Run progress: 65.15% complete, ETA 00:23:21
# Fork: 1 of 1
# Warmup Iteration   1: 1371779300.000 ns/op
# Warmup Iteration   2: 1209865100.000 ns/op
# Warmup Iteration   3: 1080571250.000 ns/op
# Warmup Iteration   4: 1228801400.000 ns/op
# Warmup Iteration   5: 1224062800.000 ns/op
Iteration   1: 1241236200.000 ns/op
Iteration   2: 1226572900.000 ns/op
Iteration   3: 1224819500.000 ns/op
Iteration   4: 893876600.000 ns/op
Iteration   5: 891090350.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  1095519110.000 ±(99.9%) 714130899.090 ns/op [Average]
  (min, avg, max) = (891090350.000, 1095519110.000, 1241236200.000), stdev = 185457526.674
  CI (99.9%): [381388210.910, 1809650009.090] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 1024, nKeys = 100000, nValues = 3)

# Run progress: 65.53% complete, ETA 00:23:06
# Fork: 1 of 1
# Warmup Iteration   1: 1860863300.000 ns/op
# Warmup Iteration   2: 1741890200.000 ns/op
# Warmup Iteration   3: 1361107400.000 ns/op
# Warmup Iteration   4: 1725455900.000 ns/op
# Warmup Iteration   5: 1720950600.000 ns/op
Iteration   1: 1722231800.000 ns/op
Iteration   2: 1708424600.000 ns/op
Iteration   3: 1738705400.000 ns/op
Iteration   4: 1720859200.000 ns/op
Iteration   5: 1269309600.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  1631906120.000 ±(99.9%) 781616172.004 ns/op [Average]
  (min, avg, max) = (1269309600.000, 1631906120.000, 1738705400.000), stdev = 202983237.741
  CI (99.9%): [850289947.996, 2413522292.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 2048, nKeys = 32, nValues = 2)

# Run progress: 65.91% complete, ETA 00:22:52
# Fork: 1 of 1
# Warmup Iteration   1: 385368.266 ns/op
# Warmup Iteration   2: 329179.600 ns/op
# Warmup Iteration   3: 321304.638 ns/op
# Warmup Iteration   4: 296293.715 ns/op
# Warmup Iteration   5: 316618.841 ns/op
Iteration   1: 307219.305 ns/op
Iteration   2: 290732.583 ns/op
Iteration   3: 307156.413 ns/op
Iteration   4: 295320.608 ns/op
Iteration   5: 331011.323 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  306288.046 ±(99.9%) 60121.824 ns/op [Average]
  (min, avg, max) = (290732.583, 306288.046, 331011.323), stdev = 15613.447
  CI (99.9%): [246166.223, 366409.870] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 2048, nKeys = 32, nValues = 3)

# Run progress: 66.29% complete, ETA 00:22:34
# Fork: 1 of 1
# Warmup Iteration   1: 485874.879 ns/op
# Warmup Iteration   2: 455896.358 ns/op
# Warmup Iteration   3: 434140.390 ns/op
# Warmup Iteration   4: 445721.824 ns/op
# Warmup Iteration   5: 421397.152 ns/op
Iteration   1: 417065.104 ns/op
Iteration   2: 450763.247 ns/op
Iteration   3: 410428.398 ns/op
Iteration   4: 408962.485 ns/op
Iteration   5: 415626.724 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  420569.191 ±(99.9%) 66303.207 ns/op [Average]
  (min, avg, max) = (408962.485, 420569.191, 450763.247), stdev = 17218.732
  CI (99.9%): [354265.985, 486872.398] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 2048, nKeys = 1000, nValues = 2)

# Run progress: 66.67% complete, ETA 00:22:16
# Fork: 1 of 1
# Warmup Iteration   1: 12247883.133 ns/op
# Warmup Iteration   2: 11944176.471 ns/op
# Warmup Iteration   3: 11927275.294 ns/op
# Warmup Iteration   4: 11828677.647 ns/op
# Warmup Iteration   5: 11915604.706 ns/op
Iteration   1: 11924305.882 ns/op
Iteration   2: 11747653.488 ns/op
Iteration   3: 11828776.744 ns/op
Iteration   4: 11990089.412 ns/op
Iteration   5: 11820588.372 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  11862282.780 ±(99.9%) 366228.188 ns/op [Average]
  (min, avg, max) = (11747653.488, 11862282.780, 11990089.412), stdev = 95108.297
  CI (99.9%): [11496054.592, 12228510.968] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 2048, nKeys = 1000, nValues = 3)

# Run progress: 67.05% complete, ETA 00:21:59
# Fork: 1 of 1
# Warmup Iteration   1: 16160668.254 ns/op
# Warmup Iteration   2: 15373495.455 ns/op
# Warmup Iteration   3: 15201287.879 ns/op
# Warmup Iteration   4: 15356728.788 ns/op
# Warmup Iteration   5: 15151635.821 ns/op
Iteration   1: 15045463.235 ns/op
Iteration   2: 15140564.179 ns/op
Iteration   3: 15365071.212 ns/op
Iteration   4: 15198018.182 ns/op
Iteration   5: 15000222.059 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  15149867.773 ±(99.9%) 551367.592 ns/op [Average]
  (min, avg, max) = (15000222.059, 15149867.773, 15365071.212), stdev = 143188.413
  CI (99.9%): [14598500.181, 15701235.366] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 2048, nKeys = 100000, nValues = 2)

# Run progress: 67.42% complete, ETA 00:21:42
# Fork: 1 of 1
# Warmup Iteration   1: 2196230500.000 ns/op
# Warmup Iteration   2: 1945082900.000 ns/op
# Warmup Iteration   3: 1805639400.000 ns/op
# Warmup Iteration   4: 1787191600.000 ns/op
# Warmup Iteration   5: 1772078300.000 ns/op
Iteration   1: 1773520300.000 ns/op
Iteration   2: 1787754700.000 ns/op
Iteration   3: 1779799200.000 ns/op
Iteration   4: 1767110800.000 ns/op
Iteration   5: 1793125400.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  1780262080.000 ±(99.9%) 40396282.031 ns/op [Average]
  (min, avg, max) = (1767110800.000, 1780262080.000, 1793125400.000), stdev = 10490786.160
  CI (99.9%): [1739865797.969, 1820658362.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 2048, nKeys = 100000, nValues = 3)

# Run progress: 67.80% complete, ETA 00:21:28
# Fork: 1 of 1
# Warmup Iteration   1: 3642979100.000 ns/op
# Warmup Iteration   2: 3412874900.000 ns/op
# Warmup Iteration   3: 2665497800.000 ns/op
# Warmup Iteration   4: 3420957100.000 ns/op
# Warmup Iteration   5: 3435508000.000 ns/op
Iteration   1: 3429724200.000 ns/op
Iteration   2: 3418782800.000 ns/op
Iteration   3: 3429288800.000 ns/op
Iteration   4: 3420340300.000 ns/op
Iteration   5: 2562669400.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  3252161100.000 ±(99.9%) 1484308004.309 ns/op [Average]
  (min, avg, max) = (2562669400.000, 3252161100.000, 3429724200.000), stdev = 385470075.097
  CI (99.9%): [1767853095.691, 4736469104.309] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 4096, nKeys = 32, nValues = 2)

# Run progress: 68.18% complete, ETA 00:21:21
# Fork: 1 of 1
# Warmup Iteration   1: 839581.260 ns/op
# Warmup Iteration   2: 792998.901 ns/op
# Warmup Iteration   3: 763942.663 ns/op
# Warmup Iteration   4: 745775.775 ns/op
# Warmup Iteration   5: 742134.240 ns/op
Iteration   1: 751986.996 ns/op
Iteration   2: 731261.176 ns/op
Iteration   3: 745843.542 ns/op
Iteration   4: 732326.996 ns/op
Iteration   5: 737312.221 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  739746.186 ±(99.9%) 34440.084 ns/op [Average]
  (min, avg, max) = (731261.176, 739746.186, 751986.996), stdev = 8943.980
  CI (99.9%): [705306.102, 774186.270] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 4096, nKeys = 32, nValues = 3)

# Run progress: 68.56% complete, ETA 00:21:04
# Fork: 1 of 1
# Warmup Iteration   1: 1010553.479 ns/op
# Warmup Iteration   2: 956233.873 ns/op
# Warmup Iteration   3: 922426.455 ns/op
# Warmup Iteration   4: 949184.962 ns/op
# Warmup Iteration   5: 896063.144 ns/op
Iteration   1: 892600.707 ns/op
Iteration   2: 897617.480 ns/op
Iteration   3: 912836.174 ns/op
Iteration   4: 908862.893 ns/op
Iteration   5: 876170.942 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  897617.639 ±(99.9%) 55906.986 ns/op [Average]
  (min, avg, max) = (876170.942, 897617.639, 912836.174), stdev = 14518.867
  CI (99.9%): [841710.654, 953524.625] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 4096, nKeys = 1000, nValues = 2)

# Run progress: 68.94% complete, ETA 00:20:47
# Fork: 1 of 1
# Warmup Iteration   1: 24438178.571 ns/op
# Warmup Iteration   2: 22767457.778 ns/op
# Warmup Iteration   3: 23015435.556 ns/op
# Warmup Iteration   4: 22460284.444 ns/op
# Warmup Iteration   5: 22358048.889 ns/op
Iteration   1: 22308150.000 ns/op
Iteration   2: 22179115.217 ns/op
Iteration   3: 22321956.522 ns/op
Iteration   4: 22458576.087 ns/op
Iteration   5: 22410853.333 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  22335730.232 ±(99.9%) 413891.526 ns/op [Average]
  (min, avg, max) = (22179115.217, 22335730.232, 22458576.087), stdev = 107486.315
  CI (99.9%): [21921838.706, 22749621.758] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 4096, nKeys = 1000, nValues = 3)

# Run progress: 69.32% complete, ETA 00:20:29
# Fork: 1 of 1
# Warmup Iteration   1: 32097371.875 ns/op
# Warmup Iteration   2: 29669582.857 ns/op
# Warmup Iteration   3: 29692282.857 ns/op
# Warmup Iteration   4: 29756302.941 ns/op
# Warmup Iteration   5: 29542691.429 ns/op
Iteration   1: 29417400.000 ns/op
Iteration   2: 29319725.714 ns/op
Iteration   3: 29619988.235 ns/op
Iteration   4: 29368240.000 ns/op
Iteration   5: 29254905.714 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  29396051.933 ±(99.9%) 534687.450 ns/op [Average]
  (min, avg, max) = (29254905.714, 29396051.933, 29619988.235), stdev = 138856.633
  CI (99.9%): [28861364.483, 29930739.382] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 4096, nKeys = 100000, nValues = 2)

# Run progress: 69.70% complete, ETA 00:20:12
# Fork: 1 of 1
# Warmup Iteration   1: 5097168400.000 ns/op
# Warmup Iteration   2: 4966448000.000 ns/op
# Warmup Iteration   3: 3817768600.000 ns/op
# Warmup Iteration   4: 4930834800.000 ns/op
# Warmup Iteration   5: 4924039000.000 ns/op
Iteration   1: 4925671900.000 ns/op
Iteration   2: 4907136600.000 ns/op
Iteration   3: 4937196800.000 ns/op
Iteration   4: 4925428600.000 ns/op
Iteration   5: 3593861200.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  4657859020.000 ±(99.9%) 2290710407.015 ns/op [Average]
  (min, avg, max) = (3593861200.000, 4657859020.000, 4937196800.000), stdev = 594890218.239
  CI (99.9%): [2367148612.985, 6948569427.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 4096, nKeys = 100000, nValues = 3)

# Run progress: 70.08% complete, ETA 00:20:11
# Fork: 1 of 1
# Warmup Iteration   1: 6999097800.000 ns/op
# Warmup Iteration   2: 6840427000.000 ns/op
# Warmup Iteration   3: 5283126700.000 ns/op
# Warmup Iteration   4: 6815891500.000 ns/op
# Warmup Iteration   5: 6834219000.000 ns/op
Iteration   1: 6803979800.000 ns/op
Iteration   2: 6814369700.000 ns/op
Iteration   3: 6806045300.000 ns/op
Iteration   4: 6845438100.000 ns/op
Iteration   5: 5261530100.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  6506272600.000 ±(99.9%) 2680165875.885 ns/op [Average]
  (min, avg, max) = (5261530100.000, 6506272600.000, 6845438100.000), stdev = 696030566.736
  CI (99.9%): [3826106724.115, 9186438475.885] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 8192, nKeys = 32, nValues = 2)

# Run progress: 70.45% complete, ETA 00:20:17
# Fork: 1 of 1
# Warmup Iteration   1: 1729779.452 ns/op
# Warmup Iteration   2: 1606694.155 ns/op
# Warmup Iteration   3: 1445612.678 ns/op
# Warmup Iteration   4: 1461590.711 ns/op
# Warmup Iteration   5: 1480573.490 ns/op
Iteration   1: 1524125.414 ns/op
Iteration   2: 1415153.287 ns/op
Iteration   3: 1462538.350 ns/op
Iteration   4: 1423259.072 ns/op
Iteration   5: 1410001.113 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  1447015.447 ±(99.9%) 184032.291 ns/op [Average]
  (min, avg, max) = (1410001.113, 1447015.447, 1524125.414), stdev = 47792.602
  CI (99.9%): [1262983.156, 1631047.738] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 8192, nKeys = 32, nValues = 3)

# Run progress: 70.83% complete, ETA 00:19:59
# Fork: 1 of 1
# Warmup Iteration   1: 2160681.897 ns/op
# Warmup Iteration   2: 2057793.061 ns/op
# Warmup Iteration   3: 1986888.363 ns/op
# Warmup Iteration   4: 2013679.681 ns/op
# Warmup Iteration   5: 1902213.884 ns/op
Iteration   1: 1885893.032 ns/op
Iteration   2: 1924010.305 ns/op
Iteration   3: 1965359.883 ns/op
Iteration   4: 1911386.011 ns/op
Iteration   5: 1868600.371 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  1911049.920 ±(99.9%) 143465.425 ns/op [Average]
  (min, avg, max) = (1868600.371, 1911049.920, 1965359.883), stdev = 37257.515
  CI (99.9%): [1767584.495, 2054515.346] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 8192, nKeys = 1000, nValues = 2)

# Run progress: 71.21% complete, ETA 00:19:41
# Fork: 1 of 1
# Warmup Iteration   1: 49870333.333 ns/op
# Warmup Iteration   2: 46144181.818 ns/op
# Warmup Iteration   3: 45878650.000 ns/op
# Warmup Iteration   4: 46184581.818 ns/op
# Warmup Iteration   5: 46698118.182 ns/op
Iteration   1: 45881827.273 ns/op
Iteration   2: 45889140.909 ns/op
Iteration   3: 46585054.545 ns/op
Iteration   4: 45755009.091 ns/op
Iteration   5: 45496431.818 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  45921492.727 ±(99.9%) 1553828.885 ns/op [Average]
  (min, avg, max) = (45496431.818, 45921492.727, 46585054.545), stdev = 403524.427
  CI (99.9%): [44367663.843, 47475321.612] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 8192, nKeys = 1000, nValues = 3)

# Run progress: 71.59% complete, ETA 00:19:24
# Fork: 1 of 1
# Warmup Iteration   1: 64876462.500 ns/op
# Warmup Iteration   2: 58895300.000 ns/op
# Warmup Iteration   3: 59745435.294 ns/op
# Warmup Iteration   4: 58727672.222 ns/op
# Warmup Iteration   5: 59213452.941 ns/op
Iteration   1: 58235094.444 ns/op
Iteration   2: 59346372.222 ns/op
Iteration   3: 57813372.222 ns/op
Iteration   4: 59378282.353 ns/op
Iteration   5: 58741950.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  58703014.248 ±(99.9%) 2641149.040 ns/op [Average]
  (min, avg, max) = (57813372.222, 58703014.248, 59378282.353), stdev = 685898.018
  CI (99.9%): [56061865.209, 61344163.288] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 8192, nKeys = 100000, nValues = 2)

# Run progress: 71.97% complete, ETA 00:19:06
# Fork: 1 of 1
# Warmup Iteration   1: 9889742000.000 ns/op
# Warmup Iteration   2: 9819526800.000 ns/op
# Warmup Iteration   3: 7326426000.000 ns/op
# Warmup Iteration   4: 9851300000.000 ns/op
# Warmup Iteration   5: 9822076800.000 ns/op
Iteration   1: 9878010700.000 ns/op
Iteration   2: 9842480700.000 ns/op
Iteration   3: 9861661900.000 ns/op
Iteration   4: 9858116600.000 ns/op
Iteration   5: 7322222200.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  9352498420.000 ±(99.9%) 4370593032.468 ns/op [Average]
  (min, avg, max) = (7322222200.000, 9352498420.000, 9878010700.000), stdev = 1135029131.119
  CI (99.9%): [4981905387.532, 13723091452.468] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 8192, nKeys = 100000, nValues = 3)

# Run progress: 72.35% complete, ETA 00:19:21
# Fork: 1 of 1
# Warmup Iteration   1: 13959009900.000 ns/op
# Warmup Iteration   2: 13763582300.000 ns/op
# Warmup Iteration   3: 10253541100.000 ns/op
# Warmup Iteration   4: 13838773100.000 ns/op
# Warmup Iteration   5: 13763378000.000 ns/op
Iteration   1: 13833208100.000 ns/op
Iteration   2: 13783830900.000 ns/op
Iteration   3: 13884289600.000 ns/op
Iteration   4: 13750157700.000 ns/op
Iteration   5: 10211852200.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  13092667700.000 ±(99.9%) 6204247468.891 ns/op [Average]
  (min, avg, max) = (10211852200.000, 13092667700.000, 13884289600.000), stdev = 1611223365.239
  CI (99.9%): [6888420231.109, 19296915168.891] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 16384, nKeys = 32, nValues = 2)

# Run progress: 72.73% complete, ETA 00:19:48
# Fork: 1 of 1
# Warmup Iteration   1: 2979423.235 ns/op
# Warmup Iteration   2: 2610446.649 ns/op
# Warmup Iteration   3: 2453375.854 ns/op
# Warmup Iteration   4: 2317319.222 ns/op
# Warmup Iteration   5: 2501431.762 ns/op
Iteration   1: 2399776.850 ns/op
Iteration   2: 2386709.882 ns/op
Iteration   3: 2279016.027 ns/op
Iteration   4: 2407409.569 ns/op
Iteration   5: 2517082.544 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  2397998.974 ±(99.9%) 325356.637 ns/op [Average]
  (min, avg, max) = (2279016.027, 2397998.974, 2517082.544), stdev = 84494.086
  CI (99.9%): [2072642.337, 2723355.612] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 16384, nKeys = 32, nValues = 3)

# Run progress: 73.11% complete, ETA 00:19:30
# Fork: 1 of 1
# Warmup Iteration   1: 4136815.510 ns/op
# Warmup Iteration   2: 3908518.147 ns/op
# Warmup Iteration   3: 3657735.740 ns/op
# Warmup Iteration   4: 3753263.433 ns/op
# Warmup Iteration   5: 3649127.536 ns/op
Iteration   1: 3605507.885 ns/op
Iteration   2: 3622407.168 ns/op
Iteration   3: 3783202.247 ns/op
Iteration   4: 3525165.385 ns/op
Iteration   5: 3509067.361 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  3609070.009 ±(99.9%) 419848.761 ns/op [Average]
  (min, avg, max) = (3509067.361, 3609070.009, 3783202.247), stdev = 109033.390
  CI (99.9%): [3189221.248, 4028918.770] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 16384, nKeys = 1000, nValues = 2)

# Run progress: 73.48% complete, ETA 00:19:11
# Fork: 1 of 1
# Warmup Iteration   1: 95534818.182 ns/op
# Warmup Iteration   2: 85657741.667 ns/op
# Warmup Iteration   3: 86504141.667 ns/op
# Warmup Iteration   4: 84770383.333 ns/op
# Warmup Iteration   5: 85681300.000 ns/op
Iteration   1: 86353650.000 ns/op
Iteration   2: 84689041.667 ns/op
Iteration   3: 85989841.667 ns/op
Iteration   4: 84380975.000 ns/op
Iteration   5: 86406125.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  85563926.667 ±(99.9%) 3692987.845 ns/op [Average]
  (min, avg, max) = (84380975.000, 85563926.667, 86406125.000), stdev = 959057.216
  CI (99.9%): [81870938.822, 89256914.511] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 16384, nKeys = 1000, nValues = 3)

# Run progress: 73.86% complete, ETA 00:18:53
# Fork: 1 of 1
# Warmup Iteration   1: 130308887.500 ns/op
# Warmup Iteration   2: 119685833.333 ns/op
# Warmup Iteration   3: 118783511.111 ns/op
# Warmup Iteration   4: 118049144.444 ns/op
# Warmup Iteration   5: 117778688.889 ns/op
Iteration   1: 118034300.000 ns/op
Iteration   2: 119980500.000 ns/op
Iteration   3: 118301700.000 ns/op
Iteration   4: 117807744.444 ns/op
Iteration   5: 117864233.333 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  118397695.556 ±(99.9%) 3486462.857 ns/op [Average]
  (min, avg, max) = (117807744.444, 118397695.556, 119980500.000), stdev = 905423.332
  CI (99.9%): [114911232.699, 121884158.412] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 16384, nKeys = 100000, nValues = 2)

# Run progress: 74.24% complete, ETA 00:18:34
# Fork: 1 of 1
# Warmup Iteration   1: 14629762500.000 ns/op
# Warmup Iteration   2: 14411310700.000 ns/op
# Warmup Iteration   3: 14128033000.000 ns/op
# Warmup Iteration   4: 14363010300.000 ns/op
# Warmup Iteration   5: 14409058100.000 ns/op
Iteration   1: 14394375600.000 ns/op
Iteration   2: 14361527200.000 ns/op
Iteration   3: 14347421700.000 ns/op
Iteration   4: 14366469100.000 ns/op
Iteration   5: 14391308900.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  14372220500.000 ±(99.9%) 77435798.823 ns/op [Average]
  (min, avg, max) = (14347421700.000, 14372220500.000, 14394375600.000), stdev = 20109831.046
  CI (99.9%): [14294784701.177, 14449656298.823] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGetAll = 16384, nKeys = 100000, nValues = 3)

# Run progress: 74.62% complete, ETA 00:19:01
# Fork: 1 of 1
# Warmup Iteration   1: 27347670800.000 ns/op
# Warmup Iteration   2: 27102167600.000 ns/op
# Warmup Iteration   3: 20213876300.000 ns/op
# Warmup Iteration   4: 27361683300.000 ns/op
# Warmup Iteration   5: 27298357400.000 ns/op
Iteration   1: 27314077900.000 ns/op
Iteration   2: 27285892100.000 ns/op
Iteration   3: 27284232600.000 ns/op
Iteration   4: 27329874700.000 ns/op
Iteration   5: 20357097700.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  25914235000.000 ±(99.9%) 11962387692.787 ns/op [Average]
  (min, avg, max) = (20357097700.000, 25914235000.000, 27329874700.000), stdev = 3106594095.627
  CI (99.9%): [13951847307.213, 37876622692.787] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 16, nKeys = 32, nValues = 2)

# Run progress: 75.00% complete, ETA 00:20:05
# Fork: 1 of 1
# Warmup Iteration   1: 4240.075 ns/op
# Warmup Iteration   2: 3915.757 ns/op
# Warmup Iteration   3: 3903.478 ns/op
# Warmup Iteration   4: 3937.416 ns/op
# Warmup Iteration   5: 3950.197 ns/op
Iteration   1: 3927.027 ns/op
Iteration   2: 3911.929 ns/op
Iteration   3: 3909.920 ns/op
Iteration   4: 3925.330 ns/op
Iteration   5: 3912.751 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  3917.391 ±(99.9%) 31.228 ns/op [Average]
  (min, avg, max) = (3909.920, 3917.391, 3927.027), stdev = 8.110
  CI (99.9%): [3886.163, 3948.619] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 16, nKeys = 32, nValues = 3)

# Run progress: 75.38% complete, ETA 00:19:44
# Fork: 1 of 1
# Warmup Iteration   1: 3827.523 ns/op
# Warmup Iteration   2: 3510.249 ns/op
# Warmup Iteration   3: 3488.972 ns/op
# Warmup Iteration   4: 3504.058 ns/op
# Warmup Iteration   5: 3464.582 ns/op
Iteration   1: 3520.939 ns/op
Iteration   2: 3470.425 ns/op
Iteration   3: 3464.960 ns/op
Iteration   4: 3501.006 ns/op
Iteration   5: 3499.149 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  3491.296 ±(99.9%) 89.560 ns/op [Average]
  (min, avg, max) = (3464.960, 3491.296, 3520.939), stdev = 23.258
  CI (99.9%): [3401.736, 3580.856] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 16, nKeys = 1000, nValues = 2)

# Run progress: 75.76% complete, ETA 00:19:24
# Fork: 1 of 1
# Warmup Iteration   1: 115906.415 ns/op
# Warmup Iteration   2: 104027.030 ns/op
# Warmup Iteration   3: 104404.807 ns/op
# Warmup Iteration   4: 103390.868 ns/op
# Warmup Iteration   5: 101476.631 ns/op
Iteration   1: 103393.333 ns/op
Iteration   2: 102860.326 ns/op
Iteration   3: 102664.651 ns/op
Iteration   4: 101836.253 ns/op
Iteration   5: 102777.582 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  102706.429 ±(99.9%) 2160.771 ns/op [Average]
  (min, avg, max) = (101836.253, 102706.429, 103393.333), stdev = 561.145
  CI (99.9%): [100545.658, 104867.199] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 16, nKeys = 1000, nValues = 3)

# Run progress: 76.14% complete, ETA 00:19:03
# Fork: 1 of 1
# Warmup Iteration   1: 141511.116 ns/op
# Warmup Iteration   2: 129182.977 ns/op
# Warmup Iteration   3: 128019.505 ns/op
# Warmup Iteration   4: 128950.051 ns/op
# Warmup Iteration   5: 130398.204 ns/op
Iteration   1: 129158.254 ns/op
Iteration   2: 125380.271 ns/op
Iteration   3: 128592.881 ns/op
Iteration   4: 130490.254 ns/op
Iteration   5: 130333.041 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  128790.940 ±(99.9%) 7955.227 ns/op [Average]
  (min, avg, max) = (125380.271, 128790.940, 130490.254), stdev = 2065.947
  CI (99.9%): [120835.713, 136746.167] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 16, nKeys = 100000, nValues = 2)

# Run progress: 76.52% complete, ETA 00:18:42
# Fork: 1 of 1
# Warmup Iteration   1: 53624657.895 ns/op
# Warmup Iteration   2: 44905930.435 ns/op
# Warmup Iteration   3: 44869113.043 ns/op
# Warmup Iteration   4: 44858604.348 ns/op
# Warmup Iteration   5: 45243717.391 ns/op
Iteration   1: 45041717.391 ns/op
Iteration   2: 44633934.783 ns/op
Iteration   3: 44907100.000 ns/op
Iteration   4: 44722534.783 ns/op
Iteration   5: 45339804.348 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  44929018.261 ±(99.9%) 1074799.496 ns/op [Average]
  (min, avg, max) = (44633934.783, 44929018.261, 45339804.348), stdev = 279122.016
  CI (99.9%): [43854218.765, 46003817.757] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 16, nKeys = 100000, nValues = 3)

# Run progress: 76.89% complete, ETA 00:18:22
# Fork: 1 of 1
# Warmup Iteration   1: 74665921.429 ns/op
# Warmup Iteration   2: 65375325.000 ns/op
# Warmup Iteration   3: 65618956.250 ns/op
# Warmup Iteration   4: 64352418.750 ns/op
# Warmup Iteration   5: 64969550.000 ns/op
Iteration   1: 64956762.500 ns/op
Iteration   2: 66008837.500 ns/op
Iteration   3: 64993575.000 ns/op
Iteration   4: 64695162.500 ns/op
Iteration   5: 65912737.500 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  65313415.000 ±(99.9%) 2322017.071 ns/op [Average]
  (min, avg, max) = (64695162.500, 65313415.000, 66008837.500), stdev = 603020.459
  CI (99.9%): [62991397.929, 67635432.071] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 32, nKeys = 32, nValues = 2)

# Run progress: 77.27% complete, ETA 00:18:02
# Fork: 1 of 1
# Warmup Iteration   1: 6606.310 ns/op
# Warmup Iteration   2: 6135.652 ns/op
# Warmup Iteration   3: 6121.648 ns/op
# Warmup Iteration   4: 6042.828 ns/op
# Warmup Iteration   5: 6069.445 ns/op
Iteration   1: 6043.441 ns/op
Iteration   2: 6054.423 ns/op
Iteration   3: 6036.398 ns/op
Iteration   4: 6063.757 ns/op
Iteration   5: 6059.709 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  6051.546 ±(99.9%) 43.869 ns/op [Average]
  (min, avg, max) = (6036.398, 6051.546, 6063.757), stdev = 11.393
  CI (99.9%): [6007.677, 6095.415] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 32, nKeys = 32, nValues = 3)

# Run progress: 77.65% complete, ETA 00:17:42
# Fork: 1 of 1
# Warmup Iteration   1: 8585.421 ns/op
# Warmup Iteration   2: 8086.362 ns/op
# Warmup Iteration   3: 8083.270 ns/op
# Warmup Iteration   4: 8014.487 ns/op
# Warmup Iteration   5: 8063.920 ns/op
Iteration   1: 8225.045 ns/op
Iteration   2: 8059.355 ns/op
Iteration   3: 8109.099 ns/op
Iteration   4: 8037.773 ns/op
Iteration   5: 8159.622 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  8118.179 ±(99.9%) 292.912 ns/op [Average]
  (min, avg, max) = (8037.773, 8118.179, 8225.045), stdev = 76.068
  CI (99.9%): [7825.266, 8411.091] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 32, nKeys = 1000, nValues = 2)

# Run progress: 78.03% complete, ETA 00:17:22
# Fork: 1 of 1
# Warmup Iteration   1: 227551.336 ns/op
# Warmup Iteration   2: 207944.689 ns/op
# Warmup Iteration   3: 209909.269 ns/op
# Warmup Iteration   4: 211422.608 ns/op
# Warmup Iteration   5: 207362.085 ns/op
Iteration   1: 206641.740 ns/op
Iteration   2: 208141.680 ns/op
Iteration   3: 209130.421 ns/op
Iteration   4: 205772.692 ns/op
Iteration   5: 208907.695 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  207718.846 ±(99.9%) 5623.908 ns/op [Average]
  (min, avg, max) = (205772.692, 207718.846, 209130.421), stdev = 1460.511
  CI (99.9%): [202094.938, 213342.754] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 32, nKeys = 1000, nValues = 3)

# Run progress: 78.41% complete, ETA 00:17:01
# Fork: 1 of 1
# Warmup Iteration   1: 285612.454 ns/op
# Warmup Iteration   2: 251300.954 ns/op
# Warmup Iteration   3: 252917.423 ns/op
# Warmup Iteration   4: 257861.850 ns/op
# Warmup Iteration   5: 256035.213 ns/op
Iteration   1: 252258.149 ns/op
Iteration   2: 245834.825 ns/op
Iteration   3: 250914.654 ns/op
Iteration   4: 251586.489 ns/op
Iteration   5: 252595.675 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  250637.958 ±(99.9%) 10633.641 ns/op [Average]
  (min, avg, max) = (245834.825, 250637.958, 252595.675), stdev = 2761.523
  CI (99.9%): [240004.317, 261271.599] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 32, nKeys = 100000, nValues = 2)

# Run progress: 78.79% complete, ETA 00:16:42
# Fork: 1 of 1
# Warmup Iteration   1: 107027150.000 ns/op
# Warmup Iteration   2: 92902900.000 ns/op
# Warmup Iteration   3: 91551163.636 ns/op
# Warmup Iteration   4: 92105518.182 ns/op
# Warmup Iteration   5: 93286072.727 ns/op
Iteration   1: 92039372.727 ns/op
Iteration   2: 91630890.909 ns/op
Iteration   3: 91757941.667 ns/op
Iteration   4: 92417500.000 ns/op
Iteration   5: 94050209.091 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  92379182.879 ±(99.9%) 3780279.959 ns/op [Average]
  (min, avg, max) = (91630890.909, 92379182.879, 94050209.091), stdev = 981726.701
  CI (99.9%): [88598902.920, 96159462.838] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 32, nKeys = 100000, nValues = 3)

# Run progress: 79.17% complete, ETA 00:16:22
# Fork: 1 of 1
# Warmup Iteration   1: 151449657.143 ns/op
# Warmup Iteration   2: 134696700.000 ns/op
# Warmup Iteration   3: 132907312.500 ns/op
# Warmup Iteration   4: 136871500.000 ns/op
# Warmup Iteration   5: 140729975.000 ns/op
Iteration   1: 137357562.500 ns/op
Iteration   2: 132143500.000 ns/op
Iteration   3: 132577225.000 ns/op
Iteration   4: 134383887.500 ns/op
Iteration   5: 132880737.500 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  133868582.500 ±(99.9%) 8181570.057 ns/op [Average]
  (min, avg, max) = (132143500.000, 133868582.500, 137357562.500), stdev = 2124727.762
  CI (99.9%): [125687012.443, 142050152.557] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 64, nKeys = 32, nValues = 2)

# Run progress: 79.55% complete, ETA 00:16:02
# Fork: 1 of 1
# Warmup Iteration   1: 15339.962 ns/op
# Warmup Iteration   2: 14436.902 ns/op
# Warmup Iteration   3: 14670.269 ns/op
# Warmup Iteration   4: 14608.192 ns/op
# Warmup Iteration   5: 14669.112 ns/op
Iteration   1: 14660.154 ns/op
Iteration   2: 14545.788 ns/op
Iteration   3: 14628.944 ns/op
Iteration   4: 14648.421 ns/op
Iteration   5: 14607.124 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  14618.086 ±(99.9%) 173.866 ns/op [Average]
  (min, avg, max) = (14545.788, 14618.086, 14660.154), stdev = 45.152
  CI (99.9%): [14444.220, 14791.952] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 64, nKeys = 32, nValues = 3)

# Run progress: 79.92% complete, ETA 00:15:43
# Fork: 1 of 1
# Warmup Iteration   1: 17186.308 ns/op
# Warmup Iteration   2: 15861.907 ns/op
# Warmup Iteration   3: 15701.786 ns/op
# Warmup Iteration   4: 16285.885 ns/op
# Warmup Iteration   5: 16368.880 ns/op
Iteration   1: 16256.029 ns/op
Iteration   2: 16273.246 ns/op
Iteration   3: 16236.446 ns/op
Iteration   4: 16170.898 ns/op
Iteration   5: 16323.857 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  16252.095 ±(99.9%) 214.830 ns/op [Average]
  (min, avg, max) = (16170.898, 16252.095, 16323.857), stdev = 55.791
  CI (99.9%): [16037.265, 16466.925] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 64, nKeys = 1000, nValues = 2)

# Run progress: 80.30% complete, ETA 00:15:23
# Fork: 1 of 1
# Warmup Iteration   1: 460398.128 ns/op
# Warmup Iteration   2: 414397.257 ns/op
# Warmup Iteration   3: 415655.253 ns/op
# Warmup Iteration   4: 419296.293 ns/op
# Warmup Iteration   5: 411308.422 ns/op
Iteration   1: 405706.653 ns/op
Iteration   2: 405098.756 ns/op
Iteration   3: 409579.588 ns/op
Iteration   4: 412996.267 ns/op
Iteration   5: 412249.898 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  409126.232 ±(99.9%) 13997.247 ns/op [Average]
  (min, avg, max) = (405098.756, 409126.232, 412996.267), stdev = 3635.041
  CI (99.9%): [395128.985, 423123.479] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 64, nKeys = 1000, nValues = 3)

# Run progress: 80.68% complete, ETA 00:15:03
# Fork: 1 of 1
# Warmup Iteration   1: 619373.153 ns/op
# Warmup Iteration   2: 565000.111 ns/op
# Warmup Iteration   3: 563415.367 ns/op
# Warmup Iteration   4: 562351.253 ns/op
# Warmup Iteration   5: 554827.197 ns/op
Iteration   1: 562960.034 ns/op
Iteration   2: 564034.377 ns/op
Iteration   3: 563657.031 ns/op
Iteration   4: 567426.009 ns/op
Iteration   5: 565995.747 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  564814.640 ±(99.9%) 7100.940 ns/op [Average]
  (min, avg, max) = (562960.034, 564814.640, 567426.009), stdev = 1844.092
  CI (99.9%): [557713.699, 571915.580] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 64, nKeys = 100000, nValues = 2)

# Run progress: 81.06% complete, ETA 00:14:44
# Fork: 1 of 1
# Warmup Iteration   1: 216116200.000 ns/op
# Warmup Iteration   2: 175319600.000 ns/op
# Warmup Iteration   3: 179635850.000 ns/op
# Warmup Iteration   4: 179818883.333 ns/op
# Warmup Iteration   5: 180168366.667 ns/op
Iteration   1: 180437616.667 ns/op
Iteration   2: 182719733.333 ns/op
Iteration   3: 177331250.000 ns/op
Iteration   4: 179997883.333 ns/op
Iteration   5: 179362366.667 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  179969770.000 ±(99.9%) 7484698.929 ns/op [Average]
  (min, avg, max) = (177331250.000, 179969770.000, 182719733.333), stdev = 1943752.543
  CI (99.9%): [172485071.071, 187454468.929] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 64, nKeys = 100000, nValues = 3)

# Run progress: 81.44% complete, ETA 00:14:25
# Fork: 1 of 1
# Warmup Iteration   1: 295438175.000 ns/op
# Warmup Iteration   2: 264732600.000 ns/op
# Warmup Iteration   3: 260237225.000 ns/op
# Warmup Iteration   4: 265985225.000 ns/op
# Warmup Iteration   5: 263615750.000 ns/op
Iteration   1: 263503075.000 ns/op
Iteration   2: 263673350.000 ns/op
Iteration   3: 268796350.000 ns/op
Iteration   4: 264311975.000 ns/op
Iteration   5: 261789750.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  264414900.000 ±(99.9%) 10092880.670 ns/op [Average]
  (min, avg, max) = (261789750.000, 264414900.000, 268796350.000), stdev = 2621089.059
  CI (99.9%): [254322019.330, 274507780.670] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 128, nKeys = 32, nValues = 2)

# Run progress: 81.82% complete, ETA 00:14:06
# Fork: 1 of 1
# Warmup Iteration   1: 29939.908 ns/op
# Warmup Iteration   2: 27173.446 ns/op
# Warmup Iteration   3: 27361.657 ns/op
# Warmup Iteration   4: 28296.734 ns/op
# Warmup Iteration   5: 28013.796 ns/op
Iteration   1: 28372.198 ns/op
Iteration   2: 28039.979 ns/op
Iteration   3: 28269.446 ns/op
Iteration   4: 28698.966 ns/op
Iteration   5: 28417.813 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  28359.680 ±(99.9%) 921.347 ns/op [Average]
  (min, avg, max) = (28039.979, 28359.680, 28698.966), stdev = 239.271
  CI (99.9%): [27438.334, 29281.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 128, nKeys = 32, nValues = 3)

# Run progress: 82.20% complete, ETA 00:13:47
# Fork: 1 of 1
# Warmup Iteration   1: 38772.193 ns/op
# Warmup Iteration   2: 34598.633 ns/op
# Warmup Iteration   3: 34883.988 ns/op
# Warmup Iteration   4: 34533.504 ns/op
# Warmup Iteration   5: 35666.438 ns/op
Iteration   1: 35918.905 ns/op
Iteration   2: 36171.854 ns/op
Iteration   3: 36022.832 ns/op
Iteration   4: 35769.539 ns/op
Iteration   5: 36087.487 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  35994.123 ±(99.9%) 600.333 ns/op [Average]
  (min, avg, max) = (35769.539, 35994.123, 36171.854), stdev = 155.905
  CI (99.9%): [35393.791, 36594.456] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 128, nKeys = 1000, nValues = 2)

# Run progress: 82.58% complete, ETA 00:13:27
# Fork: 1 of 1
# Warmup Iteration   1: 925035.478 ns/op
# Warmup Iteration   2: 849561.519 ns/op
# Warmup Iteration   3: 848753.580 ns/op
# Warmup Iteration   4: 851791.047 ns/op
# Warmup Iteration   5: 834083.292 ns/op
Iteration   1: 850722.643 ns/op
Iteration   2: 842713.277 ns/op
Iteration   3: 857642.252 ns/op
Iteration   4: 846738.280 ns/op
Iteration   5: 892906.738 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  858144.638 ±(99.9%) 77778.572 ns/op [Average]
  (min, avg, max) = (842713.277, 858144.638, 892906.738), stdev = 20198.848
  CI (99.9%): [780366.066, 935923.210] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 128, nKeys = 1000, nValues = 3)

# Run progress: 82.95% complete, ETA 00:13:08
# Fork: 1 of 1
# Warmup Iteration   1: 1151375.198 ns/op
# Warmup Iteration   2: 1026128.601 ns/op
# Warmup Iteration   3: 1032458.273 ns/op
# Warmup Iteration   4: 1026079.575 ns/op
# Warmup Iteration   5: 1022526.849 ns/op
Iteration   1: 1017963.370 ns/op
Iteration   2: 1015698.191 ns/op
Iteration   3: 1021051.721 ns/op
Iteration   4: 1020691.845 ns/op
Iteration   5: 1018392.012 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  1018759.428 ±(99.9%) 8420.663 ns/op [Average]
  (min, avg, max) = (1015698.191, 1018759.428, 1021051.721), stdev = 2186.819
  CI (99.9%): [1010338.765, 1027180.091] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 128, nKeys = 100000, nValues = 2)

# Run progress: 83.33% complete, ETA 00:12:49
# Fork: 1 of 1
# Warmup Iteration   1: 415173500.000 ns/op
# Warmup Iteration   2: 388134833.333 ns/op
# Warmup Iteration   3: 370968566.667 ns/op
# Warmup Iteration   4: 365828300.000 ns/op
# Warmup Iteration   5: 359299166.667 ns/op
Iteration   1: 364467333.333 ns/op
Iteration   2: 361041200.000 ns/op
Iteration   3: 362383366.667 ns/op
Iteration   4: 363678100.000 ns/op
Iteration   5: 361059733.333 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  362525946.667 ±(99.9%) 5925183.507 ns/op [Average]
  (min, avg, max) = (361041200.000, 362525946.667, 364467333.333), stdev = 1538751.341
  CI (99.9%): [356600763.160, 368451130.174] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 128, nKeys = 100000, nValues = 3)

# Run progress: 83.71% complete, ETA 00:12:31
# Fork: 1 of 1
# Warmup Iteration   1: 569714450.000 ns/op
# Warmup Iteration   2: 528366050.000 ns/op
# Warmup Iteration   3: 529427100.000 ns/op
# Warmup Iteration   4: 530348550.000 ns/op
# Warmup Iteration   5: 529315350.000 ns/op
Iteration   1: 521295200.000 ns/op
Iteration   2: 526191850.000 ns/op
Iteration   3: 524939550.000 ns/op
Iteration   4: 519706150.000 ns/op
Iteration   5: 525010500.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  523428650.000 ±(99.9%) 10690125.056 ns/op [Average]
  (min, avg, max) = (519706150.000, 523428650.000, 526191850.000), stdev = 2776191.529
  CI (99.9%): [512738524.944, 534118775.056] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 256, nKeys = 32, nValues = 2)

# Run progress: 84.09% complete, ETA 00:12:12
# Fork: 1 of 1
# Warmup Iteration   1: 54401.549 ns/op
# Warmup Iteration   2: 49732.408 ns/op
# Warmup Iteration   3: 50514.536 ns/op
# Warmup Iteration   4: 50206.979 ns/op
# Warmup Iteration   5: 49325.941 ns/op
Iteration   1: 50890.074 ns/op
Iteration   2: 50859.967 ns/op
Iteration   3: 49857.689 ns/op
Iteration   4: 50270.393 ns/op
Iteration   5: 50500.205 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  50475.666 ±(99.9%) 1660.757 ns/op [Average]
  (min, avg, max) = (49857.689, 50475.666, 50890.074), stdev = 431.293
  CI (99.9%): [48814.909, 52136.422] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 256, nKeys = 32, nValues = 3)

# Run progress: 84.47% complete, ETA 00:11:53
# Fork: 1 of 1
# Warmup Iteration   1: 68781.905 ns/op
# Warmup Iteration   2: 62630.881 ns/op
# Warmup Iteration   3: 62361.655 ns/op
# Warmup Iteration   4: 61529.646 ns/op
# Warmup Iteration   5: 61859.220 ns/op
Iteration   1: 61936.847 ns/op
Iteration   2: 62481.615 ns/op
Iteration   3: 63719.202 ns/op
Iteration   4: 63240.202 ns/op
Iteration   5: 63998.577 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  63075.289 ±(99.9%) 3302.799 ns/op [Average]
  (min, avg, max) = (61936.847, 63075.289, 63998.577), stdev = 857.727
  CI (99.9%): [59772.489, 66378.088] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 256, nKeys = 1000, nValues = 2)

# Run progress: 84.85% complete, ETA 00:11:35
# Fork: 1 of 1
# Warmup Iteration   1: 2008288.224 ns/op
# Warmup Iteration   2: 1744942.857 ns/op
# Warmup Iteration   3: 1708401.695 ns/op
# Warmup Iteration   4: 1695515.008 ns/op
# Warmup Iteration   5: 1694569.140 ns/op
Iteration   1: 1684223.205 ns/op
Iteration   2: 1679656.385 ns/op
Iteration   3: 1682897.005 ns/op
Iteration   4: 1665903.448 ns/op
Iteration   5: 1687841.833 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  1680104.375 ±(99.9%) 32588.531 ns/op [Average]
  (min, avg, max) = (1665903.448, 1680104.375, 1687841.833), stdev = 8463.138
  CI (99.9%): [1647515.844, 1712692.906] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 256, nKeys = 1000, nValues = 3)

# Run progress: 85.23% complete, ETA 00:11:16
# Fork: 1 of 1
# Warmup Iteration   1: 2229055.507 ns/op
# Warmup Iteration   2: 2034652.200 ns/op
# Warmup Iteration   3: 2069366.189 ns/op
# Warmup Iteration   4: 2078513.843 ns/op
# Warmup Iteration   5: 2046604.684 ns/op
Iteration   1: 2068789.980 ns/op
Iteration   2: 2054692.653 ns/op
Iteration   3: 2051611.156 ns/op
Iteration   4: 2095110.187 ns/op
Iteration   5: 2046488.664 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  2063338.528 ±(99.9%) 75441.106 ns/op [Average]
  (min, avg, max) = (2046488.664, 2063338.528, 2095110.187), stdev = 19591.816
  CI (99.9%): [1987897.422, 2138779.634] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 256, nKeys = 100000, nValues = 2)

# Run progress: 85.61% complete, ETA 00:10:58
# Fork: 1 of 1
# Warmup Iteration   1: 758205050.000 ns/op
# Warmup Iteration   2: 713662900.000 ns/op
# Warmup Iteration   3: 723290300.000 ns/op
# Warmup Iteration   4: 728498850.000 ns/op
# Warmup Iteration   5: 724906300.000 ns/op
Iteration   1: 730355450.000 ns/op
Iteration   2: 730971500.000 ns/op
Iteration   3: 730805750.000 ns/op
Iteration   4: 719858500.000 ns/op
Iteration   5: 728263700.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  728050980.000 ±(99.9%) 18121642.862 ns/op [Average]
  (min, avg, max) = (719858500.000, 728050980.000, 730971500.000), stdev = 4706133.104
  CI (99.9%): [709929337.138, 746172622.862] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 256, nKeys = 100000, nValues = 3)

# Run progress: 85.98% complete, ETA 00:10:40
# Fork: 1 of 1
# Warmup Iteration   1: 1128698700.000 ns/op
# Warmup Iteration   2: 994063750.000 ns/op
# Warmup Iteration   3: 1019860000.000 ns/op
# Warmup Iteration   4: 998547100.000 ns/op
# Warmup Iteration   5: 996778850.000 ns/op
Iteration   1: 1002388900.000 ns/op
Iteration   2: 992757400.000 ns/op
Iteration   3: 1012882400.000 ns/op
Iteration   4: 994519700.000 ns/op
Iteration   5: 992961100.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  999101900.000 ±(99.9%) 33328942.111 ns/op [Average]
  (min, avg, max) = (992757400.000, 999101900.000, 1012882400.000), stdev = 8655420.426
  CI (99.9%): [965772957.889, 1032430842.111] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 512, nKeys = 32, nValues = 2)

# Run progress: 86.36% complete, ETA 00:10:23
# Fork: 1 of 1
# Warmup Iteration   1: 107729.839 ns/op
# Warmup Iteration   2: 99629.811 ns/op
# Warmup Iteration   3: 102726.984 ns/op
# Warmup Iteration   4: 100542.981 ns/op
# Warmup Iteration   5: 100714.109 ns/op
Iteration   1: 97313.228 ns/op
Iteration   2: 97360.761 ns/op
Iteration   3: 97947.490 ns/op
Iteration   4: 98262.276 ns/op
Iteration   5: 99784.912 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  98133.733 ±(99.9%) 3873.830 ns/op [Average]
  (min, avg, max) = (97313.228, 98133.733, 99784.912), stdev = 1006.021
  CI (99.9%): [94259.904, 102007.563] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 512, nKeys = 32, nValues = 3)

# Run progress: 86.74% complete, ETA 00:10:04
# Fork: 1 of 1
# Warmup Iteration   1: 149905.428 ns/op
# Warmup Iteration   2: 137430.833 ns/op
# Warmup Iteration   3: 136299.082 ns/op
# Warmup Iteration   4: 136305.462 ns/op
# Warmup Iteration   5: 136053.029 ns/op
Iteration   1: 136924.572 ns/op
Iteration   2: 135783.573 ns/op
Iteration   3: 136824.130 ns/op
Iteration   4: 138804.542 ns/op
Iteration   5: 138038.166 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  137274.997 ±(99.9%) 4503.919 ns/op [Average]
  (min, avg, max) = (135783.573, 137274.997, 138804.542), stdev = 1169.653
  CI (99.9%): [132771.078, 141778.915] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 512, nKeys = 1000, nValues = 2)

# Run progress: 87.12% complete, ETA 00:09:46
# Fork: 1 of 1
# Warmup Iteration   1: 3687306.593 ns/op
# Warmup Iteration   2: 3303671.053 ns/op
# Warmup Iteration   3: 3342843.709 ns/op
# Warmup Iteration   4: 3399024.161 ns/op
# Warmup Iteration   5: 3341263.245 ns/op
Iteration   1: 3321035.644 ns/op
Iteration   2: 3315843.421 ns/op
Iteration   3: 3322441.060 ns/op
Iteration   4: 3339081.250 ns/op
Iteration   5: 3320005.281 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  3323681.331 ±(99.9%) 34475.717 ns/op [Average]
  (min, avg, max) = (3315843.421, 3323681.331, 3339081.250), stdev = 8953.234
  CI (99.9%): [3289205.614, 3358157.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 512, nKeys = 1000, nValues = 3)

# Run progress: 87.50% complete, ETA 00:09:28
# Fork: 1 of 1
# Warmup Iteration   1: 4763103.791 ns/op
# Warmup Iteration   2: 4349436.797 ns/op
# Warmup Iteration   3: 4288526.923 ns/op
# Warmup Iteration   4: 4320268.240 ns/op
# Warmup Iteration   5: 4351036.797 ns/op
Iteration   1: 4395546.522 ns/op
Iteration   2: 4306691.845 ns/op
Iteration   3: 4345238.197 ns/op
Iteration   4: 4329777.253 ns/op
Iteration   5: 4336614.163 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  4342773.596 ±(99.9%) 126248.754 ns/op [Average]
  (min, avg, max) = (4306691.845, 4342773.596, 4395546.522), stdev = 32786.400
  CI (99.9%): [4216524.842, 4469022.350] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 512, nKeys = 100000, nValues = 2)

# Run progress: 87.88% complete, ETA 00:09:10
# Fork: 1 of 1
# Warmup Iteration   1: 1580986300.000 ns/op
# Warmup Iteration   2: 1348916400.000 ns/op
# Warmup Iteration   3: 1487534700.000 ns/op
# Warmup Iteration   4: 1475947500.000 ns/op
# Warmup Iteration   5: 1465221100.000 ns/op
Iteration   1: 1473561900.000 ns/op
Iteration   2: 1465531600.000 ns/op
Iteration   3: 1473984200.000 ns/op
Iteration   4: 1476076100.000 ns/op
Iteration   5: 1470969500.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  1472024660.000 ±(99.9%) 15628380.569 ns/op [Average]
  (min, avg, max) = (1465531600.000, 1472024660.000, 1476076100.000), stdev = 4058640.804
  CI (99.9%): [1456396279.431, 1487653040.569] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 512, nKeys = 100000, nValues = 3)

# Run progress: 88.26% complete, ETA 00:08:52
# Fork: 1 of 1
# Warmup Iteration   1: 2115815300.000 ns/op
# Warmup Iteration   2: 1960589900.000 ns/op
# Warmup Iteration   3: 2147299900.000 ns/op
# Warmup Iteration   4: 2111588100.000 ns/op
# Warmup Iteration   5: 2112404300.000 ns/op
Iteration   1: 2121760300.000 ns/op
Iteration   2: 2104786600.000 ns/op
Iteration   3: 2111827200.000 ns/op
Iteration   4: 2103963700.000 ns/op
Iteration   5: 2057905200.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  2100048600.000 ±(99.9%) 94791094.220 ns/op [Average]
  (min, avg, max) = (2057905200.000, 2100048600.000, 2121760300.000), stdev = 24616946.147
  CI (99.9%): [2005257505.780, 2194839694.220] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 1024, nKeys = 32, nValues = 2)

# Run progress: 88.64% complete, ETA 00:08:35
# Fork: 1 of 1
# Warmup Iteration   1: 185977.431 ns/op
# Warmup Iteration   2: 172748.931 ns/op
# Warmup Iteration   3: 173905.641 ns/op
# Warmup Iteration   4: 171560.374 ns/op
# Warmup Iteration   5: 169248.841 ns/op
Iteration   1: 172106.851 ns/op
Iteration   2: 173842.461 ns/op
Iteration   3: 170686.698 ns/op
Iteration   4: 170471.188 ns/op
Iteration   5: 173640.677 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  172149.575 ±(99.9%) 6103.017 ns/op [Average]
  (min, avg, max) = (170471.188, 172149.575, 173842.461), stdev = 1584.934
  CI (99.9%): [166046.558, 178252.592] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 1024, nKeys = 32, nValues = 3)

# Run progress: 89.02% complete, ETA 00:08:17
# Fork: 1 of 1
# Warmup Iteration   1: 287353.163 ns/op
# Warmup Iteration   2: 261749.091 ns/op
# Warmup Iteration   3: 263238.957 ns/op
# Warmup Iteration   4: 263862.628 ns/op
# Warmup Iteration   5: 265763.899 ns/op
Iteration   1: 264878.598 ns/op
Iteration   2: 261170.678 ns/op
Iteration   3: 258947.595 ns/op
Iteration   4: 265766.588 ns/op
Iteration   5: 261329.616 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  262418.615 ±(99.9%) 10900.057 ns/op [Average]
  (min, avg, max) = (258947.595, 262418.615, 265766.588), stdev = 2830.710
  CI (99.9%): [251518.557, 273318.672] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 1024, nKeys = 1000, nValues = 2)

# Run progress: 89.39% complete, ETA 00:07:59
# Fork: 1 of 1
# Warmup Iteration   1: 7954037.008 ns/op
# Warmup Iteration   2: 7202132.857 ns/op
# Warmup Iteration   3: 7291676.978 ns/op
# Warmup Iteration   4: 7265494.964 ns/op
# Warmup Iteration   5: 7182892.958 ns/op
Iteration   1: 7156476.056 ns/op
Iteration   2: 7119630.282 ns/op
Iteration   3: 7101071.127 ns/op
Iteration   4: 7085923.077 ns/op
Iteration   5: 7228515.108 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  7138323.130 ±(99.9%) 219072.720 ns/op [Average]
  (min, avg, max) = (7085923.077, 7138323.130, 7228515.108), stdev = 56892.490
  CI (99.9%): [6919250.410, 7357395.850] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 1024, nKeys = 1000, nValues = 3)

# Run progress: 89.77% complete, ETA 00:07:42
# Fork: 1 of 1
# Warmup Iteration   1: 9299389.815 ns/op
# Warmup Iteration   2: 8294726.829 ns/op
# Warmup Iteration   3: 8459129.167 ns/op
# Warmup Iteration   4: 8505063.559 ns/op
# Warmup Iteration   5: 8305003.252 ns/op
Iteration   1: 8365491.667 ns/op
Iteration   2: 8323526.446 ns/op
Iteration   3: 8297158.197 ns/op
Iteration   4: 8143241.935 ns/op
Iteration   5: 8248201.626 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  8275523.974 ±(99.9%) 328500.277 ns/op [Average]
  (min, avg, max) = (8143241.935, 8275523.974, 8365491.667), stdev = 85310.479
  CI (99.9%): [7947023.698, 8604024.251] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 1024, nKeys = 100000, nValues = 2)

# Run progress: 90.15% complete, ETA 00:07:24
# Fork: 1 of 1
# Warmup Iteration   1: 2923567800.000 ns/op
# Warmup Iteration   2: 2745955900.000 ns/op
# Warmup Iteration   3: 2816011400.000 ns/op
# Warmup Iteration   4: 2786719000.000 ns/op
# Warmup Iteration   5: 2795228200.000 ns/op
Iteration   1: 2720852900.000 ns/op
Iteration   2: 2622349400.000 ns/op
Iteration   3: 2653271000.000 ns/op
Iteration   4: 2616863000.000 ns/op
Iteration   5: 2634827100.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  2649632680.000 ±(99.9%) 162492971.821 ns/op [Average]
  (min, avg, max) = (2616863000.000, 2649632680.000, 2720852900.000), stdev = 42198908.763
  CI (99.9%): [2487139708.179, 2812125651.821] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 1024, nKeys = 100000, nValues = 3)

# Run progress: 90.53% complete, ETA 00:07:08
# Fork: 1 of 1
# Warmup Iteration   1: 4078354400.000 ns/op
# Warmup Iteration   2: 3937772500.000 ns/op
# Warmup Iteration   3: 4228903700.000 ns/op
# Warmup Iteration   4: 4201387200.000 ns/op
# Warmup Iteration   5: 4113099700.000 ns/op
Iteration   1: 3818303600.000 ns/op
Iteration   2: 3808126100.000 ns/op
Iteration   3: 3798634200.000 ns/op
Iteration   4: 3786655100.000 ns/op
Iteration   5: 3802624600.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  3802868720.000 ±(99.9%) 45019107.881 ns/op [Average]
  (min, avg, max) = (3786655100.000, 3802868720.000, 3818303600.000), stdev = 11691319.352
  CI (99.9%): [3757849612.119, 3847887827.881] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 2048, nKeys = 32, nValues = 2)

# Run progress: 90.91% complete, ETA 00:06:53
# Fork: 1 of 1
# Warmup Iteration   1: 401308.406 ns/op
# Warmup Iteration   2: 369806.861 ns/op
# Warmup Iteration   3: 364941.899 ns/op
# Warmup Iteration   4: 363391.119 ns/op
# Warmup Iteration   5: 362971.403 ns/op
Iteration   1: 364285.157 ns/op
Iteration   2: 362331.160 ns/op
Iteration   3: 367847.175 ns/op
Iteration   4: 362585.269 ns/op
Iteration   5: 364964.182 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  364402.589 ±(99.9%) 8564.506 ns/op [Average]
  (min, avg, max) = (362331.160, 364402.589, 367847.175), stdev = 2224.175
  CI (99.9%): [355838.082, 372967.095] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 2048, nKeys = 32, nValues = 3)

# Run progress: 91.29% complete, ETA 00:06:35
# Fork: 1 of 1
# Warmup Iteration   1: 502568.355 ns/op
# Warmup Iteration   2: 465171.879 ns/op
# Warmup Iteration   3: 466616.806 ns/op
# Warmup Iteration   4: 464319.105 ns/op
# Warmup Iteration   5: 460577.235 ns/op
Iteration   1: 467773.503 ns/op
Iteration   2: 465599.311 ns/op
Iteration   3: 463431.492 ns/op
Iteration   4: 468416.604 ns/op
Iteration   5: 464951.154 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  466034.413 ±(99.9%) 7900.212 ns/op [Average]
  (min, avg, max) = (463431.492, 466034.413, 468416.604), stdev = 2051.660
  CI (99.9%): [458134.201, 473934.625] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 2048, nKeys = 1000, nValues = 2)

# Run progress: 91.67% complete, ETA 00:06:17
# Fork: 1 of 1
# Warmup Iteration   1: 14198672.222 ns/op
# Warmup Iteration   2: 12832653.165 ns/op
# Warmup Iteration   3: 13088988.462 ns/op
# Warmup Iteration   4: 12950683.333 ns/op
# Warmup Iteration   5: 12798673.418 ns/op
Iteration   1: 12761516.456 ns/op
Iteration   2: 12791260.759 ns/op
Iteration   3: 12816421.519 ns/op
Iteration   4: 12697821.250 ns/op
Iteration   5: 12842805.063 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  12781965.009 ±(99.9%) 215029.157 ns/op [Average]
  (min, avg, max) = (12697821.250, 12781965.009, 12842805.063), stdev = 55842.389
  CI (99.9%): [12566935.852, 12996994.167] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 2048, nKeys = 1000, nValues = 3)

# Run progress: 92.05% complete, ETA 00:05:59
# Fork: 1 of 1
# Warmup Iteration   1: 17908289.474 ns/op
# Warmup Iteration   2: 16166282.540 ns/op
# Warmup Iteration   3: 16438846.774 ns/op
# Warmup Iteration   4: 16316340.323 ns/op
# Warmup Iteration   5: 16239832.258 ns/op
Iteration   1: 16050832.813 ns/op
Iteration   2: 16113374.603 ns/op
Iteration   3: 16221163.492 ns/op
Iteration   4: 16153259.375 ns/op
Iteration   5: 16251748.387 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  16158075.734 ±(99.9%) 312098.573 ns/op [Average]
  (min, avg, max) = (16050832.813, 16158075.734, 16251748.387), stdev = 81051.008
  CI (99.9%): [15845977.161, 16470174.307] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 2048, nKeys = 100000, nValues = 2)

# Run progress: 92.42% complete, ETA 00:05:42
# Fork: 1 of 1
# Warmup Iteration   1: 5587240700.000 ns/op
# Warmup Iteration   2: 5391700100.000 ns/op
# Warmup Iteration   3: 5829926200.000 ns/op
# Warmup Iteration   4: 5568036500.000 ns/op
# Warmup Iteration   5: 5542513000.000 ns/op
Iteration   1: 5507030200.000 ns/op
Iteration   2: 5520074200.000 ns/op
Iteration   3: 5511577100.000 ns/op
Iteration   4: 5594108500.000 ns/op
Iteration   5: 5528227600.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  5532203520.000 ±(99.9%) 136878071.944 ns/op [Average]
  (min, avg, max) = (5507030200.000, 5532203520.000, 5594108500.000), stdev = 35546800.609
  CI (99.9%): [5395325448.056, 5669081591.944] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 2048, nKeys = 100000, nValues = 3)

# Run progress: 92.80% complete, ETA 00:05:28
# Fork: 1 of 1
# Warmup Iteration   1: 7912998700.000 ns/op
# Warmup Iteration   2: 7782072300.000 ns/op
# Warmup Iteration   3: 7900079300.000 ns/op
# Warmup Iteration   4: 7639151000.000 ns/op
# Warmup Iteration   5: 7638276200.000 ns/op
Iteration   1: 7668517500.000 ns/op
Iteration   2: 7629695000.000 ns/op
Iteration   3: 7610642700.000 ns/op
Iteration   4: 7639803000.000 ns/op
Iteration   5: 7619471500.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  7633625940.000 ±(99.9%) 86094551.716 ns/op [Average]
  (min, avg, max) = (7610642700.000, 7633625940.000, 7668517500.000), stdev = 22358481.676
  CI (99.9%): [7547531388.284, 7719720491.716] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 4096, nKeys = 32, nValues = 2)

# Run progress: 93.18% complete, ETA 00:05:15
# Fork: 1 of 1
# Warmup Iteration   1: 983264.712 ns/op
# Warmup Iteration   2: 891763.009 ns/op
# Warmup Iteration   3: 899866.488 ns/op
# Warmup Iteration   4: 889624.379 ns/op
# Warmup Iteration   5: 885056.868 ns/op
Iteration   1: 901172.222 ns/op
Iteration   2: 894648.893 ns/op
Iteration   3: 905858.438 ns/op
Iteration   4: 902768.728 ns/op
Iteration   5: 904894.902 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  901868.636 ±(99.9%) 17058.032 ns/op [Average]
  (min, avg, max) = (894648.893, 901868.636, 905858.438), stdev = 4429.917
  CI (99.9%): [884810.604, 918926.669] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 4096, nKeys = 32, nValues = 3)

# Run progress: 93.56% complete, ETA 00:04:57
# Fork: 1 of 1
# Warmup Iteration   1: 1193864.471 ns/op
# Warmup Iteration   2: 1106341.105 ns/op
# Warmup Iteration   3: 1092732.248 ns/op
# Warmup Iteration   4: 1107309.560 ns/op
# Warmup Iteration   5: 1090725.622 ns/op
Iteration   1: 1096424.406 ns/op
Iteration   2: 1103089.749 ns/op
Iteration   3: 1085264.478 ns/op
Iteration   4: 1094747.289 ns/op
Iteration   5: 1096915.168 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  1095288.218 ±(99.9%) 24773.870 ns/op [Average]
  (min, avg, max) = (1085264.478, 1095288.218, 1103089.749), stdev = 6433.695
  CI (99.9%): [1070514.348, 1120062.088] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 4096, nKeys = 1000, nValues = 2)

# Run progress: 93.94% complete, ETA 00:04:39
# Fork: 1 of 1
# Warmup Iteration   1: 31421572.727 ns/op
# Warmup Iteration   2: 28425827.778 ns/op
# Warmup Iteration   3: 28734136.111 ns/op
# Warmup Iteration   4: 28361872.222 ns/op
# Warmup Iteration   5: 28264544.444 ns/op
Iteration   1: 27966783.333 ns/op
Iteration   2: 28402308.333 ns/op
Iteration   3: 28602322.222 ns/op
Iteration   4: 28482047.222 ns/op
Iteration   5: 27876202.703 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  28265932.763 ±(99.9%) 1247515.817 ns/op [Average]
  (min, avg, max) = (27876202.703, 28265932.763, 28602322.222), stdev = 323975.896
  CI (99.9%): [27018416.945, 29513448.580] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 4096, nKeys = 1000, nValues = 3)

# Run progress: 94.32% complete, ETA 00:04:21
# Fork: 1 of 1
# Warmup Iteration   1: 35927144.828 ns/op
# Warmup Iteration   2: 32498503.226 ns/op
# Warmup Iteration   3: 33161248.387 ns/op
# Warmup Iteration   4: 32705016.129 ns/op
# Warmup Iteration   5: 32844877.419 ns/op
Iteration   1: 32848619.355 ns/op
Iteration   2: 32295500.000 ns/op
Iteration   3: 32388956.250 ns/op
Iteration   4: 32400512.500 ns/op
Iteration   5: 32725545.161 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  32531826.653 ±(99.9%) 926138.147 ns/op [Average]
  (min, avg, max) = (32295500.000, 32531826.653, 32848619.355), stdev = 240515.136
  CI (99.9%): [31605688.506, 33457964.801] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 4096, nKeys = 100000, nValues = 2)

# Run progress: 94.70% complete, ETA 00:04:03
# Fork: 1 of 1
# Warmup Iteration   1: 11023067900.000 ns/op
# Warmup Iteration   2: 10426835800.000 ns/op
# Warmup Iteration   3: 10363183800.000 ns/op
# Warmup Iteration   4: 10431985000.000 ns/op
# Warmup Iteration   5: 10361169500.000 ns/op
Iteration   1: 10410552700.000 ns/op
Iteration   2: 10376713900.000 ns/op
Iteration   3: 10422731000.000 ns/op
Iteration   4: 10434599200.000 ns/op
Iteration   5: 10365049400.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  10401929240.000 ±(99.9%) 115042450.765 ns/op [Average]
  (min, avg, max) = (10365049400.000, 10401929240.000, 10434599200.000), stdev = 29876159.131
  CI (99.9%): [10286886789.235, 10516971690.765] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 4096, nKeys = 100000, nValues = 3)

# Run progress: 95.08% complete, ETA 00:03:50
# Fork: 1 of 1
# Warmup Iteration   1: 15797795100.000 ns/op
# Warmup Iteration   2: 14439233100.000 ns/op
# Warmup Iteration   3: 15328143800.000 ns/op
# Warmup Iteration   4: 15229850400.000 ns/op
# Warmup Iteration   5: 15200516900.000 ns/op
Iteration   1: 15240997900.000 ns/op
Iteration   2: 15219668600.000 ns/op
Iteration   3: 15249654100.000 ns/op
Iteration   4: 15317163700.000 ns/op
Iteration   5: 15253134200.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  15256123700.000 ±(99.9%) 140620204.349 ns/op [Average]
  (min, avg, max) = (15219668600.000, 15256123700.000, 15317163700.000), stdev = 36518620.511
  CI (99.9%): [15115503495.651, 15396743904.349] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 8192, nKeys = 32, nValues = 2)

# Run progress: 95.45% complete, ETA 00:03:39
# Fork: 1 of 1
# Warmup Iteration   1: 1545348.171 ns/op
# Warmup Iteration   2: 1444211.648 ns/op
# Warmup Iteration   3: 1432804.410 ns/op
# Warmup Iteration   4: 1413029.692 ns/op
# Warmup Iteration   5: 1401301.111 ns/op
Iteration   1: 1402533.748 ns/op
Iteration   2: 1420539.069 ns/op
Iteration   3: 1401813.750 ns/op
Iteration   4: 1412811.345 ns/op
Iteration   5: 1392905.125 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  1406120.607 ±(99.9%) 41236.134 ns/op [Average]
  (min, avg, max) = (1392905.125, 1406120.607, 1420539.069), stdev = 10708.893
  CI (99.9%): [1364884.473, 1447356.741] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 8192, nKeys = 32, nValues = 3)

# Run progress: 95.83% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 1850649.724 ns/op
# Warmup Iteration   2: 1723450.947 ns/op
# Warmup Iteration   3: 1732109.215 ns/op
# Warmup Iteration   4: 1719517.376 ns/op
# Warmup Iteration   5: 1723282.423 ns/op
Iteration   1: 1886109.311 ns/op
Iteration   2: 1859399.814 ns/op
Iteration   3: 1840064.557 ns/op
Iteration   4: 1867734.264 ns/op
Iteration   5: 1786738.146 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  1848009.219 ±(99.9%) 146472.620 ns/op [Average]
  (min, avg, max) = (1786738.146, 1848009.219, 1886109.311), stdev = 38038.474
  CI (99.9%): [1701536.598, 1994481.839] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 8192, nKeys = 1000, nValues = 2)

# Run progress: 96.21% complete, ETA 00:03:02
# Fork: 1 of 1
# Warmup Iteration   1: 58341561.111 ns/op
# Warmup Iteration   2: 51801645.000 ns/op
# Warmup Iteration   3: 52576240.000 ns/op
# Warmup Iteration   4: 52658680.000 ns/op
# Warmup Iteration   5: 52093870.000 ns/op
Iteration   1: 51691855.000 ns/op
Iteration   2: 51766280.000 ns/op
Iteration   3: 51312475.000 ns/op
Iteration   4: 51470685.000 ns/op
Iteration   5: 51343160.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  51516891.000 ±(99.9%) 786584.464 ns/op [Average]
  (min, avg, max) = (51312475.000, 51516891.000, 51766280.000), stdev = 204273.487
  CI (99.9%): [50730306.536, 52303475.464] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 8192, nKeys = 1000, nValues = 3)

# Run progress: 96.59% complete, ETA 00:02:43
# Fork: 1 of 1
# Warmup Iteration   1: 76411328.571 ns/op
# Warmup Iteration   2: 67053173.333 ns/op
# Warmup Iteration   3: 68563140.000 ns/op
# Warmup Iteration   4: 68776013.333 ns/op
# Warmup Iteration   5: 67838340.000 ns/op
Iteration   1: 66838006.667 ns/op
Iteration   2: 67664760.000 ns/op
Iteration   3: 66927312.500 ns/op
Iteration   4: 67421081.250 ns/op
Iteration   5: 66252381.250 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  67020708.333 ±(99.9%) 2115691.628 ns/op [Average]
  (min, avg, max) = (66252381.250, 67020708.333, 67664760.000), stdev = 549438.397
  CI (99.9%): [64905016.705, 69136399.962] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 8192, nKeys = 100000, nValues = 2)

# Run progress: 96.97% complete, ETA 00:02:25
# Fork: 1 of 1
# Warmup Iteration   1: 21829160500.000 ns/op
# Warmup Iteration   2: 20547520700.000 ns/op
# Warmup Iteration   3: 22169021500.000 ns/op
# Warmup Iteration   4: 22139492900.000 ns/op
# Warmup Iteration   5: 22125659500.000 ns/op
Iteration   1: 22195688700.000 ns/op
Iteration   2: 22360967700.000 ns/op
Iteration   3: 22222907100.000 ns/op
Iteration   4: 22078219800.000 ns/op
Iteration   5: 22148589500.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  22201274560.000 ±(99.9%) 403488218.242 ns/op [Average]
  (min, avg, max) = (22078219800.000, 22201274560.000, 22360967700.000), stdev = 104784608.946
  CI (99.9%): [21797786341.758, 22604762778.242] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 8192, nKeys = 100000, nValues = 3)

# Run progress: 97.35% complete, ETA 00:02:12
# Fork: 1 of 1
# Warmup Iteration   1: 30601204200.000 ns/op
# Warmup Iteration   2: 28236051100.000 ns/op
# Warmup Iteration   3: 30472876100.000 ns/op
# Warmup Iteration   4: 30475395300.000 ns/op
# Warmup Iteration   5: 30350524000.000 ns/op
Iteration   1: 30322667000.000 ns/op
Iteration   2: 30367658400.000 ns/op
Iteration   3: 30321503200.000 ns/op
Iteration   4: 30462991700.000 ns/op
Iteration   5: 30404817200.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  30375927500.000 ±(99.9%) 230088887.666 ns/op [Average]
  (min, avg, max) = (30321503200.000, 30375927500.000, 30462991700.000), stdev = 59753353.448
  CI (99.9%): [30145838612.334, 30606016387.666] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 16384, nKeys = 32, nValues = 2)

# Run progress: 97.73% complete, ETA 00:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 3787214.232 ns/op
# Warmup Iteration   2: 3501641.608 ns/op
# Warmup Iteration   3: 3476181.724 ns/op
# Warmup Iteration   4: 3411718.305 ns/op
# Warmup Iteration   5: 3423188.737 ns/op
Iteration   1: 3430614.527 ns/op
Iteration   2: 3425781.293 ns/op
Iteration   3: 3438758.163 ns/op
Iteration   4: 3446262.925 ns/op
Iteration   5: 3466914.041 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  3441666.190 ±(99.9%) 62134.820 ns/op [Average]
  (min, avg, max) = (3425781.293, 3441666.190, 3466914.041), stdev = 16136.215
  CI (99.9%): [3379531.370, 3503801.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 16384, nKeys = 32, nValues = 3)

# Run progress: 98.11% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 4509776.577 ns/op
# Warmup Iteration   2: 4151454.545 ns/op
# Warmup Iteration   3: 4109110.163 ns/op
# Warmup Iteration   4: 4121584.490 ns/op
# Warmup Iteration   5: 4115158.943 ns/op
Iteration   1: 4196997.095 ns/op
Iteration   2: 4064859.274 ns/op
Iteration   3: 4143120.576 ns/op
Iteration   4: 4064891.600 ns/op
Iteration   5: 4112384.426 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  4116450.594 ±(99.9%) 215563.459 ns/op [Average]
  (min, avg, max) = (4064859.274, 4116450.594, 4196997.095), stdev = 55981.146
  CI (99.9%): [3900887.136, 4332014.053] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 16384, nKeys = 1000, nValues = 2)

# Run progress: 98.48% complete, ETA 00:01:19
# Fork: 1 of 1
# Warmup Iteration   1: 116829266.667 ns/op
# Warmup Iteration   2: 102918090.000 ns/op
# Warmup Iteration   3: 104071660.000 ns/op
# Warmup Iteration   4: 103578620.000 ns/op
# Warmup Iteration   5: 102547040.000 ns/op
Iteration   1: 102521150.000 ns/op
Iteration   2: 101413200.000 ns/op
Iteration   3: 100885470.000 ns/op
Iteration   4: 102822350.000 ns/op
Iteration   5: 103016220.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  102131678.000 ±(99.9%) 3591835.483 ns/op [Average]
  (min, avg, max) = (100885470.000, 102131678.000, 103016220.000), stdev = 932788.269
  CI (99.9%): [98539842.517, 105723513.483] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 16384, nKeys = 1000, nValues = 3)

# Run progress: 98.86% complete, ETA 00:00:59
# Fork: 1 of 1
# Warmup Iteration   1: 151250542.857 ns/op
# Warmup Iteration   2: 128130962.500 ns/op
# Warmup Iteration   3: 129853962.500 ns/op
# Warmup Iteration   4: 132148812.500 ns/op
# Warmup Iteration   5: 130835187.500 ns/op
Iteration   1: 128147075.000 ns/op
Iteration   2: 127466875.000 ns/op
Iteration   3: 130237062.500 ns/op
Iteration   4: 129953550.000 ns/op
Iteration   5: 128417225.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  128844357.500 ±(99.9%) 4611151.456 ns/op [Average]
  (min, avg, max) = (127466875.000, 128844357.500, 130237062.500), stdev = 1197501.390
  CI (99.9%): [124233206.044, 133455508.956] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 16384, nKeys = 100000, nValues = 2)

# Run progress: 99.24% complete, ETA 00:00:39
# Fork: 1 of 1
# Warmup Iteration   1: 42557680000.000 ns/op
# Warmup Iteration   2: 40884715100.000 ns/op
# Warmup Iteration   3: 41194745700.000 ns/op
# Warmup Iteration   4: 41315980800.000 ns/op
# Warmup Iteration   5: 41380551700.000 ns/op
Iteration   1: 41256286300.000 ns/op
Iteration   2: 41407556800.000 ns/op
Iteration   3: 41350021600.000 ns/op
Iteration   4: 41428217900.000 ns/op
Iteration   5: 41400145700.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  41368445660.000 ±(99.9%) 265572064.762 ns/op [Average]
  (min, avg, max) = (41256286300.000, 41368445660.000, 41428217900.000), stdev = 68968221.858
  CI (99.9%): [41102873595.238, 41634017724.762] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGetAll = 16384, nKeys = 100000, nValues = 3)

# Run progress: 99.62% complete, ETA 00:00:21
# Fork: 1 of 1
# Warmup Iteration   1: 59048933200.000 ns/op
# Warmup Iteration   2: 56276494500.000 ns/op
# Warmup Iteration   3: 60667476900.000 ns/op
# Warmup Iteration   4: 60452709000.000 ns/op
# Warmup Iteration   5: 60492693600.000 ns/op
Iteration   1: 60620900800.000 ns/op
Iteration   2: 60447816800.000 ns/op
Iteration   3: 60517998900.000 ns/op
Iteration   4: 60533002800.000 ns/op
Iteration   5: 60392166600.000 ns/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  60502377180.000 ±(99.9%) 335431879.321 ns/op [Average]
  (min, avg, max) = (60392166600.000, 60502377180.000, 60620900800.000), stdev = 87110593.850
  CI (99.9%): [60166945300.679, 60837809059.321] (assumes normal distribution)


# Run complete. Total time: 01:43:51

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (nGetAll)  (nKeys)  (nValues)  Mode  Cnt            Score             Error  Units
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         16       32          2  avgt    5         5316.801 ±         869.227  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         16       32          3  avgt    5         5105.028 ±          77.272  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         16     1000          2  avgt    5       184176.841 ±       19025.102  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         16     1000          3  avgt    5       180744.816 ±        2632.769  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         16   100000          2  avgt    5     24158496.961 ±     3413843.701  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         16   100000          3  avgt    5     24061479.474 ±     2316642.173  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         32       32          2  avgt    5        10292.842 ±          73.438  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         32       32          3  avgt    5        10227.516 ±         178.835  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         32     1000          2  avgt    5       363387.226 ±        4300.420  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         32     1000          3  avgt    5       309154.079 ±       11113.903  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         32   100000          2  avgt    5     49286199.736 ±     5923480.144  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         32   100000          3  avgt    5     46261493.618 ±     6157394.054  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         64       32          2  avgt    5        20058.050 ±         369.117  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         64       32          3  avgt    5        19825.699 ±         346.598  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         64     1000          2  avgt    5       709366.790 ±       15139.468  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         64     1000          3  avgt    5       705398.265 ±       11931.701  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         64   100000          2  avgt    5     95711475.455 ±    13971705.854  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark         64   100000          3  avgt    5     96663839.697 ±    18870916.765  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        128       32          2  avgt    5        39659.244 ±        1891.839  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        128       32          3  avgt    5        39621.239 ±        1506.765  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        128     1000          2  avgt    5      1415842.324 ±       29953.923  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        128     1000          3  avgt    5      1400534.340 ±       35931.874  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        128   100000          2  avgt    5    180084536.667 ±    31377068.967  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        128   100000          3  avgt    5    182132356.667 ±    27372232.177  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        256       32          2  avgt    5        76989.837 ±        9270.877  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        256       32          3  avgt    5        75396.285 ±        4228.755  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        256     1000          2  avgt    5      2877690.749 ±      179157.713  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        256     1000          3  avgt    5      2484480.954 ±       50669.475  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        256   100000          2  avgt    5    384282713.333 ±    61096454.423  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        256   100000          3  avgt    5    373586360.000 ±    53628405.640  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        512       32          2  avgt    5       177768.222 ±        6242.166  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        512       32          3  avgt    5       178984.283 ±        2555.957  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        512     1000          2  avgt    5      5612889.143 ±      200102.941  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        512     1000          3  avgt    5      5620132.386 ±      151071.723  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        512   100000          2  avgt    5    742523660.000 ±   126612888.184  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark        512   100000          3  avgt    5    709257710.000 ±    80345226.586  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       1024       32          2  avgt    5       356567.146 ±       13713.482  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       1024       32          3  avgt    5       356791.595 ±       11676.518  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       1024     1000          2  avgt    5     11110992.596 ±      355891.462  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       1024     1000          3  avgt    5     11304551.183 ±      376561.993  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       1024   100000          2  avgt    5   1504078120.000 ±   396776904.870  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       1024   100000          3  avgt    5   1424023980.000 ±   140559328.572  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       2048       32          2  avgt    5       713262.102 ±       22450.293  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       2048       32          3  avgt    5       704997.453 ±       12641.780  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       2048     1000          2  avgt    5     22283904.153 ±      801533.078  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       2048     1000          3  avgt    5     22270737.449 ±      373566.550  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       2048   100000          2  avgt    5   3232036480.000 ±   118505422.527  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       2048   100000          3  avgt    5   3205530380.000 ±   744421732.722  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       4096       32          2  avgt    5      1442140.798 ±       49331.437  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       4096       32          3  avgt    5      1407405.713 ±       37768.891  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       4096     1000          2  avgt    5     44705322.609 ±     1680297.122  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       4096     1000          3  avgt    5     45604168.379 ±     1181736.475  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       4096   100000          2  avgt    5   7076702880.000 ±   786056543.309  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       4096   100000          3  avgt    5   7193884920.000 ±   965355933.398  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       8192       32          2  avgt    5      2853830.352 ±       70146.777  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       8192       32          3  avgt    5      2853230.499 ±       92898.249  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       8192     1000          2  avgt    5     90144211.667 ±     2711123.876  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark       8192     1000          3  avgt    5     91578002.727 ±     2276138.458  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark      16384       32          2  avgt    5      5700673.457 ±      239292.396  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark      16384       32          3  avgt    5      5770768.642 ±      446076.730  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark      16384     1000          2  avgt    5    180097066.667 ±     2795986.011  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark      16384     1000          3  avgt    5    181442090.000 ±     4597205.023  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  16       32          2  avgt    5         4230.100 ±          56.657  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  16       32          3  avgt    5         4133.397 ±         152.261  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  16     1000          2  avgt    5       118946.279 ±        1427.216  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  16     1000          3  avgt    5       117040.728 ±        3583.055  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  16   100000          2  avgt    5     16328987.158 ±      393834.921  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  16   100000          3  avgt    5     18980109.079 ±     5584852.768  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  32       32          2  avgt    5         8328.230 ±         195.828  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  32       32          3  avgt    5         8232.139 ±         118.231  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  32     1000          2  avgt    5       245099.827 ±       37271.867  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  32     1000          3  avgt    5       237105.627 ±        6963.774  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  32   100000          2  avgt    5     33458970.172 ±      738290.341  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  32   100000          3  avgt    5     36179719.507 ±     1364428.632  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  64       32          2  avgt    5        16626.192 ±         442.760  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  64       32          3  avgt    5        16334.992 ±         457.884  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  64     1000          2  avgt    5       470789.372 ±       13578.886  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  64     1000          3  avgt    5       464788.732 ±       11965.800  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  64   100000          2  avgt    5     64105025.000 ±     1437486.269  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                  64   100000          3  avgt    5     70581341.333 ±     2896505.710  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 128       32          2  avgt    5        33121.308 ±        1324.284  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 128       32          3  avgt    5        33294.084 ±         273.343  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 128     1000          2  avgt    5       931431.714 ±       16418.685  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 128     1000          3  avgt    5       947176.878 ±       20643.165  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 128   100000          2  avgt    5    129465272.500 ±     1936253.391  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 128   100000          3  avgt    5    147241376.429 ±    23901116.036  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 256       32          2  avgt    5        65047.574 ±        4013.759  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 256       32          3  avgt    5        66796.933 ±        9376.966  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 256     1000          2  avgt    5      1903339.072 ±       60320.087  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 256     1000          3  avgt    5      1889428.399 ±       62535.046  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 256   100000          2  avgt    5    261403170.000 ±    15315435.659  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 256   100000          3  avgt    5    287948665.000 ±     9592931.028  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 512       32          2  avgt    5       127231.047 ±        4350.856  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 512       32          3  avgt    5       129897.018 ±        5610.995  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 512     1000          2  avgt    5      3705366.241 ±      154053.758  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 512     1000          3  avgt    5      3830042.818 ±       64175.858  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 512   100000          2  avgt    5    523792160.000 ±    25998017.305  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                 512   100000          3  avgt    5    576308680.000 ±     4437926.216  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                1024       32          2  avgt    5       273354.077 ±        6672.601  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                1024       32          3  avgt    5       255206.576 ±        4219.372  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                1024     1000          2  avgt    5      8187203.168 ±      207883.038  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                1024     1000          3  avgt    5      8268117.413 ±      336149.642  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                1024   100000          2  avgt    5   1057926560.000 ±    33304692.260  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                1024   100000          3  avgt    5   1152601100.000 ±    36832238.374  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                2048       32          2  avgt    5       511196.299 ±        8788.143  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                2048       32          3  avgt    5       507107.788 ±        8264.488  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                2048     1000          2  avgt    5     16329623.927 ±      373225.544  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                2048     1000          3  avgt    5     16301104.014 ±      383107.740  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                2048   100000          2  avgt    5   2147754020.000 ±    46916681.905  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                2048   100000          3  avgt    5   2274578420.000 ±    38700315.165  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                4096       32          2  avgt    5      1031506.876 ±       34338.306  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                4096       32          3  avgt    5      1040670.000 ±       19480.927  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                4096     1000          2  avgt    5     32642257.500 ±      685739.900  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                4096     1000          3  avgt    5     28688635.143 ±      795301.371  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                4096   100000          2  avgt    5   4173758000.000 ±   104043668.085  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                4096   100000          3  avgt    5   4322769320.000 ±  1503273125.569  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                8192       32          2  avgt    5      2181146.060 ±       77256.575  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                8192       32          3  avgt    5      2076887.427 ±      302844.510  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                8192     1000          2  avgt    5     66387516.333 ±     1725286.484  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                8192     1000          3  avgt    5     57083460.000 ±     1722489.859  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                8192   100000          2  avgt    5   7487241480.000 ±    63788035.693  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                8192   100000          3  avgt    5   7585007820.000 ±    63020520.250  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark               16384       32          2  avgt    5      4215033.077 ±      124910.759  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark               16384       32          3  avgt    5      4177477.363 ±      117985.432  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark               16384     1000          2  avgt    5    114544117.778 ±     6010316.087  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark               16384     1000          3  avgt    5    129999505.000 ±     3856492.669  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark               16384   100000          2  avgt    5  15279706160.000 ±    43445790.103  ns/op
ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark               16384   100000          3  avgt    5  15017012840.000 ±   155447289.874  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              16       32          2  avgt    5         3404.502 ±         410.745  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              16       32          3  avgt    5         5995.803 ±         491.836  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              16     1000          2  avgt    5        87237.717 ±        3151.551  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              16     1000          3  avgt    5       118148.725 ±        3494.079  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              16   100000          2  avgt    5     14187825.180 ±      348988.772  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              16   100000          3  avgt    5     20024650.969 ±      894138.289  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              32       32          2  avgt    5         6971.087 ±         855.586  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              32       32          3  avgt    5         8137.076 ±         480.676  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              32     1000          2  avgt    5       178719.275 ±        3906.695  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              32     1000          3  avgt    5       230235.850 ±        6693.919  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              32   100000          2  avgt    5     27896989.835 ±     1460582.402  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              32   100000          3  avgt    5     40246380.000 ±     1257287.022  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              64       32          2  avgt    5        12932.442 ±        1938.984  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              64       32          3  avgt    5        15510.283 ±        1684.612  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              64     1000          2  avgt    5       349026.144 ±        7633.759  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              64     1000          3  avgt    5       474717.324 ±       13572.413  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              64   100000          2  avgt    5     55954995.731 ±     1950980.764  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark              64   100000          3  avgt    5     81177007.692 ±     2404291.056  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             128       32          2  avgt    5        30085.256 ±        2449.086  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             128       32          3  avgt    5        37286.667 ±        2576.188  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             128     1000          2  avgt    5       745749.599 ±       13991.954  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             128     1000          3  avgt    5       910482.859 ±       16917.687  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             128   100000          2  avgt    5    110711454.000 ±     2043274.672  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             128   100000          3  avgt    5    159144545.714 ±     2835886.171  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             256       32          2  avgt    5        64453.758 ±       34788.174  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             256       32          3  avgt    5        71085.997 ±       38309.596  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             256     1000          2  avgt    5      1437605.431 ±       36159.984  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             256     1000          3  avgt    5      1894672.527 ±       46717.273  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             256   100000          2  avgt    5    221488676.000 ±     4530738.682  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             256   100000          3  avgt    5    325535500.000 ±     8522401.587  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             512       32          2  avgt    5       100422.868 ±       11372.447  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             512       32          3  avgt    5       133121.930 ±       15167.684  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             512     1000          2  avgt    5      2805849.612 ±      113147.132  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             512     1000          3  avgt    5      3621060.676 ±      186246.628  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             512   100000          2  avgt    5    456010926.667 ±    23702273.584  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark             512   100000          3  avgt    5    647237970.000 ±    15930439.417  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            1024       32          2  avgt    5       173730.439 ±       17180.197  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            1024       32          3  avgt    5       208166.001 ±       31724.518  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            1024     1000          2  avgt    5      5528084.105 ±      174135.511  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            1024     1000          3  avgt    5      7354859.841 ±      277401.450  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            1024   100000          2  avgt    5   1095519110.000 ±   714130899.090  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            1024   100000          3  avgt    5   1631906120.000 ±   781616172.004  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            2048       32          2  avgt    5       306288.046 ±       60121.824  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            2048       32          3  avgt    5       420569.191 ±       66303.207  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            2048     1000          2  avgt    5     11862282.780 ±      366228.188  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            2048     1000          3  avgt    5     15149867.773 ±      551367.592  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            2048   100000          2  avgt    5   1780262080.000 ±    40396282.031  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            2048   100000          3  avgt    5   3252161100.000 ±  1484308004.309  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            4096       32          2  avgt    5       739746.186 ±       34440.084  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            4096       32          3  avgt    5       897617.639 ±       55906.986  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            4096     1000          2  avgt    5     22335730.232 ±      413891.526  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            4096     1000          3  avgt    5     29396051.933 ±      534687.450  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            4096   100000          2  avgt    5   4657859020.000 ±  2290710407.015  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            4096   100000          3  avgt    5   6506272600.000 ±  2680165875.885  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            8192       32          2  avgt    5      1447015.447 ±      184032.291  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            8192       32          3  avgt    5      1911049.920 ±      143465.425  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            8192     1000          2  avgt    5     45921492.727 ±     1553828.885  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            8192     1000          3  avgt    5     58703014.248 ±     2641149.040  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            8192   100000          2  avgt    5   9352498420.000 ±  4370593032.468  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark            8192   100000          3  avgt    5  13092667700.000 ±  6204247468.891  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark           16384       32          2  avgt    5      2397998.974 ±      325356.637  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark           16384       32          3  avgt    5      3609070.009 ±      419848.761  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark           16384     1000          2  avgt    5     85563926.667 ±     3692987.845  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark           16384     1000          3  avgt    5    118397695.556 ±     3486462.857  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark           16384   100000          2  avgt    5  14372220500.000 ±    77435798.823  ns/op
ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark           16384   100000          3  avgt    5  25914235000.000 ± 11962387692.787  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       16       32          2  avgt    5         3917.391 ±          31.228  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       16       32          3  avgt    5         3491.296 ±          89.560  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       16     1000          2  avgt    5       102706.429 ±        2160.771  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       16     1000          3  avgt    5       128790.940 ±        7955.227  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       16   100000          2  avgt    5     44929018.261 ±     1074799.496  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       16   100000          3  avgt    5     65313415.000 ±     2322017.071  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       32       32          2  avgt    5         6051.546 ±          43.869  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       32       32          3  avgt    5         8118.179 ±         292.912  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       32     1000          2  avgt    5       207718.846 ±        5623.908  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       32     1000          3  avgt    5       250637.958 ±       10633.641  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       32   100000          2  avgt    5     92379182.879 ±     3780279.959  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       32   100000          3  avgt    5    133868582.500 ±     8181570.057  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       64       32          2  avgt    5        14618.086 ±         173.866  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       64       32          3  avgt    5        16252.095 ±         214.830  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       64     1000          2  avgt    5       409126.232 ±       13997.247  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       64     1000          3  avgt    5       564814.640 ±        7100.940  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       64   100000          2  avgt    5    179969770.000 ±     7484698.929  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                       64   100000          3  avgt    5    264414900.000 ±    10092880.670  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      128       32          2  avgt    5        28359.680 ±         921.347  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      128       32          3  avgt    5        35994.123 ±         600.333  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      128     1000          2  avgt    5       858144.638 ±       77778.572  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      128     1000          3  avgt    5      1018759.428 ±        8420.663  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      128   100000          2  avgt    5    362525946.667 ±     5925183.507  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      128   100000          3  avgt    5    523428650.000 ±    10690125.056  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      256       32          2  avgt    5        50475.666 ±        1660.757  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      256       32          3  avgt    5        63075.289 ±        3302.799  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      256     1000          2  avgt    5      1680104.375 ±       32588.531  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      256     1000          3  avgt    5      2063338.528 ±       75441.106  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      256   100000          2  avgt    5    728050980.000 ±    18121642.862  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      256   100000          3  avgt    5    999101900.000 ±    33328942.111  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      512       32          2  avgt    5        98133.733 ±        3873.830  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      512       32          3  avgt    5       137274.997 ±        4503.919  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      512     1000          2  avgt    5      3323681.331 ±       34475.717  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      512     1000          3  avgt    5      4342773.596 ±      126248.754  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      512   100000          2  avgt    5   1472024660.000 ±    15628380.569  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                      512   100000          3  avgt    5   2100048600.000 ±    94791094.220  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     1024       32          2  avgt    5       172149.575 ±        6103.017  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     1024       32          3  avgt    5       262418.615 ±       10900.057  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     1024     1000          2  avgt    5      7138323.130 ±      219072.720  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     1024     1000          3  avgt    5      8275523.974 ±      328500.277  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     1024   100000          2  avgt    5   2649632680.000 ±   162492971.821  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     1024   100000          3  avgt    5   3802868720.000 ±    45019107.881  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     2048       32          2  avgt    5       364402.589 ±        8564.506  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     2048       32          3  avgt    5       466034.413 ±        7900.212  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     2048     1000          2  avgt    5     12781965.009 ±      215029.157  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     2048     1000          3  avgt    5     16158075.734 ±      312098.573  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     2048   100000          2  avgt    5   5532203520.000 ±   136878071.944  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     2048   100000          3  avgt    5   7633625940.000 ±    86094551.716  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     4096       32          2  avgt    5       901868.636 ±       17058.032  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     4096       32          3  avgt    5      1095288.218 ±       24773.870  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     4096     1000          2  avgt    5     28265932.763 ±     1247515.817  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     4096     1000          3  avgt    5     32531826.653 ±      926138.147  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     4096   100000          2  avgt    5  10401929240.000 ±   115042450.765  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     4096   100000          3  avgt    5  15256123700.000 ±   140620204.349  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     8192       32          2  avgt    5      1406120.607 ±       41236.134  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     8192       32          3  avgt    5      1848009.219 ±      146472.620  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     8192     1000          2  avgt    5     51516891.000 ±      786584.464  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     8192     1000          3  avgt    5     67020708.333 ±     2115691.628  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     8192   100000          2  avgt    5  22201274560.000 ±   403488218.242  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                     8192   100000          3  avgt    5  30375927500.000 ±   230088887.666  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                    16384       32          2  avgt    5      3441666.190 ±       62134.820  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                    16384       32          3  avgt    5      4116450.594 ±      215563.459  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                    16384     1000          2  avgt    5    102131678.000 ±     3591835.483  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                    16384     1000          3  avgt    5    128844357.500 ±     4611151.456  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                    16384   100000          2  avgt    5  41368445660.000 ±   265572064.762  ns/op
ImmutableGetAllBenchmark.immutableGetAllBenchmark                    16384   100000          3  avgt    5  60502377180.000 ±   335431879.321  ns/op

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.3.1/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 1h 43m 53s
13 actionable tasks: 1 executed, 12 up-to-date
