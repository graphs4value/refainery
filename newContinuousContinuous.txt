Type-safe dependency accessors is an incubating feature.
> Task :buildSrc:extractPluginRequests UP-TO-DATE
> Task :buildSrc:generatePluginAdapters UP-TO-DATE
> Task :buildSrc:compileJava UP-TO-DATE
> Task :buildSrc:compileGroovy NO-SOURCE
> Task :buildSrc:compileGroovyPlugins UP-TO-DATE
> Task :buildSrc:pluginDescriptors UP-TO-DATE
> Task :buildSrc:processResources UP-TO-DATE
> Task :buildSrc:classes UP-TO-DATE
> Task :buildSrc:jar UP-TO-DATE
> Task :buildSrc:assemble UP-TO-DATE
> Task :buildSrc:pluginUnderTestMetadata UP-TO-DATE
> Task :buildSrc:compileTestJava NO-SOURCE
> Task :buildSrc:compileTestGroovy NO-SOURCE
> Task :buildSrc:processTestResources NO-SOURCE
> Task :buildSrc:testClasses UP-TO-DATE
> Task :buildSrc:test NO-SOURCE
> Task :buildSrc:validatePlugins UP-TO-DATE
> Task :buildSrc:check UP-TO-DATE
> Task :buildSrc:build UP-TO-DATE
> Task :refinery-store:compileJava UP-TO-DATE
> Task :refinery-store:processResources NO-SOURCE
> Task :refinery-store:classes UP-TO-DATE
> Task :refinery-store:compileTestJava UP-TO-DATE
> Task :refinery-store:processTestResources NO-SOURCE
> Task :refinery-store:testClasses UP-TO-DATE
> Task :refinery-store:compileJmhJava
> Task :refinery-store:processJmhResources NO-SOURCE
> Task :refinery-store:jmhClasses

> Task :refinery-store:jmh
# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 0.00% complete, ETA 01:44:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 0.16% complete, ETA 01:48:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 0.32% complete, ETA 01:48:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.037 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.038 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.046 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.039 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.031, 0.039, 0.052), stdev = 0.009
  CI (99.9%): [0.003, 0.076] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 0.48% complete, ETA 01:48:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.033 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.048 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.038 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.029, 0.038, 0.050), stdev = 0.010
  CI (99.9%): [? 0, 0.077] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 0.64% complete, ETA 01:48:21
# Fork: 1 of 1
# Warmup Iteration   1: 8.622 ms/op
# Warmup Iteration   2: 8.549 ms/op
# Warmup Iteration   3: 8.197 ms/op
# Warmup Iteration   4: 7.354 ms/op
# Warmup Iteration   5: 7.588 ms/op
Iteration   1: 8.055 ms/op
Iteration   2: 9.493 ms/op
Iteration   3: 11.420 ms/op
Iteration   4: 15.385 ms/op
Iteration   5: 13.532 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  11.577 ±(99.9%) 11.406 ms/op [Average]
  (min, avg, max) = (8.055, 11.577, 15.385), stdev = 2.962
  CI (99.9%): [0.172, 22.983] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 0.80% complete, ETA 01:48:55
# Fork: 1 of 1
# Warmup Iteration   1: 8.870 ms/op
# Warmup Iteration   2: 7.509 ms/op
# Warmup Iteration   3: 7.707 ms/op
# Warmup Iteration   4: 8.499 ms/op
# Warmup Iteration   5: 8.541 ms/op
Iteration   1: 8.716 ms/op
Iteration   2: 7.847 ms/op
Iteration   3: 9.048 ms/op
Iteration   4: 11.996 ms/op
Iteration   5: 14.237 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  10.369 ±(99.9%) 10.269 ms/op [Average]
  (min, avg, max) = (7.847, 10.369, 14.237), stdev = 2.667
  CI (99.9%): [0.100, 20.638] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 0.96% complete, ETA 01:49:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 1.12% complete, ETA 01:48:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 1.28% complete, ETA 01:48:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.066 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.058 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.058 ms/op
Iteration   3: 0.067 ms/op
Iteration   4: 0.099 ms/op
Iteration   5: 0.099 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.076 ±(99.9%) 0.080 ms/op [Average]
  (min, avg, max) = (0.058, 0.076, 0.099), stdev = 0.021
  CI (99.9%): [? 0, 0.157] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 1.44% complete, ETA 01:48:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.059 ms/op
# Warmup Iteration   5: 0.058 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.060 ms/op
Iteration   3: 0.067 ms/op
Iteration   4: 0.100 ms/op
Iteration   5: 0.104 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.078 ±(99.9%) 0.086 ms/op [Average]
  (min, avg, max) = (0.058, 0.078, 0.104), stdev = 0.022
  CI (99.9%): [? 0, 0.164] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 1.60% complete, ETA 01:47:49
# Fork: 1 of 1
# Warmup Iteration   1: 17.812 ms/op
# Warmup Iteration   2: 17.560 ms/op
# Warmup Iteration   3: 19.774 ms/op
# Warmup Iteration   4: 19.874 ms/op
# Warmup Iteration   5: 18.214 ms/op
Iteration   1: 19.579 ms/op
Iteration   2: 18.641 ms/op
Iteration   3: 24.554 ms/op
Iteration   4: 25.718 ms/op
Iteration   5: 24.376 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  22.573 ±(99.9%) 12.402 ms/op [Average]
  (min, avg, max) = (18.641, 22.573, 25.718), stdev = 3.221
  CI (99.9%): [10.171, 34.976] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 1.76% complete, ETA 01:48:00
# Fork: 1 of 1
# Warmup Iteration   1: 18.105 ms/op
# Warmup Iteration   2: 15.544 ms/op
# Warmup Iteration   3: 16.997 ms/op
# Warmup Iteration   4: 16.913 ms/op
# Warmup Iteration   5: 16.682 ms/op
Iteration   1: 18.419 ms/op
Iteration   2: 15.901 ms/op
Iteration   3: 20.663 ms/op
Iteration   4: 25.517 ms/op
Iteration   5: 25.063 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  21.113 ±(99.9%) 16.064 ms/op [Average]
  (min, avg, max) = (15.901, 21.113, 25.517), stdev = 4.172
  CI (99.9%): [5.049, 37.177] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 1.92% complete, ETA 01:48:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 2.08% complete, ETA 01:47:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 2.24% complete, ETA 01:47:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.119 ms/op
# Warmup Iteration   2: 0.101 ms/op
# Warmup Iteration   3: 0.102 ms/op
# Warmup Iteration   4: 0.107 ms/op
# Warmup Iteration   5: 0.108 ms/op
Iteration   1: 0.101 ms/op
Iteration   2: 0.101 ms/op
Iteration   3: 0.119 ms/op
Iteration   4: 0.176 ms/op
Iteration   5: 0.181 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.136 ±(99.9%) 0.154 ms/op [Average]
  (min, avg, max) = (0.101, 0.136, 0.181), stdev = 0.040
  CI (99.9%): [? 0, 0.290] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 2.40% complete, ETA 01:47:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.115 ms/op
# Warmup Iteration   2: 0.102 ms/op
# Warmup Iteration   3: 0.105 ms/op
# Warmup Iteration   4: 0.103 ms/op
# Warmup Iteration   5: 0.101 ms/op
Iteration   1: 0.101 ms/op
Iteration   2: 0.101 ms/op
Iteration   3: 0.123 ms/op
Iteration   4: 0.178 ms/op
Iteration   5: 0.173 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.135 ±(99.9%) 0.146 ms/op [Average]
  (min, avg, max) = (0.101, 0.135, 0.178), stdev = 0.038
  CI (99.9%): [? 0, 0.281] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 2.56% complete, ETA 01:47:02
# Fork: 1 of 1
# Warmup Iteration   1: 29.104 ms/op
# Warmup Iteration   2: 31.633 ms/op
# Warmup Iteration   3: 26.194 ms/op
# Warmup Iteration   4: 32.073 ms/op
# Warmup Iteration   5: 27.662 ms/op
Iteration   1: 29.866 ms/op
Iteration   2: 30.873 ms/op
Iteration   3: 36.071 ms/op
Iteration   4: 39.053 ms/op
Iteration   5: 37.789 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  34.730 ±(99.9%) 15.921 ms/op [Average]
  (min, avg, max) = (29.866, 34.730, 39.053), stdev = 4.135
  CI (99.9%): [18.809, 50.652] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 2.72% complete, ETA 01:47:03
# Fork: 1 of 1
# Warmup Iteration   1: 29.985 ms/op
# Warmup Iteration   2: 25.844 ms/op
# Warmup Iteration   3: 26.762 ms/op
# Warmup Iteration   4: 30.658 ms/op
# Warmup Iteration   5: 27.701 ms/op
Iteration   1: 30.431 ms/op
Iteration   2: 28.046 ms/op
Iteration   3: 32.146 ms/op
Iteration   4: 42.979 ms/op
Iteration   5: 43.297 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  35.380 ±(99.9%) 27.846 ms/op [Average]
  (min, avg, max) = (28.046, 35.380, 43.297), stdev = 7.231
  CI (99.9%): [7.534, 63.226] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 2.88% complete, ETA 01:47:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.011), stdev = 0.002
  CI (99.9%): [? 10??, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 3.04% complete, ETA 01:46:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.009 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.011), stdev = 0.002
  CI (99.9%): [? 0, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 3.21% complete, ETA 01:46:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.211 ms/op
# Warmup Iteration   2: 0.189 ms/op
# Warmup Iteration   3: 0.187 ms/op
# Warmup Iteration   4: 0.201 ms/op
# Warmup Iteration   5: 0.230 ms/op
Iteration   1: 0.238 ms/op
Iteration   2: 0.236 ms/op
Iteration   3: 0.299 ms/op
Iteration   4: 0.416 ms/op
Iteration   5: 0.337 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.305 ±(99.9%) 0.289 ms/op [Average]
  (min, avg, max) = (0.236, 0.305, 0.416), stdev = 0.075
  CI (99.9%): [0.016, 0.595] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 3.37% complete, ETA 01:46:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.214 ms/op
# Warmup Iteration   2: 0.217 ms/op
# Warmup Iteration   3: 0.230 ms/op
# Warmup Iteration   4: 0.230 ms/op
# Warmup Iteration   5: 0.241 ms/op
Iteration   1: 0.235 ms/op
Iteration   2: 0.273 ms/op
Iteration   3: 0.316 ms/op
Iteration   4: 0.403 ms/op
Iteration   5: 0.341 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.313 ±(99.9%) 0.248 ms/op [Average]
  (min, avg, max) = (0.235, 0.313, 0.403), stdev = 0.064
  CI (99.9%): [0.065, 0.562] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 3.53% complete, ETA 01:46:01
# Fork: 1 of 1
# Warmup Iteration   1: 58.370 ms/op
# Warmup Iteration   2: 68.086 ms/op
# Warmup Iteration   3: 71.213 ms/op
# Warmup Iteration   4: 90.778 ms/op
# Warmup Iteration   5: 77.460 ms/op
Iteration   1: 75.908 ms/op
Iteration   2: 71.410 ms/op
Iteration   3: 129.244 ms/op
Iteration   4: 113.624 ms/op
Iteration   5: 91.415 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  96.320 ±(99.9%) 95.194 ms/op [Average]
  (min, avg, max) = (71.410, 96.320, 129.244), stdev = 24.722
  CI (99.9%): [1.126, 191.514] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 3.69% complete, ETA 01:46:05
# Fork: 1 of 1
# Warmup Iteration   1: 62.066 ms/op
# Warmup Iteration   2: 58.387 ms/op
# Warmup Iteration   3: 60.668 ms/op
# Warmup Iteration   4: 60.199 ms/op
# Warmup Iteration   5: 61.010 ms/op
Iteration   1: 64.965 ms/op
Iteration   2: 63.612 ms/op
Iteration   3: 102.180 ms/op
Iteration   4: 105.175 ms/op
Iteration   5: 94.369 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  86.060 ±(99.9%) 78.045 ms/op [Average]
  (min, avg, max) = (63.612, 86.060, 105.175), stdev = 20.268
  CI (99.9%): [8.015, 164.105] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 3.85% complete, ETA 01:46:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.018 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.013, 0.018, 0.023), stdev = 0.005
  CI (99.9%): [? 0, 0.035] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 4.01% complete, ETA 01:45:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.020 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.014, 0.020, 0.026), stdev = 0.006
  CI (99.9%): [? 0, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 4.17% complete, ETA 01:45:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.509 ms/op
# Warmup Iteration   2: 0.416 ms/op
# Warmup Iteration   3: 0.399 ms/op
# Warmup Iteration   4: 0.406 ms/op
# Warmup Iteration   5: 0.414 ms/op
Iteration   1: 0.468 ms/op
Iteration   2: 0.442 ms/op
Iteration   3: 0.534 ms/op
Iteration   4: 0.639 ms/op
Iteration   5: 0.686 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.554 ±(99.9%) 0.409 ms/op [Average]
  (min, avg, max) = (0.442, 0.554, 0.686), stdev = 0.106
  CI (99.9%): [0.145, 0.963] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 4.33% complete, ETA 01:45:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.427 ms/op
# Warmup Iteration   2: 0.387 ms/op
# Warmup Iteration   3: 0.403 ms/op
# Warmup Iteration   4: 0.413 ms/op
# Warmup Iteration   5: 0.458 ms/op
Iteration   1: 0.438 ms/op
Iteration   2: 0.405 ms/op
Iteration   3: 0.484 ms/op
Iteration   4: 0.584 ms/op
Iteration   5: 0.676 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.517 ±(99.9%) 0.429 ms/op [Average]
  (min, avg, max) = (0.405, 0.517, 0.676), stdev = 0.111
  CI (99.9%): [0.088, 0.947] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 4.49% complete, ETA 01:45:19
# Fork: 1 of 1
# Warmup Iteration   1: 125.054 ms/op
# Warmup Iteration   2: 106.454 ms/op
# Warmup Iteration   3: 106.747 ms/op
# Warmup Iteration   4: 109.978 ms/op
# Warmup Iteration   5: 106.128 ms/op
Iteration   1: 114.077 ms/op
Iteration   2: 120.266 ms/op
Iteration   3: 150.927 ms/op
Iteration   4: 147.146 ms/op
Iteration   5: 177.076 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  141.898 ±(99.9%) 97.955 ms/op [Average]
  (min, avg, max) = (114.077, 141.898, 177.076), stdev = 25.439
  CI (99.9%): [43.943, 239.854] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 4.65% complete, ETA 01:45:26
# Fork: 1 of 1
# Warmup Iteration   1: 123.486 ms/op
# Warmup Iteration   2: 105.745 ms/op
# Warmup Iteration   3: 105.723 ms/op
# Warmup Iteration   4: 104.855 ms/op
# Warmup Iteration   5: 101.994 ms/op
Iteration   1: 104.311 ms/op
Iteration   2: 106.855 ms/op
Iteration   3: 145.194 ms/op
Iteration   4: 149.086 ms/op
Iteration   5: 179.263 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  136.942 ±(99.9%) 121.411 ms/op [Average]
  (min, avg, max) = (104.311, 136.942, 179.263), stdev = 31.530
  CI (99.9%): [15.531, 258.353] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 4.81% complete, ETA 01:45:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.047 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.036 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.026, 0.036, 0.047), stdev = 0.011
  CI (99.9%): [? 0, 0.077] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 4.97% complete, ETA 01:45:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.033 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.026, 0.033, 0.043), stdev = 0.009
  CI (99.9%): [? 10??, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 5.13% complete, ETA 01:44:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.847 ms/op
# Warmup Iteration   2: 0.766 ms/op
# Warmup Iteration   3: 0.752 ms/op
# Warmup Iteration   4: 0.760 ms/op
# Warmup Iteration   5: 0.767 ms/op
Iteration   1: 0.760 ms/op
Iteration   2: 0.779 ms/op
Iteration   3: 0.878 ms/op
Iteration   4: 1.370 ms/op
Iteration   5: 1.332 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1.024 ±(99.9%) 1.164 ms/op [Average]
  (min, avg, max) = (0.760, 1.024, 1.370), stdev = 0.302
  CI (99.9%): [? 0, 2.188] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 5.29% complete, ETA 01:44:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.869 ms/op
# Warmup Iteration   2: 0.760 ms/op
# Warmup Iteration   3: 0.754 ms/op
# Warmup Iteration   4: 0.789 ms/op
# Warmup Iteration   5: 0.776 ms/op
Iteration   1: 0.762 ms/op
Iteration   2: 0.764 ms/op
Iteration   3: 0.879 ms/op
Iteration   4: 1.286 ms/op
Iteration   5: 1.374 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1.013 ±(99.9%) 1.135 ms/op [Average]
  (min, avg, max) = (0.762, 1.013, 1.374), stdev = 0.295
  CI (99.9%): [? 0, 2.148] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 5.45% complete, ETA 01:44:30
# Fork: 1 of 1
# Warmup Iteration   1: 251.889 ms/op
# Warmup Iteration   2: 206.904 ms/op
# Warmup Iteration   3: 245.248 ms/op
# Warmup Iteration   4: 222.172 ms/op
# Warmup Iteration   5: 242.868 ms/op
Iteration   1: 221.689 ms/op
Iteration   2: 276.586 ms/op
Iteration   3: 343.206 ms/op
Iteration   4: 400.909 ms/op
Iteration   5: 329.022 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  314.282 ±(99.9%) 262.243 ms/op [Average]
  (min, avg, max) = (221.689, 314.282, 400.909), stdev = 68.104
  CI (99.9%): [52.039, 576.525] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 5.61% complete, ETA 01:44:46
# Fork: 1 of 1
# Warmup Iteration   1: 261.790 ms/op
# Warmup Iteration   2: 223.562 ms/op
# Warmup Iteration   3: 247.597 ms/op
# Warmup Iteration   4: 224.238 ms/op
# Warmup Iteration   5: 219.252 ms/op
Iteration   1: 263.635 ms/op
Iteration   2: 295.161 ms/op
Iteration   3: 387.476 ms/op
Iteration   4: 351.509 ms/op
Iteration   5: 344.260 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  328.408 ±(99.9%) 188.395 ms/op [Average]
  (min, avg, max) = (263.635, 328.408, 387.476), stdev = 48.926
  CI (99.9%): [140.013, 516.804] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 5.77% complete, ETA 01:44:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.061 ms/op
# Warmup Iteration   2: 0.053 ms/op
# Warmup Iteration   3: 0.054 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.053 ms/op
Iteration   1: 0.054 ms/op
Iteration   2: 0.052 ms/op
Iteration   3: 0.065 ms/op
Iteration   4: 0.079 ms/op
Iteration   5: 0.088 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.067 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.052, 0.067, 0.088), stdev = 0.016
  CI (99.9%): [0.007, 0.128] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 5.93% complete, ETA 01:44:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.059 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.052 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.052 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.052 ms/op
Iteration   3: 0.062 ms/op
Iteration   4: 0.092 ms/op
Iteration   5: 0.092 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.070 ±(99.9%) 0.078 ms/op [Average]
  (min, avg, max) = (0.052, 0.070, 0.092), stdev = 0.020
  CI (99.9%): [? 0, 0.148] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 6.09% complete, ETA 01:44:25
# Fork: 1 of 1
# Warmup Iteration   1: 1.716 ms/op
# Warmup Iteration   2: 1.518 ms/op
# Warmup Iteration   3: 1.492 ms/op
# Warmup Iteration   4: 1.494 ms/op
# Warmup Iteration   5: 1.486 ms/op
Iteration   1: 1.487 ms/op
Iteration   2: 1.496 ms/op
Iteration   3: 1.978 ms/op
Iteration   4: 2.698 ms/op
Iteration   5: 2.386 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  2.009 ±(99.9%) 2.068 ms/op [Average]
  (min, avg, max) = (1.487, 2.009, 2.698), stdev = 0.537
  CI (99.9%): [? 0, 4.077] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 6.25% complete, ETA 01:44:11
# Fork: 1 of 1
# Warmup Iteration   1: 1.704 ms/op
# Warmup Iteration   2: 1.532 ms/op
# Warmup Iteration   3: 1.530 ms/op
# Warmup Iteration   4: 1.479 ms/op
# Warmup Iteration   5: 1.516 ms/op
Iteration   1: 1.570 ms/op
Iteration   2: 1.607 ms/op
Iteration   3: 2.141 ms/op
Iteration   4: 4.020 ms/op
Iteration   5: 2.689 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  2.406 ±(99.9%) 3.895 ms/op [Average]
  (min, avg, max) = (1.570, 2.406, 4.020), stdev = 1.012
  CI (99.9%): [? 0, 6.301] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 6.41% complete, ETA 01:43:57
# Fork: 1 of 1
# Warmup Iteration   1: 513.997 ms/op
# Warmup Iteration   2: 607.027 ms/op
# Warmup Iteration   3: 677.907 ms/op
# Warmup Iteration   4: 685.459 ms/op
# Warmup Iteration   5: 622.087 ms/op
Iteration   1: 563.496 ms/op
Iteration   2: 1192.205 ms/op
Iteration   3: 1014.499 ms/op
Iteration   4: 845.731 ms/op
Iteration   5: 724.852 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  868.157 ±(99.9%) 943.762 ms/op [Average]
  (min, avg, max) = (563.496, 868.157, 1192.205), stdev = 245.092
  CI (99.9%): [? 0, 1811.919] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 6.57% complete, ETA 01:44:24
# Fork: 1 of 1
# Warmup Iteration   1: 509.482 ms/op
# Warmup Iteration   2: 583.318 ms/op
# Warmup Iteration   3: 586.365 ms/op
# Warmup Iteration   4: 519.692 ms/op
# Warmup Iteration   5: 574.976 ms/op
Iteration   1: 575.751 ms/op
Iteration   2: 774.213 ms/op
Iteration   3: 763.185 ms/op
Iteration   4: 645.623 ms/op
Iteration   5: 661.667 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  684.088 ±(99.9%) 322.732 ms/op [Average]
  (min, avg, max) = (575.751, 684.088, 774.213), stdev = 83.812
  CI (99.9%): [361.356, 1006.819] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 6.73% complete, ETA 01:44:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.120 ms/op
# Warmup Iteration   2: 0.106 ms/op
# Warmup Iteration   3: 0.104 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.105 ms/op
Iteration   1: 0.103 ms/op
Iteration   2: 0.104 ms/op
Iteration   3: 0.121 ms/op
Iteration   4: 0.199 ms/op
Iteration   5: 0.175 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.140 ±(99.9%) 0.169 ms/op [Average]
  (min, avg, max) = (0.103, 0.140, 0.199), stdev = 0.044
  CI (99.9%): [? 0, 0.310] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 6.89% complete, ETA 01:44:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.116 ms/op
# Warmup Iteration   2: 0.102 ms/op
# Warmup Iteration   3: 0.103 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.103 ms/op
Iteration   1: 0.103 ms/op
Iteration   2: 0.101 ms/op
Iteration   3: 0.121 ms/op
Iteration   4: 0.183 ms/op
Iteration   5: 0.181 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.138 ±(99.9%) 0.159 ms/op [Average]
  (min, avg, max) = (0.101, 0.138, 0.183), stdev = 0.041
  CI (99.9%): [? 0, 0.297] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 7.05% complete, ETA 01:44:18
# Fork: 1 of 1
# Warmup Iteration   1: 3.461 ms/op
# Warmup Iteration   2: 3.001 ms/op
# Warmup Iteration   3: 2.994 ms/op
# Warmup Iteration   4: 2.958 ms/op
# Warmup Iteration   5: 2.970 ms/op
Iteration   1: 3.000 ms/op
Iteration   2: 2.985 ms/op
Iteration   3: 3.377 ms/op
Iteration   4: 4.852 ms/op
Iteration   5: 5.476 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  3.938 ±(99.9%) 4.433 ms/op [Average]
  (min, avg, max) = (2.985, 3.938, 5.476), stdev = 1.151
  CI (99.9%): [? 0, 8.371] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 7.21% complete, ETA 01:44:02
# Fork: 1 of 1
# Warmup Iteration   1: 3.624 ms/op
# Warmup Iteration   2: 3.065 ms/op
# Warmup Iteration   3: 2.964 ms/op
# Warmup Iteration   4: 2.964 ms/op
# Warmup Iteration   5: 2.972 ms/op
Iteration   1: 2.957 ms/op
Iteration   2: 2.969 ms/op
Iteration   3: 3.588 ms/op
Iteration   4: 5.589 ms/op
Iteration   5: 4.893 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  3.999 ±(99.9%) 4.574 ms/op [Average]
  (min, avg, max) = (2.957, 3.999, 5.589), stdev = 1.188
  CI (99.9%): [? 0, 8.573] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 7.37% complete, ETA 01:43:48
# Fork: 1 of 1
# Warmup Iteration   1: 977.238 ms/op
# Warmup Iteration   2: 1195.595 ms/op
# Warmup Iteration   3: 1048.479 ms/op
# Warmup Iteration   4: 923.638 ms/op
# Warmup Iteration   5: 1254.449 ms/op
Iteration   1: 1201.200 ms/op
Iteration   2: 1223.408 ms/op
Iteration   3: 1037.476 ms/op
Iteration   4: 1224.712 ms/op
Iteration   5: 1122.653 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1161.890 ±(99.9%) 312.203 ms/op [Average]
  (min, avg, max) = (1037.476, 1161.890, 1224.712), stdev = 81.078
  CI (99.9%): [849.687, 1474.093] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 7.53% complete, ETA 01:44:55
# Fork: 1 of 1
# Warmup Iteration   1: 939.436 ms/op
# Warmup Iteration   2: 1222.102 ms/op
# Warmup Iteration   3: 894.686 ms/op
# Warmup Iteration   4: 1041.692 ms/op
# Warmup Iteration   5: 856.264 ms/op
Iteration   1: 1302.852 ms/op
Iteration   2: 1252.774 ms/op
Iteration   3: 1363.529 ms/op
Iteration   4: 1623.530 ms/op
Iteration   5: 1171.906 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1342.918 ±(99.9%) 661.774 ms/op [Average]
  (min, avg, max) = (1171.906, 1342.918, 1623.530), stdev = 171.861
  CI (99.9%): [681.144, 2004.692] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 7.69% complete, ETA 01:45:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.243 ms/op
# Warmup Iteration   2: 0.208 ms/op
# Warmup Iteration   3: 0.202 ms/op
# Warmup Iteration   4: 0.203 ms/op
# Warmup Iteration   5: 0.202 ms/op
Iteration   1: 0.204 ms/op
Iteration   2: 0.207 ms/op
Iteration   3: 0.238 ms/op
Iteration   4: 0.371 ms/op
Iteration   5: 0.313 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.267 ±(99.9%) 0.280 ms/op [Average]
  (min, avg, max) = (0.204, 0.267, 0.371), stdev = 0.073
  CI (99.9%): [? 0, 0.547] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 7.85% complete, ETA 01:45:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.227 ms/op
# Warmup Iteration   2: 0.207 ms/op
# Warmup Iteration   3: 0.201 ms/op
# Warmup Iteration   4: 0.202 ms/op
# Warmup Iteration   5: 0.204 ms/op
Iteration   1: 0.202 ms/op
Iteration   2: 0.203 ms/op
Iteration   3: 0.234 ms/op
Iteration   4: 0.382 ms/op
Iteration   5: 0.360 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.276 ±(99.9%) 0.338 ms/op [Average]
  (min, avg, max) = (0.202, 0.276, 0.382), stdev = 0.088
  CI (99.9%): [? 0, 0.614] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 8.01% complete, ETA 01:45:11
# Fork: 1 of 1
# Warmup Iteration   1: 7.134 ms/op
# Warmup Iteration   2: 5.947 ms/op
# Warmup Iteration   3: 6.057 ms/op
# Warmup Iteration   4: 6.029 ms/op
# Warmup Iteration   5: 5.988 ms/op
Iteration   1: 6.103 ms/op
Iteration   2: 6.021 ms/op
Iteration   3: 6.985 ms/op
Iteration   4: 10.860 ms/op
Iteration   5: 9.167 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  7.827 ±(99.9%) 8.155 ms/op [Average]
  (min, avg, max) = (6.021, 7.827, 10.860), stdev = 2.118
  CI (99.9%): [? 0, 15.983] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 8.17% complete, ETA 01:44:55
# Fork: 1 of 1
# Warmup Iteration   1: 7.068 ms/op
# Warmup Iteration   2: 5.901 ms/op
# Warmup Iteration   3: 5.961 ms/op
# Warmup Iteration   4: 5.935 ms/op
# Warmup Iteration   5: 5.921 ms/op
Iteration   1: 5.978 ms/op
Iteration   2: 5.930 ms/op
Iteration   3: 7.085 ms/op
Iteration   4: 9.112 ms/op
Iteration   5: 8.741 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  7.369 ±(99.9%) 5.778 ms/op [Average]
  (min, avg, max) = (5.930, 7.369, 9.112), stdev = 1.501
  CI (99.9%): [1.591, 13.148] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 8.33% complete, ETA 01:44:39
# Fork: 1 of 1
# Warmup Iteration   1: 1975.624 ms/op
# Warmup Iteration   2: 2240.972 ms/op
# Warmup Iteration   3: 2033.331 ms/op
# Warmup Iteration   4: 2084.595 ms/op
# Warmup Iteration   5: 2723.113 ms/op
Iteration   1: 2783.518 ms/op
Iteration   2: 2877.795 ms/op
Iteration   3: 2753.683 ms/op
Iteration   4: 2975.903 ms/op
Iteration   5: 3350.030 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  2948.186 ±(99.9%) 927.655 ms/op [Average]
  (min, avg, max) = (2753.683, 2948.186, 3350.030), stdev = 240.909
  CI (99.9%): [2020.531, 3875.841] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 8.49% complete, ETA 01:47:27
# Fork: 1 of 1
# Warmup Iteration   1: 2384.461 ms/op
# Warmup Iteration   2: 2499.337 ms/op
# Warmup Iteration   3: 2588.012 ms/op
# Warmup Iteration   4: 4143.595 ms/op
# Warmup Iteration   5: 3352.313 ms/op
Iteration   1: 2865.177 ms/op
Iteration   2: 4778.945 ms/op
Iteration   3: 4041.814 ms/op
Iteration   4: 3587.058 ms/op
Iteration   5: 3616.951 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  3777.989 ±(99.9%) 2700.349 ms/op [Average]
  (min, avg, max) = (2865.177, 3777.989, 4778.945), stdev = 701.272
  CI (99.9%): [1077.640, 6478.338] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 8.65% complete, ETA 01:51:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.523 ms/op
# Warmup Iteration   2: 0.467 ms/op
# Warmup Iteration   3: 0.466 ms/op
# Warmup Iteration   4: 0.469 ms/op
# Warmup Iteration   5: 0.466 ms/op
Iteration   1: 0.465 ms/op
Iteration   2: 0.464 ms/op
Iteration   3: 0.576 ms/op
Iteration   4: 0.712 ms/op
Iteration   5: 0.773 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.598 ±(99.9%) 0.543 ms/op [Average]
  (min, avg, max) = (0.464, 0.598, 0.773), stdev = 0.141
  CI (99.9%): [0.055, 1.141] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 8.81% complete, ETA 01:51:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.458 ms/op
# Warmup Iteration   2: 0.420 ms/op
# Warmup Iteration   3: 0.457 ms/op
# Warmup Iteration   4: 0.466 ms/op
# Warmup Iteration   5: 0.461 ms/op
Iteration   1: 0.430 ms/op
Iteration   2: 0.429 ms/op
Iteration   3: 0.536 ms/op
Iteration   4: 0.738 ms/op
Iteration   5: 0.655 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.558 ±(99.9%) 0.529 ms/op [Average]
  (min, avg, max) = (0.429, 0.558, 0.738), stdev = 0.137
  CI (99.9%): [0.029, 1.086] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 8.97% complete, ETA 01:50:40
# Fork: 1 of 1
# Warmup Iteration   1: 16.824 ms/op
# Warmup Iteration   2: 12.060 ms/op
# Warmup Iteration   3: 12.030 ms/op
# Warmup Iteration   4: 12.136 ms/op
# Warmup Iteration   5: 11.869 ms/op
Iteration   1: 12.098 ms/op
Iteration   2: 12.717 ms/op
Iteration   3: 16.482 ms/op
Iteration   4: 21.035 ms/op
Iteration   5: 19.878 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  16.442 ±(99.9%) 15.601 ms/op [Average]
  (min, avg, max) = (12.098, 16.442, 21.035), stdev = 4.051
  CI (99.9%): [0.841, 32.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 9.13% complete, ETA 01:50:17
# Fork: 1 of 1
# Warmup Iteration   1: 17.027 ms/op
# Warmup Iteration   2: 12.777 ms/op
# Warmup Iteration   3: 11.831 ms/op
# Warmup Iteration   4: 11.978 ms/op
# Warmup Iteration   5: 11.855 ms/op
Iteration   1: 11.786 ms/op
Iteration   2: 11.974 ms/op
Iteration   3: 13.783 ms/op
Iteration   4: 20.245 ms/op
Iteration   5: 19.203 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  15.398 ±(99.9%) 15.564 ms/op [Average]
  (min, avg, max) = (11.786, 15.398, 20.245), stdev = 4.042
  CI (99.9%): [? 0, 30.962] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 9.29% complete, ETA 01:49:54
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:104)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 9.46% complete, ETA 01:50:10
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:104)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 9.62% complete, ETA 01:50:47
# Fork: 1 of 1
# Warmup Iteration   1: 1.000 ms/op
# Warmup Iteration   2: 0.877 ms/op
# Warmup Iteration   3: 0.857 ms/op
# Warmup Iteration   4: 0.861 ms/op
# Warmup Iteration   5: 0.862 ms/op
Iteration   1: 0.860 ms/op
Iteration   2: 0.862 ms/op
Iteration   3: 1.042 ms/op
Iteration   4: 1.409 ms/op
Iteration   5: 1.499 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1.134 ±(99.9%) 1.165 ms/op [Average]
  (min, avg, max) = (0.860, 1.134, 1.499), stdev = 0.303
  CI (99.9%): [? 0, 2.300] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 9.78% complete, ETA 01:50:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.945 ms/op
# Warmup Iteration   2: 0.851 ms/op
# Warmup Iteration   3: 0.840 ms/op
# Warmup Iteration   4: 0.845 ms/op
# Warmup Iteration   5: 0.859 ms/op
Iteration   1: 0.839 ms/op
Iteration   2: 0.853 ms/op
Iteration   3: 0.977 ms/op
Iteration   4: 1.351 ms/op
Iteration   5: 1.333 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1.070 ±(99.9%) 0.975 ms/op [Average]
  (min, avg, max) = (0.839, 1.070, 1.351), stdev = 0.253
  CI (99.9%): [0.095, 2.046] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 9.94% complete, ETA 01:49:59
# Fork: 1 of 1
# Warmup Iteration   1: 39.015 ms/op
# Warmup Iteration   2: 23.868 ms/op
# Warmup Iteration   3: 23.943 ms/op
# Warmup Iteration   4: 23.773 ms/op
# Warmup Iteration   5: 23.724 ms/op
Iteration   1: 23.695 ms/op
Iteration   2: 23.788 ms/op
Iteration   3: 32.392 ms/op
Iteration   4: 43.642 ms/op
Iteration   5: 35.377 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  31.779 ±(99.9%) 32.404 ms/op [Average]
  (min, avg, max) = (23.695, 31.779, 43.642), stdev = 8.415
  CI (99.9%): [? 0, 64.183] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 10.10% complete, ETA 01:49:38
# Fork: 1 of 1
# Warmup Iteration   1: 40.887 ms/op
# Warmup Iteration   2: 25.186 ms/op
# Warmup Iteration   3: 25.512 ms/op
# Warmup Iteration   4: 24.868 ms/op
# Warmup Iteration   5: 25.500 ms/op
Iteration   1: 26.029 ms/op
Iteration   2: 26.046 ms/op
Iteration   3: 36.315 ms/op
Iteration   4: 42.538 ms/op
Iteration   5: 39.514 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  34.088 ±(99.9%) 29.542 ms/op [Average]
  (min, avg, max) = (26.029, 34.088, 42.538), stdev = 7.672
  CI (99.9%): [4.547, 63.630] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 10.26% complete, ETA 01:49:17
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:104)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 10.42% complete, ETA 01:49:32
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:104)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 10.58% complete, ETA 01:49:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 10.74% complete, ETA 01:49:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 10.90% complete, ETA 01:48:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 11.06% complete, ETA 01:48:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 11.22% complete, ETA 01:48:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 11.38% complete, ETA 01:47:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 11.54% complete, ETA 01:47:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 11.70% complete, ETA 01:47:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 11.86% complete, ETA 01:46:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 12.02% complete, ETA 01:46:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 12.18% complete, ETA 01:46:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 12.34% complete, ETA 01:45:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 12.50% complete, ETA 01:45:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 12.66% complete, ETA 01:45:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 12.82% complete, ETA 01:44:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 12.98% complete, ETA 01:44:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 13.14% complete, ETA 01:44:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 13.30% complete, ETA 01:43:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 13.46% complete, ETA 01:43:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 13.62% complete, ETA 01:43:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 13.78% complete, ETA 01:42:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 13.94% complete, ETA 01:42:41
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 14.10% complete, ETA 01:42:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 14.26% complete, ETA 01:42:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 14.42% complete, ETA 01:41:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 14.58% complete, ETA 01:41:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 14.74% complete, ETA 01:41:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 14.90% complete, ETA 01:40:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 15.06% complete, ETA 01:40:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 15.22% complete, ETA 01:40:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 15.38% complete, ETA 01:40:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 15.54% complete, ETA 01:39:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 15.71% complete, ETA 01:39:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 15.87% complete, ETA 01:39:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 16.03% complete, ETA 01:39:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 16.19% complete, ETA 01:38:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 16.35% complete, ETA 01:38:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10?³, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 16.51% complete, ETA 01:38:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 16.67% complete, ETA 01:38:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 16.83% complete, ETA 01:37:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 16.99% complete, ETA 01:37:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 10?³, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 17.15% complete, ETA 01:37:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 10??, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 17.31% complete, ETA 01:37:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.007 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 17.47% complete, ETA 01:36:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.007 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 17.63% complete, ETA 01:36:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.009 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 17.79% complete, ETA 01:36:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.010 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.014), stdev = 0.004
  CI (99.9%): [? 0, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 17.95% complete, ETA 01:36:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.008 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.012), stdev = 0.002
  CI (99.9%): [? 0, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 18.11% complete, ETA 01:35:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.011), stdev = 0.002
  CI (99.9%): [? 10??, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 18.27% complete, ETA 01:35:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.014 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.018), stdev = 0.003
  CI (99.9%): [0.001, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 18.43% complete, ETA 01:35:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.014 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.018), stdev = 0.003
  CI (99.9%): [0.001, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 18.59% complete, ETA 01:35:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.018 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.014, 0.018, 0.025), stdev = 0.006
  CI (99.9%): [? 0, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 18.75% complete, ETA 01:34:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.017 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.013, 0.017, 0.022), stdev = 0.005
  CI (99.9%): [? 0, 0.035] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 18.91% complete, ETA 01:34:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.015 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.020), stdev = 0.004
  CI (99.9%): [0.002, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 19.07% complete, ETA 01:34:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.016 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.021), stdev = 0.004
  CI (99.9%): [0.002, 0.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 19.23% complete, ETA 01:34:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.026 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.021, 0.026, 0.033), stdev = 0.005
  CI (99.9%): [0.006, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 19.39% complete, ETA 01:33:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.029 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.022, 0.029, 0.039), stdev = 0.009
  CI (99.9%): [? 0, 0.062] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 19.55% complete, ETA 01:33:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.046 ms/op
Iteration   5: 0.044 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.035 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.027, 0.035, 0.046), stdev = 0.009
  CI (99.9%): [? 0, 0.071] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 19.71% complete, ETA 01:33:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.028 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.044 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.035 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.026, 0.035, 0.045), stdev = 0.009
  CI (99.9%): [? 0, 0.070] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 19.87% complete, ETA 01:33:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.036 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.032 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.025, 0.032, 0.043), stdev = 0.008
  CI (99.9%): [0.003, 0.061] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 20.03% complete, ETA 01:32:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.030 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.024, 0.030, 0.038), stdev = 0.006
  CI (99.9%): [0.006, 0.055] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 20.19% complete, ETA 01:32:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.043 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.043 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.043 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.074 ms/op
Iteration   5: 0.072 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.056 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (0.043, 0.056, 0.074), stdev = 0.016
  CI (99.9%): [? 0, 0.117] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 20.35% complete, ETA 01:32:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.043 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.043 ms/op
# Warmup Iteration   5: 0.043 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.043 ms/op
Iteration   3: 0.046 ms/op
Iteration   4: 0.070 ms/op
Iteration   5: 0.065 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.054 ±(99.9%) 0.050 ms/op [Average]
  (min, avg, max) = (0.043, 0.054, 0.070), stdev = 0.013
  CI (99.9%): [0.003, 0.104] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 20.51% complete, ETA 01:32:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
# Warmup Iteration   2: 0.051 ms/op
# Warmup Iteration   3: 0.050 ms/op
# Warmup Iteration   4: 0.050 ms/op
# Warmup Iteration   5: 0.050 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.065 ms/op
Iteration   4: 0.085 ms/op
Iteration   5: 0.089 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.070 ±(99.9%) 0.064 ms/op [Average]
  (min, avg, max) = (0.054, 0.070, 0.089), stdev = 0.017
  CI (99.9%): [0.006, 0.134] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 20.67% complete, ETA 01:31:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
# Warmup Iteration   2: 0.051 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.050 ms/op
# Warmup Iteration   5: 0.051 ms/op
Iteration   1: 0.054 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.062 ms/op
Iteration   4: 0.095 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.071 ±(99.9%) 0.078 ms/op [Average]
  (min, avg, max) = (0.054, 0.071, 0.095), stdev = 0.020
  CI (99.9%): [? 0, 0.149] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 20.83% complete, ETA 01:31:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.074 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.060 ms/op
# Warmup Iteration   4: 0.060 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.061 ms/op
Iteration   3: 0.070 ms/op
Iteration   4: 0.094 ms/op
Iteration   5: 0.087 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.074 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.059, 0.074, 0.094), stdev = 0.016
  CI (99.9%): [0.014, 0.134] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 20.99% complete, ETA 01:31:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.059 ms/op
# Warmup Iteration   5: 0.059 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.062 ms/op
Iteration   3: 0.065 ms/op
Iteration   4: 0.097 ms/op
Iteration   5: 0.092 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.075 ±(99.9%) 0.070 ms/op [Average]
  (min, avg, max) = (0.058, 0.075, 0.097), stdev = 0.018
  CI (99.9%): [0.005, 0.145] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 21.15% complete, ETA 01:31:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.002 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 21.31% complete, ETA 01:31:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.002 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 21.47% complete, ETA 01:30:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: 0.001 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 21.63% complete, ETA 01:30:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: 0.001 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 21.79% complete, ETA 01:30:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.004), stdev = 0.002
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 21.96% complete, ETA 01:30:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 22.12% complete, ETA 01:30:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.002
  CI (99.9%): [? 0, 0.035] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 22.28% complete, ETA 01:30:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.002 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 22.44% complete, ETA 01:30:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.066 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.017 ±(99.9%) 0.209 ms/op [Average]
  (min, avg, max) = (0.001, 0.017, 0.066), stdev = 0.032
  CI (99.9%): [? 0, 0.226] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 22.60% complete, ETA 01:30:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 22.76% complete, ETA 01:29:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 22.92% complete, ETA 01:29:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 23.08% complete, ETA 01:29:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.006 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 23.24% complete, ETA 01:29:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 23.40% complete, ETA 01:29:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.005), stdev = 0.002
  CI (99.9%): [? 0, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 23.56% complete, ETA 01:29:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.002
  CI (99.9%): [? 0, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 23.72% complete, ETA 01:29:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 23.88% complete, ETA 01:28:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 24.04% complete, ETA 01:28:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.005 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 24.20% complete, ETA 01:28:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.010 ±(99.9%) 0.272 ms/op [Average]
  (min, avg, max) = (0.002, 0.010, 0.028), stdev = 0.015
  CI (99.9%): [? 0, 0.282] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 24.36% complete, ETA 01:28:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 24.52% complete, ETA 01:28:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.002, 0.005, 0.012), stdev = 0.005
  CI (99.9%): [? 0, 0.035] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 24.68% complete, ETA 01:28:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.003, 0.006, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 24.84% complete, ETA 01:28:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 10??, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 25.00% complete, ETA 01:28:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.014 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 25.16% complete, ETA 01:28:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.102 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.036 ±(99.9%) 1.032 ms/op [Average]
  (min, avg, max) = (0.003, 0.036, 0.102), stdev = 0.057
  CI (99.9%): [? 0, 1.068] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 25.32% complete, ETA 01:27:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 25.48% complete, ETA 01:27:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.009 ±(99.9%) 0.043 ms/op [Average]
  (min, avg, max) = (0.004, 0.009, 0.018), stdev = 0.007
  CI (99.9%): [? 0, 0.052] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 25.64% complete, ETA 01:27:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.012 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.008, 0.012, 0.019), stdev = 0.004
  CI (99.9%): [? 0, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 25.80% complete, ETA 01:27:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.013 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.008, 0.013, 0.022), stdev = 0.005
  CI (99.9%): [? 0, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 25.96% complete, ETA 01:27:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.087 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.034 ±(99.9%) 0.838 ms/op [Average]
  (min, avg, max) = (0.007, 0.034, 0.087), stdev = 0.046
  CI (99.9%): [? 0, 0.872] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 26.12% complete, ETA 01:27:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.020 ±(99.9%) 0.379 ms/op [Average]
  (min, avg, max) = (0.007, 0.020, 0.044), stdev = 0.021
  CI (99.9%): [? 0, 0.399] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 26.28% complete, ETA 01:27:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.012 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.015), stdev = 0.002
  CI (99.9%): [0.004, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 26.44% complete, ETA 01:27:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.013 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.009, 0.013, 0.017), stdev = 0.003
  CI (99.9%): [? 10?³, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 26.60% complete, ETA 01:27:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.057 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.027 ±(99.9%) 0.067 ms/op [Average]
  (min, avg, max) = (0.015, 0.027, 0.057), stdev = 0.017
  CI (99.9%): [? 0, 0.094] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 26.76% complete, ETA 01:27:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.048 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.025 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (0.017, 0.025, 0.048), stdev = 0.013
  CI (99.9%): [? 0, 0.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 26.92% complete, ETA 01:27:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.293 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.153 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 27.08% complete, ETA 01:26:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.154 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.083 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 27.24% complete, ETA 01:26:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.150 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.047 ±(99.9%) 0.223 ms/op [Average]
  (min, avg, max) = (0.016, 0.047, 0.150), stdev = 0.058
  CI (99.9%): [? 0, 0.270] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 27.40% complete, ETA 01:26:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.024 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.017, 0.024, 0.032), stdev = 0.006
  CI (99.9%): [0.002, 0.046] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 27.56% complete, ETA 01:26:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.041 ms/op
# Warmup Iteration   2: 0.038 ms/op
# Warmup Iteration   3: 0.041 ms/op
# Warmup Iteration   4: 0.039 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.041 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.045 ms/op
Iteration   4: 0.060 ms/op
Iteration   5: 0.066 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.050 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (0.037, 0.050, 0.066), stdev = 0.013
  CI (99.9%): [0.001, 0.099] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 27.72% complete, ETA 01:26:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.043 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.054 ms/op
Iteration   4: 0.056 ms/op
Iteration   5: 0.068 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.056 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.042, 0.056, 0.068), stdev = 0.010
  CI (99.9%): [0.019, 0.093] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 27.88% complete, ETA 01:25:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.028 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 7.002 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  3.518 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 28.04% complete, ETA 01:25:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.034 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.320 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.125 ±(99.9%) 3.080 ms/op [Average]
  (min, avg, max) = (0.025, 0.125, 0.320), stdev = 0.169
  CI (99.9%): [? 0, 3.205] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 28.21% complete, ETA 01:25:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.043 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.038 ms/op
Iteration   1: 0.112 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.072 ms/op
Iteration   5: 0.053 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.067 ±(99.9%) 0.108 ms/op [Average]
  (min, avg, max) = (0.040, 0.067, 0.112), stdev = 0.028
  CI (99.9%): [? 0, 0.175] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 28.37% complete, ETA 01:25:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.036 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.043 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.074 ms/op
Iteration   2: 0.041 ms/op
Iteration   3: 0.063 ms/op
Iteration   4: 0.086 ms/op
Iteration   5: 0.053 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.063 ±(99.9%) 0.067 ms/op [Average]
  (min, avg, max) = (0.041, 0.063, 0.086), stdev = 0.017
  CI (99.9%): [? 0, 0.130] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 28.53% complete, ETA 01:25:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.087 ms/op
# Warmup Iteration   2: 0.087 ms/op
# Warmup Iteration   3: 0.086 ms/op
# Warmup Iteration   4: 0.082 ms/op
# Warmup Iteration   5: 0.102 ms/op
Iteration   1: 0.128 ms/op
Iteration   2: 0.107 ms/op
Iteration   3: 0.128 ms/op
Iteration   4: 0.199 ms/op
Iteration   5: 0.133 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.139 ±(99.9%) 0.135 ms/op [Average]
  (min, avg, max) = (0.107, 0.139, 0.199), stdev = 0.035
  CI (99.9%): [0.004, 0.274] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 28.69% complete, ETA 01:24:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.099 ms/op
# Warmup Iteration   2: 0.095 ms/op
# Warmup Iteration   3: 0.102 ms/op
# Warmup Iteration   4: 0.109 ms/op
# Warmup Iteration   5: 0.119 ms/op
Iteration   1: 0.100 ms/op
Iteration   2: 0.158 ms/op
Iteration   3: 0.147 ms/op
Iteration   4: 0.128 ms/op
Iteration   5: 0.137 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.134 ±(99.9%) 0.084 ms/op [Average]
  (min, avg, max) = (0.100, 0.134, 0.158), stdev = 0.022
  CI (99.9%): [0.050, 0.218] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 28.85% complete, ETA 01:24:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.061 ms/op
# Warmup Iteration   2: 0.073 ms/op
# Warmup Iteration   3: 0.064 ms/op
# Warmup Iteration   4: 0.106 ms/op
# Warmup Iteration   5: 0.067 ms/op
Iteration   1: 0.061 ms/op
Iteration   2: 0.073 ms/op
Iteration   3: 0.126 ms/op
Iteration   4: 14.926 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  3.796 ±(99.9%) 47.945 ms/op [Average]
  (min, avg, max) = (0.061, 3.796, 14.926), stdev = 7.420
  CI (99.9%): [? 0, 51.741] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 29.01% complete, ETA 01:24:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ms/op
# Warmup Iteration   2: 0.065 ms/op
# Warmup Iteration   3: 0.060 ms/op
# Warmup Iteration   4: 0.092 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.061 ms/op
Iteration   3: 0.547 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.222 ±(99.9%) 5.131 ms/op [Average]
  (min, avg, max) = (0.059, 0.222, 0.547), stdev = 0.281
  CI (99.9%): [? 0, 5.354] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 29.17% complete, ETA 01:24:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.091 ms/op
# Warmup Iteration   2: 0.071 ms/op
# Warmup Iteration   3: 0.101 ms/op
# Warmup Iteration   4: 0.088 ms/op
# Warmup Iteration   5: 0.070 ms/op
Iteration   1: 0.167 ms/op
Iteration   2: 0.068 ms/op
Iteration   3: 0.105 ms/op
Iteration   4: 0.124 ms/op
Iteration   5: 0.085 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.110 ±(99.9%) 0.148 ms/op [Average]
  (min, avg, max) = (0.068, 0.110, 0.167), stdev = 0.038
  CI (99.9%): [? 0, 0.258] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 29.33% complete, ETA 01:24:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.074 ms/op
# Warmup Iteration   2: 0.062 ms/op
# Warmup Iteration   3: 0.100 ms/op
# Warmup Iteration   4: 0.080 ms/op
# Warmup Iteration   5: 0.132 ms/op
Iteration   1: 0.065 ms/op
Iteration   2: 0.075 ms/op
Iteration   3: 0.100 ms/op
Iteration   4: 0.088 ms/op
Iteration   5: 0.288 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.123 ±(99.9%) 0.359 ms/op [Average]
  (min, avg, max) = (0.065, 0.123, 0.288), stdev = 0.093
  CI (99.9%): [? 0, 0.483] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 29.49% complete, ETA 01:24:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.173 ms/op
# Warmup Iteration   2: 0.172 ms/op
# Warmup Iteration   3: 0.171 ms/op
# Warmup Iteration   4: 0.167 ms/op
# Warmup Iteration   5: 0.155 ms/op
Iteration   1: 0.230 ms/op
Iteration   2: 0.147 ms/op
Iteration   3: 0.252 ms/op
Iteration   4: 0.264 ms/op
Iteration   5: 0.228 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.224 ±(99.9%) 0.176 ms/op [Average]
  (min, avg, max) = (0.147, 0.224, 0.264), stdev = 0.046
  CI (99.9%): [0.048, 0.400] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 29.65% complete, ETA 01:23:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.201 ms/op
# Warmup Iteration   2: 0.192 ms/op
# Warmup Iteration   3: 0.204 ms/op
# Warmup Iteration   4: 0.184 ms/op
# Warmup Iteration   5: 0.187 ms/op
Iteration   1: 0.218 ms/op
Iteration   2: 0.178 ms/op
Iteration   3: 0.249 ms/op
Iteration   4: 0.284 ms/op
Iteration   5: 0.293 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.244 ±(99.9%) 0.183 ms/op [Average]
  (min, avg, max) = (0.178, 0.244, 0.293), stdev = 0.047
  CI (99.9%): [0.062, 0.427] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 29.81% complete, ETA 01:23:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.108 ms/op
# Warmup Iteration   2: 0.103 ms/op
# Warmup Iteration   3: 0.117 ms/op
# Warmup Iteration   4: 0.092 ms/op
# Warmup Iteration   5: 0.083 ms/op
Iteration   1: 0.352 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.352 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 29.97% complete, ETA 01:23:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.110 ms/op
# Warmup Iteration   2: 0.113 ms/op
# Warmup Iteration   3: 0.085 ms/op
# Warmup Iteration   4: 0.150 ms/op
# Warmup Iteration   5: 0.096 ms/op
Iteration   1: 0.105 ms/op
Iteration   2: 2.216 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  1.161 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 30.13% complete, ETA 01:23:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.146 ms/op
# Warmup Iteration   2: 0.124 ms/op
# Warmup Iteration   3: 0.191 ms/op
# Warmup Iteration   4: 0.153 ms/op
# Warmup Iteration   5: 0.226 ms/op
Iteration   1: 0.130 ms/op
Iteration   2: 0.153 ms/op
Iteration   3: 0.188 ms/op
Iteration   4: 0.195 ms/op
Iteration   5: 0.618 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.257 ±(99.9%) 0.784 ms/op [Average]
  (min, avg, max) = (0.130, 0.257, 0.618), stdev = 0.204
  CI (99.9%): [? 0, 1.041] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 30.29% complete, ETA 01:23:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.142 ms/op
# Warmup Iteration   2: 0.153 ms/op
# Warmup Iteration   3: 0.145 ms/op
# Warmup Iteration   4: 0.132 ms/op
# Warmup Iteration   5: 0.297 ms/op
Iteration   1: 0.136 ms/op
Iteration   2: 0.153 ms/op
Iteration   3: 0.219 ms/op
Iteration   4: 0.193 ms/op
Iteration   5: 0.726 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.285 ±(99.9%) 0.956 ms/op [Average]
  (min, avg, max) = (0.136, 0.285, 0.726), stdev = 0.248
  CI (99.9%): [? 0, 1.241] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 30.45% complete, ETA 01:22:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.438 ms/op
# Warmup Iteration   2: 0.389 ms/op
# Warmup Iteration   3: 0.385 ms/op
# Warmup Iteration   4: 0.442 ms/op
# Warmup Iteration   5: 0.337 ms/op
Iteration   1: 0.445 ms/op
Iteration   2: 0.479 ms/op
Iteration   3: 0.480 ms/op
Iteration   4: 0.549 ms/op
Iteration   5: 0.514 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.493 ±(99.9%) 0.153 ms/op [Average]
  (min, avg, max) = (0.445, 0.493, 0.549), stdev = 0.040
  CI (99.9%): [0.341, 0.646] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 30.61% complete, ETA 01:22:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.431 ms/op
# Warmup Iteration   2: 0.408 ms/op
# Warmup Iteration   3: 0.398 ms/op
# Warmup Iteration   4: 0.432 ms/op
# Warmup Iteration   5: 0.408 ms/op
Iteration   1: 0.398 ms/op
Iteration   2: 0.459 ms/op
Iteration   3: 0.569 ms/op
Iteration   4: 0.749 ms/op
Iteration   5: 0.607 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.556 ±(99.9%) 0.525 ms/op [Average]
  (min, avg, max) = (0.398, 0.556, 0.749), stdev = 0.136
  CI (99.9%): [0.031, 1.081] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 30.77% complete, ETA 01:22:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.216 ms/op
# Warmup Iteration   2: 0.204 ms/op
# Warmup Iteration   3: 0.193 ms/op
# Warmup Iteration   4: 0.643 ms/op
# Warmup Iteration   5: 0.232 ms/op
Iteration   1: 0.228 ms/op
Iteration   2: 0.622 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.425 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 30.93% complete, ETA 01:22:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.267 ms/op
# Warmup Iteration   2: 0.268 ms/op
# Warmup Iteration   3: 0.252 ms/op
# Warmup Iteration   4: 0.363 ms/op
# Warmup Iteration   5: 0.275 ms/op
Iteration   1: 0.203 ms/op
Iteration   2: 0.255 ms/op
Iteration   3: 2.013 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.824 ±(99.9%) 18.793 ms/op [Average]
  (min, avg, max) = (0.203, 0.824, 2.013), stdev = 1.030
  CI (99.9%): [? 0, 19.617] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 31.09% complete, ETA 01:22:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.381 ms/op
# Warmup Iteration   2: 0.305 ms/op
# Warmup Iteration   3: 0.436 ms/op
# Warmup Iteration   4: 0.385 ms/op
# Warmup Iteration   5: 0.317 ms/op
Iteration   1: 0.795 ms/op
Iteration   2: 0.426 ms/op
Iteration   3: 0.377 ms/op
Iteration   4: 0.583 ms/op
Iteration   5: 0.416 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.519 ±(99.9%) 0.666 ms/op [Average]
  (min, avg, max) = (0.377, 0.519, 0.795), stdev = 0.173
  CI (99.9%): [? 0, 1.185] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 31.25% complete, ETA 01:22:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.297 ms/op
# Warmup Iteration   2: 0.277 ms/op
# Warmup Iteration   3: 0.433 ms/op
# Warmup Iteration   4: 0.296 ms/op
# Warmup Iteration   5: 0.544 ms/op
Iteration   1: 0.293 ms/op
Iteration   2: 0.352 ms/op
Iteration   3: 0.575 ms/op
Iteration   4: 0.465 ms/op
Iteration   5: 0.352 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.407 ±(99.9%) 0.433 ms/op [Average]
  (min, avg, max) = (0.293, 0.407, 0.575), stdev = 0.113
  CI (99.9%): [? 0, 0.841] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 31.41% complete, ETA 01:22:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.879 ms/op
# Warmup Iteration   2: 0.836 ms/op
# Warmup Iteration   3: 0.789 ms/op
# Warmup Iteration   4: 0.885 ms/op
# Warmup Iteration   5: 0.699 ms/op
Iteration   1: 0.855 ms/op
Iteration   2: 0.907 ms/op
Iteration   3: 0.975 ms/op
Iteration   4: 1.345 ms/op
Iteration   5: 1.158 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  1.048 ±(99.9%) 0.777 ms/op [Average]
  (min, avg, max) = (0.855, 1.048, 1.345), stdev = 0.202
  CI (99.9%): [0.272, 1.825] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 31.57% complete, ETA 01:21:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.939 ms/op
# Warmup Iteration   2: 0.942 ms/op
# Warmup Iteration   3: 0.811 ms/op
# Warmup Iteration   4: 1.080 ms/op
# Warmup Iteration   5: 0.862 ms/op
Iteration   1: 0.845 ms/op
Iteration   2: 1.047 ms/op
Iteration   3: 0.935 ms/op
Iteration   4: 1.121 ms/op
Iteration   5: 1.276 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  1.045 ±(99.9%) 0.642 ms/op [Average]
  (min, avg, max) = (0.845, 1.045, 1.276), stdev = 0.167
  CI (99.9%): [0.403, 1.687] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 31.73% complete, ETA 01:21:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 31.89% complete, ETA 01:21:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 32.05% complete, ETA 01:21:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 32.21% complete, ETA 01:20:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 32.37% complete, ETA 01:20:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 32.53% complete, ETA 01:20:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 32.69% complete, ETA 01:20:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 32.85% complete, ETA 01:20:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 33.01% complete, ETA 01:19:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 33.17% complete, ETA 01:19:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 33.33% complete, ETA 01:19:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 33.49% complete, ETA 01:19:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 33.65% complete, ETA 01:18:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 33.81% complete, ETA 01:18:41
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 33.97% complete, ETA 01:18:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 34.13% complete, ETA 01:18:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 34.29% complete, ETA 01:18:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 34.46% complete, ETA 01:17:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 34.62% complete, ETA 01:17:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 34.78% complete, ETA 01:17:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 34.94% complete, ETA 01:17:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 35.10% complete, ETA 01:16:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 35.26% complete, ETA 01:16:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 35.42% complete, ETA 01:16:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 35.58% complete, ETA 01:16:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 35.74% complete, ETA 01:16:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 35.90% complete, ETA 01:15:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 36.06% complete, ETA 01:15:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 36.22% complete, ETA 01:15:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 36.38% complete, ETA 01:15:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 10??, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 36.54% complete, ETA 01:14:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 36.70% complete, ETA 01:14:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 36.86% complete, ETA 01:14:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 10??, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 37.02% complete, ETA 01:14:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 37.18% complete, ETA 01:14:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.010 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.014), stdev = 0.003
  CI (99.9%): [? 0, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 37.34% complete, ETA 01:13:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.012 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.016), stdev = 0.003
  CI (99.9%): [? 0, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 37.50% complete, ETA 01:13:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.001
  CI (99.9%): [? 10?³, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 37.66% complete, ETA 01:13:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 10?³, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 37.82% complete, ETA 01:13:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.007 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.010), stdev = 0.002
  CI (99.9%): [? 10??, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 37.98% complete, ETA 01:13:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.009 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 38.14% complete, ETA 01:12:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.030 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.022, 0.030, 0.041), stdev = 0.009
  CI (99.9%): [? 0, 0.063] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 38.30% complete, ETA 01:12:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.034 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.026, 0.034, 0.043), stdev = 0.008
  CI (99.9%): [0.005, 0.064] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 38.46% complete, ETA 01:12:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.013 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.009, 0.013, 0.017), stdev = 0.004
  CI (99.9%): [? 0, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 38.62% complete, ETA 01:12:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.013 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.018), stdev = 0.004
  CI (99.9%): [? 0, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 38.78% complete, ETA 01:11:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.014 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.019), stdev = 0.003
  CI (99.9%): [0.001, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 38.94% complete, ETA 01:11:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.018 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.013, 0.018, 0.024), stdev = 0.005
  CI (99.9%): [? 0, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 39.10% complete, ETA 01:11:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.054 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.046 ms/op
Iteration   3: 0.055 ms/op
Iteration   4: 0.085 ms/op
Iteration   5: 0.079 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.063 ±(99.9%) 0.070 ms/op [Average]
  (min, avg, max) = (0.046, 0.063, 0.085), stdev = 0.018
  CI (99.9%): [? 0, 0.133] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 39.26% complete, ETA 01:11:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 ms/op
# Warmup Iteration   2: 0.054 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.053 ms/op
Iteration   1: 0.054 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.070 ms/op
Iteration   4: 0.092 ms/op
Iteration   5: 0.092 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.072 ±(99.9%) 0.073 ms/op [Average]
  (min, avg, max) = (0.054, 0.072, 0.092), stdev = 0.019
  CI (99.9%): [? 0, 0.146] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 39.42% complete, ETA 01:11:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.024 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.019, 0.024, 0.030), stdev = 0.005
  CI (99.9%): [0.003, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 39.58% complete, ETA 01:10:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.024 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.019, 0.024, 0.032), stdev = 0.006
  CI (99.9%): [0.002, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 39.74% complete, ETA 01:10:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.029 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.022, 0.029, 0.039), stdev = 0.008
  CI (99.9%): [? 0, 0.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 39.90% complete, ETA 01:10:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.040 ms/op
Iteration   5: 0.041 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.031 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.024, 0.031, 0.041), stdev = 0.009
  CI (99.9%): [? 0, 0.064] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 40.06% complete, ETA 01:10:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.120 ms/op
# Warmup Iteration   2: 0.099 ms/op
# Warmup Iteration   3: 0.098 ms/op
# Warmup Iteration   4: 0.098 ms/op
# Warmup Iteration   5: 0.098 ms/op
Iteration   1: 0.098 ms/op
Iteration   2: 0.100 ms/op
Iteration   3: 0.122 ms/op
Iteration   4: 0.169 ms/op
Iteration   5: 0.160 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.130 ±(99.9%) 0.127 ms/op [Average]
  (min, avg, max) = (0.098, 0.130, 0.169), stdev = 0.033
  CI (99.9%): [0.003, 0.257] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 40.22% complete, ETA 01:10:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.127 ms/op
# Warmup Iteration   2: 0.106 ms/op
# Warmup Iteration   3: 0.104 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.105 ms/op
Iteration   1: 0.104 ms/op
Iteration   2: 0.104 ms/op
Iteration   3: 0.115 ms/op
Iteration   4: 0.162 ms/op
Iteration   5: 0.205 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.138 ±(99.9%) 0.170 ms/op [Average]
  (min, avg, max) = (0.104, 0.138, 0.205), stdev = 0.044
  CI (99.9%): [? 0, 0.308] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 40.38% complete, ETA 01:09:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.036 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.034 ms/op
# Warmup Iteration   4: 0.034 ms/op
# Warmup Iteration   5: 0.038 ms/op
Iteration   1: 0.038 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.063 ms/op
Iteration   5: 0.058 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.048 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (0.038, 0.048, 0.063), stdev = 0.012
  CI (99.9%): [0.004, 0.093] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 40.54% complete, ETA 01:09:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.036 ms/op
# Warmup Iteration   2: 0.035 ms/op
# Warmup Iteration   3: 0.035 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.038 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.060 ms/op
Iteration   5: 0.061 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.048 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (0.037, 0.048, 0.061), stdev = 0.012
  CI (99.9%): [0.003, 0.093] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 40.71% complete, ETA 01:09:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.080 ms/op
Iteration   5: 0.071 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.058 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.044, 0.058, 0.080), stdev = 0.016
  CI (99.9%): [? 0, 0.121] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 40.87% complete, ETA 01:09:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.046 ms/op
Iteration   3: 0.055 ms/op
Iteration   4: 0.091 ms/op
Iteration   5: 0.073 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.062 ±(99.9%) 0.074 ms/op [Average]
  (min, avg, max) = (0.046, 0.062, 0.091), stdev = 0.019
  CI (99.9%): [? 0, 0.136] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 41.03% complete, ETA 01:09:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.273 ms/op
# Warmup Iteration   2: 0.239 ms/op
# Warmup Iteration   3: 0.234 ms/op
# Warmup Iteration   4: 0.233 ms/op
# Warmup Iteration   5: 0.235 ms/op
Iteration   1: 0.233 ms/op
Iteration   2: 0.233 ms/op
Iteration   3: 0.307 ms/op
Iteration   4: 0.471 ms/op
Iteration   5: 0.406 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.330 ±(99.9%) 0.409 ms/op [Average]
  (min, avg, max) = (0.233, 0.330, 0.471), stdev = 0.106
  CI (99.9%): [? 0, 0.739] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 41.19% complete, ETA 01:08:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.279 ms/op
# Warmup Iteration   2: 0.253 ms/op
# Warmup Iteration   3: 0.235 ms/op
# Warmup Iteration   4: 0.241 ms/op
# Warmup Iteration   5: 0.237 ms/op
Iteration   1: 0.234 ms/op
Iteration   2: 0.245 ms/op
Iteration   3: 0.293 ms/op
Iteration   4: 0.406 ms/op
Iteration   5: 0.382 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.312 ±(99.9%) 0.302 ms/op [Average]
  (min, avg, max) = (0.234, 0.312, 0.406), stdev = 0.078
  CI (99.9%): [0.010, 0.614] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 41.35% complete, ETA 01:08:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ms/op
# Warmup Iteration   2: 0.067 ms/op
# Warmup Iteration   3: 0.068 ms/op
# Warmup Iteration   4: 0.067 ms/op
# Warmup Iteration   5: 0.067 ms/op
Iteration   1: 0.066 ms/op
Iteration   2: 0.068 ms/op
Iteration   3: 0.075 ms/op
Iteration   4: 0.134 ms/op
Iteration   5: 0.136 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.096 ±(99.9%) 0.138 ms/op [Average]
  (min, avg, max) = (0.066, 0.096, 0.136), stdev = 0.036
  CI (99.9%): [? 0, 0.234] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 41.51% complete, ETA 01:08:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.069 ms/op
# Warmup Iteration   3: 0.068 ms/op
# Warmup Iteration   4: 0.069 ms/op
# Warmup Iteration   5: 0.069 ms/op
Iteration   1: 0.069 ms/op
Iteration   2: 0.069 ms/op
Iteration   3: 0.080 ms/op
Iteration   4: 0.137 ms/op
Iteration   5: 0.116 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.094 ±(99.9%) 0.118 ms/op [Average]
  (min, avg, max) = (0.069, 0.094, 0.137), stdev = 0.031
  CI (99.9%): [? 0, 0.212] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 41.67% complete, ETA 01:08:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.106 ms/op
# Warmup Iteration   2: 0.094 ms/op
# Warmup Iteration   3: 0.095 ms/op
# Warmup Iteration   4: 0.094 ms/op
# Warmup Iteration   5: 0.094 ms/op
Iteration   1: 0.094 ms/op
Iteration   2: 0.095 ms/op
Iteration   3: 0.115 ms/op
Iteration   4: 0.154 ms/op
Iteration   5: 0.152 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.122 ±(99.9%) 0.115 ms/op [Average]
  (min, avg, max) = (0.094, 0.122, 0.154), stdev = 0.030
  CI (99.9%): [0.007, 0.237] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 41.83% complete, ETA 01:08:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.108 ms/op
# Warmup Iteration   2: 0.097 ms/op
# Warmup Iteration   3: 0.097 ms/op
# Warmup Iteration   4: 0.097 ms/op
# Warmup Iteration   5: 0.097 ms/op
Iteration   1: 0.099 ms/op
Iteration   2: 0.096 ms/op
Iteration   3: 0.115 ms/op
Iteration   4: 0.167 ms/op
Iteration   5: 0.157 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.127 ±(99.9%) 0.128 ms/op [Average]
  (min, avg, max) = (0.096, 0.127, 0.167), stdev = 0.033
  CI (99.9%): [? 0, 0.255] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 41.99% complete, ETA 01:07:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.618 ms/op
# Warmup Iteration   2: 0.553 ms/op
# Warmup Iteration   3: 0.529 ms/op
# Warmup Iteration   4: 0.540 ms/op
# Warmup Iteration   5: 0.539 ms/op
Iteration   1: 0.536 ms/op
Iteration   2: 0.532 ms/op
Iteration   3: 0.666 ms/op
Iteration   4: 0.896 ms/op
Iteration   5: 0.877 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.701 ±(99.9%) 0.684 ms/op [Average]
  (min, avg, max) = (0.532, 0.701, 0.896), stdev = 0.178
  CI (99.9%): [0.017, 1.386] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 42.15% complete, ETA 01:07:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.663 ms/op
# Warmup Iteration   2: 0.620 ms/op
# Warmup Iteration   3: 0.582 ms/op
# Warmup Iteration   4: 0.573 ms/op
# Warmup Iteration   5: 0.579 ms/op
Iteration   1: 0.594 ms/op
Iteration   2: 0.588 ms/op
Iteration   3: 0.731 ms/op
Iteration   4: 0.978 ms/op
Iteration   5: 1.063 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.791 ±(99.9%) 0.845 ms/op [Average]
  (min, avg, max) = (0.588, 0.791, 1.063), stdev = 0.219
  CI (99.9%): [? 0, 1.635] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 2)

# Run progress: 42.31% complete, ETA 01:07:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 3)

# Run progress: 42.47% complete, ETA 01:07:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 2)

# Run progress: 42.63% complete, ETA 01:07:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 3)

# Run progress: 42.79% complete, ETA 01:06:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 2)

# Run progress: 42.95% complete, ETA 01:06:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 3)

# Run progress: 43.11% complete, ETA 01:06:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 2)

# Run progress: 43.27% complete, ETA 01:06:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 3)

# Run progress: 43.43% complete, ETA 01:06:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 2)

# Run progress: 43.59% complete, ETA 01:05:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 3)

# Run progress: 43.75% complete, ETA 01:05:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 2)

# Run progress: 43.91% complete, ETA 01:05:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 3)

# Run progress: 44.07% complete, ETA 01:05:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 2)

# Run progress: 44.23% complete, ETA 01:04:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 3)

# Run progress: 44.39% complete, ETA 01:04:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 2)

# Run progress: 44.55% complete, ETA 01:04:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.009 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.002
  CI (99.9%): [? 0, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 3)

# Run progress: 44.71% complete, ETA 01:04:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.011 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.015), stdev = 0.003
  CI (99.9%): [? 0, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 2)

# Run progress: 44.87% complete, ETA 01:04:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.027 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.020 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.015, 0.020, 0.027), stdev = 0.006
  CI (99.9%): [? 0, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 3)

# Run progress: 45.03% complete, ETA 01:03:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.022 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.016, 0.022, 0.029), stdev = 0.006
  CI (99.9%): [? 0, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 2)

# Run progress: 45.19% complete, ETA 01:03:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.040 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.031, 0.040, 0.050), stdev = 0.010
  CI (99.9%): [0.002, 0.078] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 3)

# Run progress: 45.35% complete, ETA 01:03:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.039 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.035 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.039 ms/op
Iteration   4: 0.053 ms/op
Iteration   5: 0.053 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.043 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.035, 0.043, 0.053), stdev = 0.009
  CI (99.9%): [0.008, 0.078] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 2)

# Run progress: 45.51% complete, ETA 01:03:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.064 ms/op
# Warmup Iteration   3: 0.065 ms/op
# Warmup Iteration   4: 0.064 ms/op
# Warmup Iteration   5: 0.063 ms/op
Iteration   1: 0.064 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.076 ms/op
Iteration   4: 0.108 ms/op
Iteration   5: 0.106 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.084 ±(99.9%) 0.085 ms/op [Average]
  (min, avg, max) = (0.064, 0.084, 0.108), stdev = 0.022
  CI (99.9%): [? 0, 0.169] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 3)

# Run progress: 45.67% complete, ETA 01:03:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.077 ms/op
# Warmup Iteration   2: 0.071 ms/op
# Warmup Iteration   3: 0.071 ms/op
# Warmup Iteration   4: 0.070 ms/op
# Warmup Iteration   5: 0.072 ms/op
Iteration   1: 0.071 ms/op
Iteration   2: 0.071 ms/op
Iteration   3: 0.081 ms/op
Iteration   4: 0.133 ms/op
Iteration   5: 0.117 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.094 ±(99.9%) 0.110 ms/op [Average]
  (min, avg, max) = (0.071, 0.094, 0.133), stdev = 0.029
  CI (99.9%): [? 0, 0.204] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 2)

# Run progress: 45.83% complete, ETA 01:02:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.139 ms/op
# Warmup Iteration   2: 0.130 ms/op
# Warmup Iteration   3: 0.127 ms/op
# Warmup Iteration   4: 0.127 ms/op
# Warmup Iteration   5: 0.128 ms/op
Iteration   1: 0.128 ms/op
Iteration   2: 0.127 ms/op
Iteration   3: 0.144 ms/op
Iteration   4: 0.201 ms/op
Iteration   5: 0.227 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.165 ±(99.9%) 0.176 ms/op [Average]
  (min, avg, max) = (0.127, 0.165, 0.227), stdev = 0.046
  CI (99.9%): [? 0, 0.341] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 3)

# Run progress: 45.99% complete, ETA 01:02:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.158 ms/op
# Warmup Iteration   2: 0.143 ms/op
# Warmup Iteration   3: 0.142 ms/op
# Warmup Iteration   4: 0.141 ms/op
# Warmup Iteration   5: 0.142 ms/op
Iteration   1: 0.140 ms/op
Iteration   2: 0.142 ms/op
Iteration   3: 0.155 ms/op
Iteration   4: 0.231 ms/op
Iteration   5: 0.239 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.182 ±(99.9%) 0.190 ms/op [Average]
  (min, avg, max) = (0.140, 0.182, 0.239), stdev = 0.049
  CI (99.9%): [? 0, 0.372] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 2)

# Run progress: 46.15% complete, ETA 01:02:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.287 ms/op
# Warmup Iteration   2: 0.262 ms/op
# Warmup Iteration   3: 0.258 ms/op
# Warmup Iteration   4: 0.260 ms/op
# Warmup Iteration   5: 0.260 ms/op
Iteration   1: 0.260 ms/op
Iteration   2: 0.261 ms/op
Iteration   3: 0.304 ms/op
Iteration   4: 0.423 ms/op
Iteration   5: 0.465 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.343 ±(99.9%) 0.368 ms/op [Average]
  (min, avg, max) = (0.260, 0.343, 0.465), stdev = 0.096
  CI (99.9%): [? 0, 0.711] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 3)

# Run progress: 46.31% complete, ETA 01:02:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.314 ms/op
# Warmup Iteration   2: 0.288 ms/op
# Warmup Iteration   3: 0.284 ms/op
# Warmup Iteration   4: 0.280 ms/op
# Warmup Iteration   5: 0.288 ms/op
Iteration   1: 0.284 ms/op
Iteration   2: 0.279 ms/op
Iteration   3: 0.322 ms/op
Iteration   4: 0.478 ms/op
Iteration   5: 0.479 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.368 ±(99.9%) 0.391 ms/op [Average]
  (min, avg, max) = (0.279, 0.368, 0.479), stdev = 0.102
  CI (99.9%): [? 0, 0.760] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 2)

# Run progress: 46.47% complete, ETA 01:02:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.583 ms/op
# Warmup Iteration   2: 0.523 ms/op
# Warmup Iteration   3: 0.529 ms/op
# Warmup Iteration   4: 0.527 ms/op
# Warmup Iteration   5: 0.524 ms/op
Iteration   1: 0.535 ms/op
Iteration   2: 0.525 ms/op
Iteration   3: 0.622 ms/op
Iteration   4: 0.930 ms/op
Iteration   5: 0.819 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.686 ±(99.9%) 0.695 ms/op [Average]
  (min, avg, max) = (0.525, 0.686, 0.930), stdev = 0.181
  CI (99.9%): [? 0, 1.381] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 3)

# Run progress: 46.63% complete, ETA 01:01:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.632 ms/op
# Warmup Iteration   2: 0.573 ms/op
# Warmup Iteration   3: 0.577 ms/op
# Warmup Iteration   4: 0.573 ms/op
# Warmup Iteration   5: 0.572 ms/op
Iteration   1: 0.573 ms/op
Iteration   2: 0.570 ms/op
Iteration   3: 0.613 ms/op
Iteration   4: 1.016 ms/op
Iteration   5: 1.017 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.758 ±(99.9%) 0.911 ms/op [Average]
  (min, avg, max) = (0.570, 0.758, 1.017), stdev = 0.237
  CI (99.9%): [? 0, 1.669] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 2)

# Run progress: 46.79% complete, ETA 01:01:45
# Fork: 1 of 1
# Warmup Iteration   1: 1.157 ms/op
# Warmup Iteration   2: 1.082 ms/op
# Warmup Iteration   3: 1.078 ms/op
# Warmup Iteration   4: 1.068 ms/op
# Warmup Iteration   5: 1.062 ms/op
Iteration   1: 1.067 ms/op
Iteration   2: 1.070 ms/op
Iteration   3: 1.307 ms/op
Iteration   4: 1.762 ms/op
Iteration   5: 1.874 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  1.416 ±(99.9%) 1.471 ms/op [Average]
  (min, avg, max) = (1.067, 1.416, 1.874), stdev = 0.382
  CI (99.9%): [? 0, 2.887] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 3)

# Run progress: 46.96% complete, ETA 01:01:33
# Fork: 1 of 1
# Warmup Iteration   1: 1.265 ms/op
# Warmup Iteration   2: 1.128 ms/op
# Warmup Iteration   3: 1.129 ms/op
# Warmup Iteration   4: 1.140 ms/op
# Warmup Iteration   5: 1.134 ms/op
Iteration   1: 1.129 ms/op
Iteration   2: 1.125 ms/op
Iteration   3: 1.326 ms/op
Iteration   4: 2.049 ms/op
Iteration   5: 2.153 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  1.556 ±(99.9%) 1.944 ms/op [Average]
  (min, avg, max) = (1.125, 1.556, 2.153), stdev = 0.505
  CI (99.9%): [? 0, 3.500] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 2)

# Run progress: 47.12% complete, ETA 01:01:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 3)

# Run progress: 47.28% complete, ETA 01:01:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 2)

# Run progress: 47.44% complete, ETA 01:00:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 3)

# Run progress: 47.60% complete, ETA 01:00:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 2)

# Run progress: 47.76% complete, ETA 01:00:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 3)

# Run progress: 47.92% complete, ETA 01:00:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 2)

# Run progress: 48.08% complete, ETA 01:00:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 3)

# Run progress: 48.24% complete, ETA 00:59:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 2)

# Run progress: 48.40% complete, ETA 00:59:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 3)

# Run progress: 48.56% complete, ETA 00:59:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 2)

# Run progress: 48.72% complete, ETA 00:59:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 3)

# Run progress: 48.88% complete, ETA 00:59:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 2)

# Run progress: 49.04% complete, ETA 00:58:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 3)

# Run progress: 49.20% complete, ETA 00:58:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 2)

# Run progress: 49.36% complete, ETA 00:58:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.015 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.020), stdev = 0.004
  CI (99.9%): [? 0, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 3)

# Run progress: 49.52% complete, ETA 00:58:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.016 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.022), stdev = 0.005
  CI (99.9%): [? 0, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 2)

# Run progress: 49.68% complete, ETA 00:58:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.040 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.035 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.042 ms/op
Iteration   4: 0.059 ms/op
Iteration   5: 0.064 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.047 ±(99.9%) 0.051 ms/op [Average]
  (min, avg, max) = (0.036, 0.047, 0.064), stdev = 0.013
  CI (99.9%): [? 0, 0.098] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 3)

# Run progress: 49.84% complete, ETA 00:57:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.041 ms/op
# Warmup Iteration   3: 0.040 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.040 ms/op
Iteration   1: 0.040 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.077 ms/op
Iteration   5: 0.075 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.056 ±(99.9%) 0.071 ms/op [Average]
  (min, avg, max) = (0.040, 0.056, 0.077), stdev = 0.018
  CI (99.9%): [? 0, 0.127] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 2)

# Run progress: 50.00% complete, ETA 00:57:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.132 ms/op
# Warmup Iteration   2: 0.118 ms/op
# Warmup Iteration   3: 0.119 ms/op
# Warmup Iteration   4: 0.120 ms/op
# Warmup Iteration   5: 0.118 ms/op
Iteration   1: 0.118 ms/op
Iteration   2: 0.117 ms/op
Iteration   3: 0.138 ms/op
Iteration   4: 0.219 ms/op
Iteration   5: 0.216 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.162 ±(99.9%) 0.199 ms/op [Average]
  (min, avg, max) = (0.117, 0.162, 0.219), stdev = 0.052
  CI (99.9%): [? 0, 0.361] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 3)

# Run progress: 50.16% complete, ETA 00:57:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.162 ms/op
# Warmup Iteration   2: 0.146 ms/op
# Warmup Iteration   3: 0.145 ms/op
# Warmup Iteration   4: 0.148 ms/op
# Warmup Iteration   5: 0.143 ms/op
Iteration   1: 0.142 ms/op
Iteration   2: 0.143 ms/op
Iteration   3: 0.163 ms/op
Iteration   4: 0.236 ms/op
Iteration   5: 0.215 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.180 ±(99.9%) 0.165 ms/op [Average]
  (min, avg, max) = (0.142, 0.180, 0.236), stdev = 0.043
  CI (99.9%): [0.015, 0.345] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 2)

# Run progress: 50.32% complete, ETA 00:57:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.484 ms/op
# Warmup Iteration   2: 0.438 ms/op
# Warmup Iteration   3: 0.431 ms/op
# Warmup Iteration   4: 0.433 ms/op
# Warmup Iteration   5: 0.427 ms/op
Iteration   1: 0.424 ms/op
Iteration   2: 0.439 ms/op
Iteration   3: 0.468 ms/op
Iteration   4: 0.719 ms/op
Iteration   5: 0.758 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.562 ±(99.9%) 0.627 ms/op [Average]
  (min, avg, max) = (0.424, 0.562, 0.758), stdev = 0.163
  CI (99.9%): [? 0, 1.188] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 3)

# Run progress: 50.48% complete, ETA 00:57:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.609 ms/op
# Warmup Iteration   2: 0.547 ms/op
# Warmup Iteration   3: 0.529 ms/op
# Warmup Iteration   4: 0.531 ms/op
# Warmup Iteration   5: 0.530 ms/op
Iteration   1: 0.530 ms/op
Iteration   2: 0.534 ms/op
Iteration   3: 0.629 ms/op
Iteration   4: 0.865 ms/op
Iteration   5: 0.880 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.688 ±(99.9%) 0.668 ms/op [Average]
  (min, avg, max) = (0.530, 0.688, 0.880), stdev = 0.174
  CI (99.9%): [0.019, 1.356] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 2)

# Run progress: 50.64% complete, ETA 00:57:00
# Fork: 1 of 1
# Warmup Iteration   1: 1.470 ms/op
# Warmup Iteration   2: 1.238 ms/op
# Warmup Iteration   3: 1.252 ms/op
# Warmup Iteration   4: 1.281 ms/op
# Warmup Iteration   5: 1.247 ms/op
Iteration   1: 1.300 ms/op
Iteration   2: 1.271 ms/op
Iteration   3: 1.530 ms/op
Iteration   4: 1.960 ms/op
Iteration   5: 2.086 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  1.630 ±(99.9%) 1.447 ms/op [Average]
  (min, avg, max) = (1.271, 1.630, 2.086), stdev = 0.376
  CI (99.9%): [0.183, 3.076] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 3)

# Run progress: 50.80% complete, ETA 00:56:48
# Fork: 1 of 1
# Warmup Iteration   1: 1.892 ms/op
# Warmup Iteration   2: 1.626 ms/op
# Warmup Iteration   3: 1.581 ms/op
# Warmup Iteration   4: 1.571 ms/op
# Warmup Iteration   5: 1.591 ms/op
Iteration   1: 1.583 ms/op
Iteration   2: 1.607 ms/op
Iteration   3: 1.874 ms/op
Iteration   4: 2.950 ms/op
Iteration   5: 2.783 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  2.159 ±(99.9%) 2.535 ms/op [Average]
  (min, avg, max) = (1.583, 2.159, 2.950), stdev = 0.658
  CI (99.9%): [? 0, 4.694] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 2)

# Run progress: 50.96% complete, ETA 00:56:37
# Fork: 1 of 1
# Warmup Iteration   1: 3.575 ms/op
# Warmup Iteration   2: 2.891 ms/op
# Warmup Iteration   3: 2.849 ms/op
# Warmup Iteration   4: 2.877 ms/op
# Warmup Iteration   5: 2.871 ms/op
Iteration   1: 2.890 ms/op
Iteration   2: 2.951 ms/op
Iteration   3: 3.573 ms/op
Iteration   4: 5.390 ms/op
Iteration   5: 4.322 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  3.825 ±(99.9%) 4.038 ms/op [Average]
  (min, avg, max) = (2.890, 3.825, 5.390), stdev = 1.049
  CI (99.9%): [? 0, 7.863] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 3)

# Run progress: 51.12% complete, ETA 00:56:25
# Fork: 1 of 1
# Warmup Iteration   1: 4.523 ms/op
# Warmup Iteration   2: 3.725 ms/op
# Warmup Iteration   3: 3.706 ms/op
# Warmup Iteration   4: 3.752 ms/op
# Warmup Iteration   5: 3.659 ms/op
Iteration   1: 3.723 ms/op
Iteration   2: 3.718 ms/op
Iteration   3: 4.352 ms/op
Iteration   4: 7.002 ms/op
Iteration   5: 5.940 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  4.947 ±(99.9%) 5.637 ms/op [Average]
  (min, avg, max) = (3.718, 4.947, 7.002), stdev = 1.464
  CI (99.9%): [? 0, 10.584] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 2)

# Run progress: 51.28% complete, ETA 00:56:13
# Fork: 1 of 1
# Warmup Iteration   1: 8.713 ms/op
# Warmup Iteration   2: 7.323 ms/op
# Warmup Iteration   3: 6.351 ms/op
# Warmup Iteration   4: 6.182 ms/op
# Warmup Iteration   5: 6.190 ms/op
Iteration   1: 6.137 ms/op
Iteration   2: 6.188 ms/op
Iteration   3: 7.552 ms/op
Iteration   4: 10.816 ms/op
Iteration   5: 10.549 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  8.248 ±(99.9%) 8.838 ms/op [Average]
  (min, avg, max) = (6.137, 8.248, 10.816), stdev = 2.295
  CI (99.9%): [? 0, 17.086] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 3)

# Run progress: 51.44% complete, ETA 00:56:02
# Fork: 1 of 1
# Warmup Iteration   1: 10.745 ms/op
# Warmup Iteration   2: 8.857 ms/op
# Warmup Iteration   3: 7.992 ms/op
# Warmup Iteration   4: 7.939 ms/op
# Warmup Iteration   5: 7.845 ms/op
Iteration   1: 7.886 ms/op
Iteration   2: 7.899 ms/op
Iteration   3: 8.942 ms/op
Iteration   4: 12.148 ms/op
Iteration   5: 12.934 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  9.962 ±(99.9%) 9.277 ms/op [Average]
  (min, avg, max) = (7.886, 9.962, 12.934), stdev = 2.409
  CI (99.9%): [0.685, 19.239] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 2)

# Run progress: 51.60% complete, ETA 00:55:50
# Fork: 1 of 1
# Warmup Iteration   1: 18.385 ms/op
# Warmup Iteration   2: 14.977 ms/op
# Warmup Iteration   3: 13.052 ms/op
# Warmup Iteration   4: 13.035 ms/op
# Warmup Iteration   5: 13.105 ms/op
Iteration   1: 13.128 ms/op
Iteration   2: 12.961 ms/op
Iteration   3: 15.396 ms/op
Iteration   4: 21.379 ms/op
Iteration   5: 22.817 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  17.136 ±(99.9%) 17.938 ms/op [Average]
  (min, avg, max) = (12.961, 17.136, 22.817), stdev = 4.658
  CI (99.9%): [? 0, 35.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 3)

# Run progress: 51.76% complete, ETA 00:55:38
# Fork: 1 of 1
# Warmup Iteration   1: 28.193 ms/op
# Warmup Iteration   2: 19.185 ms/op
# Warmup Iteration   3: 16.548 ms/op
# Warmup Iteration   4: 16.611 ms/op
# Warmup Iteration   5: 16.865 ms/op
Iteration   1: 16.373 ms/op
Iteration   2: 16.772 ms/op
Iteration   3: 20.007 ms/op
Iteration   4: 24.319 ms/op
Iteration   5: 25.399 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  20.574 ±(99.9%) 16.077 ms/op [Average]
  (min, avg, max) = (16.373, 20.574, 25.399), stdev = 4.175
  CI (99.9%): [4.497, 36.651] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 2)

# Run progress: 51.92% complete, ETA 00:55:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 3)

# Run progress: 52.08% complete, ETA 00:55:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 2)

# Run progress: 52.24% complete, ETA 00:55:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 3)

# Run progress: 52.40% complete, ETA 00:54:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 2)

# Run progress: 52.56% complete, ETA 00:54:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 3)

# Run progress: 52.72% complete, ETA 00:54:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 2)

# Run progress: 52.88% complete, ETA 00:54:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 3)

# Run progress: 53.04% complete, ETA 00:54:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 2)

# Run progress: 53.21% complete, ETA 00:53:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 3)

# Run progress: 53.37% complete, ETA 00:53:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 2)

# Run progress: 53.53% complete, ETA 00:53:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 3)

# Run progress: 53.69% complete, ETA 00:53:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 2)

# Run progress: 53.85% complete, ETA 00:53:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 3)

# Run progress: 54.01% complete, ETA 00:52:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 2)

# Run progress: 54.17% complete, ETA 00:52:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.016 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.011, 0.016, 0.021), stdev = 0.005
  CI (99.9%): [? 0, 0.035] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 3)

# Run progress: 54.33% complete, ETA 00:52:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.016 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.023), stdev = 0.005
  CI (99.9%): [? 0, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 2)

# Run progress: 54.49% complete, ETA 00:52:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.040 ms/op
# Warmup Iteration   2: 0.035 ms/op
# Warmup Iteration   3: 0.035 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.042 ms/op
Iteration   4: 0.065 ms/op
Iteration   5: 0.060 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.048 ±(99.9%) 0.053 ms/op [Average]
  (min, avg, max) = (0.036, 0.048, 0.065), stdev = 0.014
  CI (99.9%): [? 0, 0.101] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 3)

# Run progress: 54.65% complete, ETA 00:52:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.041 ms/op
# Warmup Iteration   3: 0.040 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.040 ms/op
Iteration   1: 0.040 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.066 ms/op
Iteration   5: 0.069 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.052 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (0.040, 0.052, 0.069), stdev = 0.014
  CI (99.9%): [? 0, 0.107] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 2)

# Run progress: 54.81% complete, ETA 00:51:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.136 ms/op
# Warmup Iteration   2: 0.121 ms/op
# Warmup Iteration   3: 0.119 ms/op
# Warmup Iteration   4: 0.119 ms/op
# Warmup Iteration   5: 0.120 ms/op
Iteration   1: 0.120 ms/op
Iteration   2: 0.119 ms/op
Iteration   3: 0.138 ms/op
Iteration   4: 0.198 ms/op
Iteration   5: 0.208 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.157 ±(99.9%) 0.166 ms/op [Average]
  (min, avg, max) = (0.119, 0.157, 0.208), stdev = 0.043
  CI (99.9%): [? 0, 0.322] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 3)

# Run progress: 54.97% complete, ETA 00:51:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.162 ms/op
# Warmup Iteration   2: 0.148 ms/op
# Warmup Iteration   3: 0.146 ms/op
# Warmup Iteration   4: 0.144 ms/op
# Warmup Iteration   5: 0.148 ms/op
Iteration   1: 0.145 ms/op
Iteration   2: 0.144 ms/op
Iteration   3: 0.168 ms/op
Iteration   4: 0.270 ms/op
Iteration   5: 0.247 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.195 ±(99.9%) 0.228 ms/op [Average]
  (min, avg, max) = (0.144, 0.195, 0.270), stdev = 0.059
  CI (99.9%): [? 0, 0.423] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 2)

# Run progress: 55.13% complete, ETA 00:51:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.481 ms/op
# Warmup Iteration   2: 0.432 ms/op
# Warmup Iteration   3: 0.426 ms/op
# Warmup Iteration   4: 0.428 ms/op
# Warmup Iteration   5: 0.422 ms/op
Iteration   1: 0.427 ms/op
Iteration   2: 0.425 ms/op
Iteration   3: 0.488 ms/op
Iteration   4: 0.806 ms/op
Iteration   5: 0.739 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.577 ±(99.9%) 0.699 ms/op [Average]
  (min, avg, max) = (0.425, 0.577, 0.806), stdev = 0.182
  CI (99.9%): [? 0, 1.276] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 3)

# Run progress: 55.29% complete, ETA 00:51:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.670 ms/op
# Warmup Iteration   2: 0.591 ms/op
# Warmup Iteration   3: 0.599 ms/op
# Warmup Iteration   4: 0.587 ms/op
# Warmup Iteration   5: 0.586 ms/op
Iteration   1: 0.574 ms/op
Iteration   2: 0.540 ms/op
Iteration   3: 0.627 ms/op
Iteration   4: 0.927 ms/op
Iteration   5: 0.878 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.709 ±(99.9%) 0.692 ms/op [Average]
  (min, avg, max) = (0.540, 0.709, 0.927), stdev = 0.180
  CI (99.9%): [0.017, 1.402] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 2)

# Run progress: 55.45% complete, ETA 00:51:11
# Fork: 1 of 1
# Warmup Iteration   1: 1.983 ms/op
# Warmup Iteration   2: 1.722 ms/op
# Warmup Iteration   3: 1.688 ms/op
# Warmup Iteration   4: 1.691 ms/op
# Warmup Iteration   5: 1.698 ms/op
Iteration   1: 1.696 ms/op
Iteration   2: 1.724 ms/op
Iteration   3: 2.026 ms/op
Iteration   4: 2.731 ms/op
Iteration   5: 2.549 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  2.145 ±(99.9%) 1.826 ms/op [Average]
  (min, avg, max) = (1.696, 2.145, 2.731), stdev = 0.474
  CI (99.9%): [0.320, 3.971] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 3)

# Run progress: 55.61% complete, ETA 00:51:00
# Fork: 1 of 1
# Warmup Iteration   1: 2.472 ms/op
# Warmup Iteration   2: 2.170 ms/op
# Warmup Iteration   3: 2.129 ms/op
# Warmup Iteration   4: 2.120 ms/op
# Warmup Iteration   5: 2.124 ms/op
Iteration   1: 2.115 ms/op
Iteration   2: 2.137 ms/op
Iteration   3: 2.395 ms/op
Iteration   4: 3.774 ms/op
Iteration   5: 3.516 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  2.787 ±(99.9%) 3.064 ms/op [Average]
  (min, avg, max) = (2.115, 2.787, 3.774), stdev = 0.796
  CI (99.9%): [? 0, 5.852] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 2)

# Run progress: 55.77% complete, ETA 00:50:48
# Fork: 1 of 1
# Warmup Iteration   1: 9.463 ms/op
# Warmup Iteration   2: 8.331 ms/op
# Warmup Iteration   3: 7.565 ms/op
# Warmup Iteration   4: 7.577 ms/op
# Warmup Iteration   5: 7.441 ms/op
Iteration   1: 7.501 ms/op
Iteration   2: 7.603 ms/op
Iteration   3: 8.934 ms/op
Iteration   4: 12.567 ms/op
Iteration   5: 10.190 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  9.359 ±(99.9%) 8.099 ms/op [Average]
  (min, avg, max) = (7.501, 9.359, 12.567), stdev = 2.103
  CI (99.9%): [1.260, 17.458] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 3)

# Run progress: 55.93% complete, ETA 00:50:37
# Fork: 1 of 1
# Warmup Iteration   1: 12.769 ms/op
# Warmup Iteration   2: 12.523 ms/op
# Warmup Iteration   3: 10.828 ms/op
# Warmup Iteration   4: 11.002 ms/op
# Warmup Iteration   5: 10.868 ms/op
Iteration   1: 10.920 ms/op
Iteration   2: 10.883 ms/op
Iteration   3: 12.983 ms/op
Iteration   4: 15.004 ms/op
Iteration   5: 17.084 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  13.375 ±(99.9%) 10.333 ms/op [Average]
  (min, avg, max) = (10.883, 13.375, 17.084), stdev = 2.683
  CI (99.9%): [3.042, 23.707] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 2)

# Run progress: 56.09% complete, ETA 00:50:25
# Fork: 1 of 1
# Warmup Iteration   1: 56.352 ms/op
# Warmup Iteration   2: 40.736 ms/op
# Warmup Iteration   3: 36.170 ms/op
# Warmup Iteration   4: 35.240 ms/op
# Warmup Iteration   5: 35.421 ms/op
Iteration   1: 35.600 ms/op
Iteration   2: 36.031 ms/op
Iteration   3: 43.609 ms/op
Iteration   4: 56.699 ms/op
Iteration   5: 53.966 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  45.181 ±(99.9%) 37.916 ms/op [Average]
  (min, avg, max) = (35.600, 45.181, 56.699), stdev = 9.847
  CI (99.9%): [7.265, 83.097] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 3)

# Run progress: 56.25% complete, ETA 00:50:14
# Fork: 1 of 1
# Warmup Iteration   1: 64.713 ms/op
# Warmup Iteration   2: 48.278 ms/op
# Warmup Iteration   3: 45.863 ms/op
# Warmup Iteration   4: 44.939 ms/op
# Warmup Iteration   5: 45.131 ms/op
Iteration   1: 46.142 ms/op
Iteration   2: 45.313 ms/op
Iteration   3: 57.750 ms/op
Iteration   4: 70.340 ms/op
Iteration   5: 63.593 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  56.628 ±(99.9%) 41.996 ms/op [Average]
  (min, avg, max) = (45.313, 56.628, 70.340), stdev = 10.906
  CI (99.9%): [14.631, 98.624] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 2)

# Run progress: 56.41% complete, ETA 00:50:03
# Fork: 1 of 1
# Warmup Iteration   1: 335.451 ms/op
# Warmup Iteration   2: 257.343 ms/op
# Warmup Iteration   3: 339.839 ms/op
# Warmup Iteration   4: 306.621 ms/op
# Warmup Iteration   5: 270.815 ms/op
Iteration   1: 307.611 ms/op
Iteration   2: 343.345 ms/op
Iteration   3: 383.969 ms/op
Iteration   4: 341.406 ms/op
Iteration   5: 270.856 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  329.437 ±(99.9%) 163.579 ms/op [Average]
  (min, avg, max) = (270.856, 329.437, 383.969), stdev = 42.481
  CI (99.9%): [165.859, 493.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 3)

# Run progress: 56.57% complete, ETA 00:49:53
# Fork: 1 of 1
# Warmup Iteration   1: 398.268 ms/op
# Warmup Iteration   2: 393.539 ms/op
# Warmup Iteration   3: 464.982 ms/op
# Warmup Iteration   4: 450.372 ms/op
# Warmup Iteration   5: 470.911 ms/op
Iteration   1: 428.584 ms/op
Iteration   2: 522.341 ms/op
Iteration   3: 551.446 ms/op
Iteration   4: 502.691 ms/op
Iteration   5: 567.434 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  514.499 ±(99.9%) 208.697 ms/op [Average]
  (min, avg, max) = (428.584, 514.499, 567.434), stdev = 54.198
  CI (99.9%): [305.802, 723.196] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 2)

# Run progress: 56.73% complete, ETA 00:49:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 3)

# Run progress: 56.89% complete, ETA 00:49:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 2)

# Run progress: 57.05% complete, ETA 00:49:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 3)

# Run progress: 57.21% complete, ETA 00:49:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 2)

# Run progress: 57.37% complete, ETA 00:48:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 3)

# Run progress: 57.53% complete, ETA 00:48:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 2)

# Run progress: 57.69% complete, ETA 00:48:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 3)

# Run progress: 57.85% complete, ETA 00:48:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 2)

# Run progress: 58.01% complete, ETA 00:48:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 3)

# Run progress: 58.17% complete, ETA 00:48:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 2)

# Run progress: 58.33% complete, ETA 00:47:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 3)

# Run progress: 58.49% complete, ETA 00:47:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 2)

# Run progress: 58.65% complete, ETA 00:47:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 3)

# Run progress: 58.81% complete, ETA 00:47:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 2)

# Run progress: 58.97% complete, ETA 00:47:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.004 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 3)

# Run progress: 59.13% complete, ETA 00:46:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 2)

# Run progress: 59.29% complete, ETA 00:46:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.008 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 3)

# Run progress: 59.46% complete, ETA 00:46:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.008 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.005, 0.008, 0.011), stdev = 0.002
  CI (99.9%): [? 0, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 2)

# Run progress: 59.62% complete, ETA 00:46:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.014 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.018), stdev = 0.003
  CI (99.9%): [0.001, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 3)

# Run progress: 59.78% complete, ETA 00:46:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.014 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.020), stdev = 0.004
  CI (99.9%): [? 0, 0.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 2)

# Run progress: 59.94% complete, ETA 00:45:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.040 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.030 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.022, 0.030, 0.040), stdev = 0.009
  CI (99.9%): [? 0, 0.064] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 3)

# Run progress: 60.10% complete, ETA 00:45:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.028 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.021, 0.028, 0.036), stdev = 0.007
  CI (99.9%): [? 0, 0.055] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 2)

# Run progress: 60.26% complete, ETA 00:45:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.079 ms/op
Iteration   5: 0.079 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.060 ±(99.9%) 0.068 ms/op [Average]
  (min, avg, max) = (0.045, 0.060, 0.079), stdev = 0.018
  CI (99.9%): [? 0, 0.128] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 3)

# Run progress: 60.42% complete, ETA 00:45:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.073 ms/op
Iteration   5: 0.076 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.057 ±(99.9%) 0.062 ms/op [Average]
  (min, avg, max) = (0.043, 0.057, 0.076), stdev = 0.016
  CI (99.9%): [? 0, 0.120] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 2)

# Run progress: 60.58% complete, ETA 00:45:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ms/op
# Warmup Iteration   2: 0.089 ms/op
# Warmup Iteration   3: 0.087 ms/op
# Warmup Iteration   4: 0.087 ms/op
# Warmup Iteration   5: 0.087 ms/op
Iteration   1: 0.086 ms/op
Iteration   2: 0.086 ms/op
Iteration   3: 0.100 ms/op
Iteration   4: 0.137 ms/op
Iteration   5: 0.155 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.113 ±(99.9%) 0.121 ms/op [Average]
  (min, avg, max) = (0.086, 0.113, 0.155), stdev = 0.031
  CI (99.9%): [? 0, 0.234] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 3)

# Run progress: 60.74% complete, ETA 00:44:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.091 ms/op
# Warmup Iteration   2: 0.085 ms/op
# Warmup Iteration   3: 0.086 ms/op
# Warmup Iteration   4: 0.087 ms/op
# Warmup Iteration   5: 0.086 ms/op
Iteration   1: 0.087 ms/op
Iteration   2: 0.086 ms/op
Iteration   3: 0.098 ms/op
Iteration   4: 0.135 ms/op
Iteration   5: 0.153 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.112 ±(99.9%) 0.117 ms/op [Average]
  (min, avg, max) = (0.086, 0.112, 0.153), stdev = 0.030
  CI (99.9%): [? 0, 0.229] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 2)

# Run progress: 60.90% complete, ETA 00:44:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.187 ms/op
# Warmup Iteration   2: 0.178 ms/op
# Warmup Iteration   3: 0.182 ms/op
# Warmup Iteration   4: 0.176 ms/op
# Warmup Iteration   5: 0.176 ms/op
Iteration   1: 0.176 ms/op
Iteration   2: 0.176 ms/op
Iteration   3: 0.205 ms/op
Iteration   4: 0.313 ms/op
Iteration   5: 0.305 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.235 ±(99.9%) 0.264 ms/op [Average]
  (min, avg, max) = (0.176, 0.235, 0.313), stdev = 0.069
  CI (99.9%): [? 0, 0.499] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 3)

# Run progress: 61.06% complete, ETA 00:44:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.179 ms/op
# Warmup Iteration   2: 0.167 ms/op
# Warmup Iteration   3: 0.166 ms/op
# Warmup Iteration   4: 0.168 ms/op
# Warmup Iteration   5: 0.181 ms/op
Iteration   1: 0.169 ms/op
Iteration   2: 0.168 ms/op
Iteration   3: 0.204 ms/op
Iteration   4: 0.285 ms/op
Iteration   5: 0.282 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.221 ±(99.9%) 0.225 ms/op [Average]
  (min, avg, max) = (0.168, 0.221, 0.285), stdev = 0.058
  CI (99.9%): [? 0, 0.446] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 2)

# Run progress: 61.22% complete, ETA 00:44:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.373 ms/op
# Warmup Iteration   2: 0.360 ms/op
# Warmup Iteration   3: 0.349 ms/op
# Warmup Iteration   4: 0.350 ms/op
# Warmup Iteration   5: 0.353 ms/op
Iteration   1: 0.348 ms/op
Iteration   2: 0.349 ms/op
Iteration   3: 0.383 ms/op
Iteration   4: 0.643 ms/op
Iteration   5: 0.628 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.470 ±(99.9%) 0.584 ms/op [Average]
  (min, avg, max) = (0.348, 0.470, 0.643), stdev = 0.152
  CI (99.9%): [? 0, 1.055] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 3)

# Run progress: 61.38% complete, ETA 00:44:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.361 ms/op
# Warmup Iteration   2: 0.347 ms/op
# Warmup Iteration   3: 0.341 ms/op
# Warmup Iteration   4: 0.340 ms/op
# Warmup Iteration   5: 0.347 ms/op
Iteration   1: 0.343 ms/op
Iteration   2: 0.347 ms/op
Iteration   3: 0.395 ms/op
Iteration   4: 0.486 ms/op
Iteration   5: 0.509 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.416 ±(99.9%) 0.298 ms/op [Average]
  (min, avg, max) = (0.343, 0.416, 0.509), stdev = 0.077
  CI (99.9%): [0.118, 0.714] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 2)

# Run progress: 61.54% complete, ETA 00:44:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 3)

# Run progress: 61.70% complete, ETA 00:43:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 2)

# Run progress: 61.86% complete, ETA 00:43:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 3)

# Run progress: 62.02% complete, ETA 00:43:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 2)

# Run progress: 62.18% complete, ETA 00:43:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 3)

# Run progress: 62.34% complete, ETA 00:43:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 2)

# Run progress: 62.50% complete, ETA 00:42:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 3)

# Run progress: 62.66% complete, ETA 00:42:41
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 2)

# Run progress: 62.82% complete, ETA 00:42:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 3)

# Run progress: 62.98% complete, ETA 00:42:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 2)

# Run progress: 63.14% complete, ETA 00:42:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 3)

# Run progress: 63.30% complete, ETA 00:41:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 2)

# Run progress: 63.46% complete, ETA 00:41:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 3)

# Run progress: 63.62% complete, ETA 00:41:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 2)

# Run progress: 63.78% complete, ETA 00:41:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 3)

# Run progress: 63.94% complete, ETA 00:41:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 2)

# Run progress: 64.10% complete, ETA 00:40:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.009 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.011), stdev = 0.002
  CI (99.9%): [? 10??, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 3)

# Run progress: 64.26% complete, ETA 00:40:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 2)

# Run progress: 64.42% complete, ETA 00:40:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.018 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.014, 0.018, 0.023), stdev = 0.005
  CI (99.9%): [? 0, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 3)

# Run progress: 64.58% complete, ETA 00:40:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.015 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.019), stdev = 0.003
  CI (99.9%): [0.003, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 2)

# Run progress: 64.74% complete, ETA 00:40:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.033 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.055 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.039 ±(99.9%) 0.051 ms/op [Average]
  (min, avg, max) = (0.027, 0.039, 0.055), stdev = 0.013
  CI (99.9%): [? 0, 0.090] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 3)

# Run progress: 64.90% complete, ETA 00:40:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.044 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.033 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.024, 0.033, 0.044), stdev = 0.010
  CI (99.9%): [? 0, 0.072] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 2)

# Run progress: 65.06% complete, ETA 00:39:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.056 ms/op
# Warmup Iteration   2: 0.051 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.051 ms/op
Iteration   1: 0.052 ms/op
Iteration   2: 0.051 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.085 ms/op
Iteration   5: 0.094 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.068 ±(99.9%) 0.078 ms/op [Average]
  (min, avg, max) = (0.051, 0.068, 0.094), stdev = 0.020
  CI (99.9%): [? 0, 0.145] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 3)

# Run progress: 65.22% complete, ETA 00:39:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.048 ms/op
# Warmup Iteration   3: 0.048 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.082 ms/op
Iteration   5: 0.087 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.065 ±(99.9%) 0.072 ms/op [Average]
  (min, avg, max) = (0.048, 0.065, 0.087), stdev = 0.019
  CI (99.9%): [? 0, 0.136] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 2)

# Run progress: 65.38% complete, ETA 00:39:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.104 ms/op
# Warmup Iteration   2: 0.095 ms/op
# Warmup Iteration   3: 0.095 ms/op
# Warmup Iteration   4: 0.095 ms/op
# Warmup Iteration   5: 0.095 ms/op
Iteration   1: 0.095 ms/op
Iteration   2: 0.094 ms/op
Iteration   3: 0.112 ms/op
Iteration   4: 0.160 ms/op
Iteration   5: 0.172 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.127 ±(99.9%) 0.142 ms/op [Average]
  (min, avg, max) = (0.094, 0.127, 0.172), stdev = 0.037
  CI (99.9%): [? 0, 0.269] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 3)

# Run progress: 65.54% complete, ETA 00:39:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.097 ms/op
# Warmup Iteration   2: 0.089 ms/op
# Warmup Iteration   3: 0.090 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.091 ms/op
Iteration   1: 0.090 ms/op
Iteration   2: 0.091 ms/op
Iteration   3: 0.100 ms/op
Iteration   4: 0.146 ms/op
Iteration   5: 0.154 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.116 ±(99.9%) 0.121 ms/op [Average]
  (min, avg, max) = (0.090, 0.116, 0.154), stdev = 0.031
  CI (99.9%): [? 0, 0.238] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 2)

# Run progress: 65.71% complete, ETA 00:39:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.205 ms/op
# Warmup Iteration   2: 0.189 ms/op
# Warmup Iteration   3: 0.190 ms/op
# Warmup Iteration   4: 0.189 ms/op
# Warmup Iteration   5: 0.189 ms/op
Iteration   1: 0.188 ms/op
Iteration   2: 0.186 ms/op
Iteration   3: 0.214 ms/op
Iteration   4: 0.334 ms/op
Iteration   5: 0.285 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.241 ±(99.9%) 0.251 ms/op [Average]
  (min, avg, max) = (0.186, 0.241, 0.334), stdev = 0.065
  CI (99.9%): [? 0, 0.493] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 3)

# Run progress: 65.87% complete, ETA 00:38:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.203 ms/op
# Warmup Iteration   2: 0.182 ms/op
# Warmup Iteration   3: 0.183 ms/op
# Warmup Iteration   4: 0.182 ms/op
# Warmup Iteration   5: 0.182 ms/op
Iteration   1: 0.186 ms/op
Iteration   2: 0.182 ms/op
Iteration   3: 0.218 ms/op
Iteration   4: 0.322 ms/op
Iteration   5: 0.321 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.246 ±(99.9%) 0.272 ms/op [Average]
  (min, avg, max) = (0.182, 0.246, 0.322), stdev = 0.071
  CI (99.9%): [? 0, 0.518] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 2)

# Run progress: 66.03% complete, ETA 00:38:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.397 ms/op
# Warmup Iteration   2: 0.375 ms/op
# Warmup Iteration   3: 0.371 ms/op
# Warmup Iteration   4: 0.370 ms/op
# Warmup Iteration   5: 0.368 ms/op
Iteration   1: 0.366 ms/op
Iteration   2: 0.380 ms/op
Iteration   3: 0.435 ms/op
Iteration   4: 0.742 ms/op
Iteration   5: 0.708 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.526 ±(99.9%) 0.708 ms/op [Average]
  (min, avg, max) = (0.366, 0.526, 0.742), stdev = 0.184
  CI (99.9%): [? 0, 1.234] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 3)

# Run progress: 66.19% complete, ETA 00:38:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.389 ms/op
# Warmup Iteration   2: 0.362 ms/op
# Warmup Iteration   3: 0.360 ms/op
# Warmup Iteration   4: 0.353 ms/op
# Warmup Iteration   5: 0.352 ms/op
Iteration   1: 0.349 ms/op
Iteration   2: 0.350 ms/op
Iteration   3: 0.395 ms/op
Iteration   4: 0.614 ms/op
Iteration   5: 0.570 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.455 ±(99.9%) 0.488 ms/op [Average]
  (min, avg, max) = (0.349, 0.455, 0.614), stdev = 0.127
  CI (99.9%): [? 0, 0.944] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 2)

# Run progress: 66.35% complete, ETA 00:38:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 3)

# Run progress: 66.51% complete, ETA 00:38:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 2)

# Run progress: 66.67% complete, ETA 00:37:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 3)

# Run progress: 66.83% complete, ETA 00:37:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 2)

# Run progress: 66.99% complete, ETA 00:37:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 3)

# Run progress: 67.15% complete, ETA 00:37:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 2)

# Run progress: 67.31% complete, ETA 00:37:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 3)

# Run progress: 67.47% complete, ETA 00:37:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 2)

# Run progress: 67.63% complete, ETA 00:36:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 3)

# Run progress: 67.79% complete, ETA 00:36:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 2)

# Run progress: 67.95% complete, ETA 00:36:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 3)

# Run progress: 68.11% complete, ETA 00:36:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 2)

# Run progress: 68.27% complete, ETA 00:36:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 3)

# Run progress: 68.43% complete, ETA 00:35:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 2)

# Run progress: 68.59% complete, ETA 00:35:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 10?³, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 3)

# Run progress: 68.75% complete, ETA 00:35:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 2)

# Run progress: 68.91% complete, ETA 00:35:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.009 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.013), stdev = 0.003
  CI (99.9%): [? 0, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 3)

# Run progress: 69.07% complete, ETA 00:35:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.008 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.011), stdev = 0.003
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 2)

# Run progress: 69.23% complete, ETA 00:35:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.019 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.014, 0.019, 0.025), stdev = 0.005
  CI (99.9%): [? 0, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 3)

# Run progress: 69.39% complete, ETA 00:34:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.016 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.021), stdev = 0.004
  CI (99.9%): [? 0, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 2)

# Run progress: 69.55% complete, ETA 00:34:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.047 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.037 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.027, 0.037, 0.049), stdev = 0.011
  CI (99.9%): [? 0, 0.078] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 3)

# Run progress: 69.71% complete, ETA 00:34:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.033 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.024, 0.033, 0.044), stdev = 0.010
  CI (99.9%): [? 0, 0.070] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 2)

# Run progress: 69.87% complete, ETA 00:34:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 ms/op
# Warmup Iteration   2: 0.058 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.057 ms/op
# Warmup Iteration   5: 0.058 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.065 ms/op
Iteration   4: 0.111 ms/op
Iteration   5: 0.097 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.078 ±(99.9%) 0.096 ms/op [Average]
  (min, avg, max) = (0.057, 0.078, 0.111), stdev = 0.025
  CI (99.9%): [? 0, 0.173] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 3)

# Run progress: 70.03% complete, ETA 00:34:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
# Warmup Iteration   2: 0.049 ms/op
# Warmup Iteration   3: 0.048 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.058 ms/op
Iteration   4: 0.090 ms/op
Iteration   5: 0.078 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.065 ±(99.9%) 0.072 ms/op [Average]
  (min, avg, max) = (0.048, 0.065, 0.090), stdev = 0.019
  CI (99.9%): [? 0, 0.136] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 2)

# Run progress: 70.19% complete, ETA 00:33:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.118 ms/op
# Warmup Iteration   2: 0.110 ms/op
# Warmup Iteration   3: 0.111 ms/op
# Warmup Iteration   4: 0.110 ms/op
# Warmup Iteration   5: 0.109 ms/op
Iteration   1: 0.110 ms/op
Iteration   2: 0.110 ms/op
Iteration   3: 0.126 ms/op
Iteration   4: 0.217 ms/op
Iteration   5: 0.213 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.155 ±(99.9%) 0.212 ms/op [Average]
  (min, avg, max) = (0.110, 0.155, 0.217), stdev = 0.055
  CI (99.9%): [? 0, 0.367] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 3)

# Run progress: 70.35% complete, ETA 00:33:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.106 ms/op
# Warmup Iteration   2: 0.098 ms/op
# Warmup Iteration   3: 0.096 ms/op
# Warmup Iteration   4: 0.096 ms/op
# Warmup Iteration   5: 0.095 ms/op
Iteration   1: 0.096 ms/op
Iteration   2: 0.096 ms/op
Iteration   3: 0.117 ms/op
Iteration   4: 0.162 ms/op
Iteration   5: 0.168 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.128 ±(99.9%) 0.137 ms/op [Average]
  (min, avg, max) = (0.096, 0.128, 0.168), stdev = 0.035
  CI (99.9%): [? 0, 0.264] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 2)

# Run progress: 70.51% complete, ETA 00:33:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.232 ms/op
# Warmup Iteration   2: 0.224 ms/op
# Warmup Iteration   3: 0.215 ms/op
# Warmup Iteration   4: 0.215 ms/op
# Warmup Iteration   5: 0.218 ms/op
Iteration   1: 0.215 ms/op
Iteration   2: 0.217 ms/op
Iteration   3: 0.267 ms/op
Iteration   4: 0.376 ms/op
Iteration   5: 0.351 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.285 ±(99.9%) 0.289 ms/op [Average]
  (min, avg, max) = (0.215, 0.285, 0.376), stdev = 0.075
  CI (99.9%): [? 0, 0.574] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 3)

# Run progress: 70.67% complete, ETA 00:33:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.211 ms/op
# Warmup Iteration   2: 0.193 ms/op
# Warmup Iteration   3: 0.192 ms/op
# Warmup Iteration   4: 0.193 ms/op
# Warmup Iteration   5: 0.195 ms/op
Iteration   1: 0.193 ms/op
Iteration   2: 0.195 ms/op
Iteration   3: 0.221 ms/op
Iteration   4: 0.344 ms/op
Iteration   5: 0.349 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.260 ±(99.9%) 0.305 ms/op [Average]
  (min, avg, max) = (0.193, 0.260, 0.349), stdev = 0.079
  CI (99.9%): [? 0, 0.565] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 2)

# Run progress: 70.83% complete, ETA 00:33:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.475 ms/op
# Warmup Iteration   2: 0.448 ms/op
# Warmup Iteration   3: 0.442 ms/op
# Warmup Iteration   4: 0.440 ms/op
# Warmup Iteration   5: 0.438 ms/op
Iteration   1: 0.446 ms/op
Iteration   2: 0.445 ms/op
Iteration   3: 0.524 ms/op
Iteration   4: 0.757 ms/op
Iteration   5: 0.767 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.588 ±(99.9%) 0.625 ms/op [Average]
  (min, avg, max) = (0.445, 0.588, 0.767), stdev = 0.162
  CI (99.9%): [? 0, 1.213] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 3)

# Run progress: 70.99% complete, ETA 00:32:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.425 ms/op
# Warmup Iteration   2: 0.386 ms/op
# Warmup Iteration   3: 0.388 ms/op
# Warmup Iteration   4: 0.382 ms/op
# Warmup Iteration   5: 0.384 ms/op
Iteration   1: 0.385 ms/op
Iteration   2: 0.386 ms/op
Iteration   3: 0.464 ms/op
Iteration   4: 0.666 ms/op
Iteration   5: 0.751 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.530 ±(99.9%) 0.647 ms/op [Average]
  (min, avg, max) = (0.385, 0.530, 0.751), stdev = 0.168
  CI (99.9%): [? 0, 1.178] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 2)

# Run progress: 71.15% complete, ETA 00:32:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 3)

# Run progress: 71.31% complete, ETA 00:32:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 2)

# Run progress: 71.47% complete, ETA 00:32:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 3)

# Run progress: 71.63% complete, ETA 00:32:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 2)

# Run progress: 71.79% complete, ETA 00:32:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 3)

# Run progress: 71.96% complete, ETA 00:31:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 2)

# Run progress: 72.12% complete, ETA 00:31:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 3)

# Run progress: 72.28% complete, ETA 00:31:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 2)

# Run progress: 72.44% complete, ETA 00:31:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 3)

# Run progress: 72.60% complete, ETA 00:31:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 2)

# Run progress: 72.76% complete, ETA 00:30:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 3)

# Run progress: 72.92% complete, ETA 00:30:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [? 10??, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 2)

# Run progress: 73.08% complete, ETA 00:30:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.013 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.017), stdev = 0.003
  CI (99.9%): [? 0, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 3)

# Run progress: 73.24% complete, ETA 00:30:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.015 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.011, 0.015, 0.021), stdev = 0.005
  CI (99.9%): [? 0, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 2)

# Run progress: 73.40% complete, ETA 00:30:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.028 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.022, 0.028, 0.038), stdev = 0.006
  CI (99.9%): [0.003, 0.053] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 3)

# Run progress: 73.56% complete, ETA 00:29:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.028 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.031 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.023, 0.031, 0.043), stdev = 0.009
  CI (99.9%): [? 0, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 2)

# Run progress: 73.72% complete, ETA 00:29:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.046 ms/op
Iteration   2: 0.046 ms/op
Iteration   3: 0.054 ms/op
Iteration   4: 0.068 ms/op
Iteration   5: 0.074 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.058 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (0.046, 0.058, 0.074), stdev = 0.013
  CI (99.9%): [0.008, 0.107] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 3)

# Run progress: 73.88% complete, ETA 00:29:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.052 ms/op
# Warmup Iteration   4: 0.051 ms/op
# Warmup Iteration   5: 0.051 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.052 ms/op
Iteration   3: 0.063 ms/op
Iteration   4: 0.095 ms/op
Iteration   5: 0.077 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.068 ±(99.9%) 0.071 ms/op [Average]
  (min, avg, max) = (0.051, 0.068, 0.095), stdev = 0.018
  CI (99.9%): [? 0, 0.139] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 2)

# Run progress: 74.04% complete, ETA 00:29:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.110 ms/op
# Warmup Iteration   2: 0.096 ms/op
# Warmup Iteration   3: 0.097 ms/op
# Warmup Iteration   4: 0.097 ms/op
# Warmup Iteration   5: 0.096 ms/op
Iteration   1: 0.097 ms/op
Iteration   2: 0.097 ms/op
Iteration   3: 0.116 ms/op
Iteration   4: 0.143 ms/op
Iteration   5: 0.156 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.122 ±(99.9%) 0.104 ms/op [Average]
  (min, avg, max) = (0.097, 0.122, 0.156), stdev = 0.027
  CI (99.9%): [0.018, 0.226] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 3)

# Run progress: 74.20% complete, ETA 00:29:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.116 ms/op
# Warmup Iteration   2: 0.103 ms/op
# Warmup Iteration   3: 0.102 ms/op
# Warmup Iteration   4: 0.103 ms/op
# Warmup Iteration   5: 0.103 ms/op
Iteration   1: 0.104 ms/op
Iteration   2: 0.102 ms/op
Iteration   3: 0.117 ms/op
Iteration   4: 0.159 ms/op
Iteration   5: 0.182 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.133 ±(99.9%) 0.138 ms/op [Average]
  (min, avg, max) = (0.102, 0.133, 0.182), stdev = 0.036
  CI (99.9%): [? 0, 0.271] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 2)

# Run progress: 74.36% complete, ETA 00:29:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.222 ms/op
# Warmup Iteration   2: 0.200 ms/op
# Warmup Iteration   3: 0.198 ms/op
# Warmup Iteration   4: 0.197 ms/op
# Warmup Iteration   5: 0.198 ms/op
Iteration   1: 0.202 ms/op
Iteration   2: 0.200 ms/op
Iteration   3: 0.217 ms/op
Iteration   4: 0.336 ms/op
Iteration   5: 0.365 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.264 ±(99.9%) 0.308 ms/op [Average]
  (min, avg, max) = (0.200, 0.264, 0.365), stdev = 0.080
  CI (99.9%): [? 0, 0.572] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 3)

# Run progress: 74.52% complete, ETA 00:28:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.248 ms/op
# Warmup Iteration   2: 0.215 ms/op
# Warmup Iteration   3: 0.214 ms/op
# Warmup Iteration   4: 0.215 ms/op
# Warmup Iteration   5: 0.214 ms/op
Iteration   1: 0.217 ms/op
Iteration   2: 0.211 ms/op
Iteration   3: 0.255 ms/op
Iteration   4: 0.395 ms/op
Iteration   5: 0.325 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.281 ±(99.9%) 0.303 ms/op [Average]
  (min, avg, max) = (0.211, 0.281, 0.395), stdev = 0.079
  CI (99.9%): [? 0, 0.583] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 2)

# Run progress: 74.68% complete, ETA 00:28:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.443 ms/op
# Warmup Iteration   2: 0.391 ms/op
# Warmup Iteration   3: 0.386 ms/op
# Warmup Iteration   4: 0.391 ms/op
# Warmup Iteration   5: 0.389 ms/op
Iteration   1: 0.394 ms/op
Iteration   2: 0.394 ms/op
Iteration   3: 0.442 ms/op
Iteration   4: 0.609 ms/op
Iteration   5: 0.610 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.490 ±(99.9%) 0.428 ms/op [Average]
  (min, avg, max) = (0.394, 0.490, 0.610), stdev = 0.111
  CI (99.9%): [0.062, 0.917] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 3)

# Run progress: 74.84% complete, ETA 00:28:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.487 ms/op
# Warmup Iteration   2: 0.419 ms/op
# Warmup Iteration   3: 0.419 ms/op
# Warmup Iteration   4: 0.410 ms/op
# Warmup Iteration   5: 0.419 ms/op
Iteration   1: 0.417 ms/op
Iteration   2: 0.418 ms/op
Iteration   3: 0.493 ms/op
Iteration   4: 0.689 ms/op
Iteration   5: 0.712 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.546 ±(99.9%) 0.558 ms/op [Average]
  (min, avg, max) = (0.417, 0.546, 0.712), stdev = 0.145
  CI (99.9%): [? 0, 1.104] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 2)

# Run progress: 75.00% complete, ETA 00:28:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.902 ms/op
# Warmup Iteration   2: 0.802 ms/op
# Warmup Iteration   3: 0.804 ms/op
# Warmup Iteration   4: 0.798 ms/op
# Warmup Iteration   5: 0.802 ms/op
Iteration   1: 0.794 ms/op
Iteration   2: 0.796 ms/op
Iteration   3: 0.965 ms/op
Iteration   4: 1.268 ms/op
Iteration   5: 1.238 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  1.012 ±(99.9%) 0.888 ms/op [Average]
  (min, avg, max) = (0.794, 1.012, 1.268), stdev = 0.231
  CI (99.9%): [0.124, 1.900] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 3)

# Run progress: 75.16% complete, ETA 00:28:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.931 ms/op
# Warmup Iteration   2: 0.835 ms/op
# Warmup Iteration   3: 0.851 ms/op
# Warmup Iteration   4: 0.838 ms/op
# Warmup Iteration   5: 0.837 ms/op
Iteration   1: 0.843 ms/op
Iteration   2: 0.826 ms/op
Iteration   3: 0.958 ms/op
Iteration   4: 1.349 ms/op
Iteration   5: 1.385 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  1.072 ±(99.9%) 1.055 ms/op [Average]
  (min, avg, max) = (0.826, 1.072, 1.385), stdev = 0.274
  CI (99.9%): [0.017, 2.127] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 2)

# Run progress: 75.32% complete, ETA 00:27:58
# Fork: 1 of 1
# Warmup Iteration   1: 1.784 ms/op
# Warmup Iteration   2: 1.585 ms/op
# Warmup Iteration   3: 1.570 ms/op
# Warmup Iteration   4: 1.588 ms/op
# Warmup Iteration   5: 1.606 ms/op
Iteration   1: 1.586 ms/op
Iteration   2: 1.592 ms/op
Iteration   3: 1.781 ms/op
Iteration   4: 2.864 ms/op
Iteration   5: 2.763 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  2.117 ±(99.9%) 2.471 ms/op [Average]
  (min, avg, max) = (1.586, 2.117, 2.864), stdev = 0.642
  CI (99.9%): [? 0, 4.588] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 3)

# Run progress: 75.48% complete, ETA 00:27:46
# Fork: 1 of 1
# Warmup Iteration   1: 1.987 ms/op
# Warmup Iteration   2: 1.731 ms/op
# Warmup Iteration   3: 1.755 ms/op
# Warmup Iteration   4: 1.729 ms/op
# Warmup Iteration   5: 1.739 ms/op
Iteration   1: 1.717 ms/op
Iteration   2: 1.710 ms/op
Iteration   3: 2.038 ms/op
Iteration   4: 3.336 ms/op
Iteration   5: 2.645 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  2.289 ±(99.9%) 2.687 ms/op [Average]
  (min, avg, max) = (1.710, 2.289, 3.336), stdev = 0.698
  CI (99.9%): [? 0, 4.976] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 2)

# Run progress: 75.64% complete, ETA 00:27:35
# Fork: 1 of 1
# Warmup Iteration   1: 3.529 ms/op
# Warmup Iteration   2: 3.189 ms/op
# Warmup Iteration   3: 3.190 ms/op
# Warmup Iteration   4: 3.134 ms/op
# Warmup Iteration   5: 3.160 ms/op
Iteration   1: 3.315 ms/op
Iteration   2: 3.270 ms/op
Iteration   3: 3.844 ms/op
Iteration   4: 5.362 ms/op
Iteration   5: 5.414 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  4.241 ±(99.9%) 4.125 ms/op [Average]
  (min, avg, max) = (3.270, 4.241, 5.414), stdev = 1.071
  CI (99.9%): [0.116, 8.366] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 3)

# Run progress: 75.80% complete, ETA 00:27:24
# Fork: 1 of 1
# Warmup Iteration   1: 4.028 ms/op
# Warmup Iteration   2: 3.448 ms/op
# Warmup Iteration   3: 3.470 ms/op
# Warmup Iteration   4: 3.405 ms/op
# Warmup Iteration   5: 3.453 ms/op
Iteration   1: 3.415 ms/op
Iteration   2: 3.469 ms/op
Iteration   3: 4.056 ms/op
Iteration   4: 5.775 ms/op
Iteration   5: 5.552 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  4.453 ±(99.9%) 4.372 ms/op [Average]
  (min, avg, max) = (3.415, 4.453, 5.775), stdev = 1.135
  CI (99.9%): [0.081, 8.825] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 2)

# Run progress: 75.96% complete, ETA 00:27:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 3)

# Run progress: 76.12% complete, ETA 00:27:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 2)

# Run progress: 76.28% complete, ETA 00:26:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 3)

# Run progress: 76.44% complete, ETA 00:26:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 2)

# Run progress: 76.60% complete, ETA 00:26:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 3)

# Run progress: 76.76% complete, ETA 00:26:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 2)

# Run progress: 76.92% complete, ETA 00:26:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 3)

# Run progress: 77.08% complete, ETA 00:25:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 2)

# Run progress: 77.24% complete, ETA 00:25:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 3)

# Run progress: 77.40% complete, ETA 00:25:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 2)

# Run progress: 77.56% complete, ETA 00:25:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 3)

# Run progress: 77.72% complete, ETA 00:25:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 2)

# Run progress: 77.88% complete, ETA 00:25:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.018 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.013, 0.018, 0.024), stdev = 0.005
  CI (99.9%): [? 0, 0.038] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 3)

# Run progress: 78.04% complete, ETA 00:24:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.025 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.019, 0.025, 0.034), stdev = 0.007
  CI (99.9%): [? 0, 0.053] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 2)

# Run progress: 78.21% complete, ETA 00:24:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 ms/op
# Warmup Iteration   2: 0.047 ms/op
# Warmup Iteration   3: 0.047 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.046 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.084 ms/op
Iteration   5: 0.079 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.062 ±(99.9%) 0.069 ms/op [Average]
  (min, avg, max) = (0.046, 0.062, 0.084), stdev = 0.018
  CI (99.9%): [? 0, 0.131] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 3)

# Run progress: 78.37% complete, ETA 00:24:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.073 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.059 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.071 ms/op
Iteration   4: 0.113 ms/op
Iteration   5: 0.101 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.080 ±(99.9%) 0.096 ms/op [Average]
  (min, avg, max) = (0.059, 0.080, 0.113), stdev = 0.025
  CI (99.9%): [? 0, 0.177] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 2)

# Run progress: 78.53% complete, ETA 00:24:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.157 ms/op
# Warmup Iteration   2: 0.125 ms/op
# Warmup Iteration   3: 0.132 ms/op
# Warmup Iteration   4: 0.124 ms/op
# Warmup Iteration   5: 0.125 ms/op
Iteration   1: 0.125 ms/op
Iteration   2: 0.124 ms/op
Iteration   3: 0.139 ms/op
Iteration   4: 0.216 ms/op
Iteration   5: 0.203 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.161 ±(99.9%) 0.171 ms/op [Average]
  (min, avg, max) = (0.124, 0.161, 0.216), stdev = 0.044
  CI (99.9%): [? 0, 0.332] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 3)

# Run progress: 78.69% complete, ETA 00:24:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.175 ms/op
# Warmup Iteration   2: 0.132 ms/op
# Warmup Iteration   3: 0.132 ms/op
# Warmup Iteration   4: 0.132 ms/op
# Warmup Iteration   5: 0.134 ms/op
Iteration   1: 0.134 ms/op
Iteration   2: 0.140 ms/op
Iteration   3: 0.158 ms/op
Iteration   4: 0.227 ms/op
Iteration   5: 0.227 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.177 ±(99.9%) 0.178 ms/op [Average]
  (min, avg, max) = (0.134, 0.177, 0.227), stdev = 0.046
  CI (99.9%): [? 0, 0.356] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 2)

# Run progress: 78.85% complete, ETA 00:23:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.356 ms/op
# Warmup Iteration   2: 0.286 ms/op
# Warmup Iteration   3: 0.285 ms/op
# Warmup Iteration   4: 0.287 ms/op
# Warmup Iteration   5: 0.287 ms/op
Iteration   1: 0.290 ms/op
Iteration   2: 0.286 ms/op
Iteration   3: 0.339 ms/op
Iteration   4: 0.512 ms/op
Iteration   5: 0.497 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.385 ±(99.9%) 0.429 ms/op [Average]
  (min, avg, max) = (0.286, 0.385, 0.512), stdev = 0.111
  CI (99.9%): [? 0, 0.814] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 3)

# Run progress: 79.01% complete, ETA 00:23:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.429 ms/op
# Warmup Iteration   2: 0.313 ms/op
# Warmup Iteration   3: 0.314 ms/op
# Warmup Iteration   4: 0.311 ms/op
# Warmup Iteration   5: 0.314 ms/op
Iteration   1: 0.311 ms/op
Iteration   2: 0.313 ms/op
Iteration   3: 0.353 ms/op
Iteration   4: 0.633 ms/op
Iteration   5: 0.468 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.416 ±(99.9%) 0.528 ms/op [Average]
  (min, avg, max) = (0.311, 0.416, 0.633), stdev = 0.137
  CI (99.9%): [? 0, 0.944] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 2)

# Run progress: 79.17% complete, ETA 00:23:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.991 ms/op
# Warmup Iteration   2: 0.704 ms/op
# Warmup Iteration   3: 0.691 ms/op
# Warmup Iteration   4: 0.686 ms/op
# Warmup Iteration   5: 0.686 ms/op
Iteration   1: 0.677 ms/op
Iteration   2: 0.686 ms/op
Iteration   3: 0.808 ms/op
Iteration   4: 1.226 ms/op
Iteration   5: 1.080 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.895 ±(99.9%) 0.948 ms/op [Average]
  (min, avg, max) = (0.677, 0.895, 1.226), stdev = 0.246
  CI (99.9%): [? 0, 1.843] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 3)

# Run progress: 79.33% complete, ETA 00:23:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.911 ms/op
# Warmup Iteration   2: 0.727 ms/op
# Warmup Iteration   3: 0.722 ms/op
# Warmup Iteration   4: 0.718 ms/op
# Warmup Iteration   5: 0.729 ms/op
Iteration   1: 0.735 ms/op
Iteration   2: 0.718 ms/op
Iteration   3: 0.819 ms/op
Iteration   4: 1.085 ms/op
Iteration   5: 1.164 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.905 ±(99.9%) 0.796 ms/op [Average]
  (min, avg, max) = (0.718, 0.905, 1.164), stdev = 0.207
  CI (99.9%): [0.109, 1.700] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 2)

# Run progress: 79.49% complete, ETA 00:23:11
# Fork: 1 of 1
# Warmup Iteration   1: 1.991 ms/op
# Warmup Iteration   2: 1.477 ms/op
# Warmup Iteration   3: 1.489 ms/op
# Warmup Iteration   4: 1.500 ms/op
# Warmup Iteration   5: 1.451 ms/op
Iteration   1: 1.478 ms/op
Iteration   2: 1.451 ms/op
Iteration   3: 1.734 ms/op
Iteration   4: 2.571 ms/op
Iteration   5: 2.317 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  1.910 ±(99.9%) 1.954 ms/op [Average]
  (min, avg, max) = (1.451, 1.910, 2.571), stdev = 0.508
  CI (99.9%): [? 0, 3.865] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 3)

# Run progress: 79.65% complete, ETA 00:23:00
# Fork: 1 of 1
# Warmup Iteration   1: 2.537 ms/op
# Warmup Iteration   2: 1.681 ms/op
# Warmup Iteration   3: 1.671 ms/op
# Warmup Iteration   4: 1.662 ms/op
# Warmup Iteration   5: 1.737 ms/op
Iteration   1: 1.689 ms/op
Iteration   2: 1.673 ms/op
Iteration   3: 1.915 ms/op
Iteration   4: 3.359 ms/op
Iteration   5: 3.159 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  2.359 ±(99.9%) 3.196 ms/op [Average]
  (min, avg, max) = (1.673, 2.359, 3.359), stdev = 0.830
  CI (99.9%): [? 0, 5.555] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 2)

# Run progress: 79.81% complete, ETA 00:22:49
# Fork: 1 of 1
# Warmup Iteration   1: 4.209 ms/op
# Warmup Iteration   2: 3.136 ms/op
# Warmup Iteration   3: 3.201 ms/op
# Warmup Iteration   4: 3.156 ms/op
# Warmup Iteration   5: 3.174 ms/op
Iteration   1: 3.153 ms/op
Iteration   2: 3.156 ms/op
Iteration   3: 3.700 ms/op
Iteration   4: 5.713 ms/op
Iteration   5: 4.531 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  4.050 ±(99.9%) 4.184 ms/op [Average]
  (min, avg, max) = (3.153, 4.050, 5.713), stdev = 1.087
  CI (99.9%): [? 0, 8.234] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 3)

# Run progress: 79.97% complete, ETA 00:22:38
# Fork: 1 of 1
# Warmup Iteration   1: 4.604 ms/op
# Warmup Iteration   2: 3.385 ms/op
# Warmup Iteration   3: 3.369 ms/op
# Warmup Iteration   4: 3.356 ms/op
# Warmup Iteration   5: 3.383 ms/op
Iteration   1: 3.347 ms/op
Iteration   2: 3.365 ms/op
Iteration   3: 4.195 ms/op
Iteration   4: 6.046 ms/op
Iteration   5: 5.399 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  4.471 ±(99.9%) 4.679 ms/op [Average]
  (min, avg, max) = (3.347, 4.471, 6.046), stdev = 1.215
  CI (99.9%): [? 0, 9.149] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 2)

# Run progress: 80.13% complete, ETA 00:22:27
# Fork: 1 of 1
# Warmup Iteration   1: 8.145 ms/op
# Warmup Iteration   2: 6.608 ms/op
# Warmup Iteration   3: 6.542 ms/op
# Warmup Iteration   4: 6.602 ms/op
# Warmup Iteration   5: 6.726 ms/op
Iteration   1: 6.547 ms/op
Iteration   2: 6.544 ms/op
Iteration   3: 7.148 ms/op
Iteration   4: 10.573 ms/op
Iteration   5: 10.837 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  8.330 ±(99.9%) 8.411 ms/op [Average]
  (min, avg, max) = (6.544, 8.330, 10.837), stdev = 2.184
  CI (99.9%): [? 0, 16.741] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 3)

# Run progress: 80.29% complete, ETA 00:22:16
# Fork: 1 of 1
# Warmup Iteration   1: 10.740 ms/op
# Warmup Iteration   2: 7.900 ms/op
# Warmup Iteration   3: 7.539 ms/op
# Warmup Iteration   4: 7.842 ms/op
# Warmup Iteration   5: 7.582 ms/op
Iteration   1: 7.511 ms/op
Iteration   2: 7.540 ms/op
Iteration   3: 9.013 ms/op
Iteration   4: 12.160 ms/op
Iteration   5: 12.079 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  9.660 ±(99.9%) 8.956 ms/op [Average]
  (min, avg, max) = (7.511, 9.660, 12.160), stdev = 2.326
  CI (99.9%): [0.705, 18.616] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 2)

# Run progress: 80.45% complete, ETA 00:22:05
# Fork: 1 of 1
# Warmup Iteration   1: 18.612 ms/op
# Warmup Iteration   2: 13.486 ms/op
# Warmup Iteration   3: 13.173 ms/op
# Warmup Iteration   4: 13.720 ms/op
# Warmup Iteration   5: 13.133 ms/op
Iteration   1: 13.258 ms/op
Iteration   2: 13.461 ms/op
Iteration   3: 16.717 ms/op
Iteration   4: 22.148 ms/op
Iteration   5: 22.551 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  17.627 ±(99.9%) 17.430 ms/op [Average]
  (min, avg, max) = (13.258, 17.627, 22.551), stdev = 4.526
  CI (99.9%): [0.197, 35.056] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 3)

# Run progress: 80.61% complete, ETA 00:21:54
# Fork: 1 of 1
# Warmup Iteration   1: 21.227 ms/op
# Warmup Iteration   2: 15.301 ms/op
# Warmup Iteration   3: 15.275 ms/op
# Warmup Iteration   4: 15.162 ms/op
# Warmup Iteration   5: 15.120 ms/op
Iteration   1: 15.299 ms/op
Iteration   2: 15.053 ms/op
Iteration   3: 18.323 ms/op
Iteration   4: 24.626 ms/op
Iteration   5: 24.342 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  19.529 ±(99.9%) 18.116 ms/op [Average]
  (min, avg, max) = (15.053, 19.529, 24.626), stdev = 4.705
  CI (99.9%): [1.413, 37.644] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 2)

# Run progress: 80.77% complete, ETA 00:21:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 3)

# Run progress: 80.93% complete, ETA 00:21:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 2)

# Run progress: 81.09% complete, ETA 00:21:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 3)

# Run progress: 81.25% complete, ETA 00:21:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 2)

# Run progress: 81.41% complete, ETA 00:20:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 3)

# Run progress: 81.57% complete, ETA 00:20:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 2)

# Run progress: 81.73% complete, ETA 00:20:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 3)

# Run progress: 81.89% complete, ETA 00:20:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 2)

# Run progress: 82.05% complete, ETA 00:20:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 3)

# Run progress: 82.21% complete, ETA 00:20:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 2)

# Run progress: 82.37% complete, ETA 00:19:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 10??, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 3)

# Run progress: 82.53% complete, ETA 00:19:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 2)

# Run progress: 82.69% complete, ETA 00:19:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.018 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.014, 0.018, 0.025), stdev = 0.006
  CI (99.9%): [? 0, 0.041] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 3)

# Run progress: 82.85% complete, ETA 00:19:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.025 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.020, 0.025, 0.033), stdev = 0.007
  CI (99.9%): [? 10??, 0.051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 2)

# Run progress: 83.01% complete, ETA 00:19:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.059 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.046 ms/op
Iteration   2: 0.046 ms/op
Iteration   3: 0.055 ms/op
Iteration   4: 0.082 ms/op
Iteration   5: 0.072 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.060 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.046, 0.060, 0.082), stdev = 0.016
  CI (99.9%): [? 0, 0.123] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 3)

# Run progress: 83.17% complete, ETA 00:18:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.073 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.059 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.060 ms/op
Iteration   2: 0.060 ms/op
Iteration   3: 0.069 ms/op
Iteration   4: 0.103 ms/op
Iteration   5: 0.100 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.079 ±(99.9%) 0.082 ms/op [Average]
  (min, avg, max) = (0.060, 0.079, 0.103), stdev = 0.021
  CI (99.9%): [? 0, 0.161] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 2)

# Run progress: 83.33% complete, ETA 00:18:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.163 ms/op
# Warmup Iteration   2: 0.124 ms/op
# Warmup Iteration   3: 0.124 ms/op
# Warmup Iteration   4: 0.124 ms/op
# Warmup Iteration   5: 0.123 ms/op
Iteration   1: 0.131 ms/op
Iteration   2: 0.123 ms/op
Iteration   3: 0.143 ms/op
Iteration   4: 0.229 ms/op
Iteration   5: 0.182 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.162 ±(99.9%) 0.169 ms/op [Average]
  (min, avg, max) = (0.123, 0.162, 0.229), stdev = 0.044
  CI (99.9%): [? 0, 0.331] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 3)

# Run progress: 83.49% complete, ETA 00:18:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.184 ms/op
# Warmup Iteration   2: 0.138 ms/op
# Warmup Iteration   3: 0.140 ms/op
# Warmup Iteration   4: 0.139 ms/op
# Warmup Iteration   5: 0.137 ms/op
Iteration   1: 0.138 ms/op
Iteration   2: 0.137 ms/op
Iteration   3: 0.166 ms/op
Iteration   4: 0.229 ms/op
Iteration   5: 0.232 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.180 ±(99.9%) 0.182 ms/op [Average]
  (min, avg, max) = (0.137, 0.180, 0.232), stdev = 0.047
  CI (99.9%): [? 0, 0.363] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 2)

# Run progress: 83.65% complete, ETA 00:18:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.348 ms/op
# Warmup Iteration   2: 0.295 ms/op
# Warmup Iteration   3: 0.280 ms/op
# Warmup Iteration   4: 0.283 ms/op
# Warmup Iteration   5: 0.284 ms/op
Iteration   1: 0.279 ms/op
Iteration   2: 0.281 ms/op
Iteration   3: 0.307 ms/op
Iteration   4: 0.447 ms/op
Iteration   5: 0.482 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.359 ±(99.9%) 0.376 ms/op [Average]
  (min, avg, max) = (0.279, 0.359, 0.482), stdev = 0.098
  CI (99.9%): [? 0, 0.735] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 3)

# Run progress: 83.81% complete, ETA 00:18:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.398 ms/op
# Warmup Iteration   2: 0.323 ms/op
# Warmup Iteration   3: 0.308 ms/op
# Warmup Iteration   4: 0.306 ms/op
# Warmup Iteration   5: 0.306 ms/op
Iteration   1: 0.308 ms/op
Iteration   2: 0.306 ms/op
Iteration   3: 0.364 ms/op
Iteration   4: 0.522 ms/op
Iteration   5: 0.515 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.403 ±(99.9%) 0.415 ms/op [Average]
  (min, avg, max) = (0.306, 0.403, 0.522), stdev = 0.108
  CI (99.9%): [? 0, 0.818] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 2)

# Run progress: 83.97% complete, ETA 00:18:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.828 ms/op
# Warmup Iteration   2: 0.692 ms/op
# Warmup Iteration   3: 0.695 ms/op
# Warmup Iteration   4: 0.714 ms/op
# Warmup Iteration   5: 0.692 ms/op
Iteration   1: 0.702 ms/op
Iteration   2: 0.693 ms/op
Iteration   3: 0.810 ms/op
Iteration   4: 1.036 ms/op
Iteration   5: 1.142 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.877 ±(99.9%) 0.781 ms/op [Average]
  (min, avg, max) = (0.693, 0.877, 1.142), stdev = 0.203
  CI (99.9%): [0.095, 1.658] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 3)

# Run progress: 84.13% complete, ETA 00:17:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.908 ms/op
# Warmup Iteration   2: 0.732 ms/op
# Warmup Iteration   3: 0.737 ms/op
# Warmup Iteration   4: 0.733 ms/op
# Warmup Iteration   5: 0.746 ms/op
Iteration   1: 0.735 ms/op
Iteration   2: 0.745 ms/op
Iteration   3: 0.830 ms/op
Iteration   4: 1.224 ms/op
Iteration   5: 1.155 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.938 ±(99.9%) 0.900 ms/op [Average]
  (min, avg, max) = (0.735, 0.938, 1.224), stdev = 0.234
  CI (99.9%): [0.038, 1.838] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 2)

# Run progress: 84.29% complete, ETA 00:17:42
# Fork: 1 of 1
# Warmup Iteration   1: 2.187 ms/op
# Warmup Iteration   2: 1.673 ms/op
# Warmup Iteration   3: 1.604 ms/op
# Warmup Iteration   4: 1.629 ms/op
# Warmup Iteration   5: 1.640 ms/op
Iteration   1: 1.643 ms/op
Iteration   2: 1.642 ms/op
Iteration   3: 1.955 ms/op
Iteration   4: 2.619 ms/op
Iteration   5: 2.963 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  2.164 ±(99.9%) 2.305 ms/op [Average]
  (min, avg, max) = (1.642, 2.164, 2.963), stdev = 0.599
  CI (99.9%): [? 0, 4.469] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 3)

# Run progress: 84.46% complete, ETA 00:17:31
# Fork: 1 of 1
# Warmup Iteration   1: 2.321 ms/op
# Warmup Iteration   2: 1.906 ms/op
# Warmup Iteration   3: 1.880 ms/op
# Warmup Iteration   4: 1.849 ms/op
# Warmup Iteration   5: 1.910 ms/op
Iteration   1: 1.898 ms/op
Iteration   2: 1.874 ms/op
Iteration   3: 2.261 ms/op
Iteration   4: 3.429 ms/op
Iteration   5: 3.688 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  2.630 ±(99.9%) 3.335 ms/op [Average]
  (min, avg, max) = (1.874, 2.630, 3.688), stdev = 0.866
  CI (99.9%): [? 0, 5.965] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 2)

# Run progress: 84.62% complete, ETA 00:17:21
# Fork: 1 of 1
# Warmup Iteration   1: 4.905 ms/op
# Warmup Iteration   2: 4.079 ms/op
# Warmup Iteration   3: 4.128 ms/op
# Warmup Iteration   4: 4.064 ms/op
# Warmup Iteration   5: 4.054 ms/op
Iteration   1: 4.268 ms/op
Iteration   2: 4.085 ms/op
Iteration   3: 4.424 ms/op
Iteration   4: 7.003 ms/op
Iteration   5: 6.795 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  5.315 ±(99.9%) 5.595 ms/op [Average]
  (min, avg, max) = (4.085, 5.315, 7.003), stdev = 1.453
  CI (99.9%): [? 0, 10.910] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 3)

# Run progress: 84.78% complete, ETA 00:17:10
# Fork: 1 of 1
# Warmup Iteration   1: 5.709 ms/op
# Warmup Iteration   2: 4.476 ms/op
# Warmup Iteration   3: 4.449 ms/op
# Warmup Iteration   4: 4.390 ms/op
# Warmup Iteration   5: 4.397 ms/op
Iteration   1: 4.481 ms/op
Iteration   2: 4.438 ms/op
Iteration   3: 5.312 ms/op
Iteration   4: 8.605 ms/op
Iteration   5: 7.417 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  6.051 ±(99.9%) 7.204 ms/op [Average]
  (min, avg, max) = (4.438, 6.051, 8.605), stdev = 1.871
  CI (99.9%): [? 0, 13.255] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 2)

# Run progress: 84.94% complete, ETA 00:16:59
# Fork: 1 of 1
# Warmup Iteration   1: 11.429 ms/op
# Warmup Iteration   2: 10.123 ms/op
# Warmup Iteration   3: 9.154 ms/op
# Warmup Iteration   4: 9.064 ms/op
# Warmup Iteration   5: 9.406 ms/op
Iteration   1: 9.178 ms/op
Iteration   2: 9.088 ms/op
Iteration   3: 10.751 ms/op
Iteration   4: 16.529 ms/op
Iteration   5: 14.765 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  12.062 ±(99.9%) 13.078 ms/op [Average]
  (min, avg, max) = (9.088, 12.062, 16.529), stdev = 3.396
  CI (99.9%): [? 0, 25.141] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 3)

# Run progress: 85.10% complete, ETA 00:16:48
# Fork: 1 of 1
# Warmup Iteration   1: 13.200 ms/op
# Warmup Iteration   2: 9.951 ms/op
# Warmup Iteration   3: 9.664 ms/op
# Warmup Iteration   4: 9.609 ms/op
# Warmup Iteration   5: 9.653 ms/op
Iteration   1: 9.709 ms/op
Iteration   2: 9.541 ms/op
Iteration   3: 11.371 ms/op
Iteration   4: 15.280 ms/op
Iteration   5: 15.027 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  12.185 ±(99.9%) 10.795 ms/op [Average]
  (min, avg, max) = (9.541, 12.185, 15.280), stdev = 2.803
  CI (99.9%): [1.390, 22.980] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 2)

# Run progress: 85.26% complete, ETA 00:16:37
# Fork: 1 of 1
# Warmup Iteration   1: 28.859 ms/op
# Warmup Iteration   2: 20.632 ms/op
# Warmup Iteration   3: 20.676 ms/op
# Warmup Iteration   4: 20.516 ms/op
# Warmup Iteration   5: 20.303 ms/op
Iteration   1: 20.391 ms/op
Iteration   2: 20.313 ms/op
Iteration   3: 26.296 ms/op
Iteration   4: 35.576 ms/op
Iteration   5: 31.868 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  26.889 ±(99.9%) 26.263 ms/op [Average]
  (min, avg, max) = (20.313, 26.889, 35.576), stdev = 6.820
  CI (99.9%): [0.626, 53.152] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 3)

# Run progress: 85.42% complete, ETA 00:16:26
# Fork: 1 of 1
# Warmup Iteration   1: 30.786 ms/op
# Warmup Iteration   2: 21.202 ms/op
# Warmup Iteration   3: 21.528 ms/op
# Warmup Iteration   4: 21.828 ms/op
# Warmup Iteration   5: 21.191 ms/op
Iteration   1: 21.793 ms/op
Iteration   2: 21.494 ms/op
Iteration   3: 26.716 ms/op
Iteration   4: 39.040 ms/op
Iteration   5: 34.217 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  28.652 ±(99.9%) 29.884 ms/op [Average]
  (min, avg, max) = (21.494, 28.652, 39.040), stdev = 7.761
  CI (99.9%): [? 0, 58.536] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 2)

# Run progress: 85.58% complete, ETA 00:16:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 3)

# Run progress: 85.74% complete, ETA 00:16:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 2)

# Run progress: 85.90% complete, ETA 00:15:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 3)

# Run progress: 86.06% complete, ETA 00:15:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 2)

# Run progress: 86.22% complete, ETA 00:15:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 3)

# Run progress: 86.38% complete, ETA 00:15:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 2)

# Run progress: 86.54% complete, ETA 00:15:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 3)

# Run progress: 86.70% complete, ETA 00:14:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 2)

# Run progress: 86.86% complete, ETA 00:14:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 3)

# Run progress: 87.02% complete, ETA 00:14:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 2)

# Run progress: 87.18% complete, ETA 00:14:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 3)

# Run progress: 87.34% complete, ETA 00:14:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 2)

# Run progress: 87.50% complete, ETA 00:14:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.009 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 3)

# Run progress: 87.66% complete, ETA 00:13:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.010 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.013), stdev = 0.003
  CI (99.9%): [? 0, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 2)

# Run progress: 87.82% complete, ETA 00:13:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.019 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.014, 0.019, 0.025), stdev = 0.005
  CI (99.9%): [? 0, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 3)

# Run progress: 87.98% complete, ETA 00:13:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.021 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.016, 0.021, 0.029), stdev = 0.006
  CI (99.9%): [? 0, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 2)

# Run progress: 88.14% complete, ETA 00:13:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.038 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.031, 0.038, 0.046), stdev = 0.008
  CI (99.9%): [0.009, 0.067] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 3)

# Run progress: 88.30% complete, ETA 00:13:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.036 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.034 ms/op
# Warmup Iteration   4: 0.034 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 0.033 ms/op
Iteration   3: 0.040 ms/op
Iteration   4: 0.062 ms/op
Iteration   5: 0.060 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.046 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (0.033, 0.046, 0.062), stdev = 0.014
  CI (99.9%): [? 0, 0.101] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 2)

# Run progress: 88.46% complete, ETA 00:12:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
# Warmup Iteration   2: 0.064 ms/op
# Warmup Iteration   3: 0.064 ms/op
# Warmup Iteration   4: 0.063 ms/op
# Warmup Iteration   5: 0.063 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.063 ms/op
Iteration   3: 0.070 ms/op
Iteration   4: 0.092 ms/op
Iteration   5: 0.095 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.077 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (0.063, 0.077, 0.095), stdev = 0.016
  CI (99.9%): [0.016, 0.138] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 3)

# Run progress: 88.62% complete, ETA 00:12:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.073 ms/op
# Warmup Iteration   2: 0.070 ms/op
# Warmup Iteration   3: 0.068 ms/op
# Warmup Iteration   4: 0.069 ms/op
# Warmup Iteration   5: 0.070 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.069 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.114 ms/op
Iteration   5: 0.107 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.087 ±(99.9%) 0.083 ms/op [Average]
  (min, avg, max) = (0.069, 0.087, 0.114), stdev = 0.022
  CI (99.9%): [0.004, 0.170] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 2)

# Run progress: 88.78% complete, ETA 00:12:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.141 ms/op
# Warmup Iteration   2: 0.133 ms/op
# Warmup Iteration   3: 0.133 ms/op
# Warmup Iteration   4: 0.134 ms/op
# Warmup Iteration   5: 0.131 ms/op
Iteration   1: 0.136 ms/op
Iteration   2: 0.134 ms/op
Iteration   3: 0.168 ms/op
Iteration   4: 0.207 ms/op
Iteration   5: 0.214 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.172 ±(99.9%) 0.146 ms/op [Average]
  (min, avg, max) = (0.134, 0.172, 0.214), stdev = 0.038
  CI (99.9%): [0.025, 0.318] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 3)

# Run progress: 88.94% complete, ETA 00:12:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.145 ms/op
# Warmup Iteration   2: 0.136 ms/op
# Warmup Iteration   3: 0.136 ms/op
# Warmup Iteration   4: 0.140 ms/op
# Warmup Iteration   5: 0.139 ms/op
Iteration   1: 0.137 ms/op
Iteration   2: 0.140 ms/op
Iteration   3: 0.158 ms/op
Iteration   4: 0.247 ms/op
Iteration   5: 0.234 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.183 ±(99.9%) 0.205 ms/op [Average]
  (min, avg, max) = (0.137, 0.183, 0.247), stdev = 0.053
  CI (99.9%): [? 0, 0.388] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 2)

# Run progress: 89.10% complete, ETA 00:12:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.277 ms/op
# Warmup Iteration   2: 0.261 ms/op
# Warmup Iteration   3: 0.262 ms/op
# Warmup Iteration   4: 0.266 ms/op
# Warmup Iteration   5: 0.263 ms/op
Iteration   1: 0.267 ms/op
Iteration   2: 0.262 ms/op
Iteration   3: 0.294 ms/op
Iteration   4: 0.393 ms/op
Iteration   5: 0.464 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.336 ±(99.9%) 0.342 ms/op [Average]
  (min, avg, max) = (0.262, 0.336, 0.464), stdev = 0.089
  CI (99.9%): [? 0, 0.678] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 3)

# Run progress: 89.26% complete, ETA 00:12:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.282 ms/op
# Warmup Iteration   2: 0.277 ms/op
# Warmup Iteration   3: 0.274 ms/op
# Warmup Iteration   4: 0.278 ms/op
# Warmup Iteration   5: 0.275 ms/op
Iteration   1: 0.279 ms/op
Iteration   2: 0.277 ms/op
Iteration   3: 0.309 ms/op
Iteration   4: 0.485 ms/op
Iteration   5: 0.446 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.359 ±(99.9%) 0.381 ms/op [Average]
  (min, avg, max) = (0.277, 0.359, 0.485), stdev = 0.099
  CI (99.9%): [? 0, 0.740] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 2)

# Run progress: 89.42% complete, ETA 00:11:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.541 ms/op
# Warmup Iteration   2: 0.508 ms/op
# Warmup Iteration   3: 0.508 ms/op
# Warmup Iteration   4: 0.509 ms/op
# Warmup Iteration   5: 0.508 ms/op
Iteration   1: 0.521 ms/op
Iteration   2: 0.524 ms/op
Iteration   3: 0.613 ms/op
Iteration   4: 0.844 ms/op
Iteration   5: 0.755 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.651 ±(99.9%) 0.553 ms/op [Average]
  (min, avg, max) = (0.521, 0.651, 0.844), stdev = 0.144
  CI (99.9%): [0.099, 1.204] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 3)

# Run progress: 89.58% complete, ETA 00:11:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.594 ms/op
# Warmup Iteration   2: 0.604 ms/op
# Warmup Iteration   3: 0.609 ms/op
# Warmup Iteration   4: 0.594 ms/op
# Warmup Iteration   5: 0.578 ms/op
Iteration   1: 0.579 ms/op
Iteration   2: 0.582 ms/op
Iteration   3: 0.660 ms/op
Iteration   4: 0.995 ms/op
Iteration   5: 1.071 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.777 ±(99.9%) 0.913 ms/op [Average]
  (min, avg, max) = (0.579, 0.777, 1.071), stdev = 0.237
  CI (99.9%): [? 0, 1.690] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 2)

# Run progress: 89.74% complete, ETA 00:11:32
# Fork: 1 of 1
# Warmup Iteration   1: 1.090 ms/op
# Warmup Iteration   2: 1.036 ms/op
# Warmup Iteration   3: 1.047 ms/op
# Warmup Iteration   4: 1.042 ms/op
# Warmup Iteration   5: 1.067 ms/op
Iteration   1: 1.039 ms/op
Iteration   2: 1.040 ms/op
Iteration   3: 1.196 ms/op
Iteration   4: 1.671 ms/op
Iteration   5: 1.758 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  1.341 ±(99.9%) 1.342 ms/op [Average]
  (min, avg, max) = (1.039, 1.341, 1.758), stdev = 0.349
  CI (99.9%): [? 0, 2.683] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 3)

# Run progress: 89.90% complete, ETA 00:11:21
# Fork: 1 of 1
# Warmup Iteration   1: 1.179 ms/op
# Warmup Iteration   2: 1.118 ms/op
# Warmup Iteration   3: 1.116 ms/op
# Warmup Iteration   4: 1.141 ms/op
# Warmup Iteration   5: 1.120 ms/op
Iteration   1: 1.156 ms/op
Iteration   2: 1.121 ms/op
Iteration   3: 1.303 ms/op
Iteration   4: 1.995 ms/op
Iteration   5: 1.976 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  1.510 ±(99.9%) 1.692 ms/op [Average]
  (min, avg, max) = (1.121, 1.510, 1.995), stdev = 0.439
  CI (99.9%): [? 0, 3.202] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 2)

# Run progress: 90.06% complete, ETA 00:11:10
# Fork: 1 of 1
# Warmup Iteration   1: 2.063 ms/op
# Warmup Iteration   2: 2.035 ms/op
# Warmup Iteration   3: 1.991 ms/op
# Warmup Iteration   4: 1.998 ms/op
# Warmup Iteration   5: 1.989 ms/op
Iteration   1: 2.027 ms/op
Iteration   2: 2.059 ms/op
Iteration   3: 2.350 ms/op
Iteration   4: 3.744 ms/op
Iteration   5: 3.730 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  2.782 ±(99.9%) 3.391 ms/op [Average]
  (min, avg, max) = (2.027, 2.782, 3.744), stdev = 0.881
  CI (99.9%): [? 0, 6.173] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 3)

# Run progress: 90.22% complete, ETA 00:10:59
# Fork: 1 of 1
# Warmup Iteration   1: 2.340 ms/op
# Warmup Iteration   2: 2.273 ms/op
# Warmup Iteration   3: 2.244 ms/op
# Warmup Iteration   4: 2.273 ms/op
# Warmup Iteration   5: 2.282 ms/op
Iteration   1: 2.270 ms/op
Iteration   2: 2.253 ms/op
Iteration   3: 2.596 ms/op
Iteration   4: 4.222 ms/op
Iteration   5: 4.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  3.069 ±(99.9%) 3.719 ms/op [Average]
  (min, avg, max) = (2.253, 3.069, 4.222), stdev = 0.966
  CI (99.9%): [? 0, 6.788] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 2)

# Run progress: 90.38% complete, ETA 00:10:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 3)

# Run progress: 90.54% complete, ETA 00:10:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 2)

# Run progress: 90.71% complete, ETA 00:10:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 3)

# Run progress: 90.87% complete, ETA 00:10:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 2)

# Run progress: 91.03% complete, ETA 00:10:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 3)

# Run progress: 91.19% complete, ETA 00:09:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 2)

# Run progress: 91.35% complete, ETA 00:09:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 3)

# Run progress: 91.51% complete, ETA 00:09:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 2)

# Run progress: 91.67% complete, ETA 00:09:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 3)

# Run progress: 91.83% complete, ETA 00:09:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 2)

# Run progress: 91.99% complete, ETA 00:09:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 3)

# Run progress: 92.15% complete, ETA 00:08:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 2)

# Run progress: 92.31% complete, ETA 00:08:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.012 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.017), stdev = 0.004
  CI (99.9%): [? 0, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 3)

# Run progress: 92.47% complete, ETA 00:08:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.016 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.021), stdev = 0.004
  CI (99.9%): [? 0, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 2)

# Run progress: 92.63% complete, ETA 00:08:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.033 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.025, 0.033, 0.042), stdev = 0.008
  CI (99.9%): [0.001, 0.064] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 3)

# Run progress: 92.79% complete, ETA 00:08:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.032 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.056 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.042 ±(99.9%) 0.042 ms/op [Average]
  (min, avg, max) = (0.032, 0.042, 0.056), stdev = 0.011
  CI (99.9%): [? 0, 0.083] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 2)

# Run progress: 92.95% complete, ETA 00:07:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.057 ms/op
# Warmup Iteration   5: 0.058 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.058 ms/op
Iteration   3: 0.066 ms/op
Iteration   4: 0.092 ms/op
Iteration   5: 0.101 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.075 ±(99.9%) 0.079 ms/op [Average]
  (min, avg, max) = (0.057, 0.075, 0.101), stdev = 0.020
  CI (99.9%): [? 0, 0.154] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 3)

# Run progress: 93.11% complete, ETA 00:07:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.064 ms/op
# Warmup Iteration   3: 0.063 ms/op
# Warmup Iteration   4: 0.064 ms/op
# Warmup Iteration   5: 0.063 ms/op
Iteration   1: 0.064 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.072 ms/op
Iteration   4: 0.095 ms/op
Iteration   5: 0.098 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.079 ±(99.9%) 0.065 ms/op [Average]
  (min, avg, max) = (0.064, 0.079, 0.098), stdev = 0.017
  CI (99.9%): [0.014, 0.143] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 2)

# Run progress: 93.27% complete, ETA 00:07:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.135 ms/op
# Warmup Iteration   2: 0.124 ms/op
# Warmup Iteration   3: 0.122 ms/op
# Warmup Iteration   4: 0.122 ms/op
# Warmup Iteration   5: 0.123 ms/op
Iteration   1: 0.122 ms/op
Iteration   2: 0.123 ms/op
Iteration   3: 0.140 ms/op
Iteration   4: 0.206 ms/op
Iteration   5: 0.197 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.157 ±(99.9%) 0.158 ms/op [Average]
  (min, avg, max) = (0.122, 0.157, 0.206), stdev = 0.041
  CI (99.9%): [? 0, 0.315] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 3)

# Run progress: 93.43% complete, ETA 00:07:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.139 ms/op
# Warmup Iteration   2: 0.132 ms/op
# Warmup Iteration   3: 0.130 ms/op
# Warmup Iteration   4: 0.129 ms/op
# Warmup Iteration   5: 0.125 ms/op
Iteration   1: 0.129 ms/op
Iteration   2: 0.129 ms/op
Iteration   3: 0.150 ms/op
Iteration   4: 0.243 ms/op
Iteration   5: 0.224 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.175 ±(99.9%) 0.209 ms/op [Average]
  (min, avg, max) = (0.129, 0.175, 0.243), stdev = 0.054
  CI (99.9%): [? 0, 0.384] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 2)

# Run progress: 93.59% complete, ETA 00:07:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.280 ms/op
# Warmup Iteration   2: 0.266 ms/op
# Warmup Iteration   3: 0.257 ms/op
# Warmup Iteration   4: 0.258 ms/op
# Warmup Iteration   5: 0.259 ms/op
Iteration   1: 0.254 ms/op
Iteration   2: 0.258 ms/op
Iteration   3: 0.298 ms/op
Iteration   4: 0.400 ms/op
Iteration   5: 0.428 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.328 ±(99.9%) 0.314 ms/op [Average]
  (min, avg, max) = (0.254, 0.328, 0.428), stdev = 0.082
  CI (99.9%): [0.014, 0.642] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 3)

# Run progress: 93.75% complete, ETA 00:07:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.325 ms/op
# Warmup Iteration   2: 0.308 ms/op
# Warmup Iteration   3: 0.299 ms/op
# Warmup Iteration   4: 0.295 ms/op
# Warmup Iteration   5: 0.299 ms/op
Iteration   1: 0.298 ms/op
Iteration   2: 0.297 ms/op
Iteration   3: 0.340 ms/op
Iteration   4: 0.466 ms/op
Iteration   5: 0.489 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.378 ±(99.9%) 0.358 ms/op [Average]
  (min, avg, max) = (0.297, 0.378, 0.489), stdev = 0.093
  CI (99.9%): [0.019, 0.736] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 2)

# Run progress: 93.91% complete, ETA 00:06:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.772 ms/op
# Warmup Iteration   2: 0.741 ms/op
# Warmup Iteration   3: 0.752 ms/op
# Warmup Iteration   4: 0.739 ms/op
# Warmup Iteration   5: 0.734 ms/op
Iteration   1: 0.738 ms/op
Iteration   2: 0.732 ms/op
Iteration   3: 0.829 ms/op
Iteration   4: 1.142 ms/op
Iteration   5: 1.223 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.933 ±(99.9%) 0.896 ms/op [Average]
  (min, avg, max) = (0.732, 0.933, 1.223), stdev = 0.233
  CI (99.9%): [0.036, 1.829] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 3)

# Run progress: 94.07% complete, ETA 00:06:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.718 ms/op
# Warmup Iteration   2: 0.662 ms/op
# Warmup Iteration   3: 0.672 ms/op
# Warmup Iteration   4: 0.668 ms/op
# Warmup Iteration   5: 0.664 ms/op
Iteration   1: 0.657 ms/op
Iteration   2: 0.670 ms/op
Iteration   3: 0.790 ms/op
Iteration   4: 1.098 ms/op
Iteration   5: 1.106 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.864 ±(99.9%) 0.859 ms/op [Average]
  (min, avg, max) = (0.657, 0.864, 1.106), stdev = 0.223
  CI (99.9%): [0.005, 1.723] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 2)

# Run progress: 94.23% complete, ETA 00:06:28
# Fork: 1 of 1
# Warmup Iteration   1: 1.354 ms/op
# Warmup Iteration   2: 1.270 ms/op
# Warmup Iteration   3: 1.277 ms/op
# Warmup Iteration   4: 1.247 ms/op
# Warmup Iteration   5: 1.252 ms/op
Iteration   1: 1.263 ms/op
Iteration   2: 1.297 ms/op
Iteration   3: 1.567 ms/op
Iteration   4: 2.280 ms/op
Iteration   5: 2.046 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  1.691 ±(99.9%) 1.751 ms/op [Average]
  (min, avg, max) = (1.263, 1.691, 2.280), stdev = 0.455
  CI (99.9%): [? 0, 3.441] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 3)

# Run progress: 94.39% complete, ETA 00:06:18
# Fork: 1 of 1
# Warmup Iteration   1: 1.509 ms/op
# Warmup Iteration   2: 1.410 ms/op
# Warmup Iteration   3: 1.376 ms/op
# Warmup Iteration   4: 1.371 ms/op
# Warmup Iteration   5: 1.377 ms/op
Iteration   1: 1.416 ms/op
Iteration   2: 1.399 ms/op
Iteration   3: 1.630 ms/op
Iteration   4: 2.263 ms/op
Iteration   5: 2.365 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  1.815 ±(99.9%) 1.797 ms/op [Average]
  (min, avg, max) = (1.399, 1.815, 2.365), stdev = 0.467
  CI (99.9%): [0.018, 3.612] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 2)

# Run progress: 94.55% complete, ETA 00:06:07
# Fork: 1 of 1
# Warmup Iteration   1: 3.381 ms/op
# Warmup Iteration   2: 3.179 ms/op
# Warmup Iteration   3: 3.171 ms/op
# Warmup Iteration   4: 3.127 ms/op
# Warmup Iteration   5: 3.189 ms/op
Iteration   1: 3.154 ms/op
Iteration   2: 3.138 ms/op
Iteration   3: 3.589 ms/op
Iteration   4: 5.354 ms/op
Iteration   5: 5.147 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  4.076 ±(99.9%) 4.195 ms/op [Average]
  (min, avg, max) = (3.138, 4.076, 5.354), stdev = 1.089
  CI (99.9%): [? 0, 8.271] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 3)

# Run progress: 94.71% complete, ETA 00:05:56
# Fork: 1 of 1
# Warmup Iteration   1: 3.191 ms/op
# Warmup Iteration   2: 2.922 ms/op
# Warmup Iteration   3: 2.935 ms/op
# Warmup Iteration   4: 2.911 ms/op
# Warmup Iteration   5: 2.825 ms/op
Iteration   1: 2.837 ms/op
Iteration   2: 2.902 ms/op
Iteration   3: 3.260 ms/op
Iteration   4: 4.921 ms/op
Iteration   5: 4.255 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  3.635 ±(99.9%) 3.525 ms/op [Average]
  (min, avg, max) = (2.837, 3.635, 4.921), stdev = 0.916
  CI (99.9%): [0.110, 7.160] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 2)

# Run progress: 94.87% complete, ETA 00:05:45
# Fork: 1 of 1
# Warmup Iteration   1: 7.056 ms/op
# Warmup Iteration   2: 6.911 ms/op
# Warmup Iteration   3: 6.686 ms/op
# Warmup Iteration   4: 6.644 ms/op
# Warmup Iteration   5: 6.822 ms/op
Iteration   1: 6.763 ms/op
Iteration   2: 6.612 ms/op
Iteration   3: 7.969 ms/op
Iteration   4: 10.272 ms/op
Iteration   5: 9.304 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  8.184 ±(99.9%) 6.134 ms/op [Average]
  (min, avg, max) = (6.612, 8.184, 10.272), stdev = 1.593
  CI (99.9%): [2.050, 14.318] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 3)

# Run progress: 95.03% complete, ETA 00:05:34
# Fork: 1 of 1
# Warmup Iteration   1: 7.663 ms/op
# Warmup Iteration   2: 7.429 ms/op
# Warmup Iteration   3: 7.400 ms/op
# Warmup Iteration   4: 7.453 ms/op
# Warmup Iteration   5: 7.282 ms/op
Iteration   1: 7.359 ms/op
Iteration   2: 7.308 ms/op
Iteration   3: 8.534 ms/op
Iteration   4: 12.941 ms/op
Iteration   5: 10.173 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  9.263 ±(99.9%) 9.099 ms/op [Average]
  (min, avg, max) = (7.308, 9.263, 12.941), stdev = 2.363
  CI (99.9%): [0.164, 18.362] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 2)

# Run progress: 95.19% complete, ETA 00:05:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 3)

# Run progress: 95.35% complete, ETA 00:05:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 2)

# Run progress: 95.51% complete, ETA 00:05:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 3)

# Run progress: 95.67% complete, ETA 00:04:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 2)

# Run progress: 95.83% complete, ETA 00:04:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 3)

# Run progress: 95.99% complete, ETA 00:04:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 2)

# Run progress: 96.15% complete, ETA 00:04:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 3)

# Run progress: 96.31% complete, ETA 00:04:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 2)

# Run progress: 96.47% complete, ETA 00:03:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 3)

# Run progress: 96.63% complete, ETA 00:03:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 2)

# Run progress: 96.79% complete, ETA 00:03:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 3)

# Run progress: 96.96% complete, ETA 00:03:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.003 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 2)

# Run progress: 97.12% complete, ETA 00:03:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.011 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.016), stdev = 0.004
  CI (99.9%): [? 0, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 3)

# Run progress: 97.28% complete, ETA 00:03:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.016 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.021), stdev = 0.004
  CI (99.9%): [? 0, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 2)

# Run progress: 97.44% complete, ETA 00:02:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.028 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.046 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.034 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.025, 0.034, 0.046), stdev = 0.010
  CI (99.9%): [? 0, 0.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 3)

# Run progress: 97.60% complete, ETA 00:02:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.032 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.033 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.055 ms/op
Iteration   5: 0.054 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.042 ±(99.9%) 0.043 ms/op [Average]
  (min, avg, max) = (0.032, 0.042, 0.055), stdev = 0.011
  CI (99.9%): [? 0, 0.085] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 2)

# Run progress: 97.76% complete, ETA 00:02:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.063 ms/op
# Warmup Iteration   2: 0.058 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.058 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.058 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.087 ms/op
Iteration   5: 0.097 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.072 ±(99.9%) 0.071 ms/op [Average]
  (min, avg, max) = (0.057, 0.072, 0.097), stdev = 0.018
  CI (99.9%): [0.002, 0.143] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 3)

# Run progress: 97.92% complete, ETA 00:02:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.075 ms/op
# Warmup Iteration   2: 0.070 ms/op
# Warmup Iteration   3: 0.071 ms/op
# Warmup Iteration   4: 0.070 ms/op
# Warmup Iteration   5: 0.069 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.070 ms/op
Iteration   3: 0.080 ms/op
Iteration   4: 0.118 ms/op
Iteration   5: 0.107 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.089 ±(99.9%) 0.086 ms/op [Average]
  (min, avg, max) = (0.070, 0.089, 0.118), stdev = 0.022
  CI (99.9%): [0.003, 0.175] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 2)

# Run progress: 98.08% complete, ETA 00:02:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.127 ms/op
# Warmup Iteration   2: 0.118 ms/op
# Warmup Iteration   3: 0.118 ms/op
# Warmup Iteration   4: 0.116 ms/op
# Warmup Iteration   5: 0.119 ms/op
Iteration   1: 0.120 ms/op
Iteration   2: 0.120 ms/op
Iteration   3: 0.137 ms/op
Iteration   4: 0.216 ms/op
Iteration   5: 0.194 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.157 ±(99.9%) 0.173 ms/op [Average]
  (min, avg, max) = (0.120, 0.157, 0.216), stdev = 0.045
  CI (99.9%): [? 0, 0.330] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 3)

# Run progress: 98.24% complete, ETA 00:01:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.138 ms/op
# Warmup Iteration   2: 0.129 ms/op
# Warmup Iteration   3: 0.127 ms/op
# Warmup Iteration   4: 0.124 ms/op
# Warmup Iteration   5: 0.131 ms/op
Iteration   1: 0.126 ms/op
Iteration   2: 0.130 ms/op
Iteration   3: 0.146 ms/op
Iteration   4: 0.235 ms/op
Iteration   5: 0.186 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.165 ±(99.9%) 0.177 ms/op [Average]
  (min, avg, max) = (0.126, 0.165, 0.235), stdev = 0.046
  CI (99.9%): [? 0, 0.341] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 2)

# Run progress: 98.40% complete, ETA 00:01:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.279 ms/op
# Warmup Iteration   2: 0.263 ms/op
# Warmup Iteration   3: 0.262 ms/op
# Warmup Iteration   4: 0.261 ms/op
# Warmup Iteration   5: 0.264 ms/op
Iteration   1: 0.260 ms/op
Iteration   2: 0.259 ms/op
Iteration   3: 0.308 ms/op
Iteration   4: 0.418 ms/op
Iteration   5: 0.415 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.332 ±(99.9%) 0.307 ms/op [Average]
  (min, avg, max) = (0.259, 0.332, 0.418), stdev = 0.080
  CI (99.9%): [0.025, 0.639] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 3)

# Run progress: 98.56% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.296 ms/op
# Warmup Iteration   2: 0.281 ms/op
# Warmup Iteration   3: 0.285 ms/op
# Warmup Iteration   4: 0.278 ms/op
# Warmup Iteration   5: 0.274 ms/op
Iteration   1: 0.278 ms/op
Iteration   2: 0.281 ms/op
Iteration   3: 0.332 ms/op
Iteration   4: 0.484 ms/op
Iteration   5: 0.487 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.372 ±(99.9%) 0.405 ms/op [Average]
  (min, avg, max) = (0.278, 0.372, 0.487), stdev = 0.105
  CI (99.9%): [? 0, 0.778] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 2)

# Run progress: 98.72% complete, ETA 00:01:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.717 ms/op
# Warmup Iteration   2: 0.676 ms/op
# Warmup Iteration   3: 0.665 ms/op
# Warmup Iteration   4: 0.660 ms/op
# Warmup Iteration   5: 0.671 ms/op
Iteration   1: 0.659 ms/op
Iteration   2: 0.662 ms/op
Iteration   3: 0.761 ms/op
Iteration   4: 1.203 ms/op
Iteration   5: 1.088 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.875 ±(99.9%) 0.978 ms/op [Average]
  (min, avg, max) = (0.659, 0.875, 1.203), stdev = 0.254
  CI (99.9%): [? 0, 1.853] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 3)

# Run progress: 98.88% complete, ETA 00:01:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.878 ms/op
# Warmup Iteration   2: 0.818 ms/op
# Warmup Iteration   3: 0.802 ms/op
# Warmup Iteration   4: 0.789 ms/op
# Warmup Iteration   5: 0.809 ms/op
Iteration   1: 0.797 ms/op
Iteration   2: 0.800 ms/op
Iteration   3: 0.962 ms/op
Iteration   4: 1.242 ms/op
Iteration   5: 1.143 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.989 ±(99.9%) 0.772 ms/op [Average]
  (min, avg, max) = (0.797, 0.989, 1.242), stdev = 0.201
  CI (99.9%): [0.217, 1.761] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 2)

# Run progress: 99.04% complete, ETA 00:01:04
# Fork: 1 of 1
# Warmup Iteration   1: 1.527 ms/op
# Warmup Iteration   2: 1.382 ms/op
# Warmup Iteration   3: 1.394 ms/op
# Warmup Iteration   4: 1.382 ms/op
# Warmup Iteration   5: 1.377 ms/op
Iteration   1: 1.372 ms/op
Iteration   2: 1.391 ms/op
Iteration   3: 1.619 ms/op
Iteration   4: 2.154 ms/op
Iteration   5: 2.289 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  1.765 ±(99.9%) 1.659 ms/op [Average]
  (min, avg, max) = (1.372, 1.765, 2.289), stdev = 0.431
  CI (99.9%): [0.106, 3.424] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 3)

# Run progress: 99.20% complete, ETA 00:00:53
# Fork: 1 of 1
# Warmup Iteration   1: 1.781 ms/op
# Warmup Iteration   2: 1.631 ms/op
# Warmup Iteration   3: 1.613 ms/op
# Warmup Iteration   4: 1.621 ms/op
# Warmup Iteration   5: 1.618 ms/op
Iteration   1: 1.646 ms/op
Iteration   2: 1.640 ms/op
Iteration   3: 1.964 ms/op
Iteration   4: 2.829 ms/op
Iteration   5: 2.923 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  2.200 ±(99.9%) 2.430 ms/op [Average]
  (min, avg, max) = (1.640, 2.200, 2.923), stdev = 0.631
  CI (99.9%): [? 0, 4.631] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 2)

# Run progress: 99.36% complete, ETA 00:00:43
# Fork: 1 of 1
# Warmup Iteration   1: 3.288 ms/op
# Warmup Iteration   2: 3.053 ms/op
# Warmup Iteration   3: 3.057 ms/op
# Warmup Iteration   4: 3.061 ms/op
# Warmup Iteration   5: 3.014 ms/op
Iteration   1: 3.004 ms/op
Iteration   2: 3.015 ms/op
Iteration   3: 3.582 ms/op
Iteration   4: 4.935 ms/op
Iteration   5: 4.768 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  3.861 ±(99.9%) 3.605 ms/op [Average]
  (min, avg, max) = (3.004, 3.861, 4.935), stdev = 0.936
  CI (99.9%): [0.256, 7.465] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 3)

# Run progress: 99.52% complete, ETA 00:00:32
# Fork: 1 of 1
# Warmup Iteration   1: 3.309 ms/op
# Warmup Iteration   2: 3.207 ms/op
# Warmup Iteration   3: 3.149 ms/op
# Warmup Iteration   4: 3.150 ms/op
# Warmup Iteration   5: 3.131 ms/op
Iteration   1: 3.145 ms/op
Iteration   2: 3.146 ms/op
Iteration   3: 3.512 ms/op
Iteration   4: 5.410 ms/op
Iteration   5: 5.760 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  4.195 ±(99.9%) 4.944 ms/op [Average]
  (min, avg, max) = (3.145, 4.195, 5.760), stdev = 1.284
  CI (99.9%): [? 0, 9.139] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 2)

# Run progress: 99.68% complete, ETA 00:00:21
# Fork: 1 of 1
# Warmup Iteration   1: 6.626 ms/op
# Warmup Iteration   2: 6.280 ms/op
# Warmup Iteration   3: 6.145 ms/op
# Warmup Iteration   4: 6.213 ms/op
# Warmup Iteration   5: 6.171 ms/op
Iteration   1: 6.197 ms/op
Iteration   2: 6.155 ms/op
Iteration   3: 7.172 ms/op
Iteration   4: 10.188 ms/op
Iteration   5: 10.476 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  8.038 ±(99.9%) 8.225 ms/op [Average]
  (min, avg, max) = (6.155, 8.038, 10.476), stdev = 2.136
  CI (99.9%): [? 0, 16.263] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 3)

# Run progress: 99.84% complete, ETA 00:00:10
# Fork: 1 of 1
# Warmup Iteration   1: 6.874 ms/op
# Warmup Iteration   2: 6.538 ms/op
# Warmup Iteration   3: 6.334 ms/op
# Warmup Iteration   4: 6.417 ms/op
# Warmup Iteration   5: 6.487 ms/op
Iteration   1: 6.396 ms/op
Iteration   2: 6.373 ms/op
Iteration   3: 7.464 ms/op
Iteration   4: 10.990 ms/op
Iteration   5: 10.616 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  8.368 ±(99.9%) 8.742 ms/op [Average]
  (min, avg, max) = (6.373, 8.368, 10.990), stdev = 2.270
  CI (99.9%): [? 0, 17.109] (assumes normal distribution)


# Run complete. Total time: 01:52:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     (nGet)  (nKeys)  (nPut)  (nValues)  Mode  Cnt     Score      Error  Units
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16       32     N/A          2  avgt    5     0.001 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16       32     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16     1000     N/A          2  avgt    5     0.039 ±    0.036  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16     1000     N/A          3  avgt    5     0.038 ±    0.039  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16   100000     N/A          2  avgt    5    11.577 ±   11.406  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16   100000     N/A          3  avgt    5    10.369 ±   10.269  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32       32     N/A          2  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32       32     N/A          3  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32     1000     N/A          2  avgt    5     0.076 ±    0.080  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32     1000     N/A          3  avgt    5     0.078 ±    0.086  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32   100000     N/A          2  avgt    5    22.573 ±   12.402  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32   100000     N/A          3  avgt    5    21.113 ±   16.064  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64       32     N/A          2  avgt    5     0.005 ±    0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64       32     N/A          3  avgt    5     0.005 ±    0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64     1000     N/A          2  avgt    5     0.136 ±    0.154  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64     1000     N/A          3  avgt    5     0.135 ±    0.146  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64   100000     N/A          2  avgt    5    34.730 ±   15.921  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64   100000     N/A          3  avgt    5    35.380 ±   27.846  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128       32     N/A          2  avgt    5     0.008 ±    0.008  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128       32     N/A          3  avgt    5     0.009 ±    0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128     1000     N/A          2  avgt    5     0.305 ±    0.289  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128     1000     N/A          3  avgt    5     0.313 ±    0.248  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128   100000     N/A          2  avgt    5    96.320 ±   95.194  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128   100000     N/A          3  avgt    5    86.060 ±   78.045  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256       32     N/A          2  avgt    5     0.018 ±    0.018  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256       32     N/A          3  avgt    5     0.020 ±    0.023  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256     1000     N/A          2  avgt    5     0.554 ±    0.409  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256     1000     N/A          3  avgt    5     0.517 ±    0.429  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256   100000     N/A          2  avgt    5   141.898 ±   97.955  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256   100000     N/A          3  avgt    5   136.942 ±  121.411  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512       32     N/A          2  avgt    5     0.036 ±    0.041  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512       32     N/A          3  avgt    5     0.033 ±    0.033  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512     1000     N/A          2  avgt    5     1.024 ±    1.164  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512     1000     N/A          3  avgt    5     1.013 ±    1.135  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512   100000     N/A          2  avgt    5   314.282 ±  262.243  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512   100000     N/A          3  avgt    5   328.408 ±  188.395  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024       32     N/A          2  avgt    5     0.067 ±    0.060  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024       32     N/A          3  avgt    5     0.070 ±    0.078  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024     1000     N/A          2  avgt    5     2.009 ±    2.068  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024     1000     N/A          3  avgt    5     2.406 ±    3.895  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024   100000     N/A          2  avgt    5   868.157 ±  943.762  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024   100000     N/A          3  avgt    5   684.088 ±  322.732  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048       32     N/A          2  avgt    5     0.140 ±    0.169  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048       32     N/A          3  avgt    5     0.138 ±    0.159  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048     1000     N/A          2  avgt    5     3.938 ±    4.433  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048     1000     N/A          3  avgt    5     3.999 ±    4.574  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048   100000     N/A          2  avgt    5  1161.890 ±  312.203  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048   100000     N/A          3  avgt    5  1342.918 ±  661.774  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096       32     N/A          2  avgt    5     0.267 ±    0.280  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096       32     N/A          3  avgt    5     0.276 ±    0.338  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096     1000     N/A          2  avgt    5     7.827 ±    8.155  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096     1000     N/A          3  avgt    5     7.369 ±    5.778  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096   100000     N/A          2  avgt    5  2948.186 ±  927.655  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096   100000     N/A          3  avgt    5  3777.989 ± 2700.349  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192       32     N/A          2  avgt    5     0.598 ±    0.543  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192       32     N/A          3  avgt    5     0.558 ±    0.529  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192     1000     N/A          2  avgt    5    16.442 ±   15.601  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192     1000     N/A          3  avgt    5    15.398 ±   15.564  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384       32     N/A          2  avgt    5     1.134 ±    1.165  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384       32     N/A          3  avgt    5     1.070 ±    0.975  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384     1000     N/A          2  avgt    5    31.779 ±   32.404  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384     1000     N/A          3  avgt    5    34.088 ±   29.542  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16       32     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16       32     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16     1000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16     1000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16   100000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16   100000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32       32     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32       32     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32     1000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32     1000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32   100000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32   100000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64       32     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64       32     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64     1000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64     1000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64   100000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64   100000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128       32     N/A          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128       32     N/A          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128     1000     N/A          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128     1000     N/A          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128   100000     N/A          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128   100000     N/A          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256       32     N/A          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256       32     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256     1000     N/A          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256     1000     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256   100000     N/A          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256   100000     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512       32     N/A          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512       32     N/A          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512     1000     N/A          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512     1000     N/A          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512   100000     N/A          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512   100000     N/A          3  avgt    5     0.002 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024       32     N/A          2  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024       32     N/A          3  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024     1000     N/A          2  avgt    5     0.005 ±    0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024     1000     N/A          3  avgt    5     0.005 ±    0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024   100000     N/A          2  avgt    5     0.004 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024   100000     N/A          3  avgt    5     0.004 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048       32     N/A          2  avgt    5     0.007 ±    0.008  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048       32     N/A          3  avgt    5     0.007 ±    0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048     1000     N/A          2  avgt    5     0.009 ±    0.010  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048     1000     N/A          3  avgt    5     0.010 ±    0.014  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048   100000     N/A          2  avgt    5     0.008 ±    0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048   100000     N/A          3  avgt    5     0.008 ±    0.008  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096       32     N/A          2  avgt    5     0.014 ±    0.013  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096       32     N/A          3  avgt    5     0.014 ±    0.013  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096     1000     N/A          2  avgt    5     0.018 ±    0.022  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096     1000     N/A          3  avgt    5     0.017 ±    0.018  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096   100000     N/A          2  avgt    5     0.015 ±    0.014  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096   100000     N/A          3  avgt    5     0.016 ±    0.015  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192       32     N/A          2  avgt    5     0.026 ±    0.021  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192       32     N/A          3  avgt    5     0.029 ±    0.033  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192     1000     N/A          2  avgt    5     0.035 ±    0.036  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192     1000     N/A          3  avgt    5     0.035 ±    0.035  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192   100000     N/A          2  avgt    5     0.032 ±    0.029  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192   100000     N/A          3  avgt    5     0.030 ±    0.025  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384       32     N/A          2  avgt    5     0.056 ±    0.061  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384       32     N/A          3  avgt    5     0.054 ±    0.050  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384     1000     N/A          2  avgt    5     0.070 ±    0.064  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384     1000     N/A          3  avgt    5     0.071 ±    0.078  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384   100000     N/A          2  avgt    5     0.074 ±    0.060  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384   100000     N/A          3  avgt    5     0.075 ±    0.070  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16       32     N/A          2  avgt          0.002             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16       32     N/A          3  avgt          0.002             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16     1000     N/A          2  avgt    2     0.001             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16     1000     N/A          3  avgt    2    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16   100000     N/A          2  avgt    5     0.001 ±    0.006  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16   100000     N/A          3  avgt    5     0.001 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32       32     N/A          2  avgt    3     0.002 ±    0.034  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32       32     N/A          3  avgt    2     0.001             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32     1000     N/A          2  avgt    4     0.017 ±    0.209  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32     1000     N/A          3  avgt    3     0.001 ±    0.024  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32   100000     N/A          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32   100000     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64       32     N/A          2  avgt    2     0.006             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64       32     N/A          3  avgt          0.002             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64     1000     N/A          2  avgt    4     0.002 ±    0.012  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64     1000     N/A          3  avgt    3     0.002 ±    0.032  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64   100000     N/A          2  avgt    5     0.002 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64   100000     N/A          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128       32     N/A          2  avgt    2     0.005             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128       32     N/A          3  avgt    3     0.010 ±    0.272  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128     1000     N/A          2  avgt    5     0.003 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128     1000     N/A          3  avgt    4     0.005 ±    0.030  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128   100000     N/A          2  avgt    5     0.006 ±    0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128   100000     N/A          3  avgt    5     0.005 ±    0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256       32     N/A          2  avgt    2     0.014             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256       32     N/A          3  avgt    3     0.036 ±    1.032  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256     1000     N/A          2  avgt    5     0.006 ±    0.007  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256     1000     N/A          3  avgt    4     0.009 ±    0.043  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256   100000     N/A          2  avgt    5     0.012 ±    0.016  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256   100000     N/A          3  avgt    5     0.013 ±    0.020  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512       32     N/A          2  avgt    3     0.034 ±    0.838  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512       32     N/A          3  avgt    3     0.020 ±    0.379  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512     1000     N/A          2  avgt    5     0.012 ±    0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512     1000     N/A          3  avgt    5     0.013 ±    0.013  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512   100000     N/A          2  avgt    5     0.027 ±    0.067  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512   100000     N/A          3  avgt    5     0.025 ±    0.049  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024       32     N/A          2  avgt    2     0.153             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024       32     N/A          3  avgt    2     0.083             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024     1000     N/A          2  avgt    5     0.047 ±    0.223  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024     1000     N/A          3  avgt    5     0.024 ±    0.022  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024   100000     N/A          2  avgt    5     0.050 ±    0.049  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024   100000     N/A          3  avgt    5     0.056 ±    0.037  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048       32     N/A          2  avgt    2     3.518             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048       32     N/A          3  avgt    3     0.125 ±    3.080  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048     1000     N/A          2  avgt    5     0.067 ±    0.108  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048     1000     N/A          3  avgt    5     0.063 ±    0.067  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048   100000     N/A          2  avgt    5     0.139 ±    0.135  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048   100000     N/A          3  avgt    5     0.134 ±    0.084  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096       32     N/A          2  avgt    4     3.796 ±   47.945  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096       32     N/A          3  avgt    3     0.222 ±    5.131  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096     1000     N/A          2  avgt    5     0.110 ±    0.148  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096     1000     N/A          3  avgt    5     0.123 ±    0.359  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096   100000     N/A          2  avgt    5     0.224 ±    0.176  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096   100000     N/A          3  avgt    5     0.244 ±    0.183  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192       32     N/A          2  avgt          0.352             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192       32     N/A          3  avgt    2     1.161             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192     1000     N/A          2  avgt    5     0.257 ±    0.784  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192     1000     N/A          3  avgt    5     0.285 ±    0.956  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192   100000     N/A          2  avgt    5     0.493 ±    0.153  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192   100000     N/A          3  avgt    5     0.556 ±    0.525  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384       32     N/A          2  avgt    2     0.425             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384       32     N/A          3  avgt    3     0.824 ±   18.793  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384     1000     N/A          2  avgt    5     0.519 ±    0.666  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384     1000     N/A          3  avgt    5     0.407 ±    0.433  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384   100000     N/A          2  avgt    5     1.048 ±    0.777  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384   100000     N/A          3  avgt    5     1.045 ±    0.642  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16       32     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16       32     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16     1000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16     1000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16   100000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16   100000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32       32     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32       32     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32     1000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32     1000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32   100000     N/A          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32   100000     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64       32     N/A          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64       32     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64     1000     N/A          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64     1000     N/A          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64   100000     N/A          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64   100000     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128       32     N/A          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128       32     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128     1000     N/A          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128     1000     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128   100000     N/A          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128   100000     N/A          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256       32     N/A          2  avgt    5     0.002 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256       32     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256     1000     N/A          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256     1000     N/A          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256   100000     N/A          2  avgt    5     0.005 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256   100000     N/A          3  avgt    5     0.005 ±    0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512       32     N/A          2  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512       32     N/A          3  avgt    5     0.003 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512     1000     N/A          2  avgt    5     0.004 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512     1000     N/A          3  avgt    5     0.004 ±    0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512   100000     N/A          2  avgt    5     0.010 ±    0.011  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512   100000     N/A          3  avgt    5     0.012 ±    0.013  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024       32     N/A          2  avgt    5     0.006 ±    0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024       32     N/A          3  avgt    5     0.006 ±    0.006  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024     1000     N/A          2  avgt    5     0.007 ±    0.007  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024     1000     N/A          3  avgt    5     0.009 ±    0.010  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024   100000     N/A          2  avgt    5     0.030 ±    0.034  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024   100000     N/A          3  avgt    5     0.034 ±    0.030  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048       32     N/A          2  avgt    5     0.013 ±    0.015  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048       32     N/A          3  avgt    5     0.013 ±    0.015  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048     1000     N/A          2  avgt    5     0.014 ±    0.013  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048     1000     N/A          3  avgt    5     0.018 ±    0.020  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048   100000     N/A          2  avgt    5     0.063 ±    0.070  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048   100000     N/A          3  avgt    5     0.072 ±    0.073  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096       32     N/A          2  avgt    5     0.024 ±    0.021  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096       32     N/A          3  avgt    5     0.024 ±    0.023  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096     1000     N/A          2  avgt    5     0.029 ±    0.029  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096     1000     N/A          3  avgt    5     0.031 ±    0.033  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096   100000     N/A          2  avgt    5     0.130 ±    0.127  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096   100000     N/A          3  avgt    5     0.138 ±    0.170  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192       32     N/A          2  avgt    5     0.048 ±    0.045  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192       32     N/A          3  avgt    5     0.048 ±    0.045  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192     1000     N/A          2  avgt    5     0.058 ±    0.063  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192     1000     N/A          3  avgt    5     0.062 ±    0.074  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192   100000     N/A          2  avgt    5     0.330 ±    0.409  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192   100000     N/A          3  avgt    5     0.312 ±    0.302  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384       32     N/A          2  avgt    5     0.096 ±    0.138  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384       32     N/A          3  avgt    5     0.094 ±    0.118  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384     1000     N/A          2  avgt    5     0.122 ±    0.115  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384     1000     N/A          3  avgt    5     0.127 ±    0.128  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384   100000     N/A          2  avgt    5     0.701 ±    0.684  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384   100000     N/A          3  avgt    5     0.791 ±    0.845  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       4          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       8          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       8          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32      16          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32      16          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32      32          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32      32          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32      64          2  avgt    5     0.005 ±    0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32      64          3  avgt    5     0.005 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32     128          2  avgt    5     0.009 ±    0.010  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32     128          3  avgt    5     0.011 ±    0.013  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32     256          2  avgt    5     0.020 ±    0.023  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32     256          3  avgt    5     0.022 ±    0.023  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32     512          2  avgt    5     0.040 ±    0.038  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32     512          3  avgt    5     0.043 ±    0.035  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    1024          2  avgt    5     0.084 ±    0.085  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    1024          3  avgt    5     0.094 ±    0.110  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    2048          2  avgt    5     0.165 ±    0.176  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    2048          3  avgt    5     0.182 ±    0.190  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    4096          2  avgt    5     0.343 ±    0.368  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    4096          3  avgt    5     0.368 ±    0.391  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    8192          2  avgt    5     0.686 ±    0.695  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    8192          3  avgt    5     0.758 ±    0.911  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32   16384          2  avgt    5     1.416 ±    1.471  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32   16384          3  avgt    5     1.556 ±    1.944  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       4          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       8          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       8          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000      16          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000      16          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000      32          2  avgt    5     0.002 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000      32          3  avgt    5     0.002 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000      64          2  avgt    5     0.006 ±    0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000      64          3  avgt    5     0.006 ±    0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000     128          2  avgt    5     0.015 ±    0.017  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000     128          3  avgt    5     0.016 ±    0.018  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000     256          2  avgt    5     0.047 ±    0.051  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000     256          3  avgt    5     0.056 ±    0.071  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000     512          2  avgt    5     0.162 ±    0.199  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000     512          3  avgt    5     0.180 ±    0.165  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    1024          2  avgt    5     0.562 ±    0.627  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    1024          3  avgt    5     0.688 ±    0.668  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    2048          2  avgt    5     1.630 ±    1.447  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    2048          3  avgt    5     2.159 ±    2.535  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    4096          2  avgt    5     3.825 ±    4.038  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    4096          3  avgt    5     4.947 ±    5.637  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    8192          2  avgt    5     8.248 ±    8.838  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    8192          3  avgt    5     9.962 ±    9.277  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000   16384          2  avgt    5    17.136 ±   17.938  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000   16384          3  avgt    5    20.574 ±   16.077  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       4          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       8          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       8          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000      16          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000      16          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000      32          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000      32          3  avgt    5     0.002 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000      64          2  avgt    5     0.006 ±    0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000      64          3  avgt    5     0.006 ±    0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000     128          2  avgt    5     0.016 ±    0.019  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000     128          3  avgt    5     0.016 ±    0.020  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000     256          2  avgt    5     0.048 ±    0.053  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000     256          3  avgt    5     0.052 ±    0.055  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000     512          2  avgt    5     0.157 ±    0.166  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000     512          3  avgt    5     0.195 ±    0.228  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    1024          2  avgt    5     0.577 ±    0.699  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    1024          3  avgt    5     0.709 ±    0.692  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    2048          2  avgt    5     2.145 ±    1.826  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    2048          3  avgt    5     2.787 ±    3.064  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    4096          2  avgt    5     9.359 ±    8.099  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    4096          3  avgt    5    13.375 ±   10.333  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    8192          2  avgt    5    45.181 ±   37.916  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    8192          3  avgt    5    56.628 ±   41.996  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000   16384          2  avgt    5   329.437 ±  163.579  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000   16384          3  avgt    5   514.499 ±  208.697  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       4          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       8          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       8          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32      16          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32      16          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32      32          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32      32          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32      64          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32      64          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32     128          2  avgt    5     0.004 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32     128          3  avgt    5     0.004 ±    0.004  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32     256          2  avgt    5     0.008 ±    0.009  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32     256          3  avgt    5     0.008 ±    0.009  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32     512          2  avgt    5     0.014 ±    0.013  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32     512          3  avgt    5     0.014 ±    0.016  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    1024          2  avgt    5     0.030 ±    0.034  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    1024          3  avgt    5     0.028 ±    0.028  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    2048          2  avgt    5     0.060 ±    0.068  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    2048          3  avgt    5     0.057 ±    0.062  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    4096          2  avgt    5     0.113 ±    0.121  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    4096          3  avgt    5     0.112 ±    0.117  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    8192          2  avgt    5     0.235 ±    0.264  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    8192          3  avgt    5     0.221 ±    0.225  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32   16384          2  avgt    5     0.470 ±    0.584  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32   16384          3  avgt    5     0.416 ±    0.298  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       4          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       8          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       8          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000      16          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000      16          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000      32          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000      32          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000      64          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000      64          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000     128          2  avgt    5     0.005 ±    0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000     128          3  avgt    5     0.004 ±    0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000     256          2  avgt    5     0.009 ±    0.008  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000     256          3  avgt    5     0.008 ±    0.008  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000     512          2  avgt    5     0.018 ±    0.019  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000     512          3  avgt    5     0.015 ±    0.012  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    1024          2  avgt    5     0.039 ±    0.051  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    1024          3  avgt    5     0.033 ±    0.038  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    2048          2  avgt    5     0.068 ±    0.078  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    2048          3  avgt    5     0.065 ±    0.072  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    4096          2  avgt    5     0.127 ±    0.142  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    4096          3  avgt    5     0.116 ±    0.121  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    8192          2  avgt    5     0.241 ±    0.251  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    8192          3  avgt    5     0.246 ±    0.272  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000   16384          2  avgt    5     0.526 ±    0.708  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000   16384          3  avgt    5     0.455 ±    0.488  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       4          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       8          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       8          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000      16          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000      16          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000      32          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000      32          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000      64          2  avgt    5     0.002 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000      64          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000     128          2  avgt    5     0.004 ±    0.004  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000     128          3  avgt    5     0.004 ±    0.004  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000     256          2  avgt    5     0.009 ±    0.011  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000     256          3  avgt    5     0.008 ±    0.010  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000     512          2  avgt    5     0.019 ±    0.021  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000     512          3  avgt    5     0.016 ±    0.017  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    1024          2  avgt    5     0.037 ±    0.041  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    1024          3  avgt    5     0.033 ±    0.037  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    2048          2  avgt    5     0.078 ±    0.096  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    2048          3  avgt    5     0.065 ±    0.072  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    4096          2  avgt    5     0.155 ±    0.212  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    4096          3  avgt    5     0.128 ±    0.137  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    8192          2  avgt    5     0.285 ±    0.289  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    8192          3  avgt    5     0.260 ±    0.305  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000   16384          2  avgt    5     0.588 ±    0.625  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000   16384          3  avgt    5     0.530 ±    0.647  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       2          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       2          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       4          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       4          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       8          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       8          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32      16          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32      16          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32      32          2  avgt    5     0.005 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32      32          3  avgt    5     0.006 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32      64          2  avgt    5     0.013 ±    0.013  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32      64          3  avgt    5     0.015 ±    0.018  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32     128          2  avgt    5     0.028 ±    0.025  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32     128          3  avgt    5     0.031 ±    0.035  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32     256          2  avgt    5     0.058 ±    0.049  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32     256          3  avgt    5     0.068 ±    0.071  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32     512          2  avgt    5     0.122 ±    0.104  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32     512          3  avgt    5     0.133 ±    0.138  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    1024          2  avgt    5     0.264 ±    0.308  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    1024          3  avgt    5     0.281 ±    0.303  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    2048          2  avgt    5     0.490 ±    0.428  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    2048          3  avgt    5     0.546 ±    0.558  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    4096          2  avgt    5     1.012 ±    0.888  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    4096          3  avgt    5     1.072 ±    1.055  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    8192          2  avgt    5     2.117 ±    2.471  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    8192          3  avgt    5     2.289 ±    2.687  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32   16384          2  avgt    5     4.241 ±    4.125  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32   16384          3  avgt    5     4.453 ±    4.372  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       2          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       2          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       4          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       4          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       8          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       8          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000      16          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000      16          3  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000      32          2  avgt    5     0.005 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000      32          3  avgt    5     0.005 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000      64          2  avgt    5     0.018 ±    0.020  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000      64          3  avgt    5     0.025 ±    0.028  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000     128          2  avgt    5     0.062 ±    0.069  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000     128          3  avgt    5     0.080 ±    0.096  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000     256          2  avgt    5     0.161 ±    0.171  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000     256          3  avgt    5     0.177 ±    0.178  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000     512          2  avgt    5     0.385 ±    0.429  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000     512          3  avgt    5     0.416 ±    0.528  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    1024          2  avgt    5     0.895 ±    0.948  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    1024          3  avgt    5     0.905 ±    0.796  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    2048          2  avgt    5     1.910 ±    1.954  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    2048          3  avgt    5     2.359 ±    3.196  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    4096          2  avgt    5     4.050 ±    4.184  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    4096          3  avgt    5     4.471 ±    4.679  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    8192          2  avgt    5     8.330 ±    8.411  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    8192          3  avgt    5     9.660 ±    8.956  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000   16384          2  avgt    5    17.627 ±   17.430  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000   16384          3  avgt    5    19.529 ±   18.116  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       2          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       2          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       4          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       4          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       8          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       8          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000      16          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000      16          3  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000      32          2  avgt    5     0.005 ±    0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000      32          3  avgt    5     0.006 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000      64          2  avgt    5     0.018 ±    0.023  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000      64          3  avgt    5     0.025 ±    0.025  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000     128          2  avgt    5     0.060 ±    0.063  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000     128          3  avgt    5     0.079 ±    0.082  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000     256          2  avgt    5     0.162 ±    0.169  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000     256          3  avgt    5     0.180 ±    0.182  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000     512          2  avgt    5     0.359 ±    0.376  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000     512          3  avgt    5     0.403 ±    0.415  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    1024          2  avgt    5     0.877 ±    0.781  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    1024          3  avgt    5     0.938 ±    0.900  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    2048          2  avgt    5     2.164 ±    2.305  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    2048          3  avgt    5     2.630 ±    3.335  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    4096          2  avgt    5     5.315 ±    5.595  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    4096          3  avgt    5     6.051 ±    7.204  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    8192          2  avgt    5    12.062 ±   13.078  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    8192          3  avgt    5    12.185 ±   10.795  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000   16384          2  avgt    5    26.889 ±   26.263  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000   16384          3  avgt    5    28.652 ±   29.884  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       4          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       8          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       8          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32      16          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32      16          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32      32          2  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32      32          3  avgt    5     0.004 ±    0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32      64          2  avgt    5     0.009 ±    0.011  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32      64          3  avgt    5     0.010 ±    0.011  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32     128          2  avgt    5     0.019 ±    0.020  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32     128          3  avgt    5     0.021 ±    0.022  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32     256          2  avgt    5     0.038 ±    0.029  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32     256          3  avgt    5     0.046 ±    0.055  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32     512          2  avgt    5     0.077 ±    0.061  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32     512          3  avgt    5     0.087 ±    0.083  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    1024          2  avgt    5     0.172 ±    0.146  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    1024          3  avgt    5     0.183 ±    0.205  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    2048          2  avgt    5     0.336 ±    0.342  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    2048          3  avgt    5     0.359 ±    0.381  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    4096          2  avgt    5     0.651 ±    0.553  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    4096          3  avgt    5     0.777 ±    0.913  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    8192          2  avgt    5     1.341 ±    1.342  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    8192          3  avgt    5     1.510 ±    1.692  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32   16384          2  avgt    5     2.782 ±    3.391  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32   16384          3  avgt    5     3.069 ±    3.719  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       4          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       4          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       8          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       8          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000      16          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000      16          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000      32          2  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000      32          3  avgt    5     0.004 ±    0.004  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000      64          2  avgt    5     0.012 ±    0.015  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000      64          3  avgt    5     0.016 ±    0.017  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000     128          2  avgt    5     0.033 ±    0.031  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000     128          3  avgt    5     0.042 ±    0.042  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000     256          2  avgt    5     0.075 ±    0.079  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000     256          3  avgt    5     0.079 ±    0.065  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000     512          2  avgt    5     0.157 ±    0.158  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000     512          3  avgt    5     0.175 ±    0.209  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    1024          2  avgt    5     0.328 ±    0.314  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    1024          3  avgt    5     0.378 ±    0.358  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    2048          2  avgt    5     0.933 ±    0.896  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    2048          3  avgt    5     0.864 ±    0.859  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    4096          2  avgt    5     1.691 ±    1.751  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    4096          3  avgt    5     1.815 ±    1.797  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    8192          2  avgt    5     4.076 ±    4.195  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    8192          3  avgt    5     3.635 ±    3.525  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000   16384          2  avgt    5     8.184 ±    6.134  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000   16384          3  avgt    5     9.263 ±    9.099  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       4          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       4          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       8          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       8          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000      16          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000      16          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000      32          2  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000      32          3  avgt    5     0.003 ±    0.004  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000      64          2  avgt    5     0.011 ±    0.014  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000      64          3  avgt    5     0.016 ±    0.017  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000     128          2  avgt    5     0.034 ±    0.040  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000     128          3  avgt    5     0.042 ±    0.043  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000     256          2  avgt    5     0.072 ±    0.071  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000     256          3  avgt    5     0.089 ±    0.086  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000     512          2  avgt    5     0.157 ±    0.173  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000     512          3  avgt    5     0.165 ±    0.177  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    1024          2  avgt    5     0.332 ±    0.307  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    1024          3  avgt    5     0.372 ±    0.405  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    2048          2  avgt    5     0.875 ±    0.978  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    2048          3  avgt    5     0.989 ±    0.772  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    4096          2  avgt    5     1.765 ±    1.659  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    4096          3  avgt    5     2.200 ±    2.430  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    8192          2  avgt    5     3.861 ±    3.605  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    8192          3  avgt    5     4.195 ±    4.944  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000   16384          2  avgt    5     8.038 ±    8.225  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000   16384          3  avgt    5     8.368 ±    8.742  ms/op

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.3.1/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 1h 52m 10s
13 actionable tasks: 2 executed, 11 up-to-date
