# SPDX-FileCopyrightText: 2023-2024 The Refinery Authors <https://refinery.tools/>
#
# SPDX-License-Identifier: EPL-2.0

FROM public.ecr.aws/amazoncorretto/amazoncorretto:21-al2023-jdk AS jdk

FROM --platform=$BUILDPLATFORM docker.io/eclipse-temurin:21-jdk-jammy AS jlink-base
# Use the Ubuntu Jammy based Temurin image for JLink, because it already
# contains the require objcopy tool for stripping debug symbols:
# https://github.com/docker-library/openjdk/issues/351
# We'll have to cross-jlink the JDK: https://stackoverflow.com/a/47611708
COPY --link --from=jdk /usr/lib/jvm/java-21-amazon-corretto /crossjdk

FROM --platform=$BUILDPLATFORM jlink-base AS jlink-amd64-on-amd64

FROM --platform=$BUILDPLATFORM jlink-base AS jlink-arm64-on-arm64

FROM --platform=$BUILDPLATFORM jlink-base AS jlink-arm64-on-amd64
# When cross-building the Docker image, we have the wrong toolchain for the
# target architecture. We forcibly override the target for the objcopy tool.
# The cross toolchain is not available in Amazon Linux 2023.
RUN apt-get update && \
    apt-get -y install binutils-aarch64-linux-gnu && \
    ln -sf /usr/bin/aarch64-linux-gnu-objcopy /usr/bin/objcopy && \
    rm -rf /var/lib/apt/lists/*

FROM --platform=$BUILDPLATFORM jlink-base AS jlink-amd64-on-arm64
RUN apt-get update && \
    apt-get -y install binutils-x86-64-linux-gnu && \
    ln -sf /usr/bin/x86_64-linux-gnu-objcopy /usr/bin/objcopy && \
    rm -rf /var/lib/apt/lists/*

FROM --platform=$BUILDPLATFORM jlink-$TARGETARCH-on-$BUILDARCH AS jlink
RUN jlink --no-header-files --no-man-pages \
    --module-path=/crossjdk/jmods --strip-debug --add-modules \
    java.base,java.logging,java.xml,jdk.zipfs \
    --output /jlink

FROM public.ecr.aws/amazonlinux/amazonlinux:2023-minimal AS base
# The launcher script generated by Gradle uses xargs to parse the argument list.
RUN dnf install -y findutils && \
    dnf clean all
# The first layer contains the slimmed down JRE.
COPY --link --from=jlink /jlink /usr/lib/java
ENV JAVA_HOME="/usr/lib/java" PATH="/usr/lib/java/bin:${PATH}"
# Layer with platform-independent dependencies, slow changing.
ADD --link extracted/common_lib /app/lib

FROM base AS base-amd64
# Layer with platform-dependent dependencies, slow changing.
ADD --link extracted/common_amd64_lib /app/lib

FROM base AS base-arm64
# Layer with platform-dependent dependencies, slow changing.
ADD --link extracted/common_arm64_lib /app/lib

FROM base-$TARGETARCH
