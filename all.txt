Type-safe dependency accessors is an incubating feature.
> Task :buildSrc:extractPluginRequests UP-TO-DATE
> Task :buildSrc:generatePluginAdapters UP-TO-DATE
> Task :buildSrc:compileJava UP-TO-DATE
> Task :buildSrc:compileGroovy NO-SOURCE
> Task :buildSrc:compileGroovyPlugins UP-TO-DATE
> Task :buildSrc:pluginDescriptors UP-TO-DATE
> Task :buildSrc:processResources UP-TO-DATE
> Task :buildSrc:classes UP-TO-DATE
> Task :buildSrc:jar UP-TO-DATE
> Task :buildSrc:assemble UP-TO-DATE
> Task :buildSrc:pluginUnderTestMetadata UP-TO-DATE
> Task :buildSrc:compileTestJava NO-SOURCE
> Task :buildSrc:compileTestGroovy NO-SOURCE
> Task :buildSrc:processTestResources NO-SOURCE
> Task :buildSrc:testClasses UP-TO-DATE
> Task :buildSrc:test NO-SOURCE
> Task :buildSrc:validatePlugins UP-TO-DATE
> Task :buildSrc:check UP-TO-DATE
> Task :buildSrc:build UP-TO-DATE
> Task :refinery-store:compileJava UP-TO-DATE
> Task :refinery-store:processResources NO-SOURCE
> Task :refinery-store:classes UP-TO-DATE
> Task :refinery-store:compileTestJava UP-TO-DATE
> Task :refinery-store:processTestResources NO-SOURCE
> Task :refinery-store:testClasses UP-TO-DATE
> Task :refinery-store:compileJmhJava
> Task :refinery-store:processJmhResources NO-SOURCE
> Task :refinery-store:jmhClasses

> Task :refinery-store:jmh
# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 32, nValues = 2)

# Run progress: 0.00% complete, ETA 03:18:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.013 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.009, 0.013, 0.019), stdev = 0.004
  CI (99.9%): [? 0, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 32, nValues = 3)

# Run progress: 0.08% complete, ETA 03:29:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.013 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.009, 0.013, 0.020), stdev = 0.005
  CI (99.9%): [? 0, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 1000, nValues = 2)

# Run progress: 0.17% complete, ETA 03:28:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.288 ms/op
# Warmup Iteration   2: 0.275 ms/op
# Warmup Iteration   3: 0.260 ms/op
# Warmup Iteration   4: 0.264 ms/op
# Warmup Iteration   5: 0.263 ms/op
Iteration   1: 0.269 ms/op
Iteration   2: 0.266 ms/op
Iteration   3: 0.365 ms/op
Iteration   4: 0.614 ms/op
Iteration   5: 0.543 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.411 ±(99.9%) 0.615 ms/op [Average]
  (min, avg, max) = (0.266, 0.411, 0.614), stdev = 0.160
  CI (99.9%): [? 0, 1.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 1000, nValues = 3)

# Run progress: 0.25% complete, ETA 03:28:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.300 ms/op
# Warmup Iteration   2: 0.269 ms/op
# Warmup Iteration   3: 0.268 ms/op
# Warmup Iteration   4: 0.273 ms/op
# Warmup Iteration   5: 0.267 ms/op
Iteration   1: 0.260 ms/op
Iteration   2: 0.267 ms/op
Iteration   3: 0.331 ms/op
Iteration   4: 0.501 ms/op
Iteration   5: 0.582 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.388 ±(99.9%) 0.561 ms/op [Average]
  (min, avg, max) = (0.260, 0.388, 0.582), stdev = 0.146
  CI (99.9%): [? 0, 0.949] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 100000, nValues = 2)

# Run progress: 0.34% complete, ETA 03:27:32
# Fork: 1 of 1
# Warmup Iteration   1: 88.988 ms/op
# Warmup Iteration   2: 92.733 ms/op
# Warmup Iteration   3: 95.856 ms/op
# Warmup Iteration   4: 96.790 ms/op
# Warmup Iteration   5: 113.455 ms/op
Iteration   1: 91.284 ms/op
Iteration   2: 106.449 ms/op
Iteration   3: 155.378 ms/op
Iteration   4: 126.430 ms/op
Iteration   5: 129.365 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  121.781 ±(99.9%) 93.789 ms/op [Average]
  (min, avg, max) = (91.284, 121.781, 155.378), stdev = 24.357
  CI (99.9%): [27.992, 215.571] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 100000, nValues = 3)

# Run progress: 0.42% complete, ETA 03:30:56
# Fork: 1 of 1
# Warmup Iteration   1: 88.886 ms/op
# Warmup Iteration   2: 95.939 ms/op
# Warmup Iteration   3: 90.599 ms/op
# Warmup Iteration   4: 101.764 ms/op
# Warmup Iteration   5: 108.253 ms/op
Iteration   1: 99.452 ms/op
Iteration   2: 103.050 ms/op
Iteration   3: 130.312 ms/op
Iteration   4: 130.850 ms/op
Iteration   5: 173.681 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  127.469 ±(99.9%) 114.492 ms/op [Average]
  (min, avg, max) = (99.452, 127.469, 173.681), stdev = 29.733
  CI (99.9%): [12.977, 241.961] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 32, nValues = 2)

# Run progress: 0.51% complete, ETA 03:32:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.039 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.057 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.039 ±(99.9%) 0.056 ms/op [Average]
  (min, avg, max) = (0.020, 0.039, 0.057), stdev = 0.015
  CI (99.9%): [? 0, 0.096] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 32, nValues = 3)

# Run progress: 0.59% complete, ETA 03:32:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.056 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.037 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.020, 0.037, 0.056), stdev = 0.016
  CI (99.9%): [? 0, 0.097] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 1000, nValues = 2)

# Run progress: 0.67% complete, ETA 03:31:16
# Fork: 1 of 1
# Warmup Iteration   1: 1.168 ms/op
# Warmup Iteration   2: 0.935 ms/op
# Warmup Iteration   3: 1.161 ms/op
# Warmup Iteration   4: 0.639 ms/op
# Warmup Iteration   5: 0.803 ms/op
Iteration   1: 0.636 ms/op
Iteration   2: 0.570 ms/op
Iteration   3: 0.886 ms/op
Iteration   4: 1.377 ms/op
Iteration   5: 1.426 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.979 ±(99.9%) 1.555 ms/op [Average]
  (min, avg, max) = (0.570, 0.979, 1.426), stdev = 0.404
  CI (99.9%): [? 0, 2.534] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 1000, nValues = 3)

# Run progress: 0.76% complete, ETA 03:31:03
# Fork: 1 of 1
# Warmup Iteration   1: 1.621 ms/op
# Warmup Iteration   2: 1.307 ms/op
# Warmup Iteration   3: 1.259 ms/op
# Warmup Iteration   4: 1.084 ms/op
# Warmup Iteration   5: 0.756 ms/op
Iteration   1: 0.698 ms/op
Iteration   2: 0.734 ms/op
Iteration   3: 1.125 ms/op
Iteration   4: 1.415 ms/op
Iteration   5: 1.251 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1.045 ±(99.9%) 1.223 ms/op [Average]
  (min, avg, max) = (0.698, 1.045, 1.415), stdev = 0.317
  CI (99.9%): [? 0, 2.267] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 100000, nValues = 2)

# Run progress: 0.84% complete, ETA 03:30:48
# Fork: 1 of 1
# Warmup Iteration   1: 289.907 ms/op
# Warmup Iteration   2: 300.108 ms/op
# Warmup Iteration   3: 323.713 ms/op
# Warmup Iteration   4: 344.473 ms/op
# Warmup Iteration   5: 266.505 ms/op
Iteration   1: 279.317 ms/op
Iteration   2: 287.761 ms/op
Iteration   3: 278.443 ms/op
Iteration   4: 333.161 ms/op
Iteration   5: 295.981 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  294.933 ±(99.9%) 86.739 ms/op [Average]
  (min, avg, max) = (278.443, 294.933, 333.161), stdev = 22.526
  CI (99.9%): [208.193, 381.672] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 100000, nValues = 3)

# Run progress: 0.93% complete, ETA 03:33:58
# Fork: 1 of 1
# Warmup Iteration   1: 263.136 ms/op
# Warmup Iteration   2: 228.884 ms/op
# Warmup Iteration   3: 221.822 ms/op
# Warmup Iteration   4: 254.860 ms/op
# Warmup Iteration   5: 238.217 ms/op
Iteration   1: 278.306 ms/op
Iteration   2: 367.440 ms/op
Iteration   3: 514.925 ms/op
Iteration   4: 426.619 ms/op
Iteration   5: 323.543 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  382.167 ±(99.9%) 355.227 ms/op [Average]
  (min, avg, max) = (278.306, 382.167, 514.925), stdev = 92.251
  CI (99.9%): [26.939, 737.394] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 32, nValues = 2)

# Run progress: 1.01% complete, ETA 03:37:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.038 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.038 ms/op
Iteration   1: 0.039 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.078 ms/op
Iteration   5: 0.071 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.057 ±(99.9%) 0.065 ms/op [Average]
  (min, avg, max) = (0.039, 0.057, 0.078), stdev = 0.017
  CI (99.9%): [? 0, 0.123] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 32, nValues = 3)

# Run progress: 1.09% complete, ETA 03:36:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.039 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.039 ms/op
Iteration   1: 0.042 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.093 ms/op
Iteration   5: 0.084 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.062 ±(99.9%) 0.096 ms/op [Average]
  (min, avg, max) = (0.039, 0.062, 0.093), stdev = 0.025
  CI (99.9%): [? 0, 0.158] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 1000, nValues = 2)

# Run progress: 1.18% complete, ETA 03:35:15
# Fork: 1 of 1
# Warmup Iteration   1: 1.304 ms/op
# Warmup Iteration   2: 1.190 ms/op
# Warmup Iteration   3: 1.148 ms/op
# Warmup Iteration   4: 1.170 ms/op
# Warmup Iteration   5: 1.157 ms/op
Iteration   1: 1.284 ms/op
Iteration   2: 1.246 ms/op
Iteration   3: 1.531 ms/op
Iteration   4: 3.004 ms/op
Iteration   5: 2.446 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1.902 ±(99.9%) 3.019 ms/op [Average]
  (min, avg, max) = (1.246, 1.902, 3.004), stdev = 0.784
  CI (99.9%): [? 0, 4.921] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 1000, nValues = 3)

# Run progress: 1.26% complete, ETA 03:34:23
# Fork: 1 of 1
# Warmup Iteration   1: 1.393 ms/op
# Warmup Iteration   2: 1.284 ms/op
# Warmup Iteration   3: 1.233 ms/op
# Warmup Iteration   4: 1.256 ms/op
# Warmup Iteration   5: 1.221 ms/op
Iteration   1: 1.278 ms/op
Iteration   2: 1.378 ms/op
Iteration   3: 1.614 ms/op
Iteration   4: 2.945 ms/op
Iteration   5: 2.453 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1.933 ±(99.9%) 2.813 ms/op [Average]
  (min, avg, max) = (1.278, 1.933, 2.945), stdev = 0.730
  CI (99.9%): [? 0, 4.746] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 100000, nValues = 2)

# Run progress: 1.35% complete, ETA 03:33:36
# Fork: 1 of 1
# Warmup Iteration   1: 510.801 ms/op
# Warmup Iteration   2: 516.735 ms/op
# Warmup Iteration   3: 517.985 ms/op
# Warmup Iteration   4: 468.220 ms/op
# Warmup Iteration   5: 386.883 ms/op
Iteration   1: 544.292 ms/op
Iteration   2: 608.806 ms/op
Iteration   3: 586.946 ms/op
Iteration   4: 663.324 ms/op
Iteration   5: 575.169 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  595.707 ±(99.9%) 170.972 ms/op [Average]
  (min, avg, max) = (544.292, 595.707, 663.324), stdev = 44.401
  CI (99.9%): [424.735, 766.680] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 100000, nValues = 3)

# Run progress: 1.43% complete, ETA 03:35:34
# Fork: 1 of 1
# Warmup Iteration   1: 492.662 ms/op
# Warmup Iteration   2: 392.589 ms/op
# Warmup Iteration   3: 422.500 ms/op
# Warmup Iteration   4: 457.921 ms/op
# Warmup Iteration   5: 412.818 ms/op
Iteration   1: 494.119 ms/op
Iteration   2: 516.537 ms/op
Iteration   3: 596.675 ms/op
Iteration   4: 510.330 ms/op
Iteration   5: 574.564 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  538.445 ±(99.9%) 171.456 ms/op [Average]
  (min, avg, max) = (494.119, 538.445, 596.675), stdev = 44.527
  CI (99.9%): [366.989, 709.901] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 32, nValues = 2)

# Run progress: 1.52% complete, ETA 03:38:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.081 ms/op
# Warmup Iteration   2: 0.070 ms/op
# Warmup Iteration   3: 0.075 ms/op
# Warmup Iteration   4: 0.070 ms/op
# Warmup Iteration   5: 0.071 ms/op
Iteration   1: 0.069 ms/op
Iteration   2: 0.069 ms/op
Iteration   3: 0.089 ms/op
Iteration   4: 0.150 ms/op
Iteration   5: 0.138 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.103 ±(99.9%) 0.149 ms/op [Average]
  (min, avg, max) = (0.069, 0.103, 0.150), stdev = 0.039
  CI (99.9%): [? 0, 0.252] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 32, nValues = 3)

# Run progress: 1.60% complete, ETA 03:37:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.076 ms/op
# Warmup Iteration   2: 0.072 ms/op
# Warmup Iteration   3: 0.071 ms/op
# Warmup Iteration   4: 0.069 ms/op
# Warmup Iteration   5: 0.072 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.088 ms/op
Iteration   4: 0.141 ms/op
Iteration   5: 0.130 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.100 ±(99.9%) 0.128 ms/op [Average]
  (min, avg, max) = (0.070, 0.100, 0.141), stdev = 0.033
  CI (99.9%): [? 0, 0.228] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 1000, nValues = 2)

# Run progress: 1.68% complete, ETA 03:36:46
# Fork: 1 of 1
# Warmup Iteration   1: 2.409 ms/op
# Warmup Iteration   2: 2.091 ms/op
# Warmup Iteration   3: 2.006 ms/op
# Warmup Iteration   4: 2.002 ms/op
# Warmup Iteration   5: 1.940 ms/op
Iteration   1: 1.975 ms/op
Iteration   2: 1.948 ms/op
Iteration   3: 2.330 ms/op
Iteration   4: 3.216 ms/op
Iteration   5: 3.049 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  2.503 ±(99.9%) 2.297 ms/op [Average]
  (min, avg, max) = (1.948, 2.503, 3.216), stdev = 0.597
  CI (99.9%): [0.206, 4.801] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 1000, nValues = 3)

# Run progress: 1.77% complete, ETA 03:36:03
# Fork: 1 of 1
# Warmup Iteration   1: 2.252 ms/op
# Warmup Iteration   2: 1.929 ms/op
# Warmup Iteration   3: 1.922 ms/op
# Warmup Iteration   4: 1.912 ms/op
# Warmup Iteration   5: 1.890 ms/op
Iteration   1: 1.962 ms/op
Iteration   2: 1.975 ms/op
Iteration   3: 2.113 ms/op
Iteration   4: 3.182 ms/op
Iteration   5: 2.918 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  2.430 ±(99.9%) 2.221 ms/op [Average]
  (min, avg, max) = (1.962, 2.430, 3.182), stdev = 0.577
  CI (99.9%): [0.209, 4.651] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 100000, nValues = 2)

# Run progress: 1.85% complete, ETA 03:35:19
# Fork: 1 of 1
# Warmup Iteration   1: 638.991 ms/op
# Warmup Iteration   2: 575.881 ms/op
# Warmup Iteration   3: 598.359 ms/op
# Warmup Iteration   4: 582.832 ms/op
# Warmup Iteration   5: 717.103 ms/op
Iteration   1: 574.790 ms/op
Iteration   2: 874.324 ms/op
Iteration   3: 791.075 ms/op
Iteration   4: 851.158 ms/op
Iteration   5: 892.571 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  796.784 ±(99.9%) 500.057 ms/op [Average]
  (min, avg, max) = (574.790, 796.784, 892.571), stdev = 129.863
  CI (99.9%): [296.726, 1296.841] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 100000, nValues = 3)

# Run progress: 1.94% complete, ETA 03:38:47
# Fork: 1 of 1
# Warmup Iteration   1: 672.425 ms/op
# Warmup Iteration   2: 791.599 ms/op
# Warmup Iteration   3: 747.871 ms/op
# Warmup Iteration   4: 725.615 ms/op
# Warmup Iteration   5: 672.470 ms/op
Iteration   1: 1089.579 ms/op
Iteration   2: 860.912 ms/op
Iteration   3: 915.641 ms/op
Iteration   4: 904.167 ms/op
Iteration   5: 768.604 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  907.781 ±(99.9%) 450.263 ms/op [Average]
  (min, avg, max) = (768.604, 907.781, 1089.579), stdev = 116.932
  CI (99.9%): [457.518, 1358.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 32, nValues = 2)

# Run progress: 2.02% complete, ETA 03:42:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.140 ms/op
# Warmup Iteration   2: 0.123 ms/op
# Warmup Iteration   3: 0.127 ms/op
# Warmup Iteration   4: 0.132 ms/op
# Warmup Iteration   5: 0.131 ms/op
Iteration   1: 0.129 ms/op
Iteration   2: 0.127 ms/op
Iteration   3: 0.156 ms/op
Iteration   4: 0.236 ms/op
Iteration   5: 0.206 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.171 ±(99.9%) 0.187 ms/op [Average]
  (min, avg, max) = (0.127, 0.171, 0.236), stdev = 0.048
  CI (99.9%): [? 0, 0.357] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 32, nValues = 3)

# Run progress: 2.10% complete, ETA 03:41:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.135 ms/op
# Warmup Iteration   2: 0.127 ms/op
# Warmup Iteration   3: 0.121 ms/op
# Warmup Iteration   4: 0.124 ms/op
# Warmup Iteration   5: 0.121 ms/op
Iteration   1: 0.124 ms/op
Iteration   2: 0.128 ms/op
Iteration   3: 0.158 ms/op
Iteration   4: 0.244 ms/op
Iteration   5: 0.190 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.169 ±(99.9%) 0.191 ms/op [Average]
  (min, avg, max) = (0.124, 0.169, 0.244), stdev = 0.050
  CI (99.9%): [? 0, 0.360] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 1000, nValues = 2)

# Run progress: 2.19% complete, ETA 03:40:23
# Fork: 1 of 1
# Warmup Iteration   1: 4.261 ms/op
# Warmup Iteration   2: 3.970 ms/op
# Warmup Iteration   3: 3.823 ms/op
# Warmup Iteration   4: 3.962 ms/op
# Warmup Iteration   5: 4.180 ms/op
Iteration   1: 4.051 ms/op
Iteration   2: 4.034 ms/op
Iteration   3: 5.186 ms/op
Iteration   4: 6.515 ms/op
Iteration   5: 6.980 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  5.353 ±(99.9%) 5.259 ms/op [Average]
  (min, avg, max) = (4.034, 5.353, 6.980), stdev = 1.366
  CI (99.9%): [0.095, 10.612] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 1000, nValues = 3)

# Run progress: 2.27% complete, ETA 03:39:32
# Fork: 1 of 1
# Warmup Iteration   1: 4.463 ms/op
# Warmup Iteration   2: 3.872 ms/op
# Warmup Iteration   3: 3.818 ms/op
# Warmup Iteration   4: 3.962 ms/op
# Warmup Iteration   5: 3.992 ms/op
Iteration   1: 3.922 ms/op
Iteration   2: 3.956 ms/op
Iteration   3: 5.034 ms/op
Iteration   4: 6.130 ms/op
Iteration   5: 6.827 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  5.174 ±(99.9%) 4.991 ms/op [Average]
  (min, avg, max) = (3.922, 5.174, 6.827), stdev = 1.296
  CI (99.9%): [0.183, 10.164] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 100000, nValues = 2)

# Run progress: 2.36% complete, ETA 03:38:46
# Fork: 1 of 1
# Warmup Iteration   1: 1344.402 ms/op
# Warmup Iteration   2: 1324.952 ms/op
# Warmup Iteration   3: 1604.809 ms/op
# Warmup Iteration   4: 2259.765 ms/op
# Warmup Iteration   5: 1965.806 ms/op
Iteration   1: 1663.816 ms/op
Iteration   2: 1691.132 ms/op
Iteration   3: 1829.482 ms/op
Iteration   4: 2000.373 ms/op
Iteration   5: 1790.012 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1794.963 ±(99.9%) 514.424 ms/op [Average]
  (min, avg, max) = (1663.816, 1794.963, 2000.373), stdev = 133.594
  CI (99.9%): [1280.539, 2309.387] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 100000, nValues = 3)

# Run progress: 2.44% complete, ETA 03:43:34
# Fork: 1 of 1
# Warmup Iteration   1: 1440.009 ms/op
# Warmup Iteration   2: 1815.170 ms/op
# Warmup Iteration   3: 1502.443 ms/op
# Warmup Iteration   4: 2131.928 ms/op
# Warmup Iteration   5: 2383.106 ms/op
Iteration   1: 1957.283 ms/op
Iteration   2: 1788.438 ms/op
Iteration   3: 1822.030 ms/op
Iteration   4: 2426.978 ms/op
Iteration   5: 2319.566 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  2062.859 ±(99.9%) 1127.478 ms/op [Average]
  (min, avg, max) = (1788.438, 2062.859, 2426.978), stdev = 292.802
  CI (99.9%): [935.381, 3190.337] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 32, nValues = 2)

# Run progress: 2.53% complete, ETA 03:50:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.283 ms/op
# Warmup Iteration   2: 0.254 ms/op
# Warmup Iteration   3: 0.243 ms/op
# Warmup Iteration   4: 0.247 ms/op
# Warmup Iteration   5: 0.254 ms/op
Iteration   1: 0.249 ms/op
Iteration   2: 0.252 ms/op
Iteration   3: 0.319 ms/op
Iteration   4: 0.438 ms/op
Iteration   5: 0.415 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.334 ±(99.9%) 0.342 ms/op [Average]
  (min, avg, max) = (0.249, 0.334, 0.438), stdev = 0.089
  CI (99.9%): [? 0, 0.676] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 32, nValues = 3)

# Run progress: 2.61% complete, ETA 03:49:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.277 ms/op
# Warmup Iteration   2: 0.245 ms/op
# Warmup Iteration   3: 0.252 ms/op
# Warmup Iteration   4: 0.243 ms/op
# Warmup Iteration   5: 0.240 ms/op
Iteration   1: 0.245 ms/op
Iteration   2: 0.244 ms/op
Iteration   3: 0.290 ms/op
Iteration   4: 0.432 ms/op
Iteration   5: 0.377 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.317 ±(99.9%) 0.322 ms/op [Average]
  (min, avg, max) = (0.244, 0.317, 0.432), stdev = 0.084
  CI (99.9%): [? 0, 0.639] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 1000, nValues = 2)

# Run progress: 2.69% complete, ETA 03:47:59
# Fork: 1 of 1
# Warmup Iteration   1: 9.027 ms/op
# Warmup Iteration   2: 7.642 ms/op
# Warmup Iteration   3: 7.952 ms/op
# Warmup Iteration   4: 7.583 ms/op
# Warmup Iteration   5: 7.684 ms/op
Iteration   1: 7.580 ms/op
Iteration   2: 7.596 ms/op
Iteration   3: 9.887 ms/op
Iteration   4: 14.267 ms/op
Iteration   5: 12.517 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  10.370 ±(99.9%) 11.473 ms/op [Average]
  (min, avg, max) = (7.580, 10.370, 14.267), stdev = 2.980
  CI (99.9%): [? 0, 21.843] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 1000, nValues = 3)

# Run progress: 2.78% complete, ETA 03:47:00
# Fork: 1 of 1
# Warmup Iteration   1: 9.016 ms/op
# Warmup Iteration   2: 7.673 ms/op
# Warmup Iteration   3: 7.816 ms/op
# Warmup Iteration   4: 7.843 ms/op
# Warmup Iteration   5: 7.629 ms/op
Iteration   1: 7.682 ms/op
Iteration   2: 7.656 ms/op
Iteration   3: 9.661 ms/op
Iteration   4: 13.995 ms/op
Iteration   5: 18.011 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  11.401 ±(99.9%) 17.360 ms/op [Average]
  (min, avg, max) = (7.656, 11.401, 18.011), stdev = 4.508
  CI (99.9%): [? 0, 28.761] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 100000, nValues = 2)

# Run progress: 2.86% complete, ETA 03:46:05
# Fork: 1 of 1
# Warmup Iteration   1: 2661.785 ms/op
# Warmup Iteration   2: 3179.956 ms/op
# Warmup Iteration   3: 4675.053 ms/op
# Warmup Iteration   4: 4312.103 ms/op
# Warmup Iteration   5: 4272.350 ms/op
Iteration   1: 4881.841 ms/op
Iteration   2: 4687.456 ms/op
Iteration   3: 4799.792 ms/op
Iteration   4: 4690.808 ms/op
Iteration   5: 5589.289 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  4929.837 ±(99.9%) 1453.555 ms/op [Average]
  (min, avg, max) = (4687.456, 4929.837, 5589.289), stdev = 377.484
  CI (99.9%): [3476.282, 6383.392] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 100000, nValues = 3)

# Run progress: 2.95% complete, ETA 04:04:00
# Fork: 1 of 1
# Warmup Iteration   1: 3599.615 ms/op
# Warmup Iteration   2: 3798.592 ms/op
# Warmup Iteration   3: 4812.988 ms/op
# Warmup Iteration   4: 4433.660 ms/op
# Warmup Iteration   5: 4532.021 ms/op
Iteration   1: 4342.425 ms/op
Iteration   2: 3872.408 ms/op
Iteration   3: 4067.646 ms/op
Iteration   4: 4183.731 ms/op
Iteration   5: 3936.797 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  4080.602 ±(99.9%) 729.032 ms/op [Average]
  (min, avg, max) = (3872.408, 4080.602, 4342.425), stdev = 189.327
  CI (99.9%): [3351.569, 4809.634] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 32, nValues = 2)

# Run progress: 3.03% complete, ETA 04:20:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.568 ms/op
# Warmup Iteration   2: 0.483 ms/op
# Warmup Iteration   3: 0.501 ms/op
# Warmup Iteration   4: 0.501 ms/op
# Warmup Iteration   5: 0.489 ms/op
Iteration   1: 0.498 ms/op
Iteration   2: 0.488 ms/op
Iteration   3: 0.611 ms/op
Iteration   4: 0.875 ms/op
Iteration   5: 0.813 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.657 ±(99.9%) 0.688 ms/op [Average]
  (min, avg, max) = (0.488, 0.657, 0.875), stdev = 0.179
  CI (99.9%): [? 0, 1.345] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 32, nValues = 3)

# Run progress: 3.11% complete, ETA 04:18:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.544 ms/op
# Warmup Iteration   2: 0.508 ms/op
# Warmup Iteration   3: 0.512 ms/op
# Warmup Iteration   4: 0.497 ms/op
# Warmup Iteration   5: 0.494 ms/op
Iteration   1: 0.498 ms/op
Iteration   2: 0.522 ms/op
Iteration   3: 0.577 ms/op
Iteration   4: 0.931 ms/op
Iteration   5: 0.914 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.688 ±(99.9%) 0.831 ms/op [Average]
  (min, avg, max) = (0.498, 0.688, 0.931), stdev = 0.216
  CI (99.9%): [? 0, 1.519] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 1000, nValues = 2)

# Run progress: 3.20% complete, ETA 04:16:51
# Fork: 1 of 1
# Warmup Iteration   1: 24.310 ms/op
# Warmup Iteration   2: 15.226 ms/op
# Warmup Iteration   3: 15.589 ms/op
# Warmup Iteration   4: 15.618 ms/op
# Warmup Iteration   5: 15.148 ms/op
Iteration   1: 15.150 ms/op
Iteration   2: 15.378 ms/op
Iteration   3: 19.871 ms/op
Iteration   4: 26.773 ms/op
Iteration   5: 25.296 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  20.494 ±(99.9%) 20.880 ms/op [Average]
  (min, avg, max) = (15.150, 20.494, 26.773), stdev = 5.422
  CI (99.9%): [? 0, 41.373] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 1000, nValues = 3)

# Run progress: 3.28% complete, ETA 04:15:14
# Fork: 1 of 1
# Warmup Iteration   1: 23.863 ms/op
# Warmup Iteration   2: 15.294 ms/op
# Warmup Iteration   3: 15.339 ms/op
# Warmup Iteration   4: 16.105 ms/op
# Warmup Iteration   5: 15.339 ms/op
Iteration   1: 15.971 ms/op
Iteration   2: 15.533 ms/op
Iteration   3: 18.781 ms/op
Iteration   4: 27.496 ms/op
Iteration   5: 24.450 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  20.446 ±(99.9%) 20.437 ms/op [Average]
  (min, avg, max) = (15.533, 20.446, 27.496), stdev = 5.307
  CI (99.9%): [0.009, 40.883] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 100000, nValues = 2)

# Run progress: 3.37% complete, ETA 04:13:41
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 100000, nValues = 3)

# Run progress: 3.45% complete, ETA 04:15:26
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 32, nValues = 2)

# Run progress: 3.54% complete, ETA 04:18:13
# Fork: 1 of 1
# Warmup Iteration   1: 1.351 ms/op
# Warmup Iteration   2: 1.124 ms/op
# Warmup Iteration   3: 1.108 ms/op
# Warmup Iteration   4: 1.049 ms/op
# Warmup Iteration   5: 1.072 ms/op
Iteration   1: 1.085 ms/op
Iteration   2: 1.086 ms/op
Iteration   3: 1.398 ms/op
Iteration   4: 1.902 ms/op
Iteration   5: 1.839 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1.462 ±(99.9%) 1.520 ms/op [Average]
  (min, avg, max) = (1.085, 1.462, 1.902), stdev = 0.395
  CI (99.9%): [? 0, 2.982] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 32, nValues = 3)

# Run progress: 3.62% complete, ETA 04:16:40
# Fork: 1 of 1
# Warmup Iteration   1: 1.131 ms/op
# Warmup Iteration   2: 1.007 ms/op
# Warmup Iteration   3: 1.046 ms/op
# Warmup Iteration   4: 0.999 ms/op
# Warmup Iteration   5: 1.027 ms/op
Iteration   1: 1.034 ms/op
Iteration   2: 1.047 ms/op
Iteration   3: 1.323 ms/op
Iteration   4: 1.915 ms/op
Iteration   5: 1.934 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1.451 ±(99.9%) 1.724 ms/op [Average]
  (min, avg, max) = (1.034, 1.451, 1.934), stdev = 0.448
  CI (99.9%): [? 0, 3.175] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 1000, nValues = 2)

# Run progress: 3.70% complete, ETA 04:15:09
# Fork: 1 of 1
# Warmup Iteration   1: 48.910 ms/op
# Warmup Iteration   2: 31.995 ms/op
# Warmup Iteration   3: 31.357 ms/op
# Warmup Iteration   4: 31.193 ms/op
# Warmup Iteration   5: 33.163 ms/op
Iteration   1: 31.725 ms/op
Iteration   2: 31.461 ms/op
Iteration   3: 40.538 ms/op
Iteration   4: 54.940 ms/op
Iteration   5: 52.389 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  42.211 ±(99.9%) 42.790 ms/op [Average]
  (min, avg, max) = (31.461, 42.211, 54.940), stdev = 11.112
  CI (99.9%): [? 0, 85.000] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 1000, nValues = 3)

# Run progress: 3.79% complete, ETA 04:13:49
# Fork: 1 of 1
# Warmup Iteration   1: 50.290 ms/op
# Warmup Iteration   2: 33.164 ms/op
# Warmup Iteration   3: 31.233 ms/op
# Warmup Iteration   4: 31.270 ms/op
# Warmup Iteration   5: 32.606 ms/op
Iteration   1: 31.585 ms/op
Iteration   2: 31.324 ms/op
Iteration   3: 38.253 ms/op
Iteration   4: 54.151 ms/op
Iteration   5: 55.145 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  42.092 ±(99.9%) 45.435 ms/op [Average]
  (min, avg, max) = (31.324, 42.092, 55.145), stdev = 11.799
  CI (99.9%): [? 0, 87.527] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 100000, nValues = 2)

# Run progress: 3.87% complete, ETA 04:12:31
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 100000, nValues = 3)

# Run progress: 3.96% complete, ETA 04:11:46
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 32, nValues = 2)

# Run progress: 4.04% complete, ETA 04:11:35
# Fork: 1 of 1
# Warmup Iteration   1: 2.566 ms/op
# Warmup Iteration   2: 2.020 ms/op
# Warmup Iteration   3: 1.988 ms/op
# Warmup Iteration   4: 1.993 ms/op
# Warmup Iteration   5: 2.045 ms/op
Iteration   1: 1.992 ms/op
Iteration   2: 2.048 ms/op
Iteration   3: 2.500 ms/op
Iteration   4: 4.020 ms/op
Iteration   5: 4.218 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  2.956 ±(99.9%) 4.168 ms/op [Average]
  (min, avg, max) = (1.992, 2.956, 4.218), stdev = 1.082
  CI (99.9%): [? 0, 7.123] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 32, nValues = 3)

# Run progress: 4.12% complete, ETA 04:10:18
# Fork: 1 of 1
# Warmup Iteration   1: 2.300 ms/op
# Warmup Iteration   2: 2.015 ms/op
# Warmup Iteration   3: 2.063 ms/op
# Warmup Iteration   4: 1.961 ms/op
# Warmup Iteration   5: 2.048 ms/op
Iteration   1: 1.983 ms/op
Iteration   2: 1.986 ms/op
Iteration   3: 2.367 ms/op
Iteration   4: 3.447 ms/op
Iteration   5: 3.542 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  2.665 ±(99.9%) 2.980 ms/op [Average]
  (min, avg, max) = (1.983, 2.665, 3.542), stdev = 0.774
  CI (99.9%): [? 0, 5.644] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 1000, nValues = 2)

# Run progress: 4.21% complete, ETA 04:09:03
# Fork: 1 of 1
# Warmup Iteration   1: 101.588 ms/op
# Warmup Iteration   2: 64.086 ms/op
# Warmup Iteration   3: 63.077 ms/op
# Warmup Iteration   4: 65.396 ms/op
# Warmup Iteration   5: 65.492 ms/op
Iteration   1: 64.726 ms/op
Iteration   2: 65.228 ms/op
Iteration   3: 78.364 ms/op
Iteration   4: 102.911 ms/op
Iteration   5: 114.090 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  85.064 ±(99.9%) 86.383 ms/op [Average]
  (min, avg, max) = (64.726, 85.064, 114.090), stdev = 22.433
  CI (99.9%): [? 0, 171.447] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 1000, nValues = 3)

# Run progress: 4.29% complete, ETA 04:08:00
# Fork: 1 of 1
# Warmup Iteration   1: 106.447 ms/op
# Warmup Iteration   2: 73.626 ms/op
# Warmup Iteration   3: 64.882 ms/op
# Warmup Iteration   4: 62.884 ms/op
# Warmup Iteration   5: 65.727 ms/op
Iteration   1: 65.096 ms/op
Iteration   2: 63.288 ms/op
Iteration   3: 91.227 ms/op
Iteration   4: 100.941 ms/op
Iteration   5: 113.193 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  86.749 ±(99.9%) 84.802 ms/op [Average]
  (min, avg, max) = (63.288, 86.749, 113.193), stdev = 22.023
  CI (99.9%): [1.947, 171.551] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 100000, nValues = 2)

# Run progress: 4.38% complete, ETA 04:07:04
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 100000, nValues = 3)

# Run progress: 4.46% complete, ETA 04:07:52
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 32, nValues = 2)

# Run progress: 4.55% complete, ETA 04:09:46
# Fork: 1 of 1
# Warmup Iteration   1: 6.772 ms/op
# Warmup Iteration   2: 5.490 ms/op
# Warmup Iteration   3: 4.376 ms/op
# Warmup Iteration   4: 4.498 ms/op
# Warmup Iteration   5: 4.387 ms/op
Iteration   1: 4.412 ms/op
Iteration   2: 4.485 ms/op
Iteration   3: 5.660 ms/op
Iteration   4: 7.438 ms/op
Iteration   5: 6.787 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  5.757 ±(99.9%) 5.210 ms/op [Average]
  (min, avg, max) = (4.412, 5.757, 7.438), stdev = 1.353
  CI (99.9%): [0.547, 10.966] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 32, nValues = 3)

# Run progress: 4.63% complete, ETA 04:08:38
# Fork: 1 of 1
# Warmup Iteration   1: 4.730 ms/op
# Warmup Iteration   2: 4.003 ms/op
# Warmup Iteration   3: 4.489 ms/op
# Warmup Iteration   4: 4.557 ms/op
# Warmup Iteration   5: 4.449 ms/op
Iteration   1: 4.494 ms/op
Iteration   2: 4.493 ms/op
Iteration   3: 5.710 ms/op
Iteration   4: 7.507 ms/op
Iteration   5: 7.095 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  5.860 ±(99.9%) 5.445 ms/op [Average]
  (min, avg, max) = (4.493, 5.860, 7.507), stdev = 1.414
  CI (99.9%): [0.415, 11.304] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 1000, nValues = 2)

# Run progress: 4.71% complete, ETA 04:07:31
# Fork: 1 of 1
# Warmup Iteration   1: 225.411 ms/op
# Warmup Iteration   2: 151.129 ms/op
# Warmup Iteration   3: 191.052 ms/op
# Warmup Iteration   4: 215.236 ms/op
# Warmup Iteration   5: 266.944 ms/op
Iteration   1: 230.667 ms/op
Iteration   2: 256.986 ms/op
Iteration   3: 428.257 ms/op
Iteration   4: 271.348 ms/op
Iteration   5: 266.592 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  290.770 ±(99.9%) 302.087 ms/op [Average]
  (min, avg, max) = (230.667, 290.770, 428.257), stdev = 78.451
  CI (99.9%): [? 0, 592.857] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 1000, nValues = 3)

# Run progress: 4.80% complete, ETA 04:06:47
# Fork: 1 of 1
# Warmup Iteration   1: 286.769 ms/op
# Warmup Iteration   2: 379.308 ms/op
# Warmup Iteration   3: 362.872 ms/op
# Warmup Iteration   4: 286.302 ms/op
# Warmup Iteration   5: 227.820 ms/op
Iteration   1: 173.710 ms/op
Iteration   2: 147.273 ms/op
Iteration   3: 339.245 ms/op
Iteration   4: 232.224 ms/op
Iteration   5: 245.361 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  227.563 ±(99.9%) 286.595 ms/op [Average]
  (min, avg, max) = (147.273, 227.563, 339.245), stdev = 74.428
  CI (99.9%): [? 0, 514.158] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 100000, nValues = 2)

# Run progress: 4.88% complete, ETA 04:06:07
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 100000, nValues = 3)

# Run progress: 4.97% complete, ETA 04:06:19
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 32, nValues = 2)

# Run progress: 5.05% complete, ETA 04:06:35
# Fork: 1 of 1
# Warmup Iteration   1: 11.204 ms/op
# Warmup Iteration   2: 8.718 ms/op
# Warmup Iteration   3: 8.019 ms/op
# Warmup Iteration   4: 8.106 ms/op
# Warmup Iteration   5: 8.127 ms/op
Iteration   1: 8.152 ms/op
Iteration   2: 7.864 ms/op
Iteration   3: 9.661 ms/op
Iteration   4: 12.228 ms/op
Iteration   5: 15.281 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  10.637 ±(99.9%) 12.011 ms/op [Average]
  (min, avg, max) = (7.864, 10.637, 15.281), stdev = 3.119
  CI (99.9%): [? 0, 22.648] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 32, nValues = 3)

# Run progress: 5.13% complete, ETA 04:05:34
# Fork: 1 of 1
# Warmup Iteration   1: 10.017 ms/op
# Warmup Iteration   2: 8.519 ms/op
# Warmup Iteration   3: 8.478 ms/op
# Warmup Iteration   4: 8.120 ms/op
# Warmup Iteration   5: 8.396 ms/op
Iteration   1: 8.050 ms/op
Iteration   2: 8.083 ms/op
Iteration   3: 9.284 ms/op
Iteration   4: 13.536 ms/op
Iteration   5: 16.763 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  11.143 ±(99.9%) 14.876 ms/op [Average]
  (min, avg, max) = (8.050, 11.143, 16.763), stdev = 3.863
  CI (99.9%): [? 0, 26.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 1000, nValues = 2)

# Run progress: 5.22% complete, ETA 04:04:35
# Fork: 1 of 1
# Warmup Iteration   1: 558.222 ms/op
# Warmup Iteration   2: 683.547 ms/op
# Warmup Iteration   3: 882.347 ms/op
# Warmup Iteration   4: 803.267 ms/op
# Warmup Iteration   5: 934.715 ms/op
Iteration   1: 1414.535 ms/op
Iteration   2: 1092.907 ms/op
Iteration   3: 1107.137 ms/op
Iteration   4: 1022.069 ms/op
Iteration   5: 1195.794 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1166.488 ±(99.9%) 584.548 ms/op [Average]
  (min, avg, max) = (1022.069, 1166.488, 1414.535), stdev = 151.805
  CI (99.9%): [581.940, 1751.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 1000, nValues = 3)

# Run progress: 5.30% complete, ETA 04:05:08
# Fork: 1 of 1
# Warmup Iteration   1: 612.914 ms/op
# Warmup Iteration   2: 1084.702 ms/op
# Warmup Iteration   3: 1122.666 ms/op
# Warmup Iteration   4: 844.877 ms/op
# Warmup Iteration   5: 749.951 ms/op
Iteration   1: 868.255 ms/op
Iteration   2: 1378.009 ms/op
Iteration   3: 1047.828 ms/op
Iteration   4: 1213.354 ms/op
Iteration   5: 942.443 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1089.978 ±(99.9%) 795.901 ms/op [Average]
  (min, avg, max) = (868.255, 1089.978, 1378.009), stdev = 206.693
  CI (99.9%): [294.077, 1885.879] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 100000, nValues = 2)

# Run progress: 5.39% complete, ETA 04:05:19
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 100000, nValues = 3)

# Run progress: 5.47% complete, ETA 04:06:56
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 32, nValues = 2)

# Run progress: 5.56% complete, ETA 04:08:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 32, nValues = 3)

# Run progress: 5.64% complete, ETA 04:07:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 1000, nValues = 2)

# Run progress: 5.72% complete, ETA 04:05:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 1000, nValues = 3)

# Run progress: 5.81% complete, ETA 04:04:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 100000, nValues = 2)

# Run progress: 5.89% complete, ETA 04:03:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.037 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.037 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 100000, nValues = 3)

# Run progress: 5.98% complete, ETA 04:02:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 32, nValues = 2)

# Run progress: 6.06% complete, ETA 04:02:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 32, nValues = 3)

# Run progress: 6.14% complete, ETA 04:01:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 1000, nValues = 2)

# Run progress: 6.23% complete, ETA 04:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.396 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.396 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 1000, nValues = 3)

# Run progress: 6.31% complete, ETA 03:59:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.599 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.599 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 100000, nValues = 2)

# Run progress: 6.40% complete, ETA 03:59:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.012 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 100000, nValues = 3)

# Run progress: 6.48% complete, ETA 03:58:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.014 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 32, nValues = 2)

# Run progress: 6.57% complete, ETA 03:58:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 32, nValues = 3)

# Run progress: 6.65% complete, ETA 03:57:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 1000, nValues = 2)

# Run progress: 6.73% complete, ETA 03:56:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 1000, nValues = 3)

# Run progress: 6.82% complete, ETA 03:55:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 100000, nValues = 2)

# Run progress: 6.90% complete, ETA 03:54:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.093 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.093 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 100000, nValues = 3)

# Run progress: 6.99% complete, ETA 03:54:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.025 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 32, nValues = 2)

# Run progress: 7.07% complete, ETA 03:53:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 32, nValues = 3)

# Run progress: 7.15% complete, ETA 03:53:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 1000, nValues = 2)

# Run progress: 7.24% complete, ETA 03:52:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 1000, nValues = 3)

# Run progress: 7.32% complete, ETA 03:51:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 100000, nValues = 2)

# Run progress: 7.41% complete, ETA 03:51:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.242 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.242 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 100000, nValues = 3)

# Run progress: 7.49% complete, ETA 03:50:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.526 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.526 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 32, nValues = 2)

# Run progress: 7.58% complete, ETA 03:50:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.038 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.097 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 32, nValues = 3)

# Run progress: 7.66% complete, ETA 03:49:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.100 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 1000, nValues = 2)

# Run progress: 7.74% complete, ETA 03:48:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.077 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 1000, nValues = 3)

# Run progress: 7.83% complete, ETA 03:47:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.047 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.069 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 100000, nValues = 2)

# Run progress: 7.91% complete, ETA 03:46:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.033 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.093 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.093 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 100000, nValues = 3)

# Run progress: 8.00% complete, ETA 03:46:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.230 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.230 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 32, nValues = 2)

# Run progress: 8.08% complete, ETA 03:46:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.063 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.083 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 4.792 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  4.792 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 32, nValues = 3)

# Run progress: 8.16% complete, ETA 03:45:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.079 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.088 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.459 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.459 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 1000, nValues = 2)

# Run progress: 8.25% complete, ETA 03:45:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.073 ms/op
# Warmup Iteration   2: 0.067 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.088 ms/op
# Warmup Iteration   5: 0.054 ms/op
Iteration   1: 0.084 ms/op
Iteration   2: 25.336 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  12.710 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 1000, nValues = 3)

# Run progress: 8.33% complete, ETA 03:45:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
# Warmup Iteration   2: 0.049 ms/op
# Warmup Iteration   3: 0.102 ms/op
# Warmup Iteration   4: 0.043 ms/op
# Warmup Iteration   5: 0.111 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 100000, nValues = 2)

# Run progress: 8.42% complete, ETA 03:44:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.070 ms/op
# Warmup Iteration   3: 0.068 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.660 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.660 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 100000, nValues = 3)

# Run progress: 8.50% complete, ETA 03:44:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.066 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.068 ms/op
# Warmup Iteration   5: 0.053 ms/op
Iteration   1: 0.258 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.258 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 32, nValues = 2)

# Run progress: 8.59% complete, ETA 03:44:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.095 ms/op
# Warmup Iteration   3: 0.127 ms/op
# Warmup Iteration   4: 0.078 ms/op
# Warmup Iteration   5: 0.477 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 32, nValues = 3)

# Run progress: 8.67% complete, ETA 03:43:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.091 ms/op
# Warmup Iteration   2: 0.094 ms/op
# Warmup Iteration   3: 0.145 ms/op
# Warmup Iteration   4: 0.075 ms/op
# Warmup Iteration   5: 0.409 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 1000, nValues = 2)

# Run progress: 8.75% complete, ETA 03:42:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.105 ms/op
# Warmup Iteration   2: 0.110 ms/op
# Warmup Iteration   3: 0.159 ms/op
# Warmup Iteration   4: 0.085 ms/op
# Warmup Iteration   5: 0.285 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 1000, nValues = 3)

# Run progress: 8.84% complete, ETA 03:42:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.148 ms/op
# Warmup Iteration   2: 0.105 ms/op
# Warmup Iteration   3: 0.168 ms/op
# Warmup Iteration   4: 0.081 ms/op
# Warmup Iteration   5: 0.215 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 100000, nValues = 2)

# Run progress: 8.92% complete, ETA 03:41:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.126 ms/op
# Warmup Iteration   2: 0.108 ms/op
# Warmup Iteration   3: 0.167 ms/op
# Warmup Iteration   4: 0.123 ms/op
# Warmup Iteration   5: 0.091 ms/op
Iteration   1: 0.665 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.665 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 100000, nValues = 3)

# Run progress: 9.01% complete, ETA 03:41:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.145 ms/op
# Warmup Iteration   2: 0.139 ms/op
# Warmup Iteration   3: 0.127 ms/op
# Warmup Iteration   4: 0.142 ms/op
# Warmup Iteration   5: 0.108 ms/op
Iteration   1: 0.454 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.454 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 32, nValues = 2)

# Run progress: 9.09% complete, ETA 03:40:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.204 ms/op
# Warmup Iteration   2: 0.204 ms/op
# Warmup Iteration   3: 0.238 ms/op
# Warmup Iteration   4: 0.165 ms/op
# Warmup Iteration   5: 0.730 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 32, nValues = 3)

# Run progress: 9.18% complete, ETA 03:40:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.200 ms/op
# Warmup Iteration   2: 0.177 ms/op
# Warmup Iteration   3: 0.261 ms/op
# Warmup Iteration   4: 0.142 ms/op
# Warmup Iteration   5: 1.074 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 1000, nValues = 2)

# Run progress: 9.26% complete, ETA 03:39:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.195 ms/op
# Warmup Iteration   2: 0.217 ms/op
# Warmup Iteration   3: 0.214 ms/op
# Warmup Iteration   4: 0.170 ms/op
# Warmup Iteration   5: 0.934 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 1000, nValues = 3)

# Run progress: 9.34% complete, ETA 03:38:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.205 ms/op
# Warmup Iteration   2: 0.211 ms/op
# Warmup Iteration   3: 0.242 ms/op
# Warmup Iteration   4: 0.157 ms/op
# Warmup Iteration   5: 0.819 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 100000, nValues = 2)

# Run progress: 9.43% complete, ETA 03:38:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.199 ms/op
# Warmup Iteration   2: 0.255 ms/op
# Warmup Iteration   3: 0.260 ms/op
# Warmup Iteration   4: 0.176 ms/op
# Warmup Iteration   5: 0.657 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 100000, nValues = 3)

# Run progress: 9.51% complete, ETA 03:37:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.190 ms/op
# Warmup Iteration   2: 0.189 ms/op
# Warmup Iteration   3: 0.313 ms/op
# Warmup Iteration   4: 0.160 ms/op
# Warmup Iteration   5: 0.565 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 32, nValues = 2)

# Run progress: 9.60% complete, ETA 03:37:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.401 ms/op
# Warmup Iteration   2: 0.415 ms/op
# Warmup Iteration   3: 0.414 ms/op
# Warmup Iteration   4: 0.342 ms/op
# Warmup Iteration   5: 1.835 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 32, nValues = 3)

# Run progress: 9.68% complete, ETA 03:36:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.350 ms/op
# Warmup Iteration   2: 0.349 ms/op
# Warmup Iteration   3: 0.581 ms/op
# Warmup Iteration   4: 0.272 ms/op
# Warmup Iteration   5: 6.140 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 1000, nValues = 2)

# Run progress: 9.76% complete, ETA 03:35:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.341 ms/op
# Warmup Iteration   2: 0.338 ms/op
# Warmup Iteration   3: 0.526 ms/op
# Warmup Iteration   4: 0.279 ms/op
# Warmup Iteration   5: 14.755 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 1000, nValues = 3)

# Run progress: 9.85% complete, ETA 03:35:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.412 ms/op
# Warmup Iteration   2: 0.438 ms/op
# Warmup Iteration   3: 0.423 ms/op
# Warmup Iteration   4: 0.345 ms/op
# Warmup Iteration   5: 1.733 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 100000, nValues = 2)

# Run progress: 9.93% complete, ETA 03:34:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.432 ms/op
# Warmup Iteration   2: 0.477 ms/op
# Warmup Iteration   3: 0.507 ms/op
# Warmup Iteration   4: 0.350 ms/op
# Warmup Iteration   5: 1.595 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 100000, nValues = 3)

# Run progress: 10.02% complete, ETA 03:34:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.433 ms/op
# Warmup Iteration   2: 0.439 ms/op
# Warmup Iteration   3: 0.665 ms/op
# Warmup Iteration   4: 0.346 ms/op
# Warmup Iteration   5: 0.999 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 32, nValues = 2)

# Run progress: 10.10% complete, ETA 03:33:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.693 ms/op
# Warmup Iteration   2: 0.909 ms/op
# Warmup Iteration   3: 0.526 ms/op
# Warmup Iteration   4: 2.173 ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 32, nValues = 3)

# Run progress: 10.19% complete, ETA 03:33:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.719 ms/op
# Warmup Iteration   2: 0.860 ms/op
# Warmup Iteration   3: 0.822 ms/op
# Warmup Iteration   4: 0.694 ms/op
# Warmup Iteration   5: 5.200 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 1000, nValues = 2)

# Run progress: 10.27% complete, ETA 03:32:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.752 ms/op
# Warmup Iteration   2: 0.894 ms/op
# Warmup Iteration   3: 0.549 ms/op
# Warmup Iteration   4: 1.985 ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 1000, nValues = 3)

# Run progress: 10.35% complete, ETA 03:31:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.706 ms/op
# Warmup Iteration   2: 0.756 ms/op
# Warmup Iteration   3: 0.944 ms/op
# Warmup Iteration   4: 0.670 ms/op
# Warmup Iteration   5: 6.061 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 100000, nValues = 2)

# Run progress: 10.44% complete, ETA 03:31:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.905 ms/op
# Warmup Iteration   2: 0.850 ms/op
# Warmup Iteration   3: 1.352 ms/op
# Warmup Iteration   4: 0.648 ms/op
# Warmup Iteration   5: 2.145 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 100000, nValues = 3)

# Run progress: 10.52% complete, ETA 03:30:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.953 ms/op
# Warmup Iteration   2: 0.781 ms/op
# Warmup Iteration   3: 1.525 ms/op
# Warmup Iteration   4: 0.633 ms/op
# Warmup Iteration   5: 2.230 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 32, nValues = 2)

# Run progress: 10.61% complete, ETA 03:30:16
# Fork: 1 of 1
# Warmup Iteration   1: 1.385 ms/op
# Warmup Iteration   2: 1.619 ms/op
# Warmup Iteration   3: 1.833 ms/op
# Warmup Iteration   4: 1.376 ms/op
# Warmup Iteration   5: 10.106 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 32, nValues = 3)

# Run progress: 10.69% complete, ETA 03:29:43
# Fork: 1 of 1
# Warmup Iteration   1: 1.479 ms/op
# Warmup Iteration   2: 1.297 ms/op
# Warmup Iteration   3: 2.423 ms/op
# Warmup Iteration   4: 1.064 ms/op
# Warmup Iteration   5: 20.607 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 1000, nValues = 2)

# Run progress: 10.77% complete, ETA 03:29:08
# Fork: 1 of 1
# Warmup Iteration   1: 1.462 ms/op
# Warmup Iteration   2: 1.424 ms/op
# Warmup Iteration   3: 2.085 ms/op
# Warmup Iteration   4: 1.125 ms/op
# Warmup Iteration   5: 21.825 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 1000, nValues = 3)

# Run progress: 10.86% complete, ETA 03:28:31
# Fork: 1 of 1
# Warmup Iteration   1: 1.558 ms/op
# Warmup Iteration   2: 1.325 ms/op
# Warmup Iteration   3: 2.348 ms/op
# Warmup Iteration   4: 1.132 ms/op
# Warmup Iteration   5: 8.275 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 100000, nValues = 2)

# Run progress: 10.94% complete, ETA 03:27:57
# Fork: 1 of 1
# Warmup Iteration   1: 1.821 ms/op
# Warmup Iteration   2: 1.676 ms/op
# Warmup Iteration   3: 3.005 ms/op
# Warmup Iteration   4: 1.336 ms/op
# Warmup Iteration   5: 4.401 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 100000, nValues = 3)

# Run progress: 11.03% complete, ETA 03:27:33
# Fork: 1 of 1
# Warmup Iteration   1: 1.756 ms/op
# Warmup Iteration   2: 1.875 ms/op
# Warmup Iteration   3: 2.116 ms/op
# Warmup Iteration   4: 1.465 ms/op
# Warmup Iteration   5: 4.917 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 11.11% complete, ETA 03:27:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 11.20% complete, ETA 03:26:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 11.28% complete, ETA 03:26:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.035 ms/op
Iteration   4: 0.056 ms/op
Iteration   5: 0.048 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.040 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (0.030, 0.040, 0.056), stdev = 0.012
  CI (99.9%): [? 0, 0.085] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 11.36% complete, ETA 03:26:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.040 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.030, 0.040, 0.052), stdev = 0.010
  CI (99.9%): [0.002, 0.078] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 11.45% complete, ETA 03:25:41
# Fork: 1 of 1
# Warmup Iteration   1: 8.911 ms/op
# Warmup Iteration   2: 7.881 ms/op
# Warmup Iteration   3: 7.591 ms/op
# Warmup Iteration   4: 8.291 ms/op
# Warmup Iteration   5: 8.332 ms/op
Iteration   1: 9.585 ms/op
Iteration   2: 9.502 ms/op
Iteration   3: 9.633 ms/op
Iteration   4: 16.701 ms/op
Iteration   5: 19.288 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  12.942 ±(99.9%) 18.107 ms/op [Average]
  (min, avg, max) = (9.502, 12.942, 19.288), stdev = 4.702
  CI (99.9%): [? 0, 31.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 11.53% complete, ETA 03:25:21
# Fork: 1 of 1
# Warmup Iteration   1: 8.789 ms/op
# Warmup Iteration   2: 8.609 ms/op
# Warmup Iteration   3: 8.523 ms/op
# Warmup Iteration   4: 9.936 ms/op
# Warmup Iteration   5: 8.544 ms/op
Iteration   1: 8.792 ms/op
Iteration   2: 8.763 ms/op
Iteration   3: 14.089 ms/op
Iteration   4: 14.523 ms/op
Iteration   5: 13.915 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  12.017 ±(99.9%) 11.417 ms/op [Average]
  (min, avg, max) = (8.763, 12.017, 14.523), stdev = 2.965
  CI (99.9%): [0.599, 23.434] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 11.62% complete, ETA 03:25:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 11.70% complete, ETA 03:24:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 11.78% complete, ETA 03:24:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.059 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.060 ms/op
Iteration   2: 0.062 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.111 ms/op
Iteration   5: 0.103 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.082 ±(99.9%) 0.090 ms/op [Average]
  (min, avg, max) = (0.060, 0.082, 0.111), stdev = 0.023
  CI (99.9%): [? 0, 0.173] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 11.87% complete, ETA 03:23:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.062 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.060 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.061 ms/op
Iteration   2: 0.060 ms/op
Iteration   3: 0.070 ms/op
Iteration   4: 0.104 ms/op
Iteration   5: 0.107 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.080 ±(99.9%) 0.090 ms/op [Average]
  (min, avg, max) = (0.060, 0.080, 0.107), stdev = 0.023
  CI (99.9%): [? 0, 0.170] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 11.95% complete, ETA 03:23:38
# Fork: 1 of 1
# Warmup Iteration   1: 18.255 ms/op
# Warmup Iteration   2: 13.976 ms/op
# Warmup Iteration   3: 16.788 ms/op
# Warmup Iteration   4: 14.756 ms/op
# Warmup Iteration   5: 15.382 ms/op
Iteration   1: 16.072 ms/op
Iteration   2: 18.408 ms/op
Iteration   3: 21.384 ms/op
Iteration   4: 23.022 ms/op
Iteration   5: 24.706 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  20.718 ±(99.9%) 13.419 ms/op [Average]
  (min, avg, max) = (16.072, 20.718, 24.706), stdev = 3.485
  CI (99.9%): [7.299, 34.138] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 12.04% complete, ETA 03:23:20
# Fork: 1 of 1
# Warmup Iteration   1: 18.529 ms/op
# Warmup Iteration   2: 15.698 ms/op
# Warmup Iteration   3: 16.191 ms/op
# Warmup Iteration   4: 16.682 ms/op
# Warmup Iteration   5: 17.200 ms/op
Iteration   1: 14.997 ms/op
Iteration   2: 16.756 ms/op
Iteration   3: 19.029 ms/op
Iteration   4: 20.710 ms/op
Iteration   5: 33.901 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  21.079 ±(99.9%) 28.843 ms/op [Average]
  (min, avg, max) = (14.997, 21.079, 33.901), stdev = 7.490
  CI (99.9%): [? 0, 49.922] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 12.12% complete, ETA 03:23:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 12.21% complete, ETA 03:22:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 12.29% complete, ETA 03:22:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.119 ms/op
# Warmup Iteration   2: 0.107 ms/op
# Warmup Iteration   3: 0.104 ms/op
# Warmup Iteration   4: 0.105 ms/op
# Warmup Iteration   5: 0.104 ms/op
Iteration   1: 0.104 ms/op
Iteration   2: 0.109 ms/op
Iteration   3: 0.126 ms/op
Iteration   4: 0.183 ms/op
Iteration   5: 0.174 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.139 ±(99.9%) 0.142 ms/op [Average]
  (min, avg, max) = (0.104, 0.139, 0.183), stdev = 0.037
  CI (99.9%): [? 0, 0.281] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 12.37% complete, ETA 03:22:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.116 ms/op
# Warmup Iteration   2: 0.109 ms/op
# Warmup Iteration   3: 0.104 ms/op
# Warmup Iteration   4: 0.107 ms/op
# Warmup Iteration   5: 0.105 ms/op
Iteration   1: 0.105 ms/op
Iteration   2: 0.107 ms/op
Iteration   3: 0.119 ms/op
Iteration   4: 0.173 ms/op
Iteration   5: 0.174 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.136 ±(99.9%) 0.136 ms/op [Average]
  (min, avg, max) = (0.105, 0.136, 0.174), stdev = 0.035
  CI (99.9%): [? 10??, 0.271] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 12.46% complete, ETA 03:21:40
# Fork: 1 of 1
# Warmup Iteration   1: 31.197 ms/op
# Warmup Iteration   2: 27.191 ms/op
# Warmup Iteration   3: 25.884 ms/op
# Warmup Iteration   4: 27.821 ms/op
# Warmup Iteration   5: 27.555 ms/op
Iteration   1: 24.569 ms/op
Iteration   2: 28.450 ms/op
Iteration   3: 33.306 ms/op
Iteration   4: 44.110 ms/op
Iteration   5: 41.237 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  34.335 ±(99.9%) 31.884 ms/op [Average]
  (min, avg, max) = (24.569, 34.335, 44.110), stdev = 8.280
  CI (99.9%): [2.451, 66.218] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 12.54% complete, ETA 03:21:23
# Fork: 1 of 1
# Warmup Iteration   1: 27.641 ms/op
# Warmup Iteration   2: 27.619 ms/op
# Warmup Iteration   3: 25.203 ms/op
# Warmup Iteration   4: 27.152 ms/op
# Warmup Iteration   5: 27.096 ms/op
Iteration   1: 29.242 ms/op
Iteration   2: 26.903 ms/op
Iteration   3: 51.794 ms/op
Iteration   4: 57.462 ms/op
Iteration   5: 45.714 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  42.223 ±(99.9%) 52.347 ms/op [Average]
  (min, avg, max) = (26.903, 42.223, 57.462), stdev = 13.594
  CI (99.9%): [? 0, 94.570] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 12.63% complete, ETA 03:21:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.010 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.014), stdev = 0.003
  CI (99.9%): [? 10??, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 12.71% complete, ETA 03:20:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.011 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.015), stdev = 0.003
  CI (99.9%): [? 0, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 12.79% complete, ETA 03:20:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.216 ms/op
# Warmup Iteration   2: 0.200 ms/op
# Warmup Iteration   3: 0.199 ms/op
# Warmup Iteration   4: 0.195 ms/op
# Warmup Iteration   5: 0.193 ms/op
Iteration   1: 0.199 ms/op
Iteration   2: 0.201 ms/op
Iteration   3: 0.223 ms/op
Iteration   4: 0.318 ms/op
Iteration   5: 0.346 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.257 ±(99.9%) 0.267 ms/op [Average]
  (min, avg, max) = (0.199, 0.257, 0.346), stdev = 0.069
  CI (99.9%): [? 0, 0.524] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 12.88% complete, ETA 03:20:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.215 ms/op
# Warmup Iteration   2: 0.204 ms/op
# Warmup Iteration   3: 0.198 ms/op
# Warmup Iteration   4: 0.194 ms/op
# Warmup Iteration   5: 0.191 ms/op
Iteration   1: 0.194 ms/op
Iteration   2: 0.200 ms/op
Iteration   3: 0.237 ms/op
Iteration   4: 0.323 ms/op
Iteration   5: 0.322 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.255 ±(99.9%) 0.245 ms/op [Average]
  (min, avg, max) = (0.194, 0.255, 0.323), stdev = 0.064
  CI (99.9%): [0.010, 0.500] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 12.96% complete, ETA 03:19:48
# Fork: 1 of 1
# Warmup Iteration   1: 54.807 ms/op
# Warmup Iteration   2: 51.251 ms/op
# Warmup Iteration   3: 44.374 ms/op
# Warmup Iteration   4: 57.534 ms/op
# Warmup Iteration   5: 57.502 ms/op
Iteration   1: 60.917 ms/op
Iteration   2: 55.958 ms/op
Iteration   3: 72.168 ms/op
Iteration   4: 79.008 ms/op
Iteration   5: 77.921 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  69.194 ±(99.9%) 39.692 ms/op [Average]
  (min, avg, max) = (55.958, 69.194, 79.008), stdev = 10.308
  CI (99.9%): [29.502, 108.886] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 13.05% complete, ETA 03:19:32
# Fork: 1 of 1
# Warmup Iteration   1: 56.056 ms/op
# Warmup Iteration   2: 51.019 ms/op
# Warmup Iteration   3: 50.460 ms/op
# Warmup Iteration   4: 50.895 ms/op
# Warmup Iteration   5: 59.844 ms/op
Iteration   1: 50.912 ms/op
Iteration   2: 53.026 ms/op
Iteration   3: 68.477 ms/op
Iteration   4: 74.151 ms/op
Iteration   5: 95.863 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  68.486 ±(99.9%) 70.201 ms/op [Average]
  (min, avg, max) = (50.912, 68.486, 95.863), stdev = 18.231
  CI (99.9%): [? 0, 138.687] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 13.13% complete, ETA 03:19:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.020 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.015, 0.020, 0.028), stdev = 0.005
  CI (99.9%): [? 0, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 13.22% complete, ETA 03:18:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.027 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.020 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.015, 0.020, 0.027), stdev = 0.005
  CI (99.9%): [? 0, 0.041] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 13.30% complete, ETA 03:18:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.428 ms/op
# Warmup Iteration   2: 0.393 ms/op
# Warmup Iteration   3: 0.393 ms/op
# Warmup Iteration   4: 0.385 ms/op
# Warmup Iteration   5: 0.385 ms/op
Iteration   1: 0.392 ms/op
Iteration   2: 0.409 ms/op
Iteration   3: 0.455 ms/op
Iteration   4: 0.606 ms/op
Iteration   5: 0.610 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.494 ±(99.9%) 0.410 ms/op [Average]
  (min, avg, max) = (0.392, 0.494, 0.610), stdev = 0.106
  CI (99.9%): [0.085, 0.904] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 13.38% complete, ETA 03:18:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.437 ms/op
# Warmup Iteration   2: 0.396 ms/op
# Warmup Iteration   3: 0.403 ms/op
# Warmup Iteration   4: 0.384 ms/op
# Warmup Iteration   5: 0.388 ms/op
Iteration   1: 0.403 ms/op
Iteration   2: 0.402 ms/op
Iteration   3: 0.437 ms/op
Iteration   4: 0.639 ms/op
Iteration   5: 0.697 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.515 ±(99.9%) 0.545 ms/op [Average]
  (min, avg, max) = (0.402, 0.515, 0.697), stdev = 0.141
  CI (99.9%): [? 0, 1.060] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 13.47% complete, ETA 03:18:01
# Fork: 1 of 1
# Warmup Iteration   1: 115.500 ms/op
# Warmup Iteration   2: 116.679 ms/op
# Warmup Iteration   3: 93.083 ms/op
# Warmup Iteration   4: 120.700 ms/op
# Warmup Iteration   5: 106.926 ms/op
Iteration   1: 112.696 ms/op
Iteration   2: 113.376 ms/op
Iteration   3: 140.645 ms/op
Iteration   4: 205.582 ms/op
Iteration   5: 207.702 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  156.000 ±(99.9%) 183.252 ms/op [Average]
  (min, avg, max) = (112.696, 156.000, 207.702), stdev = 47.590
  CI (99.9%): [? 0, 339.252] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 13.55% complete, ETA 03:17:49
# Fork: 1 of 1
# Warmup Iteration   1: 115.210 ms/op
# Warmup Iteration   2: 101.269 ms/op
# Warmup Iteration   3: 106.961 ms/op
# Warmup Iteration   4: 99.901 ms/op
# Warmup Iteration   5: 101.188 ms/op
Iteration   1: 107.655 ms/op
Iteration   2: 109.365 ms/op
Iteration   3: 158.953 ms/op
Iteration   4: 168.262 ms/op
Iteration   5: 151.143 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  139.075 ±(99.9%) 109.973 ms/op [Average]
  (min, avg, max) = (107.655, 139.075, 168.262), stdev = 28.560
  CI (99.9%): [29.103, 249.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 13.64% complete, ETA 03:17:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.033 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.059 ms/op
Iteration   5: 0.056 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.043 ±(99.9%) 0.051 ms/op [Average]
  (min, avg, max) = (0.031, 0.043, 0.059), stdev = 0.013
  CI (99.9%): [? 0, 0.094] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 13.72% complete, ETA 03:17:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.055 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.041 ±(99.9%) 0.043 ms/op [Average]
  (min, avg, max) = (0.031, 0.041, 0.055), stdev = 0.011
  CI (99.9%): [? 0, 0.084] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 13.80% complete, ETA 03:17:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.872 ms/op
# Warmup Iteration   2: 0.808 ms/op
# Warmup Iteration   3: 0.805 ms/op
# Warmup Iteration   4: 0.776 ms/op
# Warmup Iteration   5: 0.764 ms/op
Iteration   1: 0.794 ms/op
Iteration   2: 0.777 ms/op
Iteration   3: 0.962 ms/op
Iteration   4: 1.369 ms/op
Iteration   5: 1.192 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  1.019 ±(99.9%) 0.992 ms/op [Average]
  (min, avg, max) = (0.777, 1.019, 1.369), stdev = 0.258
  CI (99.9%): [0.027, 2.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 13.89% complete, ETA 03:16:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.866 ms/op
# Warmup Iteration   2: 0.800 ms/op
# Warmup Iteration   3: 0.827 ms/op
# Warmup Iteration   4: 0.769 ms/op
# Warmup Iteration   5: 0.770 ms/op
Iteration   1: 0.782 ms/op
Iteration   2: 0.771 ms/op
Iteration   3: 0.903 ms/op
Iteration   4: 1.242 ms/op
Iteration   5: 1.352 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  1.010 ±(99.9%) 1.039 ms/op [Average]
  (min, avg, max) = (0.771, 1.010, 1.352), stdev = 0.270
  CI (99.9%): [? 0, 2.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 13.97% complete, ETA 03:16:24
# Fork: 1 of 1
# Warmup Iteration   1: 223.371 ms/op
# Warmup Iteration   2: 199.711 ms/op
# Warmup Iteration   3: 214.971 ms/op
# Warmup Iteration   4: 185.750 ms/op
# Warmup Iteration   5: 204.392 ms/op
Iteration   1: 227.258 ms/op
Iteration   2: 209.670 ms/op
Iteration   3: 306.620 ms/op
Iteration   4: 345.904 ms/op
Iteration   5: 365.953 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  291.081 ±(99.9%) 269.228 ms/op [Average]
  (min, avg, max) = (209.670, 291.081, 365.953), stdev = 69.918
  CI (99.9%): [21.853, 560.309] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 14.06% complete, ETA 03:16:19
# Fork: 1 of 1
# Warmup Iteration   1: 240.556 ms/op
# Warmup Iteration   2: 217.388 ms/op
# Warmup Iteration   3: 210.045 ms/op
# Warmup Iteration   4: 223.057 ms/op
# Warmup Iteration   5: 217.437 ms/op
Iteration   1: 211.549 ms/op
Iteration   2: 222.109 ms/op
Iteration   3: 372.769 ms/op
Iteration   4: 356.930 ms/op
Iteration   5: 299.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  292.472 ±(99.9%) 286.508 ms/op [Average]
  (min, avg, max) = (211.549, 292.472, 372.769), stdev = 74.405
  CI (99.9%): [5.964, 578.980] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 14.14% complete, ETA 03:16:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.072 ms/op
# Warmup Iteration   2: 0.062 ms/op
# Warmup Iteration   3: 0.062 ms/op
# Warmup Iteration   4: 0.061 ms/op
# Warmup Iteration   5: 0.063 ms/op
Iteration   1: 0.064 ms/op
Iteration   2: 0.062 ms/op
Iteration   3: 0.071 ms/op
Iteration   4: 0.099 ms/op
Iteration   5: 0.103 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.080 ±(99.9%) 0.076 ms/op [Average]
  (min, avg, max) = (0.062, 0.080, 0.103), stdev = 0.020
  CI (99.9%): [0.004, 0.156] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 14.23% complete, ETA 03:15:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.062 ms/op
# Warmup Iteration   3: 0.060 ms/op
# Warmup Iteration   4: 0.059 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.062 ms/op
Iteration   2: 0.060 ms/op
Iteration   3: 0.070 ms/op
Iteration   4: 0.111 ms/op
Iteration   5: 0.104 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.081 ±(99.9%) 0.094 ms/op [Average]
  (min, avg, max) = (0.060, 0.081, 0.111), stdev = 0.024
  CI (99.9%): [? 0, 0.175] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 14.31% complete, ETA 03:15:33
# Fork: 1 of 1
# Warmup Iteration   1: 1.813 ms/op
# Warmup Iteration   2: 1.595 ms/op
# Warmup Iteration   3: 1.544 ms/op
# Warmup Iteration   4: 1.534 ms/op
# Warmup Iteration   5: 1.584 ms/op
Iteration   1: 1.544 ms/op
Iteration   2: 1.581 ms/op
Iteration   3: 1.789 ms/op
Iteration   4: 2.830 ms/op
Iteration   5: 2.815 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  2.112 ±(99.9%) 2.526 ms/op [Average]
  (min, avg, max) = (1.544, 2.112, 2.830), stdev = 0.656
  CI (99.9%): [? 0, 4.637] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 14.39% complete, ETA 03:15:15
# Fork: 1 of 1
# Warmup Iteration   1: 1.864 ms/op
# Warmup Iteration   2: 1.590 ms/op
# Warmup Iteration   3: 1.555 ms/op
# Warmup Iteration   4: 1.548 ms/op
# Warmup Iteration   5: 1.539 ms/op
Iteration   1: 1.564 ms/op
Iteration   2: 1.633 ms/op
Iteration   3: 1.869 ms/op
Iteration   4: 2.496 ms/op
Iteration   5: 2.632 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  2.039 ±(99.9%) 1.907 ms/op [Average]
  (min, avg, max) = (1.564, 2.039, 2.632), stdev = 0.495
  CI (99.9%): [0.132, 3.946] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 14.48% complete, ETA 03:14:58
# Fork: 1 of 1
# Warmup Iteration   1: 454.000 ms/op
# Warmup Iteration   2: 425.314 ms/op
# Warmup Iteration   3: 421.746 ms/op
# Warmup Iteration   4: 403.308 ms/op
# Warmup Iteration   5: 418.892 ms/op
Iteration   1: 400.708 ms/op
Iteration   2: 683.111 ms/op
Iteration   3: 556.186 ms/op
Iteration   4: 702.702 ms/op
Iteration   5: 623.743 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  593.290 ±(99.9%) 469.363 ms/op [Average]
  (min, avg, max) = (400.708, 593.290, 702.702), stdev = 121.892
  CI (99.9%): [123.928, 1062.653] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 14.56% complete, ETA 03:14:57
# Fork: 1 of 1
# Warmup Iteration   1: 519.807 ms/op
# Warmup Iteration   2: 436.027 ms/op
# Warmup Iteration   3: 425.046 ms/op
# Warmup Iteration   4: 414.521 ms/op
# Warmup Iteration   5: 449.566 ms/op
Iteration   1: 415.365 ms/op
Iteration   2: 590.049 ms/op
Iteration   3: 637.256 ms/op
Iteration   4: 712.422 ms/op
Iteration   5: 666.326 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  604.284 ±(99.9%) 441.245 ms/op [Average]
  (min, avg, max) = (415.365, 604.284, 712.422), stdev = 114.590
  CI (99.9%): [163.039, 1045.528] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 14.65% complete, ETA 03:14:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.132 ms/op
# Warmup Iteration   2: 0.123 ms/op
# Warmup Iteration   3: 0.118 ms/op
# Warmup Iteration   4: 0.118 ms/op
# Warmup Iteration   5: 0.118 ms/op
Iteration   1: 0.119 ms/op
Iteration   2: 0.125 ms/op
Iteration   3: 0.142 ms/op
Iteration   4: 0.205 ms/op
Iteration   5: 0.203 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.159 ±(99.9%) 0.162 ms/op [Average]
  (min, avg, max) = (0.119, 0.159, 0.205), stdev = 0.042
  CI (99.9%): [? 0, 0.321] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 14.73% complete, ETA 03:14:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.135 ms/op
# Warmup Iteration   2: 0.124 ms/op
# Warmup Iteration   3: 0.120 ms/op
# Warmup Iteration   4: 0.120 ms/op
# Warmup Iteration   5: 0.124 ms/op
Iteration   1: 0.121 ms/op
Iteration   2: 0.125 ms/op
Iteration   3: 0.148 ms/op
Iteration   4: 0.210 ms/op
Iteration   5: 0.213 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.163 ±(99.9%) 0.174 ms/op [Average]
  (min, avg, max) = (0.121, 0.163, 0.213), stdev = 0.045
  CI (99.9%): [? 0, 0.337] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 14.81% complete, ETA 03:14:23
# Fork: 1 of 1
# Warmup Iteration   1: 3.477 ms/op
# Warmup Iteration   2: 3.272 ms/op
# Warmup Iteration   3: 3.284 ms/op
# Warmup Iteration   4: 3.129 ms/op
# Warmup Iteration   5: 3.070 ms/op
Iteration   1: 3.064 ms/op
Iteration   2: 3.134 ms/op
Iteration   3: 3.643 ms/op
Iteration   4: 5.724 ms/op
Iteration   5: 5.355 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  4.184 ±(99.9%) 4.869 ms/op [Average]
  (min, avg, max) = (3.064, 4.184, 5.724), stdev = 1.264
  CI (99.9%): [? 0, 9.053] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 14.90% complete, ETA 03:14:06
# Fork: 1 of 1
# Warmup Iteration   1: 3.541 ms/op
# Warmup Iteration   2: 3.132 ms/op
# Warmup Iteration   3: 3.196 ms/op
# Warmup Iteration   4: 3.089 ms/op
# Warmup Iteration   5: 3.150 ms/op
Iteration   1: 3.110 ms/op
Iteration   2: 3.161 ms/op
Iteration   3: 3.782 ms/op
Iteration   4: 6.263 ms/op
Iteration   5: 5.711 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  4.405 ±(99.9%) 5.701 ms/op [Average]
  (min, avg, max) = (3.110, 4.405, 6.263), stdev = 1.481
  CI (99.9%): [? 0, 10.106] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 14.98% complete, ETA 03:13:48
# Fork: 1 of 1
# Warmup Iteration   1: 956.025 ms/op
# Warmup Iteration   2: 1024.462 ms/op
# Warmup Iteration   3: 810.210 ms/op
# Warmup Iteration   4: 829.341 ms/op
# Warmup Iteration   5: 1147.053 ms/op
Iteration   1: 1728.102 ms/op
Iteration   2: 1300.492 ms/op
Iteration   3: 1113.339 ms/op
Iteration   4: 1189.851 ms/op
Iteration   5: 1339.498 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  1334.256 ±(99.9%) 915.164 ms/op [Average]
  (min, avg, max) = (1113.339, 1334.256, 1728.102), stdev = 237.665
  CI (99.9%): [419.092, 2249.421] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 15.07% complete, ETA 03:14:15
# Fork: 1 of 1
# Warmup Iteration   1: 836.648 ms/op
# Warmup Iteration   2: 1015.092 ms/op
# Warmup Iteration   3: 923.586 ms/op
# Warmup Iteration   4: 799.349 ms/op
# Warmup Iteration   5: 1035.129 ms/op
Iteration   1: 1174.890 ms/op
Iteration   2: 1324.614 ms/op
Iteration   3: 1649.307 ms/op
Iteration   4: 1166.284 ms/op
Iteration   5: 1065.999 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  1276.219 ±(99.9%) 878.257 ms/op [Average]
  (min, avg, max) = (1065.999, 1276.219, 1649.307), stdev = 228.080
  CI (99.9%): [397.962, 2154.475] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 15.15% complete, ETA 03:14:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.280 ms/op
# Warmup Iteration   2: 0.247 ms/op
# Warmup Iteration   3: 0.245 ms/op
# Warmup Iteration   4: 0.241 ms/op
# Warmup Iteration   5: 0.243 ms/op
Iteration   1: 0.248 ms/op
Iteration   2: 0.247 ms/op
Iteration   3: 0.293 ms/op
Iteration   4: 0.441 ms/op
Iteration   5: 0.399 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.325 ±(99.9%) 0.344 ms/op [Average]
  (min, avg, max) = (0.247, 0.325, 0.441), stdev = 0.089
  CI (99.9%): [? 0, 0.669] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 15.24% complete, ETA 03:14:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.276 ms/op
# Warmup Iteration   2: 0.239 ms/op
# Warmup Iteration   3: 0.247 ms/op
# Warmup Iteration   4: 0.240 ms/op
# Warmup Iteration   5: 0.235 ms/op
Iteration   1: 0.244 ms/op
Iteration   2: 0.243 ms/op
Iteration   3: 0.276 ms/op
Iteration   4: 0.447 ms/op
Iteration   5: 0.402 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.322 ±(99.9%) 0.368 ms/op [Average]
  (min, avg, max) = (0.243, 0.322, 0.447), stdev = 0.095
  CI (99.9%): [? 0, 0.690] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 15.32% complete, ETA 03:13:48
# Fork: 1 of 1
# Warmup Iteration   1: 7.327 ms/op
# Warmup Iteration   2: 6.287 ms/op
# Warmup Iteration   3: 6.153 ms/op
# Warmup Iteration   4: 6.121 ms/op
# Warmup Iteration   5: 6.142 ms/op
Iteration   1: 6.289 ms/op
Iteration   2: 6.330 ms/op
Iteration   3: 7.475 ms/op
Iteration   4: 11.567 ms/op
Iteration   5: 11.416 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  8.615 ±(99.9%) 10.278 ms/op [Average]
  (min, avg, max) = (6.289, 8.615, 11.567), stdev = 2.669
  CI (99.9%): [? 0, 18.893] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 15.40% complete, ETA 03:13:31
# Fork: 1 of 1
# Warmup Iteration   1: 7.315 ms/op
# Warmup Iteration   2: 6.549 ms/op
# Warmup Iteration   3: 6.188 ms/op
# Warmup Iteration   4: 6.225 ms/op
# Warmup Iteration   5: 6.167 ms/op
Iteration   1: 6.249 ms/op
Iteration   2: 6.301 ms/op
Iteration   3: 7.270 ms/op
Iteration   4: 11.088 ms/op
Iteration   5: 11.633 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  8.508 ±(99.9%) 10.176 ms/op [Average]
  (min, avg, max) = (6.249, 8.508, 11.633), stdev = 2.643
  CI (99.9%): [? 0, 18.684] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 15.49% complete, ETA 03:13:13
# Fork: 1 of 1
# Warmup Iteration   1: 1909.021 ms/op
# Warmup Iteration   2: 1958.967 ms/op
# Warmup Iteration   3: 1808.278 ms/op
# Warmup Iteration   4: 1873.323 ms/op
# Warmup Iteration   5: 2524.538 ms/op
Iteration   1: 2642.831 ms/op
Iteration   2: 2929.392 ms/op
Iteration   3: 2621.162 ms/op
Iteration   4: 2679.045 ms/op
Iteration   5: 2828.483 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  2740.182 ±(99.9%) 512.940 ms/op [Average]
  (min, avg, max) = (2621.162, 2740.182, 2929.392), stdev = 133.209
  CI (99.9%): [2227.242, 3253.122] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 15.57% complete, ETA 03:14:22
# Fork: 1 of 1
# Warmup Iteration   1: 1845.568 ms/op
# Warmup Iteration   2: 2168.966 ms/op
# Warmup Iteration   3: 1885.837 ms/op
# Warmup Iteration   4: 2513.175 ms/op
# Warmup Iteration   5: 2647.055 ms/op
Iteration   1: 2757.834 ms/op
Iteration   2: 2593.958 ms/op
Iteration   3: 2571.070 ms/op
Iteration   4: 2698.944 ms/op
Iteration   5: 2329.315 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  2590.224 ±(99.9%) 633.801 ms/op [Average]
  (min, avg, max) = (2329.315, 2590.224, 2757.834), stdev = 164.596
  CI (99.9%): [1956.423, 3224.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 15.66% complete, ETA 03:15:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.559 ms/op
# Warmup Iteration   2: 0.504 ms/op
# Warmup Iteration   3: 0.489 ms/op
# Warmup Iteration   4: 0.482 ms/op
# Warmup Iteration   5: 0.493 ms/op
Iteration   1: 0.489 ms/op
Iteration   2: 0.482 ms/op
Iteration   3: 0.584 ms/op
Iteration   4: 0.764 ms/op
Iteration   5: 0.940 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.652 ±(99.9%) 0.760 ms/op [Average]
  (min, avg, max) = (0.482, 0.652, 0.940), stdev = 0.197
  CI (99.9%): [? 0, 1.411] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 15.74% complete, ETA 03:15:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.548 ms/op
# Warmup Iteration   2: 0.483 ms/op
# Warmup Iteration   3: 0.493 ms/op
# Warmup Iteration   4: 0.478 ms/op
# Warmup Iteration   5: 0.483 ms/op
Iteration   1: 0.481 ms/op
Iteration   2: 0.482 ms/op
Iteration   3: 0.608 ms/op
Iteration   4: 0.894 ms/op
Iteration   5: 0.750 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.643 ±(99.9%) 0.688 ms/op [Average]
  (min, avg, max) = (0.481, 0.643, 0.894), stdev = 0.179
  CI (99.9%): [? 0, 1.331] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 15.82% complete, ETA 03:14:58
# Fork: 1 of 1
# Warmup Iteration   1: 17.123 ms/op
# Warmup Iteration   2: 12.355 ms/op
# Warmup Iteration   3: 12.485 ms/op
# Warmup Iteration   4: 12.477 ms/op
# Warmup Iteration   5: 12.314 ms/op
Iteration   1: 12.200 ms/op
Iteration   2: 12.491 ms/op
Iteration   3: 15.090 ms/op
Iteration   4: 20.403 ms/op
Iteration   5: 21.241 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  16.285 ±(99.9%) 16.566 ms/op [Average]
  (min, avg, max) = (12.200, 16.285, 21.241), stdev = 4.302
  CI (99.9%): [? 0, 32.851] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 15.91% complete, ETA 03:14:40
# Fork: 1 of 1
# Warmup Iteration   1: 17.431 ms/op
# Warmup Iteration   2: 12.362 ms/op
# Warmup Iteration   3: 12.792 ms/op
# Warmup Iteration   4: 12.494 ms/op
# Warmup Iteration   5: 12.218 ms/op
Iteration   1: 12.199 ms/op
Iteration   2: 12.511 ms/op
Iteration   3: 14.187 ms/op
Iteration   4: 18.754 ms/op
Iteration   5: 20.306 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  15.591 ±(99.9%) 14.304 ms/op [Average]
  (min, avg, max) = (12.199, 15.591, 20.306), stdev = 3.715
  CI (99.9%): [1.287, 29.895] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 15.99% complete, ETA 03:14:22
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark(ImmutableGetBenchmark.java:60)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 16.08% complete, ETA 03:14:18
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark(ImmutableGetBenchmark.java:60)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 16.16% complete, ETA 03:14:38
# Fork: 1 of 1
# Warmup Iteration   1: 1.150 ms/op
# Warmup Iteration   2: 1.062 ms/op
# Warmup Iteration   3: 1.012 ms/op
# Warmup Iteration   4: 1.019 ms/op
# Warmup Iteration   5: 0.985 ms/op
Iteration   1: 0.981 ms/op
Iteration   2: 0.992 ms/op
Iteration   3: 1.189 ms/op
Iteration   4: 1.781 ms/op
Iteration   5: 1.959 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  1.380 ±(99.9%) 1.767 ms/op [Average]
  (min, avg, max) = (0.981, 1.380, 1.959), stdev = 0.459
  CI (99.9%): [? 0, 3.147] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 16.25% complete, ETA 03:14:20
# Fork: 1 of 1
# Warmup Iteration   1: 1.109 ms/op
# Warmup Iteration   2: 0.992 ms/op
# Warmup Iteration   3: 1.008 ms/op
# Warmup Iteration   4: 1.038 ms/op
# Warmup Iteration   5: 1.005 ms/op
Iteration   1: 1.002 ms/op
Iteration   2: 0.995 ms/op
Iteration   3: 1.194 ms/op
Iteration   4: 1.716 ms/op
Iteration   5: 1.716 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  1.325 ±(99.9%) 1.410 ms/op [Average]
  (min, avg, max) = (0.995, 1.325, 1.716), stdev = 0.366
  CI (99.9%): [? 0, 2.734] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 16.33% complete, ETA 03:14:01
# Fork: 1 of 1
# Warmup Iteration   1: 36.231 ms/op
# Warmup Iteration   2: 25.073 ms/op
# Warmup Iteration   3: 24.432 ms/op
# Warmup Iteration   4: 25.059 ms/op
# Warmup Iteration   5: 24.765 ms/op
Iteration   1: 24.845 ms/op
Iteration   2: 24.765 ms/op
Iteration   3: 30.380 ms/op
Iteration   4: 44.520 ms/op
Iteration   5: 40.342 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  32.971 ±(99.9%) 34.858 ms/op [Average]
  (min, avg, max) = (24.765, 32.971, 44.520), stdev = 9.052
  CI (99.9%): [? 0, 67.828] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 16.41% complete, ETA 03:13:44
# Fork: 1 of 1
# Warmup Iteration   1: 41.478 ms/op
# Warmup Iteration   2: 24.897 ms/op
# Warmup Iteration   3: 24.922 ms/op
# Warmup Iteration   4: 26.138 ms/op
# Warmup Iteration   5: 25.028 ms/op
Iteration   1: 24.744 ms/op
Iteration   2: 25.261 ms/op
Iteration   3: 32.952 ms/op
Iteration   4: 43.258 ms/op
Iteration   5: 42.060 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  33.655 ±(99.9%) 34.075 ms/op [Average]
  (min, avg, max) = (24.744, 33.655, 43.258), stdev = 8.849
  CI (99.9%): [? 0, 67.730] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 16.50% complete, ETA 03:13:28
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark(ImmutableGetBenchmark.java:60)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 16.58% complete, ETA 03:13:12
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark(ImmutableGetBenchmark.java:60)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.baselineGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 16.67% complete, ETA 03:13:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 16.75% complete, ETA 03:12:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 16.84% complete, ETA 03:12:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 16.92% complete, ETA 03:12:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 17.00% complete, ETA 03:12:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 17.09% complete, ETA 03:11:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 17.17% complete, ETA 03:11:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 17.26% complete, ETA 03:11:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 17.34% complete, ETA 03:10:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 17.42% complete, ETA 03:10:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 17.51% complete, ETA 03:10:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 17.59% complete, ETA 03:10:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 17.68% complete, ETA 03:09:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 17.76% complete, ETA 03:09:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 17.85% complete, ETA 03:09:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 17.93% complete, ETA 03:08:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 18.01% complete, ETA 03:08:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 18.10% complete, ETA 03:08:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 18.18% complete, ETA 03:08:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 18.27% complete, ETA 03:07:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 18.35% complete, ETA 03:07:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 18.43% complete, ETA 03:07:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 18.52% complete, ETA 03:06:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 18.60% complete, ETA 03:06:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 18.69% complete, ETA 03:06:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 18.77% complete, ETA 03:06:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 18.86% complete, ETA 03:05:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 10?³, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 18.94% complete, ETA 03:05:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 10?³, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 19.02% complete, ETA 03:05:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.009 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.002
  CI (99.9%): [0.002, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 19.11% complete, ETA 03:05:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.010 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.014), stdev = 0.003
  CI (99.9%): [? 0, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 19.19% complete, ETA 03:04:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [? 10??, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 19.28% complete, ETA 03:04:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 19.36% complete, ETA 03:04:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.014 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.019), stdev = 0.003
  CI (99.9%): [0.001, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 19.44% complete, ETA 03:03:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.010 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.013), stdev = 0.002
  CI (99.9%): [0.002, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 19.53% complete, ETA 03:03:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.020 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.014, 0.020, 0.028), stdev = 0.006
  CI (99.9%): [? 0, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 19.61% complete, ETA 03:03:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.020 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.015, 0.020, 0.030), stdev = 0.006
  CI (99.9%): [? 0, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 19.70% complete, ETA 03:03:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.016 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.022), stdev = 0.005
  CI (99.9%): [? 0, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 19.78% complete, ETA 03:02:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.015 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.020), stdev = 0.004
  CI (99.9%): [? 10??, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 19.87% complete, ETA 03:02:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.020 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.016, 0.020, 0.025), stdev = 0.004
  CI (99.9%): [0.004, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 19.95% complete, ETA 03:02:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.020 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.016, 0.020, 0.026), stdev = 0.005
  CI (99.9%): [0.001, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 20.03% complete, ETA 03:02:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.040 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.040 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.029, 0.040, 0.050), stdev = 0.010
  CI (99.9%): [? 0, 0.080] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 20.12% complete, ETA 03:01:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.052 ms/op
Iteration   5: 0.044 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.038 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.029, 0.038, 0.052), stdev = 0.010
  CI (99.9%): [? 0, 0.076] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 20.20% complete, ETA 03:01:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.031 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.024, 0.031, 0.042), stdev = 0.008
  CI (99.9%): [? 0, 0.062] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 20.29% complete, ETA 03:01:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.031 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.024, 0.031, 0.041), stdev = 0.008
  CI (99.9%): [? 0, 0.062] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 20.37% complete, ETA 03:01:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.035 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.067 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.043 ±(99.9%) 0.058 ms/op [Average]
  (min, avg, max) = (0.032, 0.043, 0.067), stdev = 0.015
  CI (99.9%): [? 0, 0.101] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 20.45% complete, ETA 03:00:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.035 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.047 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.039 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.031, 0.039, 0.048), stdev = 0.008
  CI (99.9%): [0.006, 0.071] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 20.54% complete, ETA 03:00:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.057 ms/op
# Warmup Iteration   5: 0.062 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.058 ms/op
Iteration   3: 0.069 ms/op
Iteration   4: 0.104 ms/op
Iteration   5: 0.100 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.078 ±(99.9%) 0.089 ms/op [Average]
  (min, avg, max) = (0.057, 0.078, 0.104), stdev = 0.023
  CI (99.9%): [? 0, 0.167] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 20.62% complete, ETA 03:00:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.066 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.064 ms/op
Iteration   1: 0.056 ms/op
Iteration   2: 0.056 ms/op
Iteration   3: 0.072 ms/op
Iteration   4: 0.091 ms/op
Iteration   5: 0.102 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.075 ±(99.9%) 0.079 ms/op [Average]
  (min, avg, max) = (0.056, 0.075, 0.102), stdev = 0.020
  CI (99.9%): [? 0, 0.154] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 20.71% complete, ETA 03:00:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
# Warmup Iteration   2: 0.047 ms/op
# Warmup Iteration   3: 0.047 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.054 ms/op
Iteration   4: 0.072 ms/op
Iteration   5: 0.076 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.059 ±(99.9%) 0.053 ms/op [Average]
  (min, avg, max) = (0.047, 0.059, 0.076), stdev = 0.014
  CI (99.9%): [0.006, 0.113] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 20.79% complete, ETA 02:59:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.048 ms/op
# Warmup Iteration   3: 0.048 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.079 ms/op
Iteration   5: 0.084 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.063 ±(99.9%) 0.067 ms/op [Average]
  (min, avg, max) = (0.047, 0.063, 0.084), stdev = 0.017
  CI (99.9%): [? 0, 0.130] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 20.88% complete, ETA 02:59:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.063 ms/op
# Warmup Iteration   2: 0.058 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.061 ms/op
Iteration   3: 0.075 ms/op
Iteration   4: 0.108 ms/op
Iteration   5: 0.105 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.081 ±(99.9%) 0.093 ms/op [Average]
  (min, avg, max) = (0.057, 0.081, 0.108), stdev = 0.024
  CI (99.9%): [? 0, 0.174] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 20.96% complete, ETA 02:59:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.063 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.058 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.071 ms/op
Iteration   4: 0.102 ms/op
Iteration   5: 0.114 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.081 ±(99.9%) 0.098 ms/op [Average]
  (min, avg, max) = (0.059, 0.081, 0.114), stdev = 0.025
  CI (99.9%): [? 0, 0.179] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 21.04% complete, ETA 02:59:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.134 ms/op
# Warmup Iteration   2: 0.117 ms/op
# Warmup Iteration   3: 0.114 ms/op
# Warmup Iteration   4: 0.116 ms/op
# Warmup Iteration   5: 0.124 ms/op
Iteration   1: 0.119 ms/op
Iteration   2: 0.114 ms/op
Iteration   3: 0.134 ms/op
Iteration   4: 0.200 ms/op
Iteration   5: 0.189 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.151 ±(99.9%) 0.155 ms/op [Average]
  (min, avg, max) = (0.114, 0.151, 0.200), stdev = 0.040
  CI (99.9%): [? 0, 0.307] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 21.13% complete, ETA 02:58:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.134 ms/op
# Warmup Iteration   2: 0.117 ms/op
# Warmup Iteration   3: 0.119 ms/op
# Warmup Iteration   4: 0.112 ms/op
# Warmup Iteration   5: 0.123 ms/op
Iteration   1: 0.114 ms/op
Iteration   2: 0.113 ms/op
Iteration   3: 0.148 ms/op
Iteration   4: 0.223 ms/op
Iteration   5: 0.207 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.161 ±(99.9%) 0.198 ms/op [Average]
  (min, avg, max) = (0.113, 0.161, 0.223), stdev = 0.052
  CI (99.9%): [? 0, 0.359] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 21.21% complete, ETA 02:58:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.095 ms/op
# Warmup Iteration   2: 0.095 ms/op
# Warmup Iteration   3: 0.093 ms/op
# Warmup Iteration   4: 0.093 ms/op
# Warmup Iteration   5: 0.095 ms/op
Iteration   1: 0.096 ms/op
Iteration   2: 0.094 ms/op
Iteration   3: 0.105 ms/op
Iteration   4: 0.152 ms/op
Iteration   5: 0.144 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.118 ±(99.9%) 0.107 ms/op [Average]
  (min, avg, max) = (0.094, 0.118, 0.152), stdev = 0.028
  CI (99.9%): [0.012, 0.225] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 21.30% complete, ETA 02:58:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.095 ms/op
# Warmup Iteration   2: 0.095 ms/op
# Warmup Iteration   3: 0.095 ms/op
# Warmup Iteration   4: 0.096 ms/op
# Warmup Iteration   5: 0.097 ms/op
Iteration   1: 0.096 ms/op
Iteration   2: 0.094 ms/op
Iteration   3: 0.110 ms/op
Iteration   4: 0.154 ms/op
Iteration   5: 0.171 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.125 ±(99.9%) 0.136 ms/op [Average]
  (min, avg, max) = (0.094, 0.125, 0.171), stdev = 0.035
  CI (99.9%): [? 0, 0.261] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 21.38% complete, ETA 02:58:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.122 ms/op
# Warmup Iteration   2: 0.115 ms/op
# Warmup Iteration   3: 0.113 ms/op
# Warmup Iteration   4: 0.115 ms/op
# Warmup Iteration   5: 0.117 ms/op
Iteration   1: 0.115 ms/op
Iteration   2: 0.113 ms/op
Iteration   3: 0.132 ms/op
Iteration   4: 0.192 ms/op
Iteration   5: 0.172 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.145 ±(99.9%) 0.136 ms/op [Average]
  (min, avg, max) = (0.113, 0.145, 0.192), stdev = 0.035
  CI (99.9%): [0.009, 0.281] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 21.46% complete, ETA 02:57:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.125 ms/op
# Warmup Iteration   2: 0.119 ms/op
# Warmup Iteration   3: 0.116 ms/op
# Warmup Iteration   4: 0.116 ms/op
# Warmup Iteration   5: 0.117 ms/op
Iteration   1: 0.118 ms/op
Iteration   2: 0.116 ms/op
Iteration   3: 0.131 ms/op
Iteration   4: 0.206 ms/op
Iteration   5: 0.206 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.155 ±(99.9%) 0.180 ms/op [Average]
  (min, avg, max) = (0.116, 0.155, 0.206), stdev = 0.047
  CI (99.9%): [? 0, 0.336] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 21.55% complete, ETA 02:57:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.273 ms/op
# Warmup Iteration   2: 0.235 ms/op
# Warmup Iteration   3: 0.231 ms/op
# Warmup Iteration   4: 0.268 ms/op
# Warmup Iteration   5: 0.275 ms/op
Iteration   1: 0.232 ms/op
Iteration   2: 0.232 ms/op
Iteration   3: 0.297 ms/op
Iteration   4: 0.421 ms/op
Iteration   5: 0.357 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.308 ±(99.9%) 0.316 ms/op [Average]
  (min, avg, max) = (0.232, 0.308, 0.421), stdev = 0.082
  CI (99.9%): [? 0, 0.624] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 21.63% complete, ETA 02:57:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.281 ms/op
# Warmup Iteration   2: 0.238 ms/op
# Warmup Iteration   3: 0.231 ms/op
# Warmup Iteration   4: 0.233 ms/op
# Warmup Iteration   5: 0.249 ms/op
Iteration   1: 0.232 ms/op
Iteration   2: 0.231 ms/op
Iteration   3: 0.323 ms/op
Iteration   4: 0.378 ms/op
Iteration   5: 0.355 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.304 ±(99.9%) 0.264 ms/op [Average]
  (min, avg, max) = (0.231, 0.304, 0.378), stdev = 0.069
  CI (99.9%): [0.039, 0.568] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 21.72% complete, ETA 02:57:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.191 ms/op
# Warmup Iteration   2: 0.189 ms/op
# Warmup Iteration   3: 0.190 ms/op
# Warmup Iteration   4: 0.191 ms/op
# Warmup Iteration   5: 0.192 ms/op
Iteration   1: 0.190 ms/op
Iteration   2: 0.190 ms/op
Iteration   3: 0.210 ms/op
Iteration   4: 0.301 ms/op
Iteration   5: 0.307 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.239 ±(99.9%) 0.229 ms/op [Average]
  (min, avg, max) = (0.190, 0.239, 0.307), stdev = 0.060
  CI (99.9%): [0.010, 0.469] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 21.80% complete, ETA 02:56:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.195 ms/op
# Warmup Iteration   2: 0.189 ms/op
# Warmup Iteration   3: 0.191 ms/op
# Warmup Iteration   4: 0.189 ms/op
# Warmup Iteration   5: 0.193 ms/op
Iteration   1: 0.191 ms/op
Iteration   2: 0.192 ms/op
Iteration   3: 0.208 ms/op
Iteration   4: 0.304 ms/op
Iteration   5: 0.313 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.242 ±(99.9%) 0.238 ms/op [Average]
  (min, avg, max) = (0.191, 0.242, 0.313), stdev = 0.062
  CI (99.9%): [0.004, 0.479] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 21.89% complete, ETA 02:56:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.253 ms/op
# Warmup Iteration   2: 0.226 ms/op
# Warmup Iteration   3: 0.225 ms/op
# Warmup Iteration   4: 0.236 ms/op
# Warmup Iteration   5: 0.234 ms/op
Iteration   1: 0.235 ms/op
Iteration   2: 0.232 ms/op
Iteration   3: 0.277 ms/op
Iteration   4: 0.386 ms/op
Iteration   5: 0.374 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.301 ±(99.9%) 0.287 ms/op [Average]
  (min, avg, max) = (0.232, 0.301, 0.386), stdev = 0.075
  CI (99.9%): [0.014, 0.588] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 21.97% complete, ETA 02:56:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.245 ms/op
# Warmup Iteration   2: 0.238 ms/op
# Warmup Iteration   3: 0.235 ms/op
# Warmup Iteration   4: 0.230 ms/op
# Warmup Iteration   5: 0.235 ms/op
Iteration   1: 0.238 ms/op
Iteration   2: 0.240 ms/op
Iteration   3: 0.271 ms/op
Iteration   4: 0.381 ms/op
Iteration   5: 0.378 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.302 ±(99.9%) 0.278 ms/op [Average]
  (min, avg, max) = (0.238, 0.302, 0.381), stdev = 0.072
  CI (99.9%): [0.024, 0.579] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 22.05% complete, ETA 02:56:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.529 ms/op
# Warmup Iteration   2: 0.458 ms/op
# Warmup Iteration   3: 0.472 ms/op
# Warmup Iteration   4: 0.455 ms/op
# Warmup Iteration   5: 0.483 ms/op
Iteration   1: 0.450 ms/op
Iteration   2: 0.455 ms/op
Iteration   3: 0.557 ms/op
Iteration   4: 0.814 ms/op
Iteration   5: 0.745 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.604 ±(99.9%) 0.645 ms/op [Average]
  (min, avg, max) = (0.450, 0.604, 0.814), stdev = 0.167
  CI (99.9%): [? 0, 1.249] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 22.14% complete, ETA 02:55:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.539 ms/op
# Warmup Iteration   2: 0.466 ms/op
# Warmup Iteration   3: 0.452 ms/op
# Warmup Iteration   4: 0.462 ms/op
# Warmup Iteration   5: 0.516 ms/op
Iteration   1: 0.471 ms/op
Iteration   2: 0.457 ms/op
Iteration   3: 0.569 ms/op
Iteration   4: 0.841 ms/op
Iteration   5: 0.786 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  0.625 ±(99.9%) 0.687 ms/op [Average]
  (min, avg, max) = (0.457, 0.625, 0.841), stdev = 0.179
  CI (99.9%): [? 0, 1.312] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 22.22% complete, ETA 02:55:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 22.31% complete, ETA 02:55:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 22.39% complete, ETA 02:55:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 22.47% complete, ETA 02:55:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 22.56% complete, ETA 02:55:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 22.64% complete, ETA 02:54:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 22.73% complete, ETA 02:54:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 22.81% complete, ETA 02:54:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 22.90% complete, ETA 02:54:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 22.98% complete, ETA 02:54:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 23.06% complete, ETA 02:54:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 23.15% complete, ETA 02:53:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.003 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 23.23% complete, ETA 02:53:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 23.32% complete, ETA 02:53:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10?³, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 23.40% complete, ETA 02:53:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.003 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.006), stdev = 0.002
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 23.48% complete, ETA 02:53:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 23.57% complete, ETA 02:52:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 23.65% complete, ETA 02:52:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.006 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 23.74% complete, ETA 02:52:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 23.82% complete, ETA 02:52:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 23.91% complete, ETA 02:52:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.006 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 23.99% complete, ETA 02:52:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 24.07% complete, ETA 02:51:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.011 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.014), stdev = 0.003
  CI (99.9%): [? 10??, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 24.16% complete, ETA 02:51:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.011 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.019), stdev = 0.005
  CI (99.9%): [? 0, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 24.24% complete, ETA 02:51:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.007 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.008), stdev = 0.001
  CI (99.9%): [0.002, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 24.33% complete, ETA 02:51:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.001
  CI (99.9%): [0.002, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 24.41% complete, ETA 02:51:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.011 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.014), stdev = 0.003
  CI (99.9%): [? 10??, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 24.49% complete, ETA 02:50:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.010 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.014), stdev = 0.003
  CI (99.9%): [? 0, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 24.58% complete, ETA 02:50:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.032 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.022 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.015, 0.022, 0.032), stdev = 0.007
  CI (99.9%): [? 0, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 24.66% complete, ETA 02:50:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.020 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.015, 0.020, 0.030), stdev = 0.006
  CI (99.9%): [? 0, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 24.75% complete, ETA 02:50:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.014 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.017), stdev = 0.002
  CI (99.9%): [0.006, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 24.83% complete, ETA 02:50:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.014 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.017), stdev = 0.002
  CI (99.9%): [0.005, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 24.92% complete, ETA 02:49:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.046 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.025 ±(99.9%) 0.047 ms/op [Average]
  (min, avg, max) = (0.018, 0.025, 0.046), stdev = 0.012
  CI (99.9%): [? 0, 0.071] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 25.00% complete, ETA 02:49:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.023 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.016, 0.023, 0.036), stdev = 0.008
  CI (99.9%): [? 0, 0.055] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 25.08% complete, ETA 02:49:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.034 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.034 ms/op
Iteration   1: 0.038 ms/op
Iteration   2: 0.033 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.065 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.045 ±(99.9%) 0.050 ms/op [Average]
  (min, avg, max) = (0.033, 0.045, 0.065), stdev = 0.013
  CI (99.9%): [? 0, 0.096] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 25.17% complete, ETA 02:49:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.039 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.035 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.042 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.051 ms/op
Iteration   5: 0.065 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.045 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (0.035, 0.045, 0.065), stdev = 0.013
  CI (99.9%): [? 0, 0.094] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 25.25% complete, ETA 02:49:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.030 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.022, 0.030, 0.035), stdev = 0.005
  CI (99.9%): [0.011, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 25.34% complete, ETA 02:49:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.032 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.021, 0.032, 0.037), stdev = 0.006
  CI (99.9%): [0.008, 0.056] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 25.42% complete, ETA 02:48:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.040 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.040 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.084 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.048 ±(99.9%) 0.082 ms/op [Average]
  (min, avg, max) = (0.032, 0.048, 0.084), stdev = 0.021
  CI (99.9%): [? 0, 0.130] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 25.51% complete, ETA 02:48:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.033 ms/op
# Warmup Iteration   3: 0.032 ms/op
# Warmup Iteration   4: 0.039 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.046 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.041 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.030, 0.041, 0.052), stdev = 0.009
  CI (99.9%): [0.006, 0.077] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 25.59% complete, ETA 02:48:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.078 ms/op
# Warmup Iteration   2: 0.066 ms/op
# Warmup Iteration   3: 0.068 ms/op
# Warmup Iteration   4: 0.070 ms/op
# Warmup Iteration   5: 0.070 ms/op
Iteration   1: 0.072 ms/op
Iteration   2: 0.070 ms/op
Iteration   3: 0.083 ms/op
Iteration   4: 0.124 ms/op
Iteration   5: 0.102 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.090 ±(99.9%) 0.088 ms/op [Average]
  (min, avg, max) = (0.070, 0.090, 0.124), stdev = 0.023
  CI (99.9%): [0.002, 0.178] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 25.67% complete, ETA 02:48:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.078 ms/op
# Warmup Iteration   2: 0.076 ms/op
# Warmup Iteration   3: 0.074 ms/op
# Warmup Iteration   4: 0.072 ms/op
# Warmup Iteration   5: 0.080 ms/op
Iteration   1: 0.068 ms/op
Iteration   2: 0.071 ms/op
Iteration   3: 0.100 ms/op
Iteration   4: 0.113 ms/op
Iteration   5: 0.123 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.095 ±(99.9%) 0.095 ms/op [Average]
  (min, avg, max) = (0.068, 0.095, 0.123), stdev = 0.025
  CI (99.9%): [? 10??, 0.190] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 25.76% complete, ETA 02:47:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.055 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.075 ms/op
Iteration   2: 0.056 ms/op
Iteration   3: 0.080 ms/op
Iteration   4: 0.063 ms/op
Iteration   5: 0.062 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.067 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.056, 0.067, 0.080), stdev = 0.010
  CI (99.9%): [0.029, 0.105] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 25.84% complete, ETA 02:47:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
# Warmup Iteration   2: 0.047 ms/op
# Warmup Iteration   3: 0.054 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.056 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.068 ms/op
Iteration   3: 0.086 ms/op
Iteration   4: 0.116 ms/op
Iteration   5: 0.102 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.085 ±(99.9%) 0.095 ms/op [Average]
  (min, avg, max) = (0.055, 0.085, 0.116), stdev = 0.025
  CI (99.9%): [? 0, 0.181] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 25.93% complete, ETA 02:47:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.274 ms/op
# Warmup Iteration   2: 0.265 ms/op
# Warmup Iteration   3: 0.202 ms/op
# Warmup Iteration   4: 0.200 ms/op
# Warmup Iteration   5: 0.153 ms/op
Iteration   1: 0.174 ms/op
Iteration   2: 0.193 ms/op
Iteration   3: 0.172 ms/op
Iteration   4: 0.174 ms/op
Iteration   5: 0.133 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.169 ±(99.9%) 0.084 ms/op [Average]
  (min, avg, max) = (0.133, 0.169, 0.193), stdev = 0.022
  CI (99.9%): [0.085, 0.253] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 26.01% complete, ETA 02:47:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.070 ms/op
# Warmup Iteration   3: 0.098 ms/op
# Warmup Iteration   4: 0.062 ms/op
# Warmup Iteration   5: 0.111 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.092 ms/op
Iteration   3: 0.113 ms/op
Iteration   4: 0.133 ms/op
Iteration   5: 0.088 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.099 ±(99.9%) 0.094 ms/op [Average]
  (min, avg, max) = (0.070, 0.099, 0.133), stdev = 0.024
  CI (99.9%): [0.006, 0.193] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 26.09% complete, ETA 02:47:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.159 ms/op
# Warmup Iteration   2: 0.155 ms/op
# Warmup Iteration   3: 0.167 ms/op
# Warmup Iteration   4: 0.161 ms/op
# Warmup Iteration   5: 0.161 ms/op
Iteration   1: 0.128 ms/op
Iteration   2: 0.190 ms/op
Iteration   3: 0.300 ms/op
Iteration   4: 0.523 ms/op
Iteration   5: 0.348 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.298 ±(99.9%) 0.589 ms/op [Average]
  (min, avg, max) = (0.128, 0.298, 0.523), stdev = 0.153
  CI (99.9%): [? 0, 0.887] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 26.18% complete, ETA 02:47:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.163 ms/op
# Warmup Iteration   2: 0.138 ms/op
# Warmup Iteration   3: 0.139 ms/op
# Warmup Iteration   4: 0.182 ms/op
# Warmup Iteration   5: 0.185 ms/op
Iteration   1: 0.148 ms/op
Iteration   2: 0.178 ms/op
Iteration   3: 0.182 ms/op
Iteration   4: 0.210 ms/op
Iteration   5: 0.331 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.210 ±(99.9%) 0.274 ms/op [Average]
  (min, avg, max) = (0.148, 0.210, 0.331), stdev = 0.071
  CI (99.9%): [? 0, 0.484] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 26.26% complete, ETA 02:46:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.100 ms/op
# Warmup Iteration   2: 0.097 ms/op
# Warmup Iteration   3: 0.105 ms/op
# Warmup Iteration   4: 0.087 ms/op
# Warmup Iteration   5: 0.100 ms/op
Iteration   1: 0.131 ms/op
Iteration   2: 0.101 ms/op
Iteration   3: 0.159 ms/op
Iteration   4: 0.179 ms/op
Iteration   5: 0.153 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.145 ±(99.9%) 0.115 ms/op [Average]
  (min, avg, max) = (0.101, 0.145, 0.179), stdev = 0.030
  CI (99.9%): [0.029, 0.260] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 26.35% complete, ETA 02:46:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.109 ms/op
# Warmup Iteration   2: 0.120 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.121 ms/op
# Warmup Iteration   5: 0.116 ms/op
Iteration   1: 0.084 ms/op
Iteration   2: 0.209 ms/op
Iteration   3: 0.109 ms/op
Iteration   4: 0.126 ms/op
Iteration   5: 0.128 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.131 ±(99.9%) 0.180 ms/op [Average]
  (min, avg, max) = (0.084, 0.131, 0.209), stdev = 0.047
  CI (99.9%): [? 0, 0.311] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 26.43% complete, ETA 02:46:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.138 ms/op
# Warmup Iteration   2: 0.137 ms/op
# Warmup Iteration   3: 0.146 ms/op
# Warmup Iteration   4: 0.120 ms/op
# Warmup Iteration   5: 0.177 ms/op
Iteration   1: 0.121 ms/op
Iteration   2: 0.122 ms/op
Iteration   3: 0.143 ms/op
Iteration   4: 0.315 ms/op
Iteration   5: 0.219 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.184 ±(99.9%) 0.322 ms/op [Average]
  (min, avg, max) = (0.121, 0.184, 0.315), stdev = 0.084
  CI (99.9%): [? 0, 0.506] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 26.52% complete, ETA 02:46:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.134 ms/op
# Warmup Iteration   2: 0.132 ms/op
# Warmup Iteration   3: 0.120 ms/op
# Warmup Iteration   4: 0.133 ms/op
# Warmup Iteration   5: 0.115 ms/op
Iteration   1: 0.112 ms/op
Iteration   2: 0.120 ms/op
Iteration   3: 0.259 ms/op
Iteration   4: 0.175 ms/op
Iteration   5: 0.182 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.170 ±(99.9%) 0.227 ms/op [Average]
  (min, avg, max) = (0.112, 0.170, 0.259), stdev = 0.059
  CI (99.9%): [? 0, 0.397] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 26.60% complete, ETA 02:45:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.292 ms/op
# Warmup Iteration   2: 0.267 ms/op
# Warmup Iteration   3: 0.274 ms/op
# Warmup Iteration   4: 0.268 ms/op
# Warmup Iteration   5: 0.266 ms/op
Iteration   1: 0.253 ms/op
Iteration   2: 0.271 ms/op
Iteration   3: 0.309 ms/op
Iteration   4: 0.628 ms/op
Iteration   5: 0.458 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.384 ±(99.9%) 0.610 ms/op [Average]
  (min, avg, max) = (0.253, 0.384, 0.628), stdev = 0.159
  CI (99.9%): [? 0, 0.994] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 26.68% complete, ETA 02:45:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.299 ms/op
# Warmup Iteration   2: 0.269 ms/op
# Warmup Iteration   3: 0.304 ms/op
# Warmup Iteration   4: 0.278 ms/op
# Warmup Iteration   5: 0.297 ms/op
Iteration   1: 0.264 ms/op
Iteration   2: 0.264 ms/op
Iteration   3: 0.315 ms/op
Iteration   4: 0.450 ms/op
Iteration   5: 0.543 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.367 ±(99.9%) 0.479 ms/op [Average]
  (min, avg, max) = (0.264, 0.367, 0.543), stdev = 0.124
  CI (99.9%): [? 0, 0.846] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 26.77% complete, ETA 02:45:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.194 ms/op
# Warmup Iteration   2: 0.184 ms/op
# Warmup Iteration   3: 0.215 ms/op
# Warmup Iteration   4: 0.174 ms/op
# Warmup Iteration   5: 0.170 ms/op
Iteration   1: 0.285 ms/op
Iteration   2: 0.181 ms/op
Iteration   3: 0.192 ms/op
Iteration   4: 0.290 ms/op
Iteration   5: 0.230 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.235 ±(99.9%) 0.196 ms/op [Average]
  (min, avg, max) = (0.181, 0.235, 0.290), stdev = 0.051
  CI (99.9%): [0.039, 0.432] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 26.85% complete, ETA 02:45:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.205 ms/op
# Warmup Iteration   2: 0.176 ms/op
# Warmup Iteration   3: 0.213 ms/op
# Warmup Iteration   4: 0.161 ms/op
# Warmup Iteration   5: 0.171 ms/op
Iteration   1: 0.253 ms/op
Iteration   2: 0.157 ms/op
Iteration   3: 0.206 ms/op
Iteration   4: 0.233 ms/op
Iteration   5: 0.250 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.220 ±(99.9%) 0.153 ms/op [Average]
  (min, avg, max) = (0.157, 0.220, 0.253), stdev = 0.040
  CI (99.9%): [0.067, 0.373] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 26.94% complete, ETA 02:45:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.284 ms/op
# Warmup Iteration   2: 0.246 ms/op
# Warmup Iteration   3: 0.269 ms/op
# Warmup Iteration   4: 0.291 ms/op
# Warmup Iteration   5: 0.237 ms/op
Iteration   1: 0.261 ms/op
Iteration   2: 0.244 ms/op
Iteration   3: 0.382 ms/op
Iteration   4: 0.377 ms/op
Iteration   5: 0.363 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.326 ±(99.9%) 0.259 ms/op [Average]
  (min, avg, max) = (0.244, 0.326, 0.382), stdev = 0.067
  CI (99.9%): [0.067, 0.585] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 27.02% complete, ETA 02:44:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.277 ms/op
# Warmup Iteration   2: 0.257 ms/op
# Warmup Iteration   3: 0.222 ms/op
# Warmup Iteration   4: 0.279 ms/op
# Warmup Iteration   5: 0.238 ms/op
Iteration   1: 0.218 ms/op
Iteration   2: 0.236 ms/op
Iteration   3: 0.386 ms/op
Iteration   4: 0.363 ms/op
Iteration   5: 0.290 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.299 ±(99.9%) 0.287 ms/op [Average]
  (min, avg, max) = (0.218, 0.299, 0.386), stdev = 0.075
  CI (99.9%): [0.011, 0.586] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 27.10% complete, ETA 02:44:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.581 ms/op
# Warmup Iteration   2: 0.491 ms/op
# Warmup Iteration   3: 0.523 ms/op
# Warmup Iteration   4: 0.523 ms/op
# Warmup Iteration   5: 0.505 ms/op
Iteration   1: 0.461 ms/op
Iteration   2: 0.511 ms/op
Iteration   3: 0.661 ms/op
Iteration   4: 0.906 ms/op
Iteration   5: 0.750 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.658 ±(99.9%) 0.696 ms/op [Average]
  (min, avg, max) = (0.461, 0.658, 0.906), stdev = 0.181
  CI (99.9%): [? 0, 1.354] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 27.19% complete, ETA 02:44:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.576 ms/op
# Warmup Iteration   2: 0.522 ms/op
# Warmup Iteration   3: 0.561 ms/op
# Warmup Iteration   4: 0.520 ms/op
# Warmup Iteration   5: 0.638 ms/op
Iteration   1: 0.540 ms/op
Iteration   2: 0.477 ms/op
Iteration   3: 0.760 ms/op
Iteration   4: 1.059 ms/op
Iteration   5: 1.061 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.779 ±(99.9%) 1.066 ms/op [Average]
  (min, avg, max) = (0.477, 0.779, 1.061), stdev = 0.277
  CI (99.9%): [? 0, 1.845] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 27.27% complete, ETA 02:44:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.411 ms/op
# Warmup Iteration   2: 0.364 ms/op
# Warmup Iteration   3: 0.421 ms/op
# Warmup Iteration   4: 0.347 ms/op
# Warmup Iteration   5: 0.346 ms/op
Iteration   1: 0.554 ms/op
Iteration   2: 0.385 ms/op
Iteration   3: 0.414 ms/op
Iteration   4: 0.506 ms/op
Iteration   5: 0.503 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.472 ±(99.9%) 0.270 ms/op [Average]
  (min, avg, max) = (0.385, 0.472, 0.554), stdev = 0.070
  CI (99.9%): [0.202, 0.743] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 27.36% complete, ETA 02:44:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.386 ms/op
# Warmup Iteration   2: 0.326 ms/op
# Warmup Iteration   3: 0.414 ms/op
# Warmup Iteration   4: 0.318 ms/op
# Warmup Iteration   5: 0.315 ms/op
Iteration   1: 0.453 ms/op
Iteration   2: 0.349 ms/op
Iteration   3: 0.390 ms/op
Iteration   4: 0.468 ms/op
Iteration   5: 0.492 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.430 ±(99.9%) 0.228 ms/op [Average]
  (min, avg, max) = (0.349, 0.430, 0.492), stdev = 0.059
  CI (99.9%): [0.203, 0.658] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 27.44% complete, ETA 02:44:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.535 ms/op
# Warmup Iteration   2: 0.537 ms/op
# Warmup Iteration   3: 0.499 ms/op
# Warmup Iteration   4: 0.604 ms/op
# Warmup Iteration   5: 0.505 ms/op
Iteration   1: 0.561 ms/op
Iteration   2: 0.452 ms/op
Iteration   3: 0.716 ms/op
Iteration   4: 0.711 ms/op
Iteration   5: 0.684 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.625 ±(99.9%) 0.444 ms/op [Average]
  (min, avg, max) = (0.452, 0.625, 0.716), stdev = 0.115
  CI (99.9%): [0.181, 1.069] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 27.53% complete, ETA 02:43:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.518 ms/op
# Warmup Iteration   2: 0.518 ms/op
# Warmup Iteration   3: 0.478 ms/op
# Warmup Iteration   4: 0.588 ms/op
# Warmup Iteration   5: 0.457 ms/op
Iteration   1: 0.522 ms/op
Iteration   2: 0.465 ms/op
Iteration   3: 0.828 ms/op
Iteration   4: 0.606 ms/op
Iteration   5: 0.710 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.626 ±(99.9%) 0.562 ms/op [Average]
  (min, avg, max) = (0.465, 0.626, 0.828), stdev = 0.146
  CI (99.9%): [0.064, 1.188] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 27.61% complete, ETA 02:43:43
# Fork: 1 of 1
# Warmup Iteration   1: 1.092 ms/op
# Warmup Iteration   2: 1.019 ms/op
# Warmup Iteration   3: 0.986 ms/op
# Warmup Iteration   4: 1.019 ms/op
# Warmup Iteration   5: 0.976 ms/op
Iteration   1: 1.050 ms/op
Iteration   2: 0.977 ms/op
Iteration   3: 1.429 ms/op
Iteration   4: 1.478 ms/op
Iteration   5: 1.693 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  1.326 ±(99.9%) 1.165 ms/op [Average]
  (min, avg, max) = (0.977, 1.326, 1.693), stdev = 0.303
  CI (99.9%): [0.161, 2.491] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 27.69% complete, ETA 02:43:30
# Fork: 1 of 1
# Warmup Iteration   1: 1.299 ms/op
# Warmup Iteration   2: 1.024 ms/op
# Warmup Iteration   3: 1.073 ms/op
# Warmup Iteration   4: 1.033 ms/op
# Warmup Iteration   5: 1.173 ms/op
Iteration   1: 1.115 ms/op
Iteration   2: 0.942 ms/op
Iteration   3: 1.245 ms/op
Iteration   4: 2.250 ms/op
Iteration   5: 1.402 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  1.391 ±(99.9%) 1.961 ms/op [Average]
  (min, avg, max) = (0.942, 1.391, 2.250), stdev = 0.509
  CI (99.9%): [? 0, 3.352] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 27.78% complete, ETA 02:43:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 27.86% complete, ETA 02:43:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 27.95% complete, ETA 02:42:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 28.03% complete, ETA 02:42:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 28.11% complete, ETA 02:42:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 28.20% complete, ETA 02:42:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 28.28% complete, ETA 02:41:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 28.37% complete, ETA 02:41:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 28.45% complete, ETA 02:41:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 28.54% complete, ETA 02:41:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 28.62% complete, ETA 02:40:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 28.70% complete, ETA 02:40:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 28.79% complete, ETA 02:40:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 28.87% complete, ETA 02:40:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 28.96% complete, ETA 02:40:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 29.04% complete, ETA 02:39:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 29.12% complete, ETA 02:39:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 29.21% complete, ETA 02:39:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 29.29% complete, ETA 02:39:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 29.38% complete, ETA 02:38:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 29.46% complete, ETA 02:38:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 29.55% complete, ETA 02:38:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 29.63% complete, ETA 02:38:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.009 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.002
  CI (99.9%): [? 10?³, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 29.71% complete, ETA 02:38:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.012 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.008, 0.012, 0.017), stdev = 0.004
  CI (99.9%): [? 0, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 29.80% complete, ETA 02:37:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 10??, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 29.88% complete, ETA 02:37:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 10??, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 29.97% complete, ETA 02:37:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.007 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 30.05% complete, ETA 02:37:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 10??, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 30.13% complete, ETA 02:36:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.018 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.013, 0.018, 0.024), stdev = 0.005
  CI (99.9%): [? 0, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 30.22% complete, ETA 02:36:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.022 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.016, 0.022, 0.030), stdev = 0.006
  CI (99.9%): [? 0, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 30.30% complete, ETA 02:36:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.010 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.012), stdev = 0.002
  CI (99.9%): [0.002, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 30.39% complete, ETA 02:36:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.010 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.013), stdev = 0.002
  CI (99.9%): [? 10?³, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 30.47% complete, ETA 02:36:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.014 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.018), stdev = 0.003
  CI (99.9%): [? 10?³, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 30.56% complete, ETA 02:35:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.013 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.018), stdev = 0.003
  CI (99.9%): [? 10??, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 30.64% complete, ETA 02:35:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.039 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.047 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.036 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.027, 0.036, 0.047), stdev = 0.009
  CI (99.9%): [0.002, 0.070] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 30.72% complete, ETA 02:35:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.033 ms/op
# Warmup Iteration   3: 0.038 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.033 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.060 ms/op
Iteration   5: 0.062 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.046 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (0.032, 0.046, 0.062), stdev = 0.014
  CI (99.9%): [? 0, 0.101] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 30.81% complete, ETA 02:35:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.020 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.016, 0.020, 0.027), stdev = 0.005
  CI (99.9%): [? 10?³, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 30.89% complete, ETA 02:34:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.019 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.015, 0.019, 0.025), stdev = 0.005
  CI (99.9%): [0.001, 0.038] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 30.98% complete, ETA 02:34:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.028 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.021, 0.028, 0.036), stdev = 0.008
  CI (99.9%): [? 0, 0.057] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 31.06% complete, ETA 02:34:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.032 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.026 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.019, 0.026, 0.035), stdev = 0.007
  CI (99.9%): [? 0, 0.054] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 31.14% complete, ETA 02:34:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.061 ms/op
# Warmup Iteration   2: 0.054 ms/op
# Warmup Iteration   3: 0.054 ms/op
# Warmup Iteration   4: 0.053 ms/op
# Warmup Iteration   5: 0.059 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.069 ms/op
Iteration   4: 0.109 ms/op
Iteration   5: 0.108 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.079 ±(99.9%) 0.107 ms/op [Average]
  (min, avg, max) = (0.053, 0.079, 0.109), stdev = 0.028
  CI (99.9%): [? 0, 0.186] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 31.23% complete, ETA 02:34:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.066 ms/op
# Warmup Iteration   3: 0.063 ms/op
# Warmup Iteration   4: 0.066 ms/op
# Warmup Iteration   5: 0.071 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.083 ms/op
Iteration   4: 0.106 ms/op
Iteration   5: 0.136 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.090 ±(99.9%) 0.120 ms/op [Average]
  (min, avg, max) = (0.063, 0.090, 0.136), stdev = 0.031
  CI (99.9%): [? 0, 0.210] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 31.31% complete, ETA 02:33:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.055 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.041 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (0.031, 0.041, 0.055), stdev = 0.011
  CI (99.9%): [? 0, 0.085] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 31.40% complete, ETA 02:33:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.055 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.041 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (0.030, 0.041, 0.055), stdev = 0.012
  CI (99.9%): [? 0, 0.086] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 31.48% complete, ETA 02:33:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.041 ms/op
# Warmup Iteration   3: 0.041 ms/op
# Warmup Iteration   4: 0.041 ms/op
# Warmup Iteration   5: 0.042 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.076 ms/op
Iteration   5: 0.073 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.058 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (0.042, 0.058, 0.076), stdev = 0.016
  CI (99.9%): [? 0, 0.119] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 31.57% complete, ETA 02:33:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.043 ms/op
# Warmup Iteration   2: 0.041 ms/op
# Warmup Iteration   3: 0.040 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.040 ms/op
Iteration   1: 0.040 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.060 ms/op
Iteration   5: 0.066 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.051 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (0.040, 0.051, 0.066), stdev = 0.012
  CI (99.9%): [0.006, 0.096] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 31.65% complete, ETA 02:32:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.130 ms/op
# Warmup Iteration   2: 0.107 ms/op
# Warmup Iteration   3: 0.103 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.104 ms/op
Iteration   1: 0.118 ms/op
Iteration   2: 0.108 ms/op
Iteration   3: 0.129 ms/op
Iteration   4: 0.193 ms/op
Iteration   5: 0.178 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.145 ±(99.9%) 0.146 ms/op [Average]
  (min, avg, max) = (0.108, 0.145, 0.193), stdev = 0.038
  CI (99.9%): [? 0, 0.291] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 31.73% complete, ETA 02:32:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.155 ms/op
# Warmup Iteration   2: 0.132 ms/op
# Warmup Iteration   3: 0.132 ms/op
# Warmup Iteration   4: 0.127 ms/op
# Warmup Iteration   5: 0.126 ms/op
Iteration   1: 0.127 ms/op
Iteration   2: 0.144 ms/op
Iteration   3: 0.156 ms/op
Iteration   4: 0.255 ms/op
Iteration   5: 0.250 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.186 ±(99.9%) 0.237 ms/op [Average]
  (min, avg, max) = (0.127, 0.186, 0.255), stdev = 0.061
  CI (99.9%): [? 0, 0.423] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 31.82% complete, ETA 02:32:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 ms/op
# Warmup Iteration   2: 0.064 ms/op
# Warmup Iteration   3: 0.060 ms/op
# Warmup Iteration   4: 0.061 ms/op
# Warmup Iteration   5: 0.061 ms/op
Iteration   1: 0.062 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.073 ms/op
Iteration   4: 0.105 ms/op
Iteration   5: 0.099 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.081 ±(99.9%) 0.077 ms/op [Average]
  (min, avg, max) = (0.062, 0.081, 0.105), stdev = 0.020
  CI (99.9%): [0.003, 0.158] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 31.90% complete, ETA 02:32:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
# Warmup Iteration   2: 0.061 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.057 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.067 ms/op
Iteration   4: 0.088 ms/op
Iteration   5: 0.095 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.073 ±(99.9%) 0.066 ms/op [Average]
  (min, avg, max) = (0.057, 0.073, 0.095), stdev = 0.017
  CI (99.9%): [0.007, 0.140] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 31.99% complete, ETA 02:32:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.087 ms/op
# Warmup Iteration   2: 0.087 ms/op
# Warmup Iteration   3: 0.085 ms/op
# Warmup Iteration   4: 0.084 ms/op
# Warmup Iteration   5: 0.085 ms/op
Iteration   1: 0.083 ms/op
Iteration   2: 0.083 ms/op
Iteration   3: 0.101 ms/op
Iteration   4: 0.141 ms/op
Iteration   5: 0.148 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.111 ±(99.9%) 0.120 ms/op [Average]
  (min, avg, max) = (0.083, 0.111, 0.148), stdev = 0.031
  CI (99.9%): [? 0, 0.232] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 32.07% complete, ETA 02:31:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.083 ms/op
# Warmup Iteration   2: 0.079 ms/op
# Warmup Iteration   3: 0.080 ms/op
# Warmup Iteration   4: 0.078 ms/op
# Warmup Iteration   5: 0.077 ms/op
Iteration   1: 0.076 ms/op
Iteration   2: 0.078 ms/op
Iteration   3: 0.096 ms/op
Iteration   4: 0.131 ms/op
Iteration   5: 0.137 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.104 ±(99.9%) 0.111 ms/op [Average]
  (min, avg, max) = (0.076, 0.104, 0.137), stdev = 0.029
  CI (99.9%): [? 0, 0.215] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 32.15% complete, ETA 02:31:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.228 ms/op
# Warmup Iteration   2: 0.214 ms/op
# Warmup Iteration   3: 0.232 ms/op
# Warmup Iteration   4: 0.215 ms/op
# Warmup Iteration   5: 0.208 ms/op
Iteration   1: 0.207 ms/op
Iteration   2: 0.202 ms/op
Iteration   3: 0.279 ms/op
Iteration   4: 0.358 ms/op
Iteration   5: 0.375 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.284 ±(99.9%) 0.313 ms/op [Average]
  (min, avg, max) = (0.202, 0.284, 0.375), stdev = 0.081
  CI (99.9%): [? 0, 0.598] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 32.24% complete, ETA 02:31:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.305 ms/op
# Warmup Iteration   2: 0.264 ms/op
# Warmup Iteration   3: 0.290 ms/op
# Warmup Iteration   4: 0.255 ms/op
# Warmup Iteration   5: 0.254 ms/op
Iteration   1: 0.254 ms/op
Iteration   2: 0.260 ms/op
Iteration   3: 0.347 ms/op
Iteration   4: 0.529 ms/op
Iteration   5: 0.483 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.375 ±(99.9%) 0.488 ms/op [Average]
  (min, avg, max) = (0.254, 0.375, 0.529), stdev = 0.127
  CI (99.9%): [? 0, 0.863] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 32.32% complete, ETA 02:31:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.120 ms/op
# Warmup Iteration   2: 0.118 ms/op
# Warmup Iteration   3: 0.119 ms/op
# Warmup Iteration   4: 0.123 ms/op
# Warmup Iteration   5: 0.118 ms/op
Iteration   1: 0.119 ms/op
Iteration   2: 0.118 ms/op
Iteration   3: 0.144 ms/op
Iteration   4: 0.200 ms/op
Iteration   5: 0.200 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.156 ±(99.9%) 0.159 ms/op [Average]
  (min, avg, max) = (0.118, 0.156, 0.200), stdev = 0.041
  CI (99.9%): [? 0, 0.315] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 32.41% complete, ETA 02:31:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.109 ms/op
# Warmup Iteration   2: 0.107 ms/op
# Warmup Iteration   3: 0.108 ms/op
# Warmup Iteration   4: 0.111 ms/op
# Warmup Iteration   5: 0.107 ms/op
Iteration   1: 0.107 ms/op
Iteration   2: 0.109 ms/op
Iteration   3: 0.123 ms/op
Iteration   4: 0.188 ms/op
Iteration   5: 0.171 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.140 ±(99.9%) 0.144 ms/op [Average]
  (min, avg, max) = (0.107, 0.140, 0.188), stdev = 0.037
  CI (99.9%): [? 0, 0.284] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 32.49% complete, ETA 02:30:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.175 ms/op
# Warmup Iteration   2: 0.169 ms/op
# Warmup Iteration   3: 0.169 ms/op
# Warmup Iteration   4: 0.175 ms/op
# Warmup Iteration   5: 0.166 ms/op
Iteration   1: 0.168 ms/op
Iteration   2: 0.164 ms/op
Iteration   3: 0.197 ms/op
Iteration   4: 0.289 ms/op
Iteration   5: 0.275 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.219 ±(99.9%) 0.229 ms/op [Average]
  (min, avg, max) = (0.164, 0.219, 0.289), stdev = 0.059
  CI (99.9%): [? 0, 0.448] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 32.58% complete, ETA 02:30:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.163 ms/op
# Warmup Iteration   2: 0.153 ms/op
# Warmup Iteration   3: 0.157 ms/op
# Warmup Iteration   4: 0.155 ms/op
# Warmup Iteration   5: 0.157 ms/op
Iteration   1: 0.154 ms/op
Iteration   2: 0.154 ms/op
Iteration   3: 0.181 ms/op
Iteration   4: 0.286 ms/op
Iteration   5: 0.271 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.209 ±(99.9%) 0.249 ms/op [Average]
  (min, avg, max) = (0.154, 0.209, 0.286), stdev = 0.065
  CI (99.9%): [? 0, 0.458] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 32.66% complete, ETA 02:30:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.471 ms/op
# Warmup Iteration   2: 0.418 ms/op
# Warmup Iteration   3: 0.435 ms/op
# Warmup Iteration   4: 0.426 ms/op
# Warmup Iteration   5: 0.459 ms/op
Iteration   1: 0.417 ms/op
Iteration   2: 0.419 ms/op
Iteration   3: 0.519 ms/op
Iteration   4: 0.751 ms/op
Iteration   5: 0.814 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.584 ±(99.9%) 0.721 ms/op [Average]
  (min, avg, max) = (0.417, 0.584, 0.814), stdev = 0.187
  CI (99.9%): [? 0, 1.305] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 32.74% complete, ETA 02:30:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.557 ms/op
# Warmup Iteration   2: 0.515 ms/op
# Warmup Iteration   3: 0.507 ms/op
# Warmup Iteration   4: 0.509 ms/op
# Warmup Iteration   5: 0.596 ms/op
Iteration   1: 0.507 ms/op
Iteration   2: 0.508 ms/op
Iteration   3: 0.672 ms/op
Iteration   4: 0.918 ms/op
Iteration   5: 0.930 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.707 ±(99.9%) 0.806 ms/op [Average]
  (min, avg, max) = (0.507, 0.707, 0.930), stdev = 0.209
  CI (99.9%): [? 0, 1.513] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 32.83% complete, ETA 02:29:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.242 ms/op
# Warmup Iteration   2: 0.237 ms/op
# Warmup Iteration   3: 0.237 ms/op
# Warmup Iteration   4: 0.233 ms/op
# Warmup Iteration   5: 0.247 ms/op
Iteration   1: 0.236 ms/op
Iteration   2: 0.236 ms/op
Iteration   3: 0.267 ms/op
Iteration   4: 0.406 ms/op
Iteration   5: 0.429 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.315 ±(99.9%) 0.365 ms/op [Average]
  (min, avg, max) = (0.236, 0.315, 0.429), stdev = 0.095
  CI (99.9%): [? 0, 0.680] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 32.91% complete, ETA 02:29:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.224 ms/op
# Warmup Iteration   2: 0.224 ms/op
# Warmup Iteration   3: 0.224 ms/op
# Warmup Iteration   4: 0.226 ms/op
# Warmup Iteration   5: 0.224 ms/op
Iteration   1: 0.234 ms/op
Iteration   2: 0.225 ms/op
Iteration   3: 0.247 ms/op
Iteration   4: 0.375 ms/op
Iteration   5: 0.352 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.286 ±(99.9%) 0.273 ms/op [Average]
  (min, avg, max) = (0.225, 0.286, 0.375), stdev = 0.071
  CI (99.9%): [0.013, 0.560] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 33.00% complete, ETA 02:29:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.375 ms/op
# Warmup Iteration   2: 0.338 ms/op
# Warmup Iteration   3: 0.337 ms/op
# Warmup Iteration   4: 0.336 ms/op
# Warmup Iteration   5: 0.336 ms/op
Iteration   1: 0.349 ms/op
Iteration   2: 0.341 ms/op
Iteration   3: 0.401 ms/op
Iteration   4: 0.541 ms/op
Iteration   5: 0.558 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.438 ±(99.9%) 0.403 ms/op [Average]
  (min, avg, max) = (0.341, 0.438, 0.558), stdev = 0.105
  CI (99.9%): [0.035, 0.841] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 33.08% complete, ETA 02:29:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.345 ms/op
# Warmup Iteration   2: 0.311 ms/op
# Warmup Iteration   3: 0.316 ms/op
# Warmup Iteration   4: 0.317 ms/op
# Warmup Iteration   5: 0.304 ms/op
Iteration   1: 0.317 ms/op
Iteration   2: 0.304 ms/op
Iteration   3: 0.371 ms/op
Iteration   4: 0.561 ms/op
Iteration   5: 0.573 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  0.425 ±(99.9%) 0.508 ms/op [Average]
  (min, avg, max) = (0.304, 0.425, 0.573), stdev = 0.132
  CI (99.9%): [? 0, 0.933] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 33.16% complete, ETA 02:29:06
# Fork: 1 of 1
# Warmup Iteration   1: 1.044 ms/op
# Warmup Iteration   2: 0.871 ms/op
# Warmup Iteration   3: 0.840 ms/op
# Warmup Iteration   4: 0.835 ms/op
# Warmup Iteration   5: 0.851 ms/op
Iteration   1: 0.926 ms/op
Iteration   2: 0.891 ms/op
Iteration   3: 1.112 ms/op
Iteration   4: 1.519 ms/op
Iteration   5: 1.464 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  1.182 ±(99.9%) 1.137 ms/op [Average]
  (min, avg, max) = (0.891, 1.182, 1.519), stdev = 0.295
  CI (99.9%): [0.046, 2.319] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 33.25% complete, ETA 02:28:54
# Fork: 1 of 1
# Warmup Iteration   1: 1.208 ms/op
# Warmup Iteration   2: 1.144 ms/op
# Warmup Iteration   3: 1.015 ms/op
# Warmup Iteration   4: 1.011 ms/op
# Warmup Iteration   5: 1.007 ms/op
Iteration   1: 1.029 ms/op
Iteration   2: 1.128 ms/op
Iteration   3: 1.326 ms/op
Iteration   4: 1.884 ms/op
Iteration   5: 1.913 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  1.456 ±(99.9%) 1.609 ms/op [Average]
  (min, avg, max) = (1.029, 1.456, 1.913), stdev = 0.418
  CI (99.9%): [? 0, 3.065] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 33.33% complete, ETA 02:28:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 33.42% complete, ETA 02:28:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 33.50% complete, ETA 02:28:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.039 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.029, 0.039, 0.052), stdev = 0.010
  CI (99.9%): [? 0, 0.078] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 33.59% complete, ETA 02:28:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.057 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.040 ±(99.9%) 0.047 ms/op [Average]
  (min, avg, max) = (0.029, 0.040, 0.057), stdev = 0.012
  CI (99.9%): [? 0, 0.088] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 33.67% complete, ETA 02:27:50
# Fork: 1 of 1
# Warmup Iteration   1: 8.458 ms/op
# Warmup Iteration   2: 7.777 ms/op
# Warmup Iteration   3: 7.746 ms/op
# Warmup Iteration   4: 7.947 ms/op
# Warmup Iteration   5: 8.367 ms/op
Iteration   1: 7.304 ms/op
Iteration   2: 7.553 ms/op
Iteration   3: 9.701 ms/op
Iteration   4: 14.362 ms/op
Iteration   5: 12.419 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  10.268 ±(99.9%) 11.848 ms/op [Average]
  (min, avg, max) = (7.304, 10.268, 14.362), stdev = 3.077
  CI (99.9%): [? 0, 22.116] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 33.75% complete, ETA 02:27:37
# Fork: 1 of 1
# Warmup Iteration   1: 8.827 ms/op
# Warmup Iteration   2: 7.730 ms/op
# Warmup Iteration   3: 7.077 ms/op
# Warmup Iteration   4: 7.054 ms/op
# Warmup Iteration   5: 8.170 ms/op
Iteration   1: 7.352 ms/op
Iteration   2: 9.366 ms/op
Iteration   3: 10.129 ms/op
Iteration   4: 12.269 ms/op
Iteration   5: 13.967 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  10.617 ±(99.9%) 9.896 ms/op [Average]
  (min, avg, max) = (7.352, 10.617, 13.967), stdev = 2.570
  CI (99.9%): [0.721, 20.512] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 33.84% complete, ETA 02:27:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 33.92% complete, ETA 02:27:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 34.01% complete, ETA 02:27:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.065 ms/op
# Warmup Iteration   2: 0.058 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.061 ms/op
# Warmup Iteration   5: 0.059 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.058 ms/op
Iteration   3: 0.068 ms/op
Iteration   4: 0.091 ms/op
Iteration   5: 0.109 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.077 ±(99.9%) 0.086 ms/op [Average]
  (min, avg, max) = (0.058, 0.077, 0.109), stdev = 0.022
  CI (99.9%): [? 0, 0.163] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 34.09% complete, ETA 02:26:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.066 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.059 ms/op
# Warmup Iteration   5: 0.061 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.060 ms/op
Iteration   3: 0.072 ms/op
Iteration   4: 0.100 ms/op
Iteration   5: 0.101 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.079 ±(99.9%) 0.080 ms/op [Average]
  (min, avg, max) = (0.059, 0.079, 0.101), stdev = 0.021
  CI (99.9%): [? 0, 0.159] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 34.18% complete, ETA 02:26:34
# Fork: 1 of 1
# Warmup Iteration   1: 17.518 ms/op
# Warmup Iteration   2: 15.796 ms/op
# Warmup Iteration   3: 15.050 ms/op
# Warmup Iteration   4: 14.939 ms/op
# Warmup Iteration   5: 16.616 ms/op
Iteration   1: 15.349 ms/op
Iteration   2: 16.812 ms/op
Iteration   3: 20.047 ms/op
Iteration   4: 27.566 ms/op
Iteration   5: 28.169 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  21.589 ±(99.9%) 23.036 ms/op [Average]
  (min, avg, max) = (15.349, 21.589, 28.169), stdev = 5.982
  CI (99.9%): [? 0, 44.624] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 34.26% complete, ETA 02:26:22
# Fork: 1 of 1
# Warmup Iteration   1: 16.362 ms/op
# Warmup Iteration   2: 15.050 ms/op
# Warmup Iteration   3: 16.162 ms/op
# Warmup Iteration   4: 18.411 ms/op
# Warmup Iteration   5: 16.037 ms/op
Iteration   1: 15.835 ms/op
Iteration   2: 15.814 ms/op
Iteration   3: 19.522 ms/op
Iteration   4: 30.705 ms/op
Iteration   5: 25.901 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  21.555 ±(99.9%) 25.282 ms/op [Average]
  (min, avg, max) = (15.814, 21.555, 30.705), stdev = 6.566
  CI (99.9%): [? 0, 46.837] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 34.34% complete, ETA 02:26:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 34.43% complete, ETA 02:25:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 34.51% complete, ETA 02:25:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.120 ms/op
# Warmup Iteration   2: 0.102 ms/op
# Warmup Iteration   3: 0.104 ms/op
# Warmup Iteration   4: 0.105 ms/op
# Warmup Iteration   5: 0.103 ms/op
Iteration   1: 0.109 ms/op
Iteration   2: 0.102 ms/op
Iteration   3: 0.118 ms/op
Iteration   4: 0.185 ms/op
Iteration   5: 0.179 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.139 ±(99.9%) 0.156 ms/op [Average]
  (min, avg, max) = (0.102, 0.139, 0.185), stdev = 0.040
  CI (99.9%): [? 0, 0.294] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 34.60% complete, ETA 02:25:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.118 ms/op
# Warmup Iteration   2: 0.105 ms/op
# Warmup Iteration   3: 0.102 ms/op
# Warmup Iteration   4: 0.103 ms/op
# Warmup Iteration   5: 0.103 ms/op
Iteration   1: 0.103 ms/op
Iteration   2: 0.109 ms/op
Iteration   3: 0.122 ms/op
Iteration   4: 0.170 ms/op
Iteration   5: 0.161 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.133 ±(99.9%) 0.118 ms/op [Average]
  (min, avg, max) = (0.103, 0.133, 0.170), stdev = 0.031
  CI (99.9%): [0.015, 0.251] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 34.68% complete, ETA 02:25:19
# Fork: 1 of 1
# Warmup Iteration   1: 29.452 ms/op
# Warmup Iteration   2: 27.895 ms/op
# Warmup Iteration   3: 26.298 ms/op
# Warmup Iteration   4: 25.616 ms/op
# Warmup Iteration   5: 25.541 ms/op
Iteration   1: 25.167 ms/op
Iteration   2: 29.884 ms/op
Iteration   3: 38.389 ms/op
Iteration   4: 40.471 ms/op
Iteration   5: 39.147 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  34.612 ±(99.9%) 25.883 ms/op [Average]
  (min, avg, max) = (25.167, 34.612, 40.471), stdev = 6.722
  CI (99.9%): [8.728, 60.495] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 34.76% complete, ETA 02:25:07
# Fork: 1 of 1
# Warmup Iteration   1: 29.005 ms/op
# Warmup Iteration   2: 29.346 ms/op
# Warmup Iteration   3: 25.701 ms/op
# Warmup Iteration   4: 24.152 ms/op
# Warmup Iteration   5: 26.589 ms/op
Iteration   1: 28.161 ms/op
Iteration   2: 28.384 ms/op
Iteration   3: 34.640 ms/op
Iteration   4: 44.970 ms/op
Iteration   5: 41.599 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  35.551 ±(99.9%) 29.333 ms/op [Average]
  (min, avg, max) = (28.161, 35.551, 44.970), stdev = 7.618
  CI (99.9%): [6.218, 64.883] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 34.85% complete, ETA 02:24:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.011), stdev = 0.002
  CI (99.9%): [? 10??, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 34.93% complete, ETA 02:24:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.009 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.011), stdev = 0.002
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 35.02% complete, ETA 02:24:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.214 ms/op
# Warmup Iteration   2: 0.195 ms/op
# Warmup Iteration   3: 0.197 ms/op
# Warmup Iteration   4: 0.191 ms/op
# Warmup Iteration   5: 0.195 ms/op
Iteration   1: 0.192 ms/op
Iteration   2: 0.191 ms/op
Iteration   3: 0.232 ms/op
Iteration   4: 0.346 ms/op
Iteration   5: 0.359 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.264 ±(99.9%) 0.318 ms/op [Average]
  (min, avg, max) = (0.191, 0.264, 0.359), stdev = 0.083
  CI (99.9%): [? 0, 0.582] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 35.10% complete, ETA 02:24:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.211 ms/op
# Warmup Iteration   2: 0.196 ms/op
# Warmup Iteration   3: 0.198 ms/op
# Warmup Iteration   4: 0.190 ms/op
# Warmup Iteration   5: 0.190 ms/op
Iteration   1: 0.187 ms/op
Iteration   2: 0.188 ms/op
Iteration   3: 0.228 ms/op
Iteration   4: 0.318 ms/op
Iteration   5: 0.305 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.245 ±(99.9%) 0.242 ms/op [Average]
  (min, avg, max) = (0.187, 0.245, 0.318), stdev = 0.063
  CI (99.9%): [0.004, 0.487] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 35.19% complete, ETA 02:24:05
# Fork: 1 of 1
# Warmup Iteration   1: 53.937 ms/op
# Warmup Iteration   2: 46.694 ms/op
# Warmup Iteration   3: 45.844 ms/op
# Warmup Iteration   4: 48.322 ms/op
# Warmup Iteration   5: 50.479 ms/op
Iteration   1: 45.152 ms/op
Iteration   2: 51.354 ms/op
Iteration   3: 60.085 ms/op
Iteration   4: 85.107 ms/op
Iteration   5: 73.130 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  62.966 ±(99.9%) 62.507 ms/op [Average]
  (min, avg, max) = (45.152, 62.966, 85.107), stdev = 16.233
  CI (99.9%): [0.459, 125.472] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 35.27% complete, ETA 02:23:53
# Fork: 1 of 1
# Warmup Iteration   1: 53.670 ms/op
# Warmup Iteration   2: 49.515 ms/op
# Warmup Iteration   3: 43.811 ms/op
# Warmup Iteration   4: 52.908 ms/op
# Warmup Iteration   5: 56.471 ms/op
Iteration   1: 57.107 ms/op
Iteration   2: 57.995 ms/op
Iteration   3: 77.610 ms/op
Iteration   4: 85.170 ms/op
Iteration   5: 84.291 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  72.435 ±(99.9%) 53.529 ms/op [Average]
  (min, avg, max) = (57.107, 72.435, 85.170), stdev = 13.901
  CI (99.9%): [18.906, 125.963] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 35.35% complete, ETA 02:23:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.016 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.021), stdev = 0.004
  CI (99.9%): [0.001, 0.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 35.44% complete, ETA 02:23:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.017 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.013, 0.017, 0.022), stdev = 0.004
  CI (99.9%): [? 10?³, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 35.52% complete, ETA 02:23:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.432 ms/op
# Warmup Iteration   2: 0.385 ms/op
# Warmup Iteration   3: 0.376 ms/op
# Warmup Iteration   4: 0.382 ms/op
# Warmup Iteration   5: 0.405 ms/op
Iteration   1: 0.386 ms/op
Iteration   2: 0.380 ms/op
Iteration   3: 0.444 ms/op
Iteration   4: 0.668 ms/op
Iteration   5: 0.683 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.512 ±(99.9%) 0.583 ms/op [Average]
  (min, avg, max) = (0.380, 0.512, 0.683), stdev = 0.151
  CI (99.9%): [? 0, 1.095] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 35.61% complete, ETA 02:23:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.439 ms/op
# Warmup Iteration   2: 0.391 ms/op
# Warmup Iteration   3: 0.376 ms/op
# Warmup Iteration   4: 0.386 ms/op
# Warmup Iteration   5: 0.396 ms/op
Iteration   1: 0.379 ms/op
Iteration   2: 0.382 ms/op
Iteration   3: 0.463 ms/op
Iteration   4: 0.598 ms/op
Iteration   5: 0.707 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.506 ±(99.9%) 0.553 ms/op [Average]
  (min, avg, max) = (0.379, 0.506, 0.707), stdev = 0.143
  CI (99.9%): [? 0, 1.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 35.69% complete, ETA 02:22:50
# Fork: 1 of 1
# Warmup Iteration   1: 120.668 ms/op
# Warmup Iteration   2: 96.750 ms/op
# Warmup Iteration   3: 98.300 ms/op
# Warmup Iteration   4: 109.239 ms/op
# Warmup Iteration   5: 101.618 ms/op
Iteration   1: 114.022 ms/op
Iteration   2: 100.677 ms/op
Iteration   3: 133.215 ms/op
Iteration   4: 168.602 ms/op
Iteration   5: 146.361 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  132.575 ±(99.9%) 102.787 ms/op [Average]
  (min, avg, max) = (100.677, 132.575, 168.602), stdev = 26.693
  CI (99.9%): [29.789, 235.362] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 35.77% complete, ETA 02:22:39
# Fork: 1 of 1
# Warmup Iteration   1: 118.779 ms/op
# Warmup Iteration   2: 104.258 ms/op
# Warmup Iteration   3: 96.273 ms/op
# Warmup Iteration   4: 107.013 ms/op
# Warmup Iteration   5: 109.884 ms/op
Iteration   1: 106.616 ms/op
Iteration   2: 103.740 ms/op
Iteration   3: 132.478 ms/op
Iteration   4: 155.510 ms/op
Iteration   5: 171.476 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  133.964 ±(99.9%) 114.471 ms/op [Average]
  (min, avg, max) = (103.740, 133.964, 171.476), stdev = 29.728
  CI (99.9%): [19.493, 248.435] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 35.86% complete, ETA 02:22:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.051 ms/op
Iteration   5: 0.054 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.038 ±(99.9%) 0.051 ms/op [Average]
  (min, avg, max) = (0.027, 0.038, 0.054), stdev = 0.013
  CI (99.9%): [? 0, 0.089] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 35.94% complete, ETA 02:22:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.028 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.032 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.025, 0.032, 0.045), stdev = 0.009
  CI (99.9%): [? 0, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 36.03% complete, ETA 02:22:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.845 ms/op
# Warmup Iteration   2: 0.775 ms/op
# Warmup Iteration   3: 0.787 ms/op
# Warmup Iteration   4: 0.793 ms/op
# Warmup Iteration   5: 0.777 ms/op
Iteration   1: 0.804 ms/op
Iteration   2: 0.773 ms/op
Iteration   3: 0.880 ms/op
Iteration   4: 1.283 ms/op
Iteration   5: 1.181 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.984 ±(99.9%) 0.895 ms/op [Average]
  (min, avg, max) = (0.773, 0.984, 1.283), stdev = 0.233
  CI (99.9%): [0.089, 1.880] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 36.11% complete, ETA 02:21:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.888 ms/op
# Warmup Iteration   2: 0.765 ms/op
# Warmup Iteration   3: 0.766 ms/op
# Warmup Iteration   4: 0.758 ms/op
# Warmup Iteration   5: 0.762 ms/op
Iteration   1: 0.810 ms/op
Iteration   2: 0.762 ms/op
Iteration   3: 0.932 ms/op
Iteration   4: 1.247 ms/op
Iteration   5: 1.363 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  1.023 ±(99.9%) 1.031 ms/op [Average]
  (min, avg, max) = (0.762, 1.023, 1.363), stdev = 0.268
  CI (99.9%): [? 0, 2.054] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 36.20% complete, ETA 02:21:38
# Fork: 1 of 1
# Warmup Iteration   1: 241.858 ms/op
# Warmup Iteration   2: 230.074 ms/op
# Warmup Iteration   3: 204.155 ms/op
# Warmup Iteration   4: 232.659 ms/op
# Warmup Iteration   5: 211.435 ms/op
Iteration   1: 237.740 ms/op
Iteration   2: 231.778 ms/op
Iteration   3: 291.380 ms/op
Iteration   4: 323.382 ms/op
Iteration   5: 348.960 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  286.648 ±(99.9%) 198.759 ms/op [Average]
  (min, avg, max) = (231.778, 286.648, 348.960), stdev = 51.617
  CI (99.9%): [87.889, 485.407] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 36.28% complete, ETA 02:21:29
# Fork: 1 of 1
# Warmup Iteration   1: 227.920 ms/op
# Warmup Iteration   2: 210.500 ms/op
# Warmup Iteration   3: 206.194 ms/op
# Warmup Iteration   4: 188.750 ms/op
# Warmup Iteration   5: 215.766 ms/op
Iteration   1: 181.239 ms/op
Iteration   2: 218.980 ms/op
Iteration   3: 284.087 ms/op
Iteration   4: 321.839 ms/op
Iteration   5: 275.530 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  256.335 ±(99.9%) 214.948 ms/op [Average]
  (min, avg, max) = (181.239, 256.335, 321.839), stdev = 55.821
  CI (99.9%): [41.387, 471.283] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 36.36% complete, ETA 02:21:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.059 ms/op
# Warmup Iteration   2: 0.050 ms/op
# Warmup Iteration   3: 0.052 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.053 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.051 ms/op
Iteration   3: 0.063 ms/op
Iteration   4: 0.080 ms/op
Iteration   5: 0.084 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.066 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.051, 0.066, 0.084), stdev = 0.015
  CI (99.9%): [0.006, 0.125] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 36.45% complete, ETA 02:21:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.056 ms/op
# Warmup Iteration   2: 0.051 ms/op
# Warmup Iteration   3: 0.050 ms/op
# Warmup Iteration   4: 0.050 ms/op
# Warmup Iteration   5: 0.052 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.093 ms/op
Iteration   5: 0.087 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.068 ±(99.9%) 0.079 ms/op [Average]
  (min, avg, max) = (0.050, 0.068, 0.093), stdev = 0.021
  CI (99.9%): [? 0, 0.147] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 36.53% complete, ETA 02:20:54
# Fork: 1 of 1
# Warmup Iteration   1: 1.774 ms/op
# Warmup Iteration   2: 1.538 ms/op
# Warmup Iteration   3: 1.547 ms/op
# Warmup Iteration   4: 1.527 ms/op
# Warmup Iteration   5: 1.561 ms/op
Iteration   1: 1.513 ms/op
Iteration   2: 1.509 ms/op
Iteration   3: 1.787 ms/op
Iteration   4: 2.509 ms/op
Iteration   5: 2.759 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  2.015 ±(99.9%) 2.242 ms/op [Average]
  (min, avg, max) = (1.509, 2.015, 2.759), stdev = 0.582
  CI (99.9%): [? 0, 4.258] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 36.62% complete, ETA 02:20:42
# Fork: 1 of 1
# Warmup Iteration   1: 1.710 ms/op
# Warmup Iteration   2: 1.497 ms/op
# Warmup Iteration   3: 1.526 ms/op
# Warmup Iteration   4: 1.536 ms/op
# Warmup Iteration   5: 1.577 ms/op
Iteration   1: 1.535 ms/op
Iteration   2: 1.508 ms/op
Iteration   3: 1.800 ms/op
Iteration   4: 2.356 ms/op
Iteration   5: 2.264 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  1.893 ±(99.9%) 1.537 ms/op [Average]
  (min, avg, max) = (1.508, 1.893, 2.356), stdev = 0.399
  CI (99.9%): [0.356, 3.430] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 36.70% complete, ETA 02:20:29
# Fork: 1 of 1
# Warmup Iteration   1: 464.242 ms/op
# Warmup Iteration   2: 419.819 ms/op
# Warmup Iteration   3: 389.138 ms/op
# Warmup Iteration   4: 408.945 ms/op
# Warmup Iteration   5: 415.212 ms/op
Iteration   1: 395.314 ms/op
Iteration   2: 607.376 ms/op
Iteration   3: 593.523 ms/op
Iteration   4: 554.073 ms/op
Iteration   5: 662.475 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  562.552 ±(99.9%) 389.817 ms/op [Average]
  (min, avg, max) = (395.314, 562.552, 662.475), stdev = 101.234
  CI (99.9%): [172.736, 952.369] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 36.78% complete, ETA 02:20:21
# Fork: 1 of 1
# Warmup Iteration   1: 461.834 ms/op
# Warmup Iteration   2: 411.593 ms/op
# Warmup Iteration   3: 468.526 ms/op
# Warmup Iteration   4: 465.323 ms/op
# Warmup Iteration   5: 410.539 ms/op
Iteration   1: 435.915 ms/op
Iteration   2: 596.232 ms/op
Iteration   3: 638.826 ms/op
Iteration   4: 537.600 ms/op
Iteration   5: 647.329 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  571.180 ±(99.9%) 335.838 ms/op [Average]
  (min, avg, max) = (435.915, 571.180, 647.329), stdev = 87.216
  CI (99.9%): [235.342, 907.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 36.87% complete, ETA 02:20:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.114 ms/op
# Warmup Iteration   2: 0.104 ms/op
# Warmup Iteration   3: 0.102 ms/op
# Warmup Iteration   4: 0.102 ms/op
# Warmup Iteration   5: 0.101 ms/op
Iteration   1: 0.102 ms/op
Iteration   2: 0.101 ms/op
Iteration   3: 0.127 ms/op
Iteration   4: 0.167 ms/op
Iteration   5: 0.180 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.135 ±(99.9%) 0.142 ms/op [Average]
  (min, avg, max) = (0.101, 0.135, 0.180), stdev = 0.037
  CI (99.9%): [? 0, 0.277] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 36.95% complete, ETA 02:20:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.112 ms/op
# Warmup Iteration   2: 0.102 ms/op
# Warmup Iteration   3: 0.107 ms/op
# Warmup Iteration   4: 0.100 ms/op
# Warmup Iteration   5: 0.100 ms/op
Iteration   1: 0.100 ms/op
Iteration   2: 0.102 ms/op
Iteration   3: 0.123 ms/op
Iteration   4: 0.187 ms/op
Iteration   5: 0.172 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.137 ±(99.9%) 0.156 ms/op [Average]
  (min, avg, max) = (0.100, 0.137, 0.187), stdev = 0.040
  CI (99.9%): [? 0, 0.293] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 37.04% complete, ETA 02:19:49
# Fork: 1 of 1
# Warmup Iteration   1: 3.552 ms/op
# Warmup Iteration   2: 3.038 ms/op
# Warmup Iteration   3: 3.103 ms/op
# Warmup Iteration   4: 3.041 ms/op
# Warmup Iteration   5: 3.088 ms/op
Iteration   1: 3.018 ms/op
Iteration   2: 3.017 ms/op
Iteration   3: 3.679 ms/op
Iteration   4: 5.032 ms/op
Iteration   5: 4.511 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  3.851 ±(99.9%) 3.470 ms/op [Average]
  (min, avg, max) = (3.017, 3.851, 5.032), stdev = 0.901
  CI (99.9%): [0.381, 7.322] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 37.12% complete, ETA 02:19:36
# Fork: 1 of 1
# Warmup Iteration   1: 3.497 ms/op
# Warmup Iteration   2: 3.054 ms/op
# Warmup Iteration   3: 3.063 ms/op
# Warmup Iteration   4: 3.152 ms/op
# Warmup Iteration   5: 3.036 ms/op
Iteration   1: 3.104 ms/op
Iteration   2: 3.093 ms/op
Iteration   3: 3.662 ms/op
Iteration   4: 5.162 ms/op
Iteration   5: 5.984 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  4.201 ±(99.9%) 5.029 ms/op [Average]
  (min, avg, max) = (3.093, 4.201, 5.984), stdev = 1.306
  CI (99.9%): [? 0, 9.230] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 37.21% complete, ETA 02:19:24
# Fork: 1 of 1
# Warmup Iteration   1: 959.906 ms/op
# Warmup Iteration   2: 1009.494 ms/op
# Warmup Iteration   3: 1000.989 ms/op
# Warmup Iteration   4: 884.396 ms/op
# Warmup Iteration   5: 1583.748 ms/op
Iteration   1: 1123.998 ms/op
Iteration   2: 1514.656 ms/op
Iteration   3: 1032.545 ms/op
Iteration   4: 1211.961 ms/op
Iteration   5: 1069.598 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  1190.552 ±(99.9%) 744.498 ms/op [Average]
  (min, avg, max) = (1032.545, 1190.552, 1514.656), stdev = 193.344
  CI (99.9%): [446.053, 1935.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 37.29% complete, ETA 02:19:22
# Fork: 1 of 1
# Warmup Iteration   1: 905.804 ms/op
# Warmup Iteration   2: 1185.091 ms/op
# Warmup Iteration   3: 829.859 ms/op
# Warmup Iteration   4: 960.172 ms/op
# Warmup Iteration   5: 1140.572 ms/op
Iteration   1: 1831.260 ms/op
Iteration   2: 1296.910 ms/op
Iteration   3: 1285.497 ms/op
Iteration   4: 1623.216 ms/op
Iteration   5: 1479.893 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  1503.355 ±(99.9%) 887.572 ms/op [Average]
  (min, avg, max) = (1285.497, 1503.355, 1831.260), stdev = 230.500
  CI (99.9%): [615.783, 2390.928] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 37.37% complete, ETA 02:19:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.244 ms/op
# Warmup Iteration   2: 0.199 ms/op
# Warmup Iteration   3: 0.199 ms/op
# Warmup Iteration   4: 0.205 ms/op
# Warmup Iteration   5: 0.196 ms/op
Iteration   1: 0.197 ms/op
Iteration   2: 0.196 ms/op
Iteration   3: 0.246 ms/op
Iteration   4: 0.351 ms/op
Iteration   5: 0.313 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.261 ±(99.9%) 0.269 ms/op [Average]
  (min, avg, max) = (0.196, 0.261, 0.351), stdev = 0.070
  CI (99.9%): [? 0, 0.529] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 37.46% complete, ETA 02:19:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.223 ms/op
# Warmup Iteration   2: 0.198 ms/op
# Warmup Iteration   3: 0.198 ms/op
# Warmup Iteration   4: 0.214 ms/op
# Warmup Iteration   5: 0.203 ms/op
Iteration   1: 0.203 ms/op
Iteration   2: 0.202 ms/op
Iteration   3: 0.235 ms/op
Iteration   4: 0.369 ms/op
Iteration   5: 0.360 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.274 ±(99.9%) 0.322 ms/op [Average]
  (min, avg, max) = (0.202, 0.274, 0.369), stdev = 0.084
  CI (99.9%): [? 0, 0.596] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 37.54% complete, ETA 02:18:56
# Fork: 1 of 1
# Warmup Iteration   1: 7.165 ms/op
# Warmup Iteration   2: 6.076 ms/op
# Warmup Iteration   3: 6.080 ms/op
# Warmup Iteration   4: 6.399 ms/op
# Warmup Iteration   5: 6.330 ms/op
Iteration   1: 6.097 ms/op
Iteration   2: 6.109 ms/op
Iteration   3: 7.355 ms/op
Iteration   4: 10.368 ms/op
Iteration   5: 11.673 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  8.321 ±(99.9%) 9.855 ms/op [Average]
  (min, avg, max) = (6.097, 8.321, 11.673), stdev = 2.559
  CI (99.9%): [? 0, 18.176] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 37.63% complete, ETA 02:18:44
# Fork: 1 of 1
# Warmup Iteration   1: 6.929 ms/op
# Warmup Iteration   2: 6.092 ms/op
# Warmup Iteration   3: 6.078 ms/op
# Warmup Iteration   4: 6.247 ms/op
# Warmup Iteration   5: 6.340 ms/op
Iteration   1: 6.093 ms/op
Iteration   2: 6.123 ms/op
Iteration   3: 7.177 ms/op
Iteration   4: 9.615 ms/op
Iteration   5: 12.092 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  8.220 ±(99.9%) 9.995 ms/op [Average]
  (min, avg, max) = (6.093, 8.220, 12.092), stdev = 2.596
  CI (99.9%): [? 0, 18.215] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 37.71% complete, ETA 02:18:31
# Fork: 1 of 1
# Warmup Iteration   1: 1910.602 ms/op
# Warmup Iteration   2: 1768.947 ms/op
# Warmup Iteration   3: 2231.275 ms/op
# Warmup Iteration   4: 1776.448 ms/op
# Warmup Iteration   5: 2571.782 ms/op
Iteration   1: 2743.557 ms/op
Iteration   2: 2346.929 ms/op
Iteration   3: 2498.306 ms/op
Iteration   4: 2717.947 ms/op
Iteration   5: 2472.335 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  2555.815 ±(99.9%) 654.166 ms/op [Average]
  (min, avg, max) = (2346.929, 2555.815, 2743.557), stdev = 169.885
  CI (99.9%): [1901.648, 3209.981] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 37.79% complete, ETA 02:18:41
# Fork: 1 of 1
# Warmup Iteration   1: 1861.992 ms/op
# Warmup Iteration   2: 2177.395 ms/op
# Warmup Iteration   3: 2219.356 ms/op
# Warmup Iteration   4: 2436.657 ms/op
# Warmup Iteration   5: 2792.262 ms/op
Iteration   1: 2526.991 ms/op
Iteration   2: 2619.637 ms/op
Iteration   3: 2677.832 ms/op
Iteration   4: 2498.060 ms/op
Iteration   5: 2698.795 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  2604.263 ±(99.9%) 343.524 ms/op [Average]
  (min, avg, max) = (2498.060, 2604.263, 2698.795), stdev = 89.212
  CI (99.9%): [2260.740, 2947.787] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 37.88% complete, ETA 02:18:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.520 ms/op
# Warmup Iteration   2: 0.407 ms/op
# Warmup Iteration   3: 0.407 ms/op
# Warmup Iteration   4: 0.412 ms/op
# Warmup Iteration   5: 0.404 ms/op
Iteration   1: 0.401 ms/op
Iteration   2: 0.420 ms/op
Iteration   3: 0.483 ms/op
Iteration   4: 0.722 ms/op
Iteration   5: 0.716 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.549 ±(99.9%) 0.612 ms/op [Average]
  (min, avg, max) = (0.401, 0.549, 0.722), stdev = 0.159
  CI (99.9%): [? 0, 1.160] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 37.96% complete, ETA 02:18:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.448 ms/op
# Warmup Iteration   2: 0.421 ms/op
# Warmup Iteration   3: 0.392 ms/op
# Warmup Iteration   4: 0.397 ms/op
# Warmup Iteration   5: 0.397 ms/op
Iteration   1: 0.392 ms/op
Iteration   2: 0.412 ms/op
Iteration   3: 0.473 ms/op
Iteration   4: 0.697 ms/op
Iteration   5: 0.701 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  0.535 ±(99.9%) 0.589 ms/op [Average]
  (min, avg, max) = (0.392, 0.535, 0.701), stdev = 0.153
  CI (99.9%): [? 0, 1.124] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 38.05% complete, ETA 02:18:29
# Fork: 1 of 1
# Warmup Iteration   1: 17.426 ms/op
# Warmup Iteration   2: 12.953 ms/op
# Warmup Iteration   3: 11.808 ms/op
# Warmup Iteration   4: 11.948 ms/op
# Warmup Iteration   5: 11.892 ms/op
Iteration   1: 12.367 ms/op
Iteration   2: 12.273 ms/op
Iteration   3: 14.383 ms/op
Iteration   4: 19.786 ms/op
Iteration   5: 20.241 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  15.810 ±(99.9%) 15.140 ms/op [Average]
  (min, avg, max) = (12.273, 15.810, 20.241), stdev = 3.932
  CI (99.9%): [0.670, 30.950] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 38.13% complete, ETA 02:18:16
# Fork: 1 of 1
# Warmup Iteration   1: 17.177 ms/op
# Warmup Iteration   2: 13.492 ms/op
# Warmup Iteration   3: 11.917 ms/op
# Warmup Iteration   4: 12.173 ms/op
# Warmup Iteration   5: 12.080 ms/op
Iteration   1: 11.919 ms/op
Iteration   2: 12.044 ms/op
Iteration   3: 14.620 ms/op
Iteration   4: 20.147 ms/op
Iteration   5: 21.152 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  15.976 ±(99.9%) 16.998 ms/op [Average]
  (min, avg, max) = (11.919, 15.976, 21.152), stdev = 4.414
  CI (99.9%): [? 0, 32.974] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 38.22% complete, ETA 02:18:04
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark(ImmutableGetAllBenchmark.java:61)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_avgt_jmhStub(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_AverageTime(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 38.30% complete, ETA 02:17:51
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark(ImmutableGetAllBenchmark.java:61)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_avgt_jmhStub(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_AverageTime(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 38.38% complete, ETA 02:17:42
# Fork: 1 of 1
# Warmup Iteration   1: 1.047 ms/op
# Warmup Iteration   2: 0.875 ms/op
# Warmup Iteration   3: 0.845 ms/op
# Warmup Iteration   4: 0.811 ms/op
# Warmup Iteration   5: 0.848 ms/op
Iteration   1: 0.818 ms/op
Iteration   2: 0.817 ms/op
Iteration   3: 0.976 ms/op
Iteration   4: 1.403 ms/op
Iteration   5: 1.636 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  1.130 ±(99.9%) 1.427 ms/op [Average]
  (min, avg, max) = (0.817, 1.130, 1.636), stdev = 0.371
  CI (99.9%): [? 0, 2.557] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 38.47% complete, ETA 02:17:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.923 ms/op
# Warmup Iteration   2: 0.833 ms/op
# Warmup Iteration   3: 0.814 ms/op
# Warmup Iteration   4: 0.815 ms/op
# Warmup Iteration   5: 0.825 ms/op
Iteration   1: 0.874 ms/op
Iteration   2: 0.829 ms/op
Iteration   3: 0.944 ms/op
Iteration   4: 1.439 ms/op
Iteration   5: 1.460 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  1.109 ±(99.9%) 1.207 ms/op [Average]
  (min, avg, max) = (0.829, 1.109, 1.460), stdev = 0.314
  CI (99.9%): [? 0, 2.316] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 38.55% complete, ETA 02:17:17
# Fork: 1 of 1
# Warmup Iteration   1: 39.122 ms/op
# Warmup Iteration   2: 25.084 ms/op
# Warmup Iteration   3: 24.325 ms/op
# Warmup Iteration   4: 24.323 ms/op
# Warmup Iteration   5: 24.322 ms/op
Iteration   1: 25.501 ms/op
Iteration   2: 24.616 ms/op
Iteration   3: 31.589 ms/op
Iteration   4: 45.966 ms/op
Iteration   5: 37.899 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  33.114 ±(99.9%) 34.472 ms/op [Average]
  (min, avg, max) = (24.616, 33.114, 45.966), stdev = 8.952
  CI (99.9%): [? 0, 67.586] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 38.64% complete, ETA 02:17:05
# Fork: 1 of 1
# Warmup Iteration   1: 40.973 ms/op
# Warmup Iteration   2: 24.226 ms/op
# Warmup Iteration   3: 24.639 ms/op
# Warmup Iteration   4: 24.607 ms/op
# Warmup Iteration   5: 25.045 ms/op
Iteration   1: 25.180 ms/op
Iteration   2: 24.624 ms/op
Iteration   3: 29.217 ms/op
Iteration   4: 38.702 ms/op
Iteration   5: 41.371 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark":
  31.819 ±(99.9%) 29.903 ms/op [Average]
  (min, avg, max) = (24.624, 31.819, 41.371), stdev = 7.766
  CI (99.9%): [1.916, 61.721] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 38.72% complete, ETA 02:16:53
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark(ImmutableGetAllBenchmark.java:61)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_avgt_jmhStub(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_AverageTime(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 38.80% complete, ETA 02:16:43
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark(ImmutableGetAllBenchmark.java:61)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_avgt_jmhStub(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.getall.jmh_generated.ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.baselineGetAllValuesAndCommitBenchmark_AverageTime(ImmutableGetAllBenchmark_baselineGetAllValuesAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 38.89% complete, ETA 02:16:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 38.97% complete, ETA 02:16:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 39.06% complete, ETA 02:16:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 39.14% complete, ETA 02:15:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 39.23% complete, ETA 02:15:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 39.31% complete, ETA 02:15:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 39.39% complete, ETA 02:15:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 39.48% complete, ETA 02:15:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 39.56% complete, ETA 02:14:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 39.65% complete, ETA 02:14:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 39.73% complete, ETA 02:14:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 39.81% complete, ETA 02:14:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 39.90% complete, ETA 02:14:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 39.98% complete, ETA 02:13:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 40.07% complete, ETA 02:13:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 40.15% complete, ETA 02:13:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 40.24% complete, ETA 02:13:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 40.32% complete, ETA 02:13:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 40.40% complete, ETA 02:12:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 40.49% complete, ETA 02:12:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 40.57% complete, ETA 02:12:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 40.66% complete, ETA 02:12:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 40.74% complete, ETA 02:12:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 40.82% complete, ETA 02:11:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 40.91% complete, ETA 02:11:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 40.99% complete, ETA 02:11:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 41.08% complete, ETA 02:11:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 41.16% complete, ETA 02:11:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 41.25% complete, ETA 02:10:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 41.33% complete, ETA 02:10:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 41.41% complete, ETA 02:10:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 41.50% complete, ETA 02:10:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 41.58% complete, ETA 02:09:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 41.67% complete, ETA 02:09:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 41.75% complete, ETA 02:09:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 41.84% complete, ETA 02:09:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 41.92% complete, ETA 02:09:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 42.00% complete, ETA 02:08:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 42.09% complete, ETA 02:08:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 42.17% complete, ETA 02:08:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 42.26% complete, ETA 02:08:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 42.34% complete, ETA 02:08:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 42.42% complete, ETA 02:07:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 42.51% complete, ETA 02:07:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 42.59% complete, ETA 02:07:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 42.68% complete, ETA 02:07:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 42.76% complete, ETA 02:07:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 42.85% complete, ETA 02:06:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 42.93% complete, ETA 02:06:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 43.01% complete, ETA 02:06:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 43.10% complete, ETA 02:06:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 43.18% complete, ETA 02:06:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 43.27% complete, ETA 02:05:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 43.35% complete, ETA 02:05:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 43.43% complete, ETA 02:05:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 43.52% complete, ETA 02:05:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 43.60% complete, ETA 02:05:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 43.69% complete, ETA 02:04:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 43.77% complete, ETA 02:04:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 43.86% complete, ETA 02:04:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 43.94% complete, ETA 02:04:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 44.02% complete, ETA 02:04:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 44.11% complete, ETA 02:03:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 44.19% complete, ETA 02:03:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 44.28% complete, ETA 02:03:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 44.36% complete, ETA 02:03:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 44.44% complete, ETA 02:03:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 44.53% complete, ETA 02:02:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 44.61% complete, ETA 02:02:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 44.70% complete, ETA 02:02:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 44.78% complete, ETA 02:02:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 44.87% complete, ETA 02:02:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 44.95% complete, ETA 02:02:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.002 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 45.03% complete, ETA 02:01:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.002 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.005), stdev = 0.002
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 45.12% complete, ETA 02:01:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.002 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 45.20% complete, ETA 02:01:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 45.29% complete, ETA 02:01:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.002 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 45.37% complete, ETA 02:01:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 45.45% complete, ETA 02:01:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 45.54% complete, ETA 02:00:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 45.62% complete, ETA 02:00:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10?³, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 45.71% complete, ETA 02:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10?³, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 45.79% complete, ETA 02:00:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 45.88% complete, ETA 02:00:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 45.96% complete, ETA 01:59:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.006 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.001
  CI (99.9%): [0.002, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 46.04% complete, ETA 01:59:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.009), stdev = 0.001
  CI (99.9%): [0.001, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 46.13% complete, ETA 01:59:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.009), stdev = 0.001
  CI (99.9%): [0.001, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 46.21% complete, ETA 01:59:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.006 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.003, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 46.30% complete, ETA 01:59:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.006 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.001
  CI (99.9%): [0.002, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 46.38% complete, ETA 01:59:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.006 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.003, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 46.46% complete, ETA 01:58:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.012 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.010, 0.012, 0.015), stdev = 0.002
  CI (99.9%): [0.006, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 46.55% complete, ETA 01:58:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.012 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.010, 0.012, 0.014), stdev = 0.002
  CI (99.9%): [0.006, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 46.63% complete, ETA 01:58:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.013 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.018), stdev = 0.003
  CI (99.9%): [0.001, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 46.72% complete, ETA 01:58:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.012 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.010, 0.012, 0.015), stdev = 0.002
  CI (99.9%): [0.004, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 46.80% complete, ETA 01:58:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.012 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.010, 0.012, 0.015), stdev = 0.002
  CI (99.9%): [0.006, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 46.89% complete, ETA 01:58:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.013 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.017), stdev = 0.003
  CI (99.9%): [0.003, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 46.97% complete, ETA 01:57:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.027 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.025 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.020, 0.025, 0.029), stdev = 0.004
  CI (99.9%): [0.011, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 47.05% complete, ETA 01:57:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.024 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.020, 0.024, 0.030), stdev = 0.004
  CI (99.9%): [0.009, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 47.14% complete, ETA 01:57:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.024 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.021, 0.024, 0.031), stdev = 0.004
  CI (99.9%): [0.009, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 47.22% complete, ETA 01:57:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.024 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.020, 0.024, 0.026), stdev = 0.003
  CI (99.9%): [0.012, 0.035] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 47.31% complete, ETA 01:57:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.026 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.019, 0.026, 0.036), stdev = 0.006
  CI (99.9%): [0.001, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 47.39% complete, ETA 01:56:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.026 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.021, 0.026, 0.033), stdev = 0.005
  CI (99.9%): [0.007, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 47.47% complete, ETA 01:56:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.061 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.046 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.041 ms/op
Iteration   4: 0.051 ms/op
Iteration   5: 0.062 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.048 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.039, 0.048, 0.062), stdev = 0.009
  CI (99.9%): [0.012, 0.083] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 47.56% complete, ETA 01:56:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
# Warmup Iteration   2: 0.049 ms/op
# Warmup Iteration   3: 0.041 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.041 ms/op
Iteration   3: 0.042 ms/op
Iteration   4: 0.053 ms/op
Iteration   5: 0.057 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.048 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.041, 0.048, 0.057), stdev = 0.007
  CI (99.9%): [0.021, 0.075] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 47.64% complete, ETA 01:56:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.059 ms/op
# Warmup Iteration   2: 0.049 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.057 ms/op
Iteration   5: 0.055 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.048 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.039, 0.048, 0.057), stdev = 0.007
  CI (99.9%): [0.020, 0.077] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 47.73% complete, ETA 01:56:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.065 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.065 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.050 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.039, 0.050, 0.065), stdev = 0.009
  CI (99.9%): [0.014, 0.086] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 47.81% complete, ETA 01:56:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.050 ms/op
# Warmup Iteration   3: 0.042 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.057 ms/op
Iteration   5: 0.066 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.051 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.042, 0.051, 0.066), stdev = 0.010
  CI (99.9%): [0.012, 0.090] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 47.90% complete, ETA 01:55:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.072 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: 0.046 ms/op
Iteration   4: 0.055 ms/op
Iteration   5: 0.061 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.050 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.040, 0.050, 0.061), stdev = 0.008
  CI (99.9%): [0.019, 0.082] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 47.98% complete, ETA 01:55:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.120 ms/op
# Warmup Iteration   2: 0.085 ms/op
# Warmup Iteration   3: 0.088 ms/op
# Warmup Iteration   4: 0.084 ms/op
# Warmup Iteration   5: 0.082 ms/op
Iteration   1: 0.096 ms/op
Iteration   2: 0.081 ms/op
Iteration   3: 0.089 ms/op
Iteration   4: 0.096 ms/op
Iteration   5: 0.113 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.095 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (0.081, 0.095, 0.113), stdev = 0.012
  CI (99.9%): [0.051, 0.140] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 48.06% complete, ETA 01:55:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.129 ms/op
# Warmup Iteration   2: 0.090 ms/op
# Warmup Iteration   3: 0.087 ms/op
# Warmup Iteration   4: 0.085 ms/op
# Warmup Iteration   5: 0.087 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.079 ms/op
Iteration   3: 0.086 ms/op
Iteration   4: 0.107 ms/op
Iteration   5: 0.123 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.097 ±(99.9%) 0.067 ms/op [Average]
  (min, avg, max) = (0.079, 0.097, 0.123), stdev = 0.018
  CI (99.9%): [0.030, 0.165] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 48.15% complete, ETA 01:55:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.133 ms/op
# Warmup Iteration   2: 0.090 ms/op
# Warmup Iteration   3: 0.087 ms/op
# Warmup Iteration   4: 0.088 ms/op
# Warmup Iteration   5: 0.081 ms/op
Iteration   1: 0.094 ms/op
Iteration   2: 0.081 ms/op
Iteration   3: 0.086 ms/op
Iteration   4: 0.107 ms/op
Iteration   5: 0.123 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.098 ±(99.9%) 0.065 ms/op [Average]
  (min, avg, max) = (0.081, 0.098, 0.123), stdev = 0.017
  CI (99.9%): [0.033, 0.163] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 48.23% complete, ETA 01:55:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.122 ms/op
# Warmup Iteration   2: 0.099 ms/op
# Warmup Iteration   3: 0.084 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.075 ms/op
Iteration   1: 0.097 ms/op
Iteration   2: 0.077 ms/op
Iteration   3: 0.087 ms/op
Iteration   4: 0.111 ms/op
Iteration   5: 0.114 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.097 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.077, 0.097, 0.114), stdev = 0.016
  CI (99.9%): [0.037, 0.157] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 48.32% complete, ETA 01:54:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.124 ms/op
# Warmup Iteration   2: 0.088 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.083 ms/op
# Warmup Iteration   5: 0.083 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.077 ms/op
Iteration   3: 0.103 ms/op
Iteration   4: 0.108 ms/op
Iteration   5: 0.134 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.103 ±(99.9%) 0.081 ms/op [Average]
  (min, avg, max) = (0.077, 0.103, 0.134), stdev = 0.021
  CI (99.9%): [0.021, 0.184] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 48.40% complete, ETA 01:54:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.129 ms/op
# Warmup Iteration   2: 0.095 ms/op
# Warmup Iteration   3: 0.086 ms/op
# Warmup Iteration   4: 0.085 ms/op
# Warmup Iteration   5: 0.080 ms/op
Iteration   1: 0.093 ms/op
Iteration   2: 0.083 ms/op
Iteration   3: 0.097 ms/op
Iteration   4: 0.108 ms/op
Iteration   5: 0.120 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.100 ±(99.9%) 0.054 ms/op [Average]
  (min, avg, max) = (0.083, 0.100, 0.120), stdev = 0.014
  CI (99.9%): [0.046, 0.154] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 48.48% complete, ETA 01:54:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.263 ms/op
# Warmup Iteration   2: 0.195 ms/op
# Warmup Iteration   3: 0.164 ms/op
# Warmup Iteration   4: 0.173 ms/op
# Warmup Iteration   5: 0.168 ms/op
Iteration   1: 0.185 ms/op
Iteration   2: 0.164 ms/op
Iteration   3: 0.174 ms/op
Iteration   4: 0.208 ms/op
Iteration   5: 0.220 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.190 ±(99.9%) 0.090 ms/op [Average]
  (min, avg, max) = (0.164, 0.190, 0.220), stdev = 0.023
  CI (99.9%): [0.100, 0.281] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 48.57% complete, ETA 01:54:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.273 ms/op
# Warmup Iteration   2: 0.178 ms/op
# Warmup Iteration   3: 0.173 ms/op
# Warmup Iteration   4: 0.172 ms/op
# Warmup Iteration   5: 0.151 ms/op
Iteration   1: 0.191 ms/op
Iteration   2: 0.166 ms/op
Iteration   3: 0.178 ms/op
Iteration   4: 0.198 ms/op
Iteration   5: 0.246 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.196 ±(99.9%) 0.118 ms/op [Average]
  (min, avg, max) = (0.166, 0.196, 0.246), stdev = 0.031
  CI (99.9%): [0.078, 0.314] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 48.65% complete, ETA 01:54:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.226 ms/op
# Warmup Iteration   2: 0.194 ms/op
# Warmup Iteration   3: 0.179 ms/op
# Warmup Iteration   4: 0.157 ms/op
# Warmup Iteration   5: 0.165 ms/op
Iteration   1: 0.190 ms/op
Iteration   2: 0.157 ms/op
Iteration   3: 0.178 ms/op
Iteration   4: 0.191 ms/op
Iteration   5: 0.231 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.189 ±(99.9%) 0.105 ms/op [Average]
  (min, avg, max) = (0.157, 0.189, 0.231), stdev = 0.027
  CI (99.9%): [0.084, 0.295] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 48.74% complete, ETA 01:54:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.265 ms/op
# Warmup Iteration   2: 0.176 ms/op
# Warmup Iteration   3: 0.172 ms/op
# Warmup Iteration   4: 0.168 ms/op
# Warmup Iteration   5: 0.174 ms/op
Iteration   1: 0.186 ms/op
Iteration   2: 0.158 ms/op
Iteration   3: 0.170 ms/op
Iteration   4: 0.207 ms/op
Iteration   5: 0.241 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.193 ±(99.9%) 0.127 ms/op [Average]
  (min, avg, max) = (0.158, 0.193, 0.241), stdev = 0.033
  CI (99.9%): [0.066, 0.319] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 48.82% complete, ETA 01:53:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.244 ms/op
# Warmup Iteration   2: 0.174 ms/op
# Warmup Iteration   3: 0.179 ms/op
# Warmup Iteration   4: 0.175 ms/op
# Warmup Iteration   5: 0.162 ms/op
Iteration   1: 0.183 ms/op
Iteration   2: 0.156 ms/op
Iteration   3: 0.176 ms/op
Iteration   4: 0.219 ms/op
Iteration   5: 0.258 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.199 ±(99.9%) 0.154 ms/op [Average]
  (min, avg, max) = (0.156, 0.199, 0.258), stdev = 0.040
  CI (99.9%): [0.044, 0.353] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 48.91% complete, ETA 01:53:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.246 ms/op
# Warmup Iteration   2: 0.169 ms/op
# Warmup Iteration   3: 0.196 ms/op
# Warmup Iteration   4: 0.161 ms/op
# Warmup Iteration   5: 0.150 ms/op
Iteration   1: 0.192 ms/op
Iteration   2: 0.166 ms/op
Iteration   3: 0.177 ms/op
Iteration   4: 0.218 ms/op
Iteration   5: 0.233 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.197 ±(99.9%) 0.107 ms/op [Average]
  (min, avg, max) = (0.166, 0.197, 0.233), stdev = 0.028
  CI (99.9%): [0.091, 0.304] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 48.99% complete, ETA 01:53:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.464 ms/op
# Warmup Iteration   2: 0.407 ms/op
# Warmup Iteration   3: 0.355 ms/op
# Warmup Iteration   4: 0.319 ms/op
# Warmup Iteration   5: 0.333 ms/op
Iteration   1: 0.373 ms/op
Iteration   2: 0.308 ms/op
Iteration   3: 0.376 ms/op
Iteration   4: 0.417 ms/op
Iteration   5: 0.446 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.384 ±(99.9%) 0.201 ms/op [Average]
  (min, avg, max) = (0.308, 0.384, 0.446), stdev = 0.052
  CI (99.9%): [0.184, 0.585] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 49.07% complete, ETA 01:53:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.526 ms/op
# Warmup Iteration   2: 0.373 ms/op
# Warmup Iteration   3: 0.357 ms/op
# Warmup Iteration   4: 0.322 ms/op
# Warmup Iteration   5: 0.320 ms/op
Iteration   1: 0.367 ms/op
Iteration   2: 0.332 ms/op
Iteration   3: 0.332 ms/op
Iteration   4: 0.362 ms/op
Iteration   5: 0.474 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.373 ±(99.9%) 0.225 ms/op [Average]
  (min, avg, max) = (0.332, 0.373, 0.474), stdev = 0.058
  CI (99.9%): [0.148, 0.599] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 49.16% complete, ETA 01:53:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.542 ms/op
# Warmup Iteration   2: 0.392 ms/op
# Warmup Iteration   3: 0.332 ms/op
# Warmup Iteration   4: 0.330 ms/op
# Warmup Iteration   5: 0.309 ms/op
Iteration   1: 0.372 ms/op
Iteration   2: 0.335 ms/op
Iteration   3: 0.381 ms/op
Iteration   4: 0.393 ms/op
Iteration   5: 0.458 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.388 ±(99.9%) 0.173 ms/op [Average]
  (min, avg, max) = (0.335, 0.388, 0.458), stdev = 0.045
  CI (99.9%): [0.215, 0.560] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 49.24% complete, ETA 01:53:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.470 ms/op
# Warmup Iteration   2: 0.386 ms/op
# Warmup Iteration   3: 0.349 ms/op
# Warmup Iteration   4: 0.321 ms/op
# Warmup Iteration   5: 0.328 ms/op
Iteration   1: 0.385 ms/op
Iteration   2: 0.314 ms/op
Iteration   3: 0.352 ms/op
Iteration   4: 0.399 ms/op
Iteration   5: 0.533 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.396 ±(99.9%) 0.319 ms/op [Average]
  (min, avg, max) = (0.314, 0.396, 0.533), stdev = 0.083
  CI (99.9%): [0.077, 0.716] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 49.33% complete, ETA 01:52:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.492 ms/op
# Warmup Iteration   2: 0.362 ms/op
# Warmup Iteration   3: 0.357 ms/op
# Warmup Iteration   4: 0.328 ms/op
# Warmup Iteration   5: 0.326 ms/op
Iteration   1: 0.369 ms/op
Iteration   2: 0.331 ms/op
Iteration   3: 0.357 ms/op
Iteration   4: 0.398 ms/op
Iteration   5: 0.514 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.394 ±(99.9%) 0.274 ms/op [Average]
  (min, avg, max) = (0.331, 0.394, 0.514), stdev = 0.071
  CI (99.9%): [0.120, 0.668] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 49.41% complete, ETA 01:52:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.497 ms/op
# Warmup Iteration   2: 0.353 ms/op
# Warmup Iteration   3: 0.363 ms/op
# Warmup Iteration   4: 0.336 ms/op
# Warmup Iteration   5: 0.320 ms/op
Iteration   1: 0.368 ms/op
Iteration   2: 0.315 ms/op
Iteration   3: 0.367 ms/op
Iteration   4: 0.454 ms/op
Iteration   5: 0.516 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.404 ±(99.9%) 0.308 ms/op [Average]
  (min, avg, max) = (0.315, 0.404, 0.516), stdev = 0.080
  CI (99.9%): [0.096, 0.713] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 49.49% complete, ETA 01:52:30
# Fork: 1 of 1
# Warmup Iteration   1: 1.061 ms/op
# Warmup Iteration   2: 0.713 ms/op
# Warmup Iteration   3: 0.719 ms/op
# Warmup Iteration   4: 0.670 ms/op
# Warmup Iteration   5: 0.626 ms/op
Iteration   1: 0.738 ms/op
Iteration   2: 0.655 ms/op
Iteration   3: 0.700 ms/op
Iteration   4: 0.890 ms/op
Iteration   5: 1.030 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.803 ±(99.9%) 0.597 ms/op [Average]
  (min, avg, max) = (0.655, 0.803, 1.030), stdev = 0.155
  CI (99.9%): [0.206, 1.400] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 49.58% complete, ETA 01:52:19
# Fork: 1 of 1
# Warmup Iteration   1: 1.083 ms/op
# Warmup Iteration   2: 0.766 ms/op
# Warmup Iteration   3: 0.662 ms/op
# Warmup Iteration   4: 0.748 ms/op
# Warmup Iteration   5: 0.631 ms/op
Iteration   1: 0.740 ms/op
Iteration   2: 0.622 ms/op
Iteration   3: 0.772 ms/op
Iteration   4: 0.913 ms/op
Iteration   5: 0.872 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.784 ±(99.9%) 0.443 ms/op [Average]
  (min, avg, max) = (0.622, 0.784, 0.913), stdev = 0.115
  CI (99.9%): [0.341, 1.227] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 49.66% complete, ETA 01:52:08
# Fork: 1 of 1
# Warmup Iteration   1: 1.040 ms/op
# Warmup Iteration   2: 0.773 ms/op
# Warmup Iteration   3: 0.655 ms/op
# Warmup Iteration   4: 0.697 ms/op
# Warmup Iteration   5: 0.639 ms/op
Iteration   1: 0.735 ms/op
Iteration   2: 0.673 ms/op
Iteration   3: 0.750 ms/op
Iteration   4: 0.827 ms/op
Iteration   5: 0.821 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.761 ±(99.9%) 0.247 ms/op [Average]
  (min, avg, max) = (0.673, 0.761, 0.827), stdev = 0.064
  CI (99.9%): [0.513, 1.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 49.75% complete, ETA 01:51:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.942 ms/op
# Warmup Iteration   2: 0.820 ms/op
# Warmup Iteration   3: 0.687 ms/op
# Warmup Iteration   4: 0.635 ms/op
# Warmup Iteration   5: 0.668 ms/op
Iteration   1: 0.740 ms/op
Iteration   2: 0.670 ms/op
Iteration   3: 0.669 ms/op
Iteration   4: 0.794 ms/op
Iteration   5: 0.961 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.767 ±(99.9%) 0.464 ms/op [Average]
  (min, avg, max) = (0.669, 0.767, 0.961), stdev = 0.120
  CI (99.9%): [0.303, 1.231] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 49.83% complete, ETA 01:51:47
# Fork: 1 of 1
# Warmup Iteration   1: 1.072 ms/op
# Warmup Iteration   2: 0.719 ms/op
# Warmup Iteration   3: 0.689 ms/op
# Warmup Iteration   4: 0.659 ms/op
# Warmup Iteration   5: 0.645 ms/op
Iteration   1: 0.754 ms/op
Iteration   2: 0.697 ms/op
Iteration   3: 0.725 ms/op
Iteration   4: 0.833 ms/op
Iteration   5: 0.987 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.799 ±(99.9%) 0.450 ms/op [Average]
  (min, avg, max) = (0.697, 0.799, 0.987), stdev = 0.117
  CI (99.9%): [0.349, 1.249] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 49.92% complete, ETA 01:51:36
# Fork: 1 of 1
# Warmup Iteration   1: 1.109 ms/op
# Warmup Iteration   2: 0.792 ms/op
# Warmup Iteration   3: 0.648 ms/op
# Warmup Iteration   4: 0.734 ms/op
# Warmup Iteration   5: 0.645 ms/op
Iteration   1: 0.801 ms/op
Iteration   2: 0.656 ms/op
Iteration   3: 0.709 ms/op
Iteration   4: 0.792 ms/op
Iteration   5: 0.858 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark":
  0.763 ±(99.9%) 0.308 ms/op [Average]
  (min, avg, max) = (0.656, 0.763, 0.858), stdev = 0.080
  CI (99.9%): [0.455, 1.072] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 50.00% complete, ETA 01:51:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 50.08% complete, ETA 01:51:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 50.17% complete, ETA 01:51:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 50.25% complete, ETA 01:50:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 50.34% complete, ETA 01:50:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 50.42% complete, ETA 01:50:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 50.51% complete, ETA 01:50:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 50.59% complete, ETA 01:50:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 50.67% complete, ETA 01:49:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 50.76% complete, ETA 01:49:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 50.84% complete, ETA 01:49:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 50.93% complete, ETA 01:49:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 51.01% complete, ETA 01:49:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 51.09% complete, ETA 01:48:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 51.18% complete, ETA 01:48:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 51.26% complete, ETA 01:48:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 51.35% complete, ETA 01:48:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 51.43% complete, ETA 01:48:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 51.52% complete, ETA 01:47:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 51.60% complete, ETA 01:47:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 51.68% complete, ETA 01:47:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 51.77% complete, ETA 01:47:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 51.85% complete, ETA 01:47:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 51.94% complete, ETA 01:46:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 52.02% complete, ETA 01:46:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.008 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.001
  CI (99.9%): [0.003, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 52.10% complete, ETA 01:46:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.008 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.009), stdev = 0.001
  CI (99.9%): [0.004, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 52.19% complete, ETA 01:46:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.008 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.001
  CI (99.9%): [0.003, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 52.27% complete, ETA 01:46:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.008 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.001
  CI (99.9%): [0.003, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 52.36% complete, ETA 01:45:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.010 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.013), stdev = 0.002
  CI (99.9%): [0.002, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 52.44% complete, ETA 01:45:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.008 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.001
  CI (99.9%): [0.003, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 52.53% complete, ETA 01:45:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.017 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.014, 0.017, 0.020), stdev = 0.003
  CI (99.9%): [0.006, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 52.61% complete, ETA 01:45:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.017 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.014, 0.017, 0.019), stdev = 0.002
  CI (99.9%): [0.008, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 52.69% complete, ETA 01:45:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.016 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.014, 0.016, 0.018), stdev = 0.002
  CI (99.9%): [0.009, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 52.78% complete, ETA 01:44:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.016 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.014, 0.016, 0.019), stdev = 0.002
  CI (99.9%): [0.007, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 52.86% complete, ETA 01:44:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.016 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.014, 0.016, 0.019), stdev = 0.002
  CI (99.9%): [0.008, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 52.95% complete, ETA 01:44:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.016 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.014, 0.016, 0.020), stdev = 0.003
  CI (99.9%): [0.006, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 53.03% complete, ETA 01:44:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.040 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.033 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.028, 0.033, 0.040), stdev = 0.005
  CI (99.9%): [0.011, 0.054] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 53.11% complete, ETA 01:44:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.032 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.028, 0.032, 0.042), stdev = 0.006
  CI (99.9%): [0.008, 0.057] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 53.20% complete, ETA 01:43:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.032 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.028, 0.032, 0.037), stdev = 0.004
  CI (99.9%): [0.016, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 53.28% complete, ETA 01:43:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.032 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.028, 0.032, 0.038), stdev = 0.004
  CI (99.9%): [0.016, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 53.37% complete, ETA 01:43:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.040 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.033 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.028, 0.033, 0.037), stdev = 0.004
  CI (99.9%): [0.017, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 53.45% complete, ETA 01:43:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.033 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.034 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.028, 0.034, 0.038), stdev = 0.004
  CI (99.9%): [0.016, 0.051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 53.54% complete, ETA 01:43:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.065 ms/op
# Warmup Iteration   2: 0.062 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.055 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.056 ms/op
Iteration   3: 0.068 ms/op
Iteration   4: 0.076 ms/op
Iteration   5: 0.078 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.067 ±(99.9%) 0.042 ms/op [Average]
  (min, avg, max) = (0.055, 0.067, 0.078), stdev = 0.011
  CI (99.9%): [0.025, 0.109] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 53.62% complete, ETA 01:42:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
# Warmup Iteration   2: 0.056 ms/op
# Warmup Iteration   3: 0.061 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.055 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.056 ms/op
Iteration   3: 0.061 ms/op
Iteration   4: 0.080 ms/op
Iteration   5: 0.072 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.065 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.056, 0.065, 0.080), stdev = 0.010
  CI (99.9%): [0.025, 0.105] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 53.70% complete, ETA 01:42:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.056 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.062 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.056 ms/op
Iteration   3: 0.062 ms/op
Iteration   4: 0.077 ms/op
Iteration   5: 0.080 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.066 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (0.055, 0.066, 0.080), stdev = 0.012
  CI (99.9%): [0.021, 0.111] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 53.79% complete, ETA 01:42:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
# Warmup Iteration   2: 0.056 ms/op
# Warmup Iteration   3: 0.056 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.061 ms/op
Iteration   1: 0.056 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.060 ms/op
Iteration   4: 0.071 ms/op
Iteration   5: 0.078 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.065 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.056, 0.065, 0.078), stdev = 0.010
  CI (99.9%): [0.027, 0.102] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 53.87% complete, ETA 01:42:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
# Warmup Iteration   2: 0.055 ms/op
# Warmup Iteration   3: 0.055 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.059 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.056 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.071 ms/op
Iteration   5: 0.073 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.064 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.056, 0.064, 0.073), stdev = 0.008
  CI (99.9%): [0.034, 0.095] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 53.96% complete, ETA 01:42:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.072 ms/op
# Warmup Iteration   2: 0.055 ms/op
# Warmup Iteration   3: 0.055 ms/op
# Warmup Iteration   4: 0.055 ms/op
# Warmup Iteration   5: 0.056 ms/op
Iteration   1: 0.061 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.062 ms/op
Iteration   4: 0.072 ms/op
Iteration   5: 0.073 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.065 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.057, 0.065, 0.073), stdev = 0.007
  CI (99.9%): [0.037, 0.093] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 54.04% complete, ETA 01:41:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.145 ms/op
# Warmup Iteration   2: 0.111 ms/op
# Warmup Iteration   3: 0.114 ms/op
# Warmup Iteration   4: 0.112 ms/op
# Warmup Iteration   5: 0.111 ms/op
Iteration   1: 0.115 ms/op
Iteration   2: 0.115 ms/op
Iteration   3: 0.118 ms/op
Iteration   4: 0.150 ms/op
Iteration   5: 0.151 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.130 ±(99.9%) 0.073 ms/op [Average]
  (min, avg, max) = (0.115, 0.130, 0.151), stdev = 0.019
  CI (99.9%): [0.057, 0.203] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 54.12% complete, ETA 01:41:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.141 ms/op
# Warmup Iteration   2: 0.118 ms/op
# Warmup Iteration   3: 0.111 ms/op
# Warmup Iteration   4: 0.112 ms/op
# Warmup Iteration   5: 0.110 ms/op
Iteration   1: 0.114 ms/op
Iteration   2: 0.121 ms/op
Iteration   3: 0.126 ms/op
Iteration   4: 0.147 ms/op
Iteration   5: 0.133 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.128 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (0.114, 0.128, 0.147), stdev = 0.013
  CI (99.9%): [0.079, 0.177] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 54.21% complete, ETA 01:41:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.135 ms/op
# Warmup Iteration   2: 0.125 ms/op
# Warmup Iteration   3: 0.113 ms/op
# Warmup Iteration   4: 0.111 ms/op
# Warmup Iteration   5: 0.110 ms/op
Iteration   1: 0.110 ms/op
Iteration   2: 0.111 ms/op
Iteration   3: 0.135 ms/op
Iteration   4: 0.141 ms/op
Iteration   5: 0.132 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.126 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (0.110, 0.126, 0.141), stdev = 0.014
  CI (99.9%): [0.070, 0.181] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 54.29% complete, ETA 01:41:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.131 ms/op
# Warmup Iteration   2: 0.112 ms/op
# Warmup Iteration   3: 0.125 ms/op
# Warmup Iteration   4: 0.112 ms/op
# Warmup Iteration   5: 0.116 ms/op
Iteration   1: 0.112 ms/op
Iteration   2: 0.112 ms/op
Iteration   3: 0.134 ms/op
Iteration   4: 0.145 ms/op
Iteration   5: 0.149 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.130 ±(99.9%) 0.068 ms/op [Average]
  (min, avg, max) = (0.112, 0.130, 0.149), stdev = 0.018
  CI (99.9%): [0.063, 0.198] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 54.38% complete, ETA 01:41:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.154 ms/op
# Warmup Iteration   2: 0.111 ms/op
# Warmup Iteration   3: 0.117 ms/op
# Warmup Iteration   4: 0.114 ms/op
# Warmup Iteration   5: 0.112 ms/op
Iteration   1: 0.111 ms/op
Iteration   2: 0.111 ms/op
Iteration   3: 0.129 ms/op
Iteration   4: 0.155 ms/op
Iteration   5: 0.145 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.130 ±(99.9%) 0.077 ms/op [Average]
  (min, avg, max) = (0.111, 0.130, 0.155), stdev = 0.020
  CI (99.9%): [0.053, 0.207] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 54.46% complete, ETA 01:40:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.133 ms/op
# Warmup Iteration   2: 0.111 ms/op
# Warmup Iteration   3: 0.111 ms/op
# Warmup Iteration   4: 0.127 ms/op
# Warmup Iteration   5: 0.111 ms/op
Iteration   1: 0.111 ms/op
Iteration   2: 0.109 ms/op
Iteration   3: 0.128 ms/op
Iteration   4: 0.158 ms/op
Iteration   5: 0.156 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.132 ±(99.9%) 0.090 ms/op [Average]
  (min, avg, max) = (0.109, 0.132, 0.158), stdev = 0.023
  CI (99.9%): [0.042, 0.222] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 54.55% complete, ETA 01:40:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.278 ms/op
# Warmup Iteration   2: 0.226 ms/op
# Warmup Iteration   3: 0.221 ms/op
# Warmup Iteration   4: 0.222 ms/op
# Warmup Iteration   5: 0.239 ms/op
Iteration   1: 0.221 ms/op
Iteration   2: 0.228 ms/op
Iteration   3: 0.247 ms/op
Iteration   4: 0.306 ms/op
Iteration   5: 0.322 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.265 ±(99.9%) 0.179 ms/op [Average]
  (min, avg, max) = (0.221, 0.265, 0.322), stdev = 0.046
  CI (99.9%): [0.086, 0.443] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 54.63% complete, ETA 01:40:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.263 ms/op
# Warmup Iteration   2: 0.223 ms/op
# Warmup Iteration   3: 0.222 ms/op
# Warmup Iteration   4: 0.231 ms/op
# Warmup Iteration   5: 0.242 ms/op
Iteration   1: 0.223 ms/op
Iteration   2: 0.223 ms/op
Iteration   3: 0.244 ms/op
Iteration   4: 0.303 ms/op
Iteration   5: 0.288 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.256 ±(99.9%) 0.143 ms/op [Average]
  (min, avg, max) = (0.223, 0.256, 0.303), stdev = 0.037
  CI (99.9%): [0.114, 0.399] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 54.71% complete, ETA 01:40:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.266 ms/op
# Warmup Iteration   2: 0.224 ms/op
# Warmup Iteration   3: 0.221 ms/op
# Warmup Iteration   4: 0.221 ms/op
# Warmup Iteration   5: 0.223 ms/op
Iteration   1: 0.252 ms/op
Iteration   2: 0.223 ms/op
Iteration   3: 0.242 ms/op
Iteration   4: 0.297 ms/op
Iteration   5: 0.290 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.261 ±(99.9%) 0.122 ms/op [Average]
  (min, avg, max) = (0.223, 0.261, 0.297), stdev = 0.032
  CI (99.9%): [0.139, 0.382] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 54.80% complete, ETA 01:40:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.284 ms/op
# Warmup Iteration   2: 0.232 ms/op
# Warmup Iteration   3: 0.224 ms/op
# Warmup Iteration   4: 0.222 ms/op
# Warmup Iteration   5: 0.224 ms/op
Iteration   1: 0.226 ms/op
Iteration   2: 0.234 ms/op
Iteration   3: 0.248 ms/op
Iteration   4: 0.300 ms/op
Iteration   5: 0.307 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.263 ±(99.9%) 0.146 ms/op [Average]
  (min, avg, max) = (0.226, 0.263, 0.307), stdev = 0.038
  CI (99.9%): [0.117, 0.409] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 54.88% complete, ETA 01:39:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.269 ms/op
# Warmup Iteration   2: 0.230 ms/op
# Warmup Iteration   3: 0.223 ms/op
# Warmup Iteration   4: 0.220 ms/op
# Warmup Iteration   5: 0.227 ms/op
Iteration   1: 0.219 ms/op
Iteration   2: 0.239 ms/op
Iteration   3: 0.260 ms/op
Iteration   4: 0.288 ms/op
Iteration   5: 0.293 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.260 ±(99.9%) 0.121 ms/op [Average]
  (min, avg, max) = (0.219, 0.260, 0.293), stdev = 0.032
  CI (99.9%): [0.138, 0.381] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 54.97% complete, ETA 01:39:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.303 ms/op
# Warmup Iteration   2: 0.243 ms/op
# Warmup Iteration   3: 0.221 ms/op
# Warmup Iteration   4: 0.273 ms/op
# Warmup Iteration   5: 0.263 ms/op
Iteration   1: 0.227 ms/op
Iteration   2: 0.240 ms/op
Iteration   3: 0.278 ms/op
Iteration   4: 0.306 ms/op
Iteration   5: 0.292 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.269 ±(99.9%) 0.130 ms/op [Average]
  (min, avg, max) = (0.227, 0.269, 0.306), stdev = 0.034
  CI (99.9%): [0.139, 0.399] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 55.05% complete, ETA 01:39:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.534 ms/op
# Warmup Iteration   2: 0.471 ms/op
# Warmup Iteration   3: 0.471 ms/op
# Warmup Iteration   4: 0.460 ms/op
# Warmup Iteration   5: 0.441 ms/op
Iteration   1: 0.442 ms/op
Iteration   2: 0.447 ms/op
Iteration   3: 0.524 ms/op
Iteration   4: 0.596 ms/op
Iteration   5: 0.621 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.526 ±(99.9%) 0.318 ms/op [Average]
  (min, avg, max) = (0.442, 0.526, 0.621), stdev = 0.083
  CI (99.9%): [0.208, 0.844] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 55.13% complete, ETA 01:39:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.595 ms/op
# Warmup Iteration   2: 0.467 ms/op
# Warmup Iteration   3: 0.487 ms/op
# Warmup Iteration   4: 0.448 ms/op
# Warmup Iteration   5: 0.444 ms/op
Iteration   1: 0.443 ms/op
Iteration   2: 0.463 ms/op
Iteration   3: 0.499 ms/op
Iteration   4: 0.654 ms/op
Iteration   5: 0.635 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.539 ±(99.9%) 0.380 ms/op [Average]
  (min, avg, max) = (0.443, 0.539, 0.654), stdev = 0.099
  CI (99.9%): [0.159, 0.919] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 55.22% complete, ETA 01:39:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.537 ms/op
# Warmup Iteration   2: 0.442 ms/op
# Warmup Iteration   3: 0.458 ms/op
# Warmup Iteration   4: 0.486 ms/op
# Warmup Iteration   5: 0.445 ms/op
Iteration   1: 0.469 ms/op
Iteration   2: 0.445 ms/op
Iteration   3: 0.494 ms/op
Iteration   4: 0.591 ms/op
Iteration   5: 0.605 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.521 ±(99.9%) 0.280 ms/op [Average]
  (min, avg, max) = (0.445, 0.521, 0.605), stdev = 0.073
  CI (99.9%): [0.241, 0.801] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 55.30% complete, ETA 01:39:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.524 ms/op
# Warmup Iteration   2: 0.444 ms/op
# Warmup Iteration   3: 0.451 ms/op
# Warmup Iteration   4: 0.454 ms/op
# Warmup Iteration   5: 0.483 ms/op
Iteration   1: 0.455 ms/op
Iteration   2: 0.460 ms/op
Iteration   3: 0.492 ms/op
Iteration   4: 0.648 ms/op
Iteration   5: 0.671 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.545 ±(99.9%) 0.406 ms/op [Average]
  (min, avg, max) = (0.455, 0.545, 0.671), stdev = 0.106
  CI (99.9%): [0.139, 0.952] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 55.39% complete, ETA 01:38:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.548 ms/op
# Warmup Iteration   2: 0.447 ms/op
# Warmup Iteration   3: 0.462 ms/op
# Warmup Iteration   4: 0.438 ms/op
# Warmup Iteration   5: 0.479 ms/op
Iteration   1: 0.446 ms/op
Iteration   2: 0.445 ms/op
Iteration   3: 0.505 ms/op
Iteration   4: 0.600 ms/op
Iteration   5: 0.603 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.520 ±(99.9%) 0.302 ms/op [Average]
  (min, avg, max) = (0.445, 0.520, 0.603), stdev = 0.079
  CI (99.9%): [0.217, 0.822] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 55.47% complete, ETA 01:38:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.554 ms/op
# Warmup Iteration   2: 0.444 ms/op
# Warmup Iteration   3: 0.443 ms/op
# Warmup Iteration   4: 0.433 ms/op
# Warmup Iteration   5: 0.459 ms/op
Iteration   1: 0.454 ms/op
Iteration   2: 0.458 ms/op
Iteration   3: 0.493 ms/op
Iteration   4: 0.539 ms/op
Iteration   5: 0.563 ms/op


Result "tools.refinery.store.map.benchmarks.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark":
  0.501 ±(99.9%) 0.187 ms/op [Average]
  (min, avg, max) = (0.454, 0.501, 0.563), stdev = 0.048
  CI (99.9%): [0.315, 0.688] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 55.56% complete, ETA 01:38:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.027 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.020, 0.027, 0.038), stdev = 0.008
  CI (99.9%): [? 0, 0.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 55.64% complete, ETA 01:38:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.026 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.020, 0.026, 0.033), stdev = 0.006
  CI (99.9%): [0.001, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 55.72% complete, ETA 01:38:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.734 ms/op
# Warmup Iteration   2: 0.645 ms/op
# Warmup Iteration   3: 0.654 ms/op
# Warmup Iteration   4: 0.627 ms/op
# Warmup Iteration   5: 0.668 ms/op
Iteration   1: 0.653 ms/op
Iteration   2: 0.692 ms/op
Iteration   3: 0.765 ms/op
Iteration   4: 1.148 ms/op
Iteration   5: 1.087 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.869 ±(99.9%) 0.891 ms/op [Average]
  (min, avg, max) = (0.653, 0.869, 1.148), stdev = 0.231
  CI (99.9%): [? 0, 1.760] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 55.81% complete, ETA 01:37:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.700 ms/op
# Warmup Iteration   2: 0.681 ms/op
# Warmup Iteration   3: 0.635 ms/op
# Warmup Iteration   4: 0.627 ms/op
# Warmup Iteration   5: 0.626 ms/op
Iteration   1: 0.645 ms/op
Iteration   2: 0.682 ms/op
Iteration   3: 0.771 ms/op
Iteration   4: 1.072 ms/op
Iteration   5: 1.200 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.874 ±(99.9%) 0.954 ms/op [Average]
  (min, avg, max) = (0.645, 0.874, 1.200), stdev = 0.248
  CI (99.9%): [? 0, 1.828] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 55.89% complete, ETA 01:37:38
# Fork: 1 of 1
# Warmup Iteration   1: 112.382 ms/op
# Warmup Iteration   2: 111.024 ms/op
# Warmup Iteration   3: 102.536 ms/op
# Warmup Iteration   4: 99.557 ms/op
# Warmup Iteration   5: 109.158 ms/op
Iteration   1: 98.339 ms/op
Iteration   2: 108.248 ms/op
Iteration   3: 176.486 ms/op
Iteration   4: 170.537 ms/op
Iteration   5: 153.411 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  141.404 ±(99.9%) 138.537 ms/op [Average]
  (min, avg, max) = (98.339, 141.404, 176.486), stdev = 35.978
  CI (99.9%): [2.867, 279.942] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 55.98% complete, ETA 01:37:27
# Fork: 1 of 1
# Warmup Iteration   1: 108.481 ms/op
# Warmup Iteration   2: 109.342 ms/op
# Warmup Iteration   3: 102.589 ms/op
# Warmup Iteration   4: 100.845 ms/op
# Warmup Iteration   5: 96.949 ms/op
Iteration   1: 94.766 ms/op
Iteration   2: 103.953 ms/op
Iteration   3: 155.012 ms/op
Iteration   4: 158.645 ms/op
Iteration   5: 148.512 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  132.178 ±(99.9%) 116.874 ms/op [Average]
  (min, avg, max) = (94.766, 132.178, 158.645), stdev = 30.352
  CI (99.9%): [15.303, 249.052] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 56.06% complete, ETA 01:37:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
# Warmup Iteration   2: 0.049 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.046 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.055 ms/op
Iteration   4: 0.079 ms/op
Iteration   5: 0.070 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.060 ±(99.9%) 0.056 ms/op [Average]
  (min, avg, max) = (0.046, 0.060, 0.079), stdev = 0.014
  CI (99.9%): [0.004, 0.116] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 56.14% complete, ETA 01:37:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.047 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.077 ms/op
Iteration   5: 0.077 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.060 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.044, 0.060, 0.077), stdev = 0.016
  CI (99.9%): [? 0, 0.122] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 56.23% complete, ETA 01:36:52
# Fork: 1 of 1
# Warmup Iteration   1: 1.373 ms/op
# Warmup Iteration   2: 1.281 ms/op
# Warmup Iteration   3: 1.369 ms/op
# Warmup Iteration   4: 1.273 ms/op
# Warmup Iteration   5: 1.296 ms/op
Iteration   1: 1.283 ms/op
Iteration   2: 1.256 ms/op
Iteration   3: 1.531 ms/op
Iteration   4: 2.317 ms/op
Iteration   5: 2.298 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.737 ±(99.9%) 2.048 ms/op [Average]
  (min, avg, max) = (1.256, 1.737, 2.317), stdev = 0.532
  CI (99.9%): [? 0, 3.785] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 56.31% complete, ETA 01:36:40
# Fork: 1 of 1
# Warmup Iteration   1: 1.401 ms/op
# Warmup Iteration   2: 1.281 ms/op
# Warmup Iteration   3: 1.268 ms/op
# Warmup Iteration   4: 1.366 ms/op
# Warmup Iteration   5: 1.266 ms/op
Iteration   1: 1.279 ms/op
Iteration   2: 1.267 ms/op
Iteration   3: 1.599 ms/op
Iteration   4: 2.233 ms/op
Iteration   5: 2.124 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.700 ±(99.9%) 1.763 ms/op [Average]
  (min, avg, max) = (1.267, 1.700, 2.233), stdev = 0.458
  CI (99.9%): [? 0, 3.464] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 56.40% complete, ETA 01:36:29
# Fork: 1 of 1
# Warmup Iteration   1: 220.540 ms/op
# Warmup Iteration   2: 206.275 ms/op
# Warmup Iteration   3: 207.300 ms/op
# Warmup Iteration   4: 216.220 ms/op
# Warmup Iteration   5: 202.126 ms/op
Iteration   1: 205.165 ms/op
Iteration   2: 208.470 ms/op
Iteration   3: 315.010 ms/op
Iteration   4: 325.434 ms/op
Iteration   5: 366.911 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  284.198 ±(99.9%) 282.125 ms/op [Average]
  (min, avg, max) = (205.165, 284.198, 366.911), stdev = 73.267
  CI (99.9%): [2.072, 566.323] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 56.48% complete, ETA 01:36:18
# Fork: 1 of 1
# Warmup Iteration   1: 215.549 ms/op
# Warmup Iteration   2: 203.385 ms/op
# Warmup Iteration   3: 206.808 ms/op
# Warmup Iteration   4: 198.456 ms/op
# Warmup Iteration   5: 202.973 ms/op
Iteration   1: 198.597 ms/op
Iteration   2: 217.028 ms/op
Iteration   3: 323.460 ms/op
Iteration   4: 299.029 ms/op
Iteration   5: 324.880 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  272.599 ±(99.9%) 232.503 ms/op [Average]
  (min, avg, max) = (198.597, 272.599, 324.880), stdev = 60.380
  CI (99.9%): [40.096, 505.101] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 56.57% complete, ETA 01:36:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.087 ms/op
# Warmup Iteration   3: 0.093 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.088 ms/op
Iteration   1: 0.087 ms/op
Iteration   2: 0.089 ms/op
Iteration   3: 0.107 ms/op
Iteration   4: 0.156 ms/op
Iteration   5: 0.171 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.122 ±(99.9%) 0.150 ms/op [Average]
  (min, avg, max) = (0.087, 0.122, 0.171), stdev = 0.039
  CI (99.9%): [? 0, 0.272] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 56.65% complete, ETA 01:35:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.094 ms/op
# Warmup Iteration   2: 0.090 ms/op
# Warmup Iteration   3: 0.093 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.089 ms/op
Iteration   1: 0.088 ms/op
Iteration   2: 0.088 ms/op
Iteration   3: 0.104 ms/op
Iteration   4: 0.161 ms/op
Iteration   5: 0.143 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.117 ±(99.9%) 0.129 ms/op [Average]
  (min, avg, max) = (0.088, 0.117, 0.161), stdev = 0.034
  CI (99.9%): [? 0, 0.246] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 56.73% complete, ETA 01:35:44
# Fork: 1 of 1
# Warmup Iteration   1: 2.791 ms/op
# Warmup Iteration   2: 2.544 ms/op
# Warmup Iteration   3: 2.556 ms/op
# Warmup Iteration   4: 2.716 ms/op
# Warmup Iteration   5: 2.539 ms/op
Iteration   1: 2.644 ms/op
Iteration   2: 2.537 ms/op
Iteration   3: 3.038 ms/op
Iteration   4: 4.657 ms/op
Iteration   5: 4.289 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  3.433 ±(99.9%) 3.759 ms/op [Average]
  (min, avg, max) = (2.537, 3.433, 4.657), stdev = 0.976
  CI (99.9%): [? 0, 7.192] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 56.82% complete, ETA 01:35:32
# Fork: 1 of 1
# Warmup Iteration   1: 2.750 ms/op
# Warmup Iteration   2: 2.533 ms/op
# Warmup Iteration   3: 2.611 ms/op
# Warmup Iteration   4: 2.720 ms/op
# Warmup Iteration   5: 2.561 ms/op
Iteration   1: 2.528 ms/op
Iteration   2: 2.567 ms/op
Iteration   3: 3.046 ms/op
Iteration   4: 3.865 ms/op
Iteration   5: 4.678 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  3.337 ±(99.9%) 3.555 ms/op [Average]
  (min, avg, max) = (2.528, 3.337, 4.678), stdev = 0.923
  CI (99.9%): [? 0, 6.892] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 56.90% complete, ETA 01:35:21
# Fork: 1 of 1
# Warmup Iteration   1: 430.343 ms/op
# Warmup Iteration   2: 412.158 ms/op
# Warmup Iteration   3: 412.009 ms/op
# Warmup Iteration   4: 433.201 ms/op
# Warmup Iteration   5: 391.970 ms/op
Iteration   1: 387.237 ms/op
Iteration   2: 582.781 ms/op
Iteration   3: 604.003 ms/op
Iteration   4: 638.199 ms/op
Iteration   5: 544.316 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  551.307 ±(99.9%) 376.722 ms/op [Average]
  (min, avg, max) = (387.237, 551.307, 638.199), stdev = 97.834
  CI (99.9%): [174.585, 928.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 56.99% complete, ETA 01:35:11
# Fork: 1 of 1
# Warmup Iteration   1: 431.419 ms/op
# Warmup Iteration   2: 425.349 ms/op
# Warmup Iteration   3: 414.187 ms/op
# Warmup Iteration   4: 404.843 ms/op
# Warmup Iteration   5: 413.826 ms/op
Iteration   1: 401.148 ms/op
Iteration   2: 697.345 ms/op
Iteration   3: 656.153 ms/op
Iteration   4: 650.083 ms/op
Iteration   5: 661.605 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  613.267 ±(99.9%) 462.057 ms/op [Average]
  (min, avg, max) = (401.148, 613.267, 697.345), stdev = 119.995
  CI (99.9%): [151.210, 1075.323] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 57.07% complete, ETA 01:35:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.204 ms/op
# Warmup Iteration   2: 0.178 ms/op
# Warmup Iteration   3: 0.178 ms/op
# Warmup Iteration   4: 0.177 ms/op
# Warmup Iteration   5: 0.176 ms/op
Iteration   1: 0.185 ms/op
Iteration   2: 0.182 ms/op
Iteration   3: 0.208 ms/op
Iteration   4: 0.304 ms/op
Iteration   5: 0.291 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.234 ±(99.9%) 0.227 ms/op [Average]
  (min, avg, max) = (0.182, 0.234, 0.304), stdev = 0.059
  CI (99.9%): [0.007, 0.461] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 57.15% complete, ETA 01:34:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.209 ms/op
# Warmup Iteration   2: 0.179 ms/op
# Warmup Iteration   3: 0.185 ms/op
# Warmup Iteration   4: 0.179 ms/op
# Warmup Iteration   5: 0.183 ms/op
Iteration   1: 0.181 ms/op
Iteration   2: 0.190 ms/op
Iteration   3: 0.215 ms/op
Iteration   4: 0.283 ms/op
Iteration   5: 0.302 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.234 ±(99.9%) 0.213 ms/op [Average]
  (min, avg, max) = (0.181, 0.234, 0.302), stdev = 0.055
  CI (99.9%): [0.022, 0.447] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 57.24% complete, ETA 01:34:38
# Fork: 1 of 1
# Warmup Iteration   1: 5.588 ms/op
# Warmup Iteration   2: 5.445 ms/op
# Warmup Iteration   3: 5.170 ms/op
# Warmup Iteration   4: 5.216 ms/op
# Warmup Iteration   5: 5.059 ms/op
Iteration   1: 5.227 ms/op
Iteration   2: 5.402 ms/op
Iteration   3: 6.151 ms/op
Iteration   4: 9.597 ms/op
Iteration   5: 9.424 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  7.160 ±(99.9%) 8.373 ms/op [Average]
  (min, avg, max) = (5.227, 7.160, 9.597), stdev = 2.174
  CI (99.9%): [? 0, 15.533] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 57.32% complete, ETA 01:34:26
# Fork: 1 of 1
# Warmup Iteration   1: 5.656 ms/op
# Warmup Iteration   2: 5.585 ms/op
# Warmup Iteration   3: 5.288 ms/op
# Warmup Iteration   4: 5.240 ms/op
# Warmup Iteration   5: 5.192 ms/op
Iteration   1: 5.148 ms/op
Iteration   2: 5.237 ms/op
Iteration   3: 7.063 ms/op
Iteration   4: 8.781 ms/op
Iteration   5: 8.759 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  6.997 ±(99.9%) 6.891 ms/op [Average]
  (min, avg, max) = (5.148, 6.997, 8.781), stdev = 1.790
  CI (99.9%): [0.106, 13.888] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 57.41% complete, ETA 01:34:14
# Fork: 1 of 1
# Warmup Iteration   1: 861.753 ms/op
# Warmup Iteration   2: 846.128 ms/op
# Warmup Iteration   3: 889.890 ms/op
# Warmup Iteration   4: 787.584 ms/op
# Warmup Iteration   5: 1307.773 ms/op
Iteration   1: 1322.617 ms/op
Iteration   2: 1349.637 ms/op
Iteration   3: 1255.342 ms/op
Iteration   4: 1229.737 ms/op
Iteration   5: 1297.946 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1291.056 ±(99.9%) 187.764 ms/op [Average]
  (min, avg, max) = (1229.737, 1291.056, 1349.637), stdev = 48.762
  CI (99.9%): [1103.291, 1478.820] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 57.49% complete, ETA 01:34:07
# Fork: 1 of 1
# Warmup Iteration   1: 856.967 ms/op
# Warmup Iteration   2: 822.464 ms/op
# Warmup Iteration   3: 762.816 ms/op
# Warmup Iteration   4: 784.469 ms/op
# Warmup Iteration   5: 914.647 ms/op
Iteration   1: 1288.388 ms/op
Iteration   2: 1310.012 ms/op
Iteration   3: 1235.455 ms/op
Iteration   4: 1292.734 ms/op
Iteration   5: 1260.841 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1277.486 ±(99.9%) 113.136 ms/op [Average]
  (min, avg, max) = (1235.455, 1277.486, 1310.012), stdev = 29.381
  CI (99.9%): [1164.349, 1390.622] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 57.58% complete, ETA 01:33:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.379 ms/op
# Warmup Iteration   2: 0.355 ms/op
# Warmup Iteration   3: 0.357 ms/op
# Warmup Iteration   4: 0.368 ms/op
# Warmup Iteration   5: 0.374 ms/op
Iteration   1: 0.352 ms/op
Iteration   2: 0.361 ms/op
Iteration   3: 0.415 ms/op
Iteration   4: 0.645 ms/op
Iteration   5: 0.619 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.478 ±(99.9%) 0.550 ms/op [Average]
  (min, avg, max) = (0.352, 0.478, 0.645), stdev = 0.143
  CI (99.9%): [? 0, 1.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 57.66% complete, ETA 01:33:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.381 ms/op
# Warmup Iteration   2: 0.354 ms/op
# Warmup Iteration   3: 0.362 ms/op
# Warmup Iteration   4: 0.353 ms/op
# Warmup Iteration   5: 0.370 ms/op
Iteration   1: 0.344 ms/op
Iteration   2: 0.343 ms/op
Iteration   3: 0.409 ms/op
Iteration   4: 0.516 ms/op
Iteration   5: 0.655 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.454 ±(99.9%) 0.512 ms/op [Average]
  (min, avg, max) = (0.343, 0.454, 0.655), stdev = 0.133
  CI (99.9%): [? 0, 0.966] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 57.74% complete, ETA 01:33:35
# Fork: 1 of 1
# Warmup Iteration   1: 11.222 ms/op
# Warmup Iteration   2: 10.245 ms/op
# Warmup Iteration   3: 10.206 ms/op
# Warmup Iteration   4: 10.263 ms/op
# Warmup Iteration   5: 10.182 ms/op
Iteration   1: 11.237 ms/op
Iteration   2: 10.131 ms/op
Iteration   3: 12.152 ms/op
Iteration   4: 16.992 ms/op
Iteration   5: 17.605 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  13.623 ±(99.9%) 13.236 ms/op [Average]
  (min, avg, max) = (10.131, 13.623, 17.605), stdev = 3.437
  CI (99.9%): [0.388, 26.859] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 57.83% complete, ETA 01:33:24
# Fork: 1 of 1
# Warmup Iteration   1: 11.852 ms/op
# Warmup Iteration   2: 10.511 ms/op
# Warmup Iteration   3: 10.144 ms/op
# Warmup Iteration   4: 10.150 ms/op
# Warmup Iteration   5: 10.120 ms/op
Iteration   1: 10.672 ms/op
Iteration   2: 10.233 ms/op
Iteration   3: 11.998 ms/op
Iteration   4: 16.519 ms/op
Iteration   5: 17.579 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  13.400 ±(99.9%) 13.147 ms/op [Average]
  (min, avg, max) = (10.233, 13.400, 17.579), stdev = 3.414
  CI (99.9%): [0.253, 26.548] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 57.91% complete, ETA 01:33:12
# Fork: 1 of 1
# Warmup Iteration   1: 1774.079 ms/op
# Warmup Iteration   2: 1691.793 ms/op
# Warmup Iteration   3: 1742.400 ms/op
# Warmup Iteration   4: 1632.875 ms/op
# Warmup Iteration   5: 2103.228 ms/op
Iteration   1: 2755.541 ms/op
Iteration   2: 2632.936 ms/op
Iteration   3: 2741.075 ms/op
Iteration   4: 2705.856 ms/op
Iteration   5: 2632.097 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2693.501 ±(99.9%) 225.382 ms/op [Average]
  (min, avg, max) = (2632.097, 2693.501, 2755.541), stdev = 58.531
  CI (99.9%): [2468.120, 2918.883] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 58.00% complete, ETA 01:33:09
# Fork: 1 of 1
# Warmup Iteration   1: 1746.083 ms/op
# Warmup Iteration   2: 1603.902 ms/op
# Warmup Iteration   3: 1595.754 ms/op
# Warmup Iteration   4: 1647.914 ms/op
# Warmup Iteration   5: 1965.653 ms/op
Iteration   1: 2578.592 ms/op
Iteration   2: 2483.623 ms/op
Iteration   3: 2507.982 ms/op
Iteration   4: 2452.798 ms/op
Iteration   5: 2512.715 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2507.142 ±(99.9%) 178.995 ms/op [Average]
  (min, avg, max) = (2452.798, 2507.142, 2578.592), stdev = 46.484
  CI (99.9%): [2328.147, 2686.137] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 58.08% complete, ETA 01:33:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.795 ms/op
# Warmup Iteration   2: 0.728 ms/op
# Warmup Iteration   3: 0.713 ms/op
# Warmup Iteration   4: 0.700 ms/op
# Warmup Iteration   5: 0.700 ms/op
Iteration   1: 0.739 ms/op
Iteration   2: 0.716 ms/op
Iteration   3: 0.826 ms/op
Iteration   4: 1.054 ms/op
Iteration   5: 1.260 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.919 ±(99.9%) 0.898 ms/op [Average]
  (min, avg, max) = (0.716, 0.919, 1.260), stdev = 0.233
  CI (99.9%): [0.021, 1.817] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 58.16% complete, ETA 01:32:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.797 ms/op
# Warmup Iteration   2: 0.741 ms/op
# Warmup Iteration   3: 0.715 ms/op
# Warmup Iteration   4: 0.709 ms/op
# Warmup Iteration   5: 0.725 ms/op
Iteration   1: 0.717 ms/op
Iteration   2: 0.747 ms/op
Iteration   3: 0.852 ms/op
Iteration   4: 1.264 ms/op
Iteration   5: 1.161 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.948 ±(99.9%) 0.959 ms/op [Average]
  (min, avg, max) = (0.717, 0.948, 1.264), stdev = 0.249
  CI (99.9%): [? 0, 1.907] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 58.25% complete, ETA 01:32:42
# Fork: 1 of 1
# Warmup Iteration   1: 22.891 ms/op
# Warmup Iteration   2: 22.295 ms/op
# Warmup Iteration   3: 20.665 ms/op
# Warmup Iteration   4: 20.735 ms/op
# Warmup Iteration   5: 20.317 ms/op
Iteration   1: 20.339 ms/op
Iteration   2: 21.037 ms/op
Iteration   3: 24.534 ms/op
Iteration   4: 37.911 ms/op
Iteration   5: 37.324 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  28.229 ±(99.9%) 33.574 ms/op [Average]
  (min, avg, max) = (20.339, 28.229, 37.911), stdev = 8.719
  CI (99.9%): [? 0, 61.803] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 58.33% complete, ETA 01:32:31
# Fork: 1 of 1
# Warmup Iteration   1: 22.148 ms/op
# Warmup Iteration   2: 21.367 ms/op
# Warmup Iteration   3: 20.909 ms/op
# Warmup Iteration   4: 21.228 ms/op
# Warmup Iteration   5: 20.429 ms/op
Iteration   1: 20.530 ms/op
Iteration   2: 20.116 ms/op
Iteration   3: 26.224 ms/op
Iteration   4: 32.183 ms/op
Iteration   5: 32.141 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  26.239 ±(99.9%) 22.801 ms/op [Average]
  (min, avg, max) = (20.116, 26.239, 32.183), stdev = 5.921
  CI (99.9%): [3.438, 49.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 58.42% complete, ETA 01:32:19
# Fork: 1 of 1
# Warmup Iteration   1: 3637.270 ms/op
# Warmup Iteration   2: 3264.540 ms/op
# Warmup Iteration   3: 4908.165 ms/op
# Warmup Iteration   4: 5054.111 ms/op
# Warmup Iteration   5: 5102.447 ms/op
Iteration   1: 5114.751 ms/op
Iteration   2: 5253.619 ms/op
Iteration   3: 5314.815 ms/op
Iteration   4: 5354.027 ms/op
Iteration   5: 5230.342 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  5253.511 ±(99.9%) 353.195 ms/op [Average]
  (min, avg, max) = (5114.751, 5253.511, 5354.027), stdev = 91.724
  CI (99.9%): [4900.316, 5606.706] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 58.50% complete, ETA 01:32:35
# Fork: 1 of 1
# Warmup Iteration   1: 3344.988 ms/op
# Warmup Iteration   2: 3126.786 ms/op
# Warmup Iteration   3: 4317.962 ms/op
# Warmup Iteration   4: 5197.031 ms/op
# Warmup Iteration   5: 4915.351 ms/op
Iteration   1: 5056.919 ms/op
Iteration   2: 5301.537 ms/op
Iteration   3: 4972.846 ms/op
Iteration   4: 4880.645 ms/op
Iteration   5: 5151.215 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  5072.632 ±(99.9%) 625.761 ms/op [Average]
  (min, avg, max) = (4880.645, 5072.632, 5301.537), stdev = 162.508
  CI (99.9%): [4446.871, 5698.393] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 58.59% complete, ETA 01:32:48
# Fork: 1 of 1
# Warmup Iteration   1: 1.603 ms/op
# Warmup Iteration   2: 1.405 ms/op
# Warmup Iteration   3: 1.433 ms/op
# Warmup Iteration   4: 1.384 ms/op
# Warmup Iteration   5: 1.414 ms/op
Iteration   1: 1.465 ms/op
Iteration   2: 1.388 ms/op
Iteration   3: 1.634 ms/op
Iteration   4: 2.310 ms/op
Iteration   5: 2.509 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.861 ±(99.9%) 1.977 ms/op [Average]
  (min, avg, max) = (1.388, 1.861, 2.509), stdev = 0.513
  CI (99.9%): [? 0, 3.838] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 58.67% complete, ETA 01:32:36
# Fork: 1 of 1
# Warmup Iteration   1: 1.621 ms/op
# Warmup Iteration   2: 1.455 ms/op
# Warmup Iteration   3: 1.431 ms/op
# Warmup Iteration   4: 1.399 ms/op
# Warmup Iteration   5: 1.404 ms/op
Iteration   1: 1.398 ms/op
Iteration   2: 1.458 ms/op
Iteration   3: 1.626 ms/op
Iteration   4: 2.396 ms/op
Iteration   5: 2.347 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.845 ±(99.9%) 1.880 ms/op [Average]
  (min, avg, max) = (1.398, 1.845, 2.396), stdev = 0.488
  CI (99.9%): [? 0, 3.725] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 58.75% complete, ETA 01:32:25
# Fork: 1 of 1
# Warmup Iteration   1: 44.470 ms/op
# Warmup Iteration   2: 44.372 ms/op
# Warmup Iteration   3: 41.329 ms/op
# Warmup Iteration   4: 41.448 ms/op
# Warmup Iteration   5: 41.931 ms/op
Iteration   1: 41.320 ms/op
Iteration   2: 43.151 ms/op
Iteration   3: 48.209 ms/op
Iteration   4: 67.021 ms/op
Iteration   5: 72.155 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  54.371 ±(99.9%) 54.811 ms/op [Average]
  (min, avg, max) = (41.320, 54.371, 72.155), stdev = 14.234
  CI (99.9%): [? 0, 109.182] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 58.84% complete, ETA 01:32:13
# Fork: 1 of 1
# Warmup Iteration   1: 46.233 ms/op
# Warmup Iteration   2: 43.753 ms/op
# Warmup Iteration   3: 41.229 ms/op
# Warmup Iteration   4: 40.708 ms/op
# Warmup Iteration   5: 41.159 ms/op
Iteration   1: 40.489 ms/op
Iteration   2: 42.968 ms/op
Iteration   3: 51.975 ms/op
Iteration   4: 69.854 ms/op
Iteration   5: 74.518 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  55.961 ±(99.9%) 59.700 ms/op [Average]
  (min, avg, max) = (40.489, 55.961, 74.518), stdev = 15.504
  CI (99.9%): [? 0, 115.661] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 58.92% complete, ETA 01:32:01
# Fork: 1 of 1
# Warmup Iteration   1: 6655.993 ms/op
# Warmup Iteration   2: 9709.094 ms/op
# Warmup Iteration   3: 9891.412 ms/op
# Warmup Iteration   4: 9688.682 ms/op
# Warmup Iteration   5: 9715.143 ms/op
Iteration   1: 10053.869 ms/op
Iteration   2: 9879.001 ms/op
Iteration   3: 10443.958 ms/op
Iteration   4: 9744.833 ms/op
Iteration   5: 9902.752 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  10004.883 ±(99.9%) 1035.189 ms/op [Average]
  (min, avg, max) = (9744.833, 10004.883, 10443.958), stdev = 268.835
  CI (99.9%): [8969.694, 11040.071] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 59.01% complete, ETA 01:32:49
# Fork: 1 of 1
# Warmup Iteration   1: 6520.377 ms/op
# Warmup Iteration   2: 9362.299 ms/op
# Warmup Iteration   3: 10090.814 ms/op
# Warmup Iteration   4: 9748.221 ms/op
# Warmup Iteration   5: 9806.357 ms/op
Iteration   1: 9912.201 ms/op
Iteration   2: 10273.524 ms/op
Iteration   3: 9687.227 ms/op
Iteration   4: 10060.460 ms/op
Iteration   5: 9903.466 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  9967.376 ±(99.9%) 834.808 ms/op [Average]
  (min, avg, max) = (9687.227, 9967.376, 10273.524), stdev = 216.797
  CI (99.9%): [9132.568, 10802.183] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 59.09% complete, ETA 01:33:36
# Fork: 1 of 1
# Warmup Iteration   1: 3.030 ms/op
# Warmup Iteration   2: 2.804 ms/op
# Warmup Iteration   3: 3.017 ms/op
# Warmup Iteration   4: 2.818 ms/op
# Warmup Iteration   5: 2.742 ms/op
Iteration   1: 2.769 ms/op
Iteration   2: 2.740 ms/op
Iteration   3: 3.297 ms/op
Iteration   4: 4.931 ms/op
Iteration   5: 4.669 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  3.681 ±(99.9%) 4.041 ms/op [Average]
  (min, avg, max) = (2.740, 3.681, 4.931), stdev = 1.049
  CI (99.9%): [? 0, 7.722] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 59.18% complete, ETA 01:33:24
# Fork: 1 of 1
# Warmup Iteration   1: 3.103 ms/op
# Warmup Iteration   2: 2.835 ms/op
# Warmup Iteration   3: 2.899 ms/op
# Warmup Iteration   4: 3.015 ms/op
# Warmup Iteration   5: 2.812 ms/op
Iteration   1: 2.918 ms/op
Iteration   2: 2.808 ms/op
Iteration   3: 3.216 ms/op
Iteration   4: 4.661 ms/op
Iteration   5: 4.971 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  3.715 ±(99.9%) 3.937 ms/op [Average]
  (min, avg, max) = (2.808, 3.715, 4.971), stdev = 1.022
  CI (99.9%): [? 0, 7.652] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 59.26% complete, ETA 01:33:11
# Fork: 1 of 1
# Warmup Iteration   1: 88.216 ms/op
# Warmup Iteration   2: 86.793 ms/op
# Warmup Iteration   3: 82.774 ms/op
# Warmup Iteration   4: 87.693 ms/op
# Warmup Iteration   5: 81.358 ms/op
Iteration   1: 79.515 ms/op
Iteration   2: 81.178 ms/op
Iteration   3: 112.027 ms/op
Iteration   4: 147.075 ms/op
Iteration   5: 136.031 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  111.165 ±(99.9%) 118.834 ms/op [Average]
  (min, avg, max) = (79.515, 111.165, 147.075), stdev = 30.861
  CI (99.9%): [? 0, 229.999] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 59.34% complete, ETA 01:32:59
# Fork: 1 of 1
# Warmup Iteration   1: 88.728 ms/op
# Warmup Iteration   2: 82.437 ms/op
# Warmup Iteration   3: 81.501 ms/op
# Warmup Iteration   4: 89.430 ms/op
# Warmup Iteration   5: 82.526 ms/op
Iteration   1: 80.608 ms/op
Iteration   2: 80.588 ms/op
Iteration   3: 123.421 ms/op
Iteration   4: 144.438 ms/op
Iteration   5: 148.896 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  115.590 ±(99.9%) 128.460 ms/op [Average]
  (min, avg, max) = (80.588, 115.590, 148.896), stdev = 33.361
  CI (99.9%): [? 0, 244.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 59.43% complete, ETA 01:32:48
# Fork: 1 of 1
# Warmup Iteration   1: 16547.662 ms/op
# Warmup Iteration   2: 19258.469 ms/op
# Warmup Iteration   3: 19711.042 ms/op
# Warmup Iteration   4: 20120.437 ms/op
# Warmup Iteration   5: 20306.478 ms/op
Iteration   1: 20091.513 ms/op
Iteration   2: 20317.519 ms/op
Iteration   3: 20168.367 ms/op
Iteration   4: 20282.422 ms/op
Iteration   5: 20256.293 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  20223.222 ±(99.9%) 354.210 ms/op [Average]
  (min, avg, max) = (20091.513, 20223.222, 20317.519), stdev = 91.987
  CI (99.9%): [19869.012, 20577.432] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 59.51% complete, ETA 01:34:43
# Fork: 1 of 1
# Warmup Iteration   1: 16420.159 ms/op
# Warmup Iteration   2: 19430.291 ms/op
# Warmup Iteration   3: 20740.574 ms/op
# Warmup Iteration   4: 20434.889 ms/op
# Warmup Iteration   5: 19911.050 ms/op
Iteration   1: 19374.384 ms/op
Iteration   2: 19379.293 ms/op
Iteration   3: 19696.617 ms/op
Iteration   4: 20400.556 ms/op
Iteration   5: 19969.776 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  19764.125 ±(99.9%) 1669.475 ms/op [Average]
  (min, avg, max) = (19374.384, 19764.125, 20400.556), stdev = 433.557
  CI (99.9%): [18094.650, 21433.600] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 59.60% complete, ETA 01:36:36
# Fork: 1 of 1
# Warmup Iteration   1: 6.064 ms/op
# Warmup Iteration   2: 6.088 ms/op
# Warmup Iteration   3: 5.661 ms/op
# Warmup Iteration   4: 5.609 ms/op
# Warmup Iteration   5: 5.572 ms/op
Iteration   1: 5.610 ms/op
Iteration   2: 5.619 ms/op
Iteration   3: 6.974 ms/op
Iteration   4: 9.816 ms/op
Iteration   5: 8.882 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  7.380 ±(99.9%) 7.353 ms/op [Average]
  (min, avg, max) = (5.610, 7.380, 9.816), stdev = 1.910
  CI (99.9%): [0.027, 14.733] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 59.68% complete, ETA 01:36:23
# Fork: 1 of 1
# Warmup Iteration   1: 6.054 ms/op
# Warmup Iteration   2: 5.541 ms/op
# Warmup Iteration   3: 5.945 ms/op
# Warmup Iteration   4: 5.561 ms/op
# Warmup Iteration   5: 5.646 ms/op
Iteration   1: 5.600 ms/op
Iteration   2: 5.539 ms/op
Iteration   3: 6.518 ms/op
Iteration   4: 9.438 ms/op
Iteration   5: 9.428 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  7.305 ±(99.9%) 7.630 ms/op [Average]
  (min, avg, max) = (5.539, 7.305, 9.438), stdev = 1.981
  CI (99.9%): [? 0, 14.935] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 59.76% complete, ETA 01:36:10
# Fork: 1 of 1
# Warmup Iteration   1: 181.692 ms/op
# Warmup Iteration   2: 165.514 ms/op
# Warmup Iteration   3: 177.100 ms/op
# Warmup Iteration   4: 164.092 ms/op
# Warmup Iteration   5: 165.879 ms/op
Iteration   1: 163.049 ms/op
Iteration   2: 181.858 ms/op
Iteration   3: 282.060 ms/op
Iteration   4: 286.218 ms/op
Iteration   5: 254.873 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  233.611 ±(99.9%) 221.405 ms/op [Average]
  (min, avg, max) = (163.049, 233.611, 286.218), stdev = 57.498
  CI (99.9%): [12.206, 455.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 59.85% complete, ETA 01:35:57
# Fork: 1 of 1
# Warmup Iteration   1: 178.640 ms/op
# Warmup Iteration   2: 173.427 ms/op
# Warmup Iteration   3: 170.769 ms/op
# Warmup Iteration   4: 163.219 ms/op
# Warmup Iteration   5: 161.836 ms/op
Iteration   1: 164.465 ms/op
Iteration   2: 173.248 ms/op
Iteration   3: 281.094 ms/op
Iteration   4: 303.889 ms/op
Iteration   5: 258.796 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  236.299 ±(99.9%) 245.180 ms/op [Average]
  (min, avg, max) = (164.465, 236.299, 303.889), stdev = 63.672
  CI (99.9%): [? 0, 481.478] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 59.93% complete, ETA 01:35:45
# Fork: 1 of 1
# Warmup Iteration   1: 36698.267 ms/op
# Warmup Iteration   2: 40596.274 ms/op
# Warmup Iteration   3: 41198.735 ms/op
# Warmup Iteration   4: 41271.192 ms/op
# Warmup Iteration   5: 40313.596 ms/op
Iteration   1: 41644.772 ms/op
Iteration   2: 40928.410 ms/op
Iteration   3: 41505.227 ms/op
Iteration   4: 41499.895 ms/op
Iteration   5: 41177.182 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  41351.097 ±(99.9%) 1124.382 ms/op [Average]
  (min, avg, max) = (40928.410, 41351.097, 41644.772), stdev = 291.998
  CI (99.9%): [40226.715, 42475.479] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 60.02% complete, ETA 01:39:56
# Fork: 1 of 1
# Warmup Iteration   1: 36173.518 ms/op
# Warmup Iteration   2: 39394.154 ms/op
# Warmup Iteration   3: 39229.798 ms/op
# Warmup Iteration   4: 39208.825 ms/op
# Warmup Iteration   5: 38735.241 ms/op
Iteration   1: 38927.398 ms/op
Iteration   2: 39727.176 ms/op
Iteration   3: 38870.335 ms/op
Iteration   4: 38512.905 ms/op
Iteration   5: 38416.131 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  38890.789 ±(99.9%) 1991.009 ms/op [Average]
  (min, avg, max) = (38416.131, 38890.789, 39727.176), stdev = 517.059
  CI (99.9%): [36899.780, 40881.798] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 60.10% complete, ETA 01:43:53
# Fork: 1 of 1
# Warmup Iteration   1: 12.300 ms/op
# Warmup Iteration   2: 11.406 ms/op
# Warmup Iteration   3: 11.115 ms/op
# Warmup Iteration   4: 11.011 ms/op
# Warmup Iteration   5: 11.198 ms/op
Iteration   1: 11.841 ms/op
Iteration   2: 11.157 ms/op
Iteration   3: 13.486 ms/op
Iteration   4: 19.433 ms/op
Iteration   5: 19.042 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  14.992 ±(99.9%) 15.285 ms/op [Average]
  (min, avg, max) = (11.157, 14.992, 19.433), stdev = 3.970
  CI (99.9%): [? 0, 30.277] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 60.19% complete, ETA 01:43:38
# Fork: 1 of 1
# Warmup Iteration   1: 12.845 ms/op
# Warmup Iteration   2: 11.169 ms/op
# Warmup Iteration   3: 11.197 ms/op
# Warmup Iteration   4: 11.192 ms/op
# Warmup Iteration   5: 11.311 ms/op
Iteration   1: 11.584 ms/op
Iteration   2: 11.352 ms/op
Iteration   3: 13.540 ms/op
Iteration   4: 18.931 ms/op
Iteration   5: 18.853 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  14.852 ±(99.9%) 14.573 ms/op [Average]
  (min, avg, max) = (11.352, 14.852, 18.931), stdev = 3.785
  CI (99.9%): [0.279, 29.425] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 60.27% complete, ETA 01:43:23
# Fork: 1 of 1
# Warmup Iteration   1: 384.306 ms/op
# Warmup Iteration   2: 327.194 ms/op
# Warmup Iteration   3: 326.175 ms/op
# Warmup Iteration   4: 323.606 ms/op
# Warmup Iteration   5: 337.186 ms/op
Iteration   1: 349.708 ms/op
Iteration   2: 503.326 ms/op
Iteration   3: 599.185 ms/op
Iteration   4: 515.276 ms/op
Iteration   5: 577.075 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  508.914 ±(99.9%) 376.364 ms/op [Average]
  (min, avg, max) = (349.708, 508.914, 599.185), stdev = 97.741
  CI (99.9%): [132.550, 885.278] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 60.35% complete, ETA 01:43:09
# Fork: 1 of 1
# Warmup Iteration   1: 354.447 ms/op
# Warmup Iteration   2: 335.509 ms/op
# Warmup Iteration   3: 324.131 ms/op
# Warmup Iteration   4: 325.227 ms/op
# Warmup Iteration   5: 344.660 ms/op
Iteration   1: 323.732 ms/op
Iteration   2: 377.885 ms/op
Iteration   3: 569.577 ms/op
Iteration   4: 511.538 ms/op
Iteration   5: 519.737 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  460.494 ±(99.9%) 401.754 ms/op [Average]
  (min, avg, max) = (323.732, 460.494, 569.577), stdev = 104.334
  CI (99.9%): [58.739, 862.248] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 60.44% complete, ETA 01:42:55
# Fork: 1 of 1
# Warmup Iteration   1: 77586.063 ms/op
# Warmup Iteration   2: 82022.123 ms/op
# Warmup Iteration   3: 82013.947 ms/op
# Warmup Iteration   4: 81258.400 ms/op
# Warmup Iteration   5: 81575.530 ms/op
Iteration   1: 82038.567 ms/op
Iteration   2: 81471.505 ms/op
Iteration   3: 81888.780 ms/op
Iteration   4: 85095.975 ms/op
Iteration   5: 88937.596 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  83886.485 ±(99.9%) 12209.387 ms/op [Average]
  (min, avg, max) = (81471.505, 83886.485, 88937.596), stdev = 3170.739
  CI (99.9%): [71677.097, 96095.872] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 60.52% complete, ETA 01:51:31
# Fork: 1 of 1
# Warmup Iteration   1: 71134.143 ms/op
# Warmup Iteration   2: 93525.174 ms/op
# Warmup Iteration   3: 85147.800 ms/op
# Warmup Iteration   4: 90460.203 ms/op
# Warmup Iteration   5: 88514.143 ms/op
Iteration   1: 84321.758 ms/op
Iteration   2: 82407.121 ms/op
Iteration   3: 84857.437 ms/op
Iteration   4: 88069.402 ms/op
Iteration   5: 86751.761 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  85281.496 ±(99.9%) 8457.634 ms/op [Average]
  (min, avg, max) = (82407.121, 85281.496, 88069.402), stdev = 2196.421
  CI (99.9%): [76823.862, 93739.130] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 60.61% complete, ETA 02:00:24
# Fork: 1 of 1
# Warmup Iteration   1: 25.491 ms/op
# Warmup Iteration   2: 23.606 ms/op
# Warmup Iteration   3: 22.888 ms/op
# Warmup Iteration   4: 22.702 ms/op
# Warmup Iteration   5: 22.652 ms/op
Iteration   1: 24.374 ms/op
Iteration   2: 22.579 ms/op
Iteration   3: 30.662 ms/op
Iteration   4: 40.334 ms/op
Iteration   5: 42.362 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  32.062 ±(99.9%) 34.737 ms/op [Average]
  (min, avg, max) = (22.579, 32.062, 42.362), stdev = 9.021
  CI (99.9%): [? 0, 66.800] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 60.69% complete, ETA 02:00:05
# Fork: 1 of 1
# Warmup Iteration   1: 27.054 ms/op
# Warmup Iteration   2: 22.989 ms/op
# Warmup Iteration   3: 23.224 ms/op
# Warmup Iteration   4: 22.492 ms/op
# Warmup Iteration   5: 22.443 ms/op
Iteration   1: 24.985 ms/op
Iteration   2: 24.831 ms/op
Iteration   3: 31.017 ms/op
Iteration   4: 41.059 ms/op
Iteration   5: 42.954 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  32.969 ±(99.9%) 33.288 ms/op [Average]
  (min, avg, max) = (24.831, 32.969, 42.954), stdev = 8.645
  CI (99.9%): [? 0, 66.258] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 60.77% complete, ETA 01:59:47
# Fork: 1 of 1
# Warmup Iteration   1: 823.209 ms/op
# Warmup Iteration   2: 720.099 ms/op
# Warmup Iteration   3: 660.357 ms/op
# Warmup Iteration   4: 665.483 ms/op
# Warmup Iteration   5: 688.091 ms/op
Iteration   1: 914.840 ms/op
Iteration   2: 1284.167 ms/op
Iteration   3: 1294.171 ms/op
Iteration   4: 1144.224 ms/op
Iteration   5: 1183.151 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1164.110 ±(99.9%) 590.993 ms/op [Average]
  (min, avg, max) = (914.840, 1164.110, 1294.171), stdev = 153.479
  CI (99.9%): [573.118, 1755.103] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 60.86% complete, ETA 01:59:31
# Fork: 1 of 1
# Warmup Iteration   1: 701.682 ms/op
# Warmup Iteration   2: 670.668 ms/op
# Warmup Iteration   3: 698.825 ms/op
# Warmup Iteration   4: 707.933 ms/op
# Warmup Iteration   5: 708.120 ms/op
Iteration   1: 982.707 ms/op
Iteration   2: 1061.834 ms/op
Iteration   3: 1329.098 ms/op
Iteration   4: 1163.483 ms/op
Iteration   5: 1218.873 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1151.199 ±(99.9%) 519.316 ms/op [Average]
  (min, avg, max) = (982.707, 1151.199, 1329.098), stdev = 134.865
  CI (99.9%): [631.883, 1670.516] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 60.94% complete, ETA 01:59:15
# Fork: 1 of 1
# Warmup Iteration   1: 183050.195 ms/op
# Warmup Iteration   2: 178913.649 ms/op
# Warmup Iteration   3: 178630.646 ms/op
# Warmup Iteration   4: 154523.455 ms/op
# Warmup Iteration   5: 117507.708 ms/op
Iteration   1: 115084.267 ms/op
Iteration   2: 116901.526 ms/op
Iteration   3: 118957.202 ms/op
Iteration   4: 115606.538 ms/op
Iteration   5: 110718.811 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  115453.669 ±(99.9%) 11703.319 ms/op [Average]
  (min, avg, max) = (110718.811, 115453.669, 118957.202), stdev = 3039.315
  CI (99.9%): [103750.350, 127156.988] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 61.03% complete, ETA 02:13:37
# Fork: 1 of 1
# Warmup Iteration   1: 109440.876 ms/op
# Warmup Iteration   2: 112129.920 ms/op
# Warmup Iteration   3: 118012.330 ms/op
# Warmup Iteration   4: 117853.809 ms/op
# Warmup Iteration   5: 118445.552 ms/op
Iteration   1: 112779.259 ms/op
Iteration   2: 116988.974 ms/op
Iteration   3: 119500.448 ms/op
Iteration   4: 113946.165 ms/op
Iteration   5: 112398.871 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  115122.743 ±(99.9%) 11702.227 ms/op [Average]
  (min, avg, max) = (112398.871, 115122.743, 119500.448), stdev = 3039.031
  CI (99.9%): [103420.516, 126824.971] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 61.11% complete, ETA 02:25:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.023 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.022, 0.023, 0.024), stdev = 0.001
  CI (99.9%): [0.021, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 61.20% complete, ETA 02:24:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.027 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.027 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.025, 0.027, 0.028), stdev = 0.001
  CI (99.9%): [0.023, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 61.28% complete, ETA 02:24:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.878 ms/op
# Warmup Iteration   2: 0.744 ms/op
# Warmup Iteration   3: 0.754 ms/op
# Warmup Iteration   4: 0.784 ms/op
# Warmup Iteration   5: 0.753 ms/op
Iteration   1: 0.735 ms/op
Iteration   2: 0.746 ms/op
Iteration   3: 0.759 ms/op
Iteration   4: 0.748 ms/op
Iteration   5: 0.772 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.752 ±(99.9%) 0.054 ms/op [Average]
  (min, avg, max) = (0.735, 0.752, 0.772), stdev = 0.014
  CI (99.9%): [0.698, 0.806] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 61.36% complete, ETA 02:24:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.810 ms/op
# Warmup Iteration   2: 0.733 ms/op
# Warmup Iteration   3: 0.746 ms/op
# Warmup Iteration   4: 0.754 ms/op
# Warmup Iteration   5: 0.706 ms/op
Iteration   1: 0.711 ms/op
Iteration   2: 0.693 ms/op
Iteration   3: 0.704 ms/op
Iteration   4: 0.836 ms/op
Iteration   5: 0.841 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.757 ±(99.9%) 0.288 ms/op [Average]
  (min, avg, max) = (0.693, 0.757, 0.841), stdev = 0.075
  CI (99.9%): [0.469, 1.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 61.45% complete, ETA 02:23:46
# Fork: 1 of 1
# Warmup Iteration   1: 187.084 ms/op
# Warmup Iteration   2: 161.703 ms/op
# Warmup Iteration   3: 150.311 ms/op
# Warmup Iteration   4: 150.094 ms/op
# Warmup Iteration   5: 136.259 ms/op
Iteration   1: 142.932 ms/op
Iteration   2: 145.796 ms/op
Iteration   3: 131.211 ms/op
Iteration   4: 178.052 ms/op
Iteration   5: 140.757 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  147.749 ±(99.9%) 68.550 ms/op [Average]
  (min, avg, max) = (131.211, 147.749, 178.052), stdev = 17.802
  CI (99.9%): [79.199, 216.300] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 61.53% complete, ETA 02:23:23
# Fork: 1 of 1
# Warmup Iteration   1: 169.521 ms/op
# Warmup Iteration   2: 154.215 ms/op
# Warmup Iteration   3: 148.794 ms/op
# Warmup Iteration   4: 133.528 ms/op
# Warmup Iteration   5: 159.000 ms/op
Iteration   1: 140.625 ms/op
Iteration   2: 125.024 ms/op
Iteration   3: 178.255 ms/op
Iteration   4: 120.492 ms/op
Iteration   5: 160.374 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  144.954 ±(99.9%) 93.553 ms/op [Average]
  (min, avg, max) = (120.492, 144.954, 178.255), stdev = 24.295
  CI (99.9%): [51.401, 238.507] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 61.62% complete, ETA 02:23:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.060 ms/op
# Warmup Iteration   2: 0.050 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.050 ms/op
# Warmup Iteration   5: 0.054 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.053 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.052 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.053 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.051, 0.053, 0.058), stdev = 0.003
  CI (99.9%): [0.041, 0.065] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 61.70% complete, ETA 02:22:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.055 ms/op
# Warmup Iteration   2: 0.051 ms/op
# Warmup Iteration   3: 0.052 ms/op
# Warmup Iteration   4: 0.051 ms/op
# Warmup Iteration   5: 0.053 ms/op
Iteration   1: 0.071 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.053 ms/op
Iteration   5: 0.056 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.057 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.051, 0.057, 0.071), stdev = 0.008
  CI (99.9%): [0.025, 0.089] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 61.78% complete, ETA 02:22:13
# Fork: 1 of 1
# Warmup Iteration   1: 1.896 ms/op
# Warmup Iteration   2: 1.603 ms/op
# Warmup Iteration   3: 1.586 ms/op
# Warmup Iteration   4: 1.489 ms/op
# Warmup Iteration   5: 1.507 ms/op
Iteration   1: 1.478 ms/op
Iteration   2: 1.484 ms/op
Iteration   3: 1.500 ms/op
Iteration   4: 1.424 ms/op
Iteration   5: 1.363 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.450 ±(99.9%) 0.217 ms/op [Average]
  (min, avg, max) = (1.363, 1.450, 1.500), stdev = 0.056
  CI (99.9%): [1.233, 1.667] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 61.87% complete, ETA 02:21:49
# Fork: 1 of 1
# Warmup Iteration   1: 1.508 ms/op
# Warmup Iteration   2: 1.606 ms/op
# Warmup Iteration   3: 1.584 ms/op
# Warmup Iteration   4: 1.483 ms/op
# Warmup Iteration   5: 1.503 ms/op
Iteration   1: 1.551 ms/op
Iteration   2: 1.532 ms/op
Iteration   3: 1.475 ms/op
Iteration   4: 1.359 ms/op
Iteration   5: 1.441 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.471 ±(99.9%) 0.296 ms/op [Average]
  (min, avg, max) = (1.359, 1.471, 1.551), stdev = 0.077
  CI (99.9%): [1.176, 1.767] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 61.95% complete, ETA 02:21:25
# Fork: 1 of 1
# Warmup Iteration   1: 281.502 ms/op
# Warmup Iteration   2: 244.391 ms/op
# Warmup Iteration   3: 252.734 ms/op
# Warmup Iteration   4: 257.251 ms/op
# Warmup Iteration   5: 207.741 ms/op
Iteration   1: 262.770 ms/op
Iteration   2: 254.525 ms/op
Iteration   3: 263.886 ms/op
Iteration   4: 276.154 ms/op
Iteration   5: 229.434 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  257.354 ±(99.9%) 67.054 ms/op [Average]
  (min, avg, max) = (229.434, 257.354, 276.154), stdev = 17.414
  CI (99.9%): [190.300, 324.408] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 62.04% complete, ETA 02:21:02
# Fork: 1 of 1
# Warmup Iteration   1: 307.387 ms/op
# Warmup Iteration   2: 260.655 ms/op
# Warmup Iteration   3: 279.759 ms/op
# Warmup Iteration   4: 260.088 ms/op
# Warmup Iteration   5: 243.362 ms/op
Iteration   1: 216.049 ms/op
Iteration   2: 262.731 ms/op
Iteration   3: 245.618 ms/op
Iteration   4: 212.191 ms/op
Iteration   5: 257.641 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  238.846 ±(99.9%) 90.302 ms/op [Average]
  (min, avg, max) = (212.191, 238.846, 262.731), stdev = 23.451
  CI (99.9%): [148.544, 329.148] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 62.12% complete, ETA 02:20:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.104 ms/op
# Warmup Iteration   2: 0.098 ms/op
# Warmup Iteration   3: 0.100 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.087 ms/op
Iteration   1: 0.089 ms/op
Iteration   2: 0.103 ms/op
Iteration   3: 0.100 ms/op
Iteration   4: 0.101 ms/op
Iteration   5: 0.097 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.098 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.089, 0.098, 0.103), stdev = 0.005
  CI (99.9%): [0.077, 0.119] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 62.21% complete, ETA 02:20:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.126 ms/op
# Warmup Iteration   2: 0.101 ms/op
# Warmup Iteration   3: 0.107 ms/op
# Warmup Iteration   4: 0.101 ms/op
# Warmup Iteration   5: 0.100 ms/op
Iteration   1: 0.101 ms/op
Iteration   2: 0.101 ms/op
Iteration   3: 0.105 ms/op
Iteration   4: 0.100 ms/op
Iteration   5: 0.100 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.102 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.100, 0.102, 0.105), stdev = 0.002
  CI (99.9%): [0.093, 0.110] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 62.29% complete, ETA 02:19:52
# Fork: 1 of 1
# Warmup Iteration   1: 3.734 ms/op
# Warmup Iteration   2: 3.214 ms/op
# Warmup Iteration   3: 3.368 ms/op
# Warmup Iteration   4: 3.238 ms/op
# Warmup Iteration   5: 3.918 ms/op
Iteration   1: 3.784 ms/op
Iteration   2: 3.446 ms/op
Iteration   3: 3.571 ms/op
Iteration   4: 3.369 ms/op
Iteration   5: 3.384 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  3.511 ±(99.9%) 0.664 ms/op [Average]
  (min, avg, max) = (3.369, 3.511, 3.784), stdev = 0.172
  CI (99.9%): [2.847, 4.175] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 62.37% complete, ETA 02:19:29
# Fork: 1 of 1
# Warmup Iteration   1: 3.851 ms/op
# Warmup Iteration   2: 3.367 ms/op
# Warmup Iteration   3: 3.535 ms/op
# Warmup Iteration   4: 3.406 ms/op
# Warmup Iteration   5: 3.297 ms/op
Iteration   1: 3.362 ms/op
Iteration   2: 3.387 ms/op
Iteration   3: 3.442 ms/op
Iteration   4: 3.786 ms/op
Iteration   5: 4.637 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  3.723 ±(99.9%) 2.076 ms/op [Average]
  (min, avg, max) = (3.362, 3.723, 4.637), stdev = 0.539
  CI (99.9%): [1.647, 5.799] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 62.46% complete, ETA 02:19:05
# Fork: 1 of 1
# Warmup Iteration   1: 811.688 ms/op
# Warmup Iteration   2: 640.847 ms/op
# Warmup Iteration   3: 696.208 ms/op
# Warmup Iteration   4: 683.752 ms/op
# Warmup Iteration   5: 592.300 ms/op
Iteration   1: 677.021 ms/op
Iteration   2: 726.498 ms/op
Iteration   3: 737.694 ms/op
Iteration   4: 720.555 ms/op
Iteration   5: 1063.275 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  785.009 ±(99.9%) 605.512 ms/op [Average]
  (min, avg, max) = (677.021, 785.009, 1063.275), stdev = 157.250
  CI (99.9%): [179.496, 1390.521] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 62.54% complete, ETA 02:18:44
# Fork: 1 of 1
# Warmup Iteration   1: 812.314 ms/op
# Warmup Iteration   2: 612.743 ms/op
# Warmup Iteration   3: 734.375 ms/op
# Warmup Iteration   4: 688.031 ms/op
# Warmup Iteration   5: 531.221 ms/op
Iteration   1: 700.917 ms/op
Iteration   2: 663.943 ms/op
Iteration   3: 602.401 ms/op
Iteration   4: 640.193 ms/op
Iteration   5: 753.861 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  672.263 ±(99.9%) 223.351 ms/op [Average]
  (min, avg, max) = (602.401, 672.263, 753.861), stdev = 58.004
  CI (99.9%): [448.912, 895.614] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 62.63% complete, ETA 02:18:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.324 ms/op
# Warmup Iteration   2: 0.231 ms/op
# Warmup Iteration   3: 0.229 ms/op
# Warmup Iteration   4: 0.229 ms/op
# Warmup Iteration   5: 0.219 ms/op
Iteration   1: 0.221 ms/op
Iteration   2: 0.234 ms/op
Iteration   3: 0.231 ms/op
Iteration   4: 0.236 ms/op
Iteration   5: 0.237 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.232 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.221, 0.232, 0.237), stdev = 0.006
  CI (99.9%): [0.208, 0.256] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 62.71% complete, ETA 02:18:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.264 ms/op
# Warmup Iteration   2: 0.283 ms/op
# Warmup Iteration   3: 0.233 ms/op
# Warmup Iteration   4: 0.251 ms/op
# Warmup Iteration   5: 0.227 ms/op
Iteration   1: 0.204 ms/op
Iteration   2: 0.215 ms/op
Iteration   3: 0.212 ms/op
Iteration   4: 0.200 ms/op
Iteration   5: 0.213 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.209 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.200, 0.209, 0.215), stdev = 0.006
  CI (99.9%): [0.184, 0.234] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 62.79% complete, ETA 02:17:36
# Fork: 1 of 1
# Warmup Iteration   1: 7.755 ms/op
# Warmup Iteration   2: 6.506 ms/op
# Warmup Iteration   3: 5.753 ms/op
# Warmup Iteration   4: 5.648 ms/op
# Warmup Iteration   5: 6.076 ms/op
Iteration   1: 6.432 ms/op
Iteration   2: 6.094 ms/op
Iteration   3: 6.145 ms/op
Iteration   4: 5.765 ms/op
Iteration   5: 5.499 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  5.987 ±(99.9%) 1.391 ms/op [Average]
  (min, avg, max) = (5.499, 5.987, 6.432), stdev = 0.361
  CI (99.9%): [4.596, 7.378] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 62.88% complete, ETA 02:17:13
# Fork: 1 of 1
# Warmup Iteration   1: 6.113 ms/op
# Warmup Iteration   2: 5.592 ms/op
# Warmup Iteration   3: 5.676 ms/op
# Warmup Iteration   4: 5.668 ms/op
# Warmup Iteration   5: 5.988 ms/op
Iteration   1: 6.518 ms/op
Iteration   2: 6.172 ms/op
Iteration   3: 6.028 ms/op
Iteration   4: 6.286 ms/op
Iteration   5: 6.168 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  6.234 ±(99.9%) 0.704 ms/op [Average]
  (min, avg, max) = (6.028, 6.234, 6.518), stdev = 0.183
  CI (99.9%): [5.530, 6.939] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 62.96% complete, ETA 02:16:49
# Fork: 1 of 1
# Warmup Iteration   1: 971.306 ms/op
# Warmup Iteration   2: 913.693 ms/op
# Warmup Iteration   3: 809.361 ms/op
# Warmup Iteration   4: 847.716 ms/op
# Warmup Iteration   5: 1109.855 ms/op
Iteration   1: 1081.875 ms/op
Iteration   2: 1048.651 ms/op
Iteration   3: 1129.613 ms/op
Iteration   4: 1143.953 ms/op
Iteration   5: 1038.943 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1088.607 ±(99.9%) 181.154 ms/op [Average]
  (min, avg, max) = (1038.943, 1088.607, 1143.953), stdev = 47.045
  CI (99.9%): [907.453, 1269.761] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 63.05% complete, ETA 02:16:29
# Fork: 1 of 1
# Warmup Iteration   1: 1201.557 ms/op
# Warmup Iteration   2: 1095.553 ms/op
# Warmup Iteration   3: 1116.651 ms/op
# Warmup Iteration   4: 1026.954 ms/op
# Warmup Iteration   5: 1017.889 ms/op
Iteration   1: 1027.022 ms/op
Iteration   2: 1245.928 ms/op
Iteration   3: 1135.902 ms/op
Iteration   4: 1016.950 ms/op
Iteration   5: 1015.547 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1088.270 ±(99.9%) 391.041 ms/op [Average]
  (min, avg, max) = (1015.547, 1088.270, 1245.928), stdev = 101.552
  CI (99.9%): [697.229, 1479.310] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 63.13% complete, ETA 02:16:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.438 ms/op
# Warmup Iteration   2: 0.407 ms/op
# Warmup Iteration   3: 0.396 ms/op
# Warmup Iteration   4: 0.386 ms/op
# Warmup Iteration   5: 0.368 ms/op
Iteration   1: 0.371 ms/op
Iteration   2: 0.362 ms/op
Iteration   3: 0.370 ms/op
Iteration   4: 0.387 ms/op
Iteration   5: 0.391 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.376 ±(99.9%) 0.047 ms/op [Average]
  (min, avg, max) = (0.362, 0.376, 0.391), stdev = 0.012
  CI (99.9%): [0.329, 0.424] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 63.22% complete, ETA 02:15:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.427 ms/op
# Warmup Iteration   2: 0.392 ms/op
# Warmup Iteration   3: 0.394 ms/op
# Warmup Iteration   4: 0.367 ms/op
# Warmup Iteration   5: 0.359 ms/op
Iteration   1: 0.385 ms/op
Iteration   2: 0.398 ms/op
Iteration   3: 0.371 ms/op
Iteration   4: 0.413 ms/op
Iteration   5: 0.370 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.388 ±(99.9%) 0.071 ms/op [Average]
  (min, avg, max) = (0.370, 0.388, 0.413), stdev = 0.018
  CI (99.9%): [0.317, 0.458] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 63.30% complete, ETA 02:15:21
# Fork: 1 of 1
# Warmup Iteration   1: 11.964 ms/op
# Warmup Iteration   2: 11.641 ms/op
# Warmup Iteration   3: 11.041 ms/op
# Warmup Iteration   4: 13.642 ms/op
# Warmup Iteration   5: 13.218 ms/op
Iteration   1: 12.363 ms/op
Iteration   2: 12.033 ms/op
Iteration   3: 11.974 ms/op
Iteration   4: 11.572 ms/op
Iteration   5: 11.517 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  11.892 ±(99.9%) 1.350 ms/op [Average]
  (min, avg, max) = (11.517, 11.892, 12.363), stdev = 0.350
  CI (99.9%): [10.542, 13.241] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 63.38% complete, ETA 02:14:58
# Fork: 1 of 1
# Warmup Iteration   1: 12.681 ms/op
# Warmup Iteration   2: 11.582 ms/op
# Warmup Iteration   3: 12.135 ms/op
# Warmup Iteration   4: 13.702 ms/op
# Warmup Iteration   5: 12.032 ms/op
Iteration   1: 12.613 ms/op
Iteration   2: 13.078 ms/op
Iteration   3: 12.938 ms/op
Iteration   4: 12.883 ms/op
Iteration   5: 12.062 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  12.715 ±(99.9%) 1.548 ms/op [Average]
  (min, avg, max) = (12.062, 12.715, 13.078), stdev = 0.402
  CI (99.9%): [11.167, 14.263] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 63.47% complete, ETA 02:14:34
# Fork: 1 of 1
# Warmup Iteration   1: 2743.746 ms/op
# Warmup Iteration   2: 2885.441 ms/op
# Warmup Iteration   3: 3255.452 ms/op
# Warmup Iteration   4: 3373.218 ms/op
# Warmup Iteration   5: 3194.080 ms/op
Iteration   1: 2408.181 ms/op
Iteration   2: 2292.347 ms/op
Iteration   3: 2098.582 ms/op
Iteration   4: 1961.558 ms/op
Iteration   5: 1981.980 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2148.529 ±(99.9%) 753.819 ms/op [Average]
  (min, avg, max) = (1961.558, 2148.529, 2408.181), stdev = 195.764
  CI (99.9%): [1394.711, 2902.348] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 63.55% complete, ETA 02:14:21
# Fork: 1 of 1
# Warmup Iteration   1: 2366.252 ms/op
# Warmup Iteration   2: 2254.566 ms/op
# Warmup Iteration   3: 2174.681 ms/op
# Warmup Iteration   4: 2207.048 ms/op
# Warmup Iteration   5: 1926.173 ms/op
Iteration   1: 2063.792 ms/op
Iteration   2: 2341.829 ms/op
Iteration   3: 2139.272 ms/op
Iteration   4: 1859.307 ms/op
Iteration   5: 2066.137 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2094.067 ±(99.9%) 667.613 ms/op [Average]
  (min, avg, max) = (1859.307, 2094.067, 2341.829), stdev = 173.377
  CI (99.9%): [1426.454, 2761.680] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 63.64% complete, ETA 02:14:05
# Fork: 1 of 1
# Warmup Iteration   1: 1.070 ms/op
# Warmup Iteration   2: 0.950 ms/op
# Warmup Iteration   3: 0.790 ms/op
# Warmup Iteration   4: 0.759 ms/op
# Warmup Iteration   5: 0.808 ms/op
Iteration   1: 0.807 ms/op
Iteration   2: 0.849 ms/op
Iteration   3: 0.801 ms/op
Iteration   4: 0.759 ms/op
Iteration   5: 0.770 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.797 ±(99.9%) 0.135 ms/op [Average]
  (min, avg, max) = (0.759, 0.797, 0.849), stdev = 0.035
  CI (99.9%): [0.662, 0.932] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 63.72% complete, ETA 02:13:41
# Fork: 1 of 1
# Warmup Iteration   1: 1.018 ms/op
# Warmup Iteration   2: 0.879 ms/op
# Warmup Iteration   3: 0.853 ms/op
# Warmup Iteration   4: 0.790 ms/op
# Warmup Iteration   5: 0.734 ms/op
Iteration   1: 0.756 ms/op
Iteration   2: 0.723 ms/op
Iteration   3: 0.736 ms/op
Iteration   4: 0.731 ms/op
Iteration   5: 0.739 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.737 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (0.723, 0.737, 0.756), stdev = 0.012
  CI (99.9%): [0.689, 0.785] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 63.80% complete, ETA 02:13:18
# Fork: 1 of 1
# Warmup Iteration   1: 24.511 ms/op
# Warmup Iteration   2: 24.741 ms/op
# Warmup Iteration   3: 23.916 ms/op
# Warmup Iteration   4: 28.848 ms/op
# Warmup Iteration   5: 28.965 ms/op
Iteration   1: 30.436 ms/op
Iteration   2: 27.470 ms/op
Iteration   3: 26.728 ms/op
Iteration   4: 26.342 ms/op
Iteration   5: 26.242 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  27.443 ±(99.9%) 6.703 ms/op [Average]
  (min, avg, max) = (26.242, 27.443, 30.436), stdev = 1.741
  CI (99.9%): [20.740, 34.147] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 63.89% complete, ETA 02:12:55
# Fork: 1 of 1
# Warmup Iteration   1: 26.990 ms/op
# Warmup Iteration   2: 24.005 ms/op
# Warmup Iteration   3: 24.886 ms/op
# Warmup Iteration   4: 23.463 ms/op
# Warmup Iteration   5: 23.303 ms/op
Iteration   1: 26.671 ms/op
Iteration   2: 26.301 ms/op
Iteration   3: 25.755 ms/op
Iteration   4: 25.452 ms/op
Iteration   5: 25.097 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  25.855 ±(99.9%) 2.444 ms/op [Average]
  (min, avg, max) = (25.097, 25.855, 26.671), stdev = 0.635
  CI (99.9%): [23.411, 28.299] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 63.97% complete, ETA 02:12:32
# Fork: 1 of 1
# Warmup Iteration   1: 4472.534 ms/op
# Warmup Iteration   2: 3818.269 ms/op
# Warmup Iteration   3: 3976.766 ms/op
# Warmup Iteration   4: 3730.649 ms/op
# Warmup Iteration   5: 3841.637 ms/op
Iteration   1: 3639.853 ms/op
Iteration   2: 4693.947 ms/op
Iteration   3: 5690.296 ms/op
Iteration   4: 6257.512 ms/op
Iteration   5: 5947.133 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  5245.748 ±(99.9%) 4127.835 ms/op [Average]
  (min, avg, max) = (3639.853, 5245.748, 6257.512), stdev = 1071.986
  CI (99.9%): [1117.913, 9373.583] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 64.06% complete, ETA 02:12:30
# Fork: 1 of 1
# Warmup Iteration   1: 5255.090 ms/op
# Warmup Iteration   2: 4748.829 ms/op
# Warmup Iteration   3: 4744.444 ms/op
# Warmup Iteration   4: 3867.604 ms/op
# Warmup Iteration   5: 3651.966 ms/op
Iteration   1: 3833.500 ms/op
Iteration   2: 5485.309 ms/op
Iteration   3: 5455.396 ms/op
Iteration   4: 5405.486 ms/op
Iteration   5: 5741.474 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  5184.233 ±(99.9%) 2950.285 ms/op [Average]
  (min, avg, max) = (3833.500, 5184.233, 5741.474), stdev = 766.180
  CI (99.9%): [2233.948, 8134.518] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 64.14% complete, ETA 02:12:28
# Fork: 1 of 1
# Warmup Iteration   1: 1.973 ms/op
# Warmup Iteration   2: 1.614 ms/op
# Warmup Iteration   3: 1.570 ms/op
# Warmup Iteration   4: 1.515 ms/op
# Warmup Iteration   5: 1.518 ms/op
Iteration   1: 1.531 ms/op
Iteration   2: 1.549 ms/op
Iteration   3: 1.542 ms/op
Iteration   4: 1.502 ms/op
Iteration   5: 1.477 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.520 ±(99.9%) 0.115 ms/op [Average]
  (min, avg, max) = (1.477, 1.520, 1.549), stdev = 0.030
  CI (99.9%): [1.405, 1.636] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 64.23% complete, ETA 02:12:05
# Fork: 1 of 1
# Warmup Iteration   1: 1.646 ms/op
# Warmup Iteration   2: 1.525 ms/op
# Warmup Iteration   3: 1.498 ms/op
# Warmup Iteration   4: 1.504 ms/op
# Warmup Iteration   5: 1.470 ms/op
Iteration   1: 1.477 ms/op
Iteration   2: 1.493 ms/op
Iteration   3: 1.487 ms/op
Iteration   4: 1.460 ms/op
Iteration   5: 1.473 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.478 ±(99.9%) 0.050 ms/op [Average]
  (min, avg, max) = (1.460, 1.478, 1.493), stdev = 0.013
  CI (99.9%): [1.428, 1.528] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 64.31% complete, ETA 02:11:42
# Fork: 1 of 1
# Warmup Iteration   1: 49.196 ms/op
# Warmup Iteration   2: 47.348 ms/op
# Warmup Iteration   3: 45.067 ms/op
# Warmup Iteration   4: 44.345 ms/op
# Warmup Iteration   5: 43.878 ms/op
Iteration   1: 43.986 ms/op
Iteration   2: 43.559 ms/op
Iteration   3: 45.680 ms/op
Iteration   4: 44.357 ms/op
Iteration   5: 46.058 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  44.728 ±(99.9%) 4.187 ms/op [Average]
  (min, avg, max) = (43.559, 44.728, 46.058), stdev = 1.087
  CI (99.9%): [40.541, 48.915] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 64.39% complete, ETA 02:11:19
# Fork: 1 of 1
# Warmup Iteration   1: 49.655 ms/op
# Warmup Iteration   2: 47.009 ms/op
# Warmup Iteration   3: 48.472 ms/op
# Warmup Iteration   4: 43.925 ms/op
# Warmup Iteration   5: 44.981 ms/op
Iteration   1: 44.232 ms/op
Iteration   2: 44.345 ms/op
Iteration   3: 46.697 ms/op
Iteration   4: 45.424 ms/op
Iteration   5: 44.502 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  45.040 ±(99.9%) 4.002 ms/op [Average]
  (min, avg, max) = (44.232, 45.040, 46.697), stdev = 1.039
  CI (99.9%): [41.038, 49.041] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 64.48% complete, ETA 02:10:56
# Fork: 1 of 1
# Warmup Iteration   1: 7241.597 ms/op
# Warmup Iteration   2: 7076.691 ms/op
# Warmup Iteration   3: 8872.076 ms/op
# Warmup Iteration   4: 10146.794 ms/op
# Warmup Iteration   5: 10014.044 ms/op
Iteration   1: 10153.228 ms/op
Iteration   2: 10604.017 ms/op
Iteration   3: 10595.038 ms/op
Iteration   4: 10294.845 ms/op
Iteration   5: 10241.483 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  10377.722 ±(99.9%) 803.722 ms/op [Average]
  (min, avg, max) = (10153.228, 10377.722, 10604.017), stdev = 208.724
  CI (99.9%): [9574.000, 11181.444] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 64.56% complete, ETA 02:11:20
# Fork: 1 of 1
# Warmup Iteration   1: 7273.491 ms/op
# Warmup Iteration   2: 6742.957 ms/op
# Warmup Iteration   3: 6473.840 ms/op
# Warmup Iteration   4: 7349.226 ms/op
# Warmup Iteration   5: 9066.966 ms/op
Iteration   1: 9111.269 ms/op
Iteration   2: 9097.158 ms/op
Iteration   3: 9208.636 ms/op
Iteration   4: 8789.011 ms/op
Iteration   5: 9863.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  9213.816 ±(99.9%) 1523.385 ms/op [Average]
  (min, avg, max) = (8789.011, 9213.816, 9863.003), stdev = 395.618
  CI (99.9%): [7690.430, 10737.201] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 64.65% complete, ETA 02:11:37
# Fork: 1 of 1
# Warmup Iteration   1: 3.377 ms/op
# Warmup Iteration   2: 3.036 ms/op
# Warmup Iteration   3: 2.957 ms/op
# Warmup Iteration   4: 2.961 ms/op
# Warmup Iteration   5: 2.931 ms/op
Iteration   1: 2.922 ms/op
Iteration   2: 2.933 ms/op
Iteration   3: 2.956 ms/op
Iteration   4: 2.900 ms/op
Iteration   5: 2.891 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2.921 ±(99.9%) 0.101 ms/op [Average]
  (min, avg, max) = (2.891, 2.921, 2.956), stdev = 0.026
  CI (99.9%): [2.819, 3.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 64.73% complete, ETA 02:11:14
# Fork: 1 of 1
# Warmup Iteration   1: 3.326 ms/op
# Warmup Iteration   2: 3.036 ms/op
# Warmup Iteration   3: 2.983 ms/op
# Warmup Iteration   4: 2.978 ms/op
# Warmup Iteration   5: 2.954 ms/op
Iteration   1: 2.959 ms/op
Iteration   2: 2.969 ms/op
Iteration   3: 3.017 ms/op
Iteration   4: 3.278 ms/op
Iteration   5: 3.730 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  3.191 ±(99.9%) 1.265 ms/op [Average]
  (min, avg, max) = (2.959, 3.191, 3.730), stdev = 0.329
  CI (99.9%): [1.925, 4.456] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 64.81% complete, ETA 02:10:51
# Fork: 1 of 1
# Warmup Iteration   1: 154.267 ms/op
# Warmup Iteration   2: 105.481 ms/op
# Warmup Iteration   3: 111.065 ms/op
# Warmup Iteration   4: 101.847 ms/op
# Warmup Iteration   5: 105.388 ms/op
Iteration   1: 97.515 ms/op
Iteration   2: 92.094 ms/op
Iteration   3: 97.728 ms/op
Iteration   4: 101.976 ms/op
Iteration   5: 95.950 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  97.053 ±(99.9%) 13.711 ms/op [Average]
  (min, avg, max) = (92.094, 97.053, 101.976), stdev = 3.561
  CI (99.9%): [83.342, 110.763] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 64.90% complete, ETA 02:10:28
# Fork: 1 of 1
# Warmup Iteration   1: 112.890 ms/op
# Warmup Iteration   2: 88.957 ms/op
# Warmup Iteration   3: 92.815 ms/op
# Warmup Iteration   4: 99.852 ms/op
# Warmup Iteration   5: 108.666 ms/op
Iteration   1: 116.800 ms/op
Iteration   2: 111.554 ms/op
Iteration   3: 120.617 ms/op
Iteration   4: 105.977 ms/op
Iteration   5: 107.092 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  112.408 ±(99.9%) 24.126 ms/op [Average]
  (min, avg, max) = (105.977, 112.408, 120.617), stdev = 6.265
  CI (99.9%): [88.282, 136.534] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 64.98% complete, ETA 02:10:05
# Fork: 1 of 1
# Warmup Iteration   1: 17481.892 ms/op
# Warmup Iteration   2: 18363.921 ms/op
# Warmup Iteration   3: 21602.677 ms/op
# Warmup Iteration   4: 21334.505 ms/op
# Warmup Iteration   5: 23552.990 ms/op
Iteration   1: 22322.373 ms/op
Iteration   2: 24350.576 ms/op
Iteration   3: 23343.985 ms/op
Iteration   4: 23740.296 ms/op
Iteration   5: 23680.671 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  23487.580 ±(99.9%) 2871.403 ms/op [Average]
  (min, avg, max) = (22322.373, 23487.580, 24350.576), stdev = 745.694
  CI (99.9%): [20616.177, 26358.983] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 65.07% complete, ETA 02:11:35
# Fork: 1 of 1
# Warmup Iteration   1: 16052.260 ms/op
# Warmup Iteration   2: 16301.825 ms/op
# Warmup Iteration   3: 21955.119 ms/op
# Warmup Iteration   4: 22596.451 ms/op
# Warmup Iteration   5: 25053.442 ms/op
Iteration   1: 25389.192 ms/op
Iteration   2: 26004.079 ms/op
Iteration   3: 23846.683 ms/op
Iteration   4: 24931.470 ms/op
Iteration   5: 26203.286 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  25274.942 ±(99.9%) 3634.941 ms/op [Average]
  (min, avg, max) = (23846.683, 25274.942, 26203.286), stdev = 943.983
  CI (99.9%): [21640.001, 28909.883] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 65.15% complete, ETA 02:13:09
# Fork: 1 of 1
# Warmup Iteration   1: 10.848 ms/op
# Warmup Iteration   2: 7.908 ms/op
# Warmup Iteration   3: 7.801 ms/op
# Warmup Iteration   4: 7.546 ms/op
# Warmup Iteration   5: 7.589 ms/op
Iteration   1: 7.714 ms/op
Iteration   2: 7.704 ms/op
Iteration   3: 7.454 ms/op
Iteration   4: 7.114 ms/op
Iteration   5: 7.232 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  7.444 ±(99.9%) 1.045 ms/op [Average]
  (min, avg, max) = (7.114, 7.444, 7.714), stdev = 0.271
  CI (99.9%): [6.399, 8.488] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 65.24% complete, ETA 02:12:45
# Fork: 1 of 1
# Warmup Iteration   1: 7.919 ms/op
# Warmup Iteration   2: 6.558 ms/op
# Warmup Iteration   3: 6.778 ms/op
# Warmup Iteration   4: 6.644 ms/op
# Warmup Iteration   5: 6.300 ms/op
Iteration   1: 6.889 ms/op
Iteration   2: 6.557 ms/op
Iteration   3: 5.995 ms/op
Iteration   4: 6.694 ms/op
Iteration   5: 6.944 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  6.616 ±(99.9%) 1.463 ms/op [Average]
  (min, avg, max) = (5.995, 6.616, 6.944), stdev = 0.380
  CI (99.9%): [5.153, 8.079] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 65.32% complete, ETA 02:12:21
# Fork: 1 of 1
# Warmup Iteration   1: 211.334 ms/op
# Warmup Iteration   2: 204.347 ms/op
# Warmup Iteration   3: 193.053 ms/op
# Warmup Iteration   4: 220.169 ms/op
# Warmup Iteration   5: 196.923 ms/op
Iteration   1: 206.412 ms/op
Iteration   2: 307.309 ms/op
Iteration   3: 341.052 ms/op
Iteration   4: 277.224 ms/op
Iteration   5: 233.600 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  273.120 ±(99.9%) 209.252 ms/op [Average]
  (min, avg, max) = (206.412, 273.120, 341.052), stdev = 54.342
  CI (99.9%): [63.868, 482.371] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 65.40% complete, ETA 02:11:58
# Fork: 1 of 1
# Warmup Iteration   1: 232.219 ms/op
# Warmup Iteration   2: 194.807 ms/op
# Warmup Iteration   3: 181.525 ms/op
# Warmup Iteration   4: 198.371 ms/op
# Warmup Iteration   5: 203.764 ms/op
Iteration   1: 192.130 ms/op
Iteration   2: 212.086 ms/op
Iteration   3: 212.351 ms/op
Iteration   4: 215.374 ms/op
Iteration   5: 218.072 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  210.003 ±(99.9%) 39.610 ms/op [Average]
  (min, avg, max) = (192.130, 210.003, 218.072), stdev = 10.286
  CI (99.9%): [170.393, 249.612] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 65.49% complete, ETA 02:11:34
# Fork: 1 of 1
# Warmup Iteration   1: 35440.096 ms/op
# Warmup Iteration   2: 47904.667 ms/op
# Warmup Iteration   3: 43009.090 ms/op
# Warmup Iteration   4: 52933.858 ms/op
# Warmup Iteration   5: 44938.030 ms/op
Iteration   1: 46251.034 ms/op
Iteration   2: 45574.364 ms/op
Iteration   3: 44734.348 ms/op
Iteration   4: 48394.274 ms/op
Iteration   5: 43116.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  45614.005 ±(99.9%) 7494.200 ms/op [Average]
  (min, avg, max) = (43116.002, 45614.005, 48394.274), stdev = 1946.220
  CI (99.9%): [38119.804, 53108.205] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 65.57% complete, ETA 02:15:04
# Fork: 1 of 1
# Warmup Iteration   1: 38916.509 ms/op
# Warmup Iteration   2: 52086.447 ms/op
# Warmup Iteration   3: 47748.386 ms/op
# Warmup Iteration   4: 49024.605 ms/op
# Warmup Iteration   5: 49453.064 ms/op
Iteration   1: 46297.657 ms/op
Iteration   2: 50588.289 ms/op
Iteration   3: 52018.707 ms/op
Iteration   4: 51049.407 ms/op
Iteration   5: 45198.476 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  49030.507 ±(99.9%) 11803.482 ms/op [Average]
  (min, avg, max) = (45198.476, 49030.507, 52018.707), stdev = 3065.327
  CI (99.9%): [37227.026, 60833.989] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 65.66% complete, ETA 02:18:47
# Fork: 1 of 1
# Warmup Iteration   1: 15.930 ms/op
# Warmup Iteration   2: 13.145 ms/op
# Warmup Iteration   3: 13.005 ms/op
# Warmup Iteration   4: 13.103 ms/op
# Warmup Iteration   5: 13.256 ms/op
Iteration   1: 12.988 ms/op
Iteration   2: 12.536 ms/op
Iteration   3: 12.238 ms/op
Iteration   4: 11.768 ms/op
Iteration   5: 13.710 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  12.648 ±(99.9%) 2.856 ms/op [Average]
  (min, avg, max) = (11.768, 12.648, 13.710), stdev = 0.742
  CI (99.9%): [9.792, 15.504] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 65.74% complete, ETA 02:18:21
# Fork: 1 of 1
# Warmup Iteration   1: 13.603 ms/op
# Warmup Iteration   2: 12.111 ms/op
# Warmup Iteration   3: 12.797 ms/op
# Warmup Iteration   4: 12.467 ms/op
# Warmup Iteration   5: 12.364 ms/op
Iteration   1: 12.106 ms/op
Iteration   2: 11.388 ms/op
Iteration   3: 15.528 ms/op
Iteration   4: 12.977 ms/op
Iteration   5: 12.852 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  12.970 ±(99.9%) 6.030 ms/op [Average]
  (min, avg, max) = (11.388, 12.970, 15.528), stdev = 1.566
  CI (99.9%): [6.940, 19.000] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 65.82% complete, ETA 02:17:55
# Fork: 1 of 1
# Warmup Iteration   1: 471.886 ms/op
# Warmup Iteration   2: 435.893 ms/op
# Warmup Iteration   3: 358.148 ms/op
# Warmup Iteration   4: 355.852 ms/op
# Warmup Iteration   5: 352.832 ms/op
Iteration   1: 366.689 ms/op
Iteration   2: 366.690 ms/op
Iteration   3: 346.589 ms/op
Iteration   4: 344.759 ms/op
Iteration   5: 372.500 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  359.445 ±(99.9%) 49.326 ms/op [Average]
  (min, avg, max) = (344.759, 359.445, 372.500), stdev = 12.810
  CI (99.9%): [310.119, 408.771] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 65.91% complete, ETA 02:17:31
# Fork: 1 of 1
# Warmup Iteration   1: 437.279 ms/op
# Warmup Iteration   2: 413.864 ms/op
# Warmup Iteration   3: 358.458 ms/op
# Warmup Iteration   4: 345.555 ms/op
# Warmup Iteration   5: 351.843 ms/op
Iteration   1: 361.402 ms/op
Iteration   2: 378.273 ms/op
Iteration   3: 367.624 ms/op
Iteration   4: 390.197 ms/op
Iteration   5: 398.552 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  379.210 ±(99.9%) 59.251 ms/op [Average]
  (min, avg, max) = (361.402, 379.210, 398.552), stdev = 15.387
  CI (99.9%): [319.959, 438.460] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 65.99% complete, ETA 02:17:06
# Fork: 1 of 1
# Warmup Iteration   1: 85186.154 ms/op
# Warmup Iteration   2: 87078.427 ms/op
# Warmup Iteration   3: 94156.616 ms/op
# Warmup Iteration   4: 89919.285 ms/op
# Warmup Iteration   5: 96087.573 ms/op
Iteration   1: 92656.733 ms/op
Iteration   2: 92650.733 ms/op
Iteration   3: 89170.596 ms/op
Iteration   4: 97144.238 ms/op
Iteration   5: 94465.287 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  93217.518 ±(99.9%) 11224.702 ms/op [Average]
  (min, avg, max) = (89170.596, 93217.518, 97144.238), stdev = 2915.019
  CI (99.9%): [81992.816, 104442.219] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 66.08% complete, ETA 02:24:27
# Fork: 1 of 1
# Warmup Iteration   1: 86495.204 ms/op
# Warmup Iteration   2: 94806.673 ms/op
# Warmup Iteration   3: 100523.242 ms/op
# Warmup Iteration   4: 91684.089 ms/op
# Warmup Iteration   5: 100195.356 ms/op
Iteration   1: 96568.705 ms/op
Iteration   2: 92832.701 ms/op
Iteration   3: 102095.342 ms/op
Iteration   4: 98494.554 ms/op
Iteration   5: 98350.584 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  97668.377 ±(99.9%) 12964.015 ms/op [Average]
  (min, avg, max) = (92832.701, 97668.377, 102095.342), stdev = 3366.713
  CI (99.9%): [84704.363, 110632.392] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 66.16% complete, ETA 02:32:08
# Fork: 1 of 1
# Warmup Iteration   1: 25.422 ms/op
# Warmup Iteration   2: 22.347 ms/op
# Warmup Iteration   3: 22.492 ms/op
# Warmup Iteration   4: 22.847 ms/op
# Warmup Iteration   5: 23.246 ms/op
Iteration   1: 27.814 ms/op
Iteration   2: 26.107 ms/op
Iteration   3: 25.162 ms/op
Iteration   4: 26.243 ms/op
Iteration   5: 24.489 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  25.963 ±(99.9%) 4.847 ms/op [Average]
  (min, avg, max) = (24.489, 25.963, 27.814), stdev = 1.259
  CI (99.9%): [21.116, 30.810] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 66.25% complete, ETA 02:31:39
# Fork: 1 of 1
# Warmup Iteration   1: 28.052 ms/op
# Warmup Iteration   2: 24.909 ms/op
# Warmup Iteration   3: 24.834 ms/op
# Warmup Iteration   4: 23.817 ms/op
# Warmup Iteration   5: 27.335 ms/op
Iteration   1: 24.586 ms/op
Iteration   2: 26.512 ms/op
Iteration   3: 24.534 ms/op
Iteration   4: 25.832 ms/op
Iteration   5: 24.321 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  25.157 ±(99.9%) 3.706 ms/op [Average]
  (min, avg, max) = (24.321, 25.157, 26.512), stdev = 0.963
  CI (99.9%): [21.451, 28.863] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 66.33% complete, ETA 02:31:10
# Fork: 1 of 1
# Warmup Iteration   1: 828.675 ms/op
# Warmup Iteration   2: 772.359 ms/op
# Warmup Iteration   3: 786.990 ms/op
# Warmup Iteration   4: 791.000 ms/op
# Warmup Iteration   5: 801.574 ms/op
Iteration   1: 790.983 ms/op
Iteration   2: 797.522 ms/op
Iteration   3: 814.575 ms/op
Iteration   4: 820.620 ms/op
Iteration   5: 802.981 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  805.336 ±(99.9%) 46.828 ms/op [Average]
  (min, avg, max) = (790.983, 805.336, 820.620), stdev = 12.161
  CI (99.9%): [758.508, 852.164] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 66.41% complete, ETA 02:30:44
# Fork: 1 of 1
# Warmup Iteration   1: 825.645 ms/op
# Warmup Iteration   2: 762.776 ms/op
# Warmup Iteration   3: 820.070 ms/op
# Warmup Iteration   4: 842.706 ms/op
# Warmup Iteration   5: 838.118 ms/op
Iteration   1: 804.345 ms/op
Iteration   2: 832.719 ms/op
Iteration   3: 827.034 ms/op
Iteration   4: 820.868 ms/op
Iteration   5: 815.680 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  820.129 ±(99.9%) 41.991 ms/op [Average]
  (min, avg, max) = (804.345, 820.129, 832.719), stdev = 10.905
  CI (99.9%): [778.138, 862.120] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 66.50% complete, ETA 02:30:18
# Fork: 1 of 1
# Warmup Iteration   1: 160328.501 ms/op
# Warmup Iteration   2: 167043.767 ms/op
# Warmup Iteration   3: 189434.352 ms/op
# Warmup Iteration   4: 182798.832 ms/op
# Warmup Iteration   5: 184857.177 ms/op
Iteration   1: 200013.074 ms/op
Iteration   2: 187216.327 ms/op
Iteration   3: 167052.612 ms/op
Iteration   4: 129521.075 ms/op
Iteration   5: 131080.045 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  162976.627 ±(99.9%) 123469.158 ms/op [Average]
  (min, avg, max) = (129521.075, 162976.627, 200013.074), stdev = 32064.548
  CI (99.9%): [39507.469, 286445.784] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 66.58% complete, ETA 02:43:58
# Fork: 1 of 1
# Warmup Iteration   1: 161529.561 ms/op
# Warmup Iteration   2: 234873.822 ms/op
# Warmup Iteration   3: 173211.022 ms/op
# Warmup Iteration   4: 151463.446 ms/op
# Warmup Iteration   5: 154087.935 ms/op
Iteration   1: 153798.486 ms/op
Iteration   2: 154793.920 ms/op
Iteration   3: 154127.545 ms/op
Iteration   4: 150905.100 ms/op
Iteration   5: 153916.353 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  153508.281 ±(99.9%) 5796.354 ms/op [Average]
  (min, avg, max) = (150905.100, 153508.281, 154793.920), stdev = 1505.295
  CI (99.9%): [147711.926, 159304.635] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 66.67% complete, ETA 02:57:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.037 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.033 ms/op
Iteration   4: 0.032 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.032 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.031, 0.032, 0.033), stdev = 0.001
  CI (99.9%): [0.028, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 66.75% complete, ETA 02:56:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.038 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.035 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.038 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.035 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.034, 0.035, 0.036), stdev = 0.001
  CI (99.9%): [0.031, 0.038] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 66.84% complete, ETA 02:55:53
# Fork: 1 of 1
# Warmup Iteration   1: 1.255 ms/op
# Warmup Iteration   2: 1.075 ms/op
# Warmup Iteration   3: 1.052 ms/op
# Warmup Iteration   4: 1.046 ms/op
# Warmup Iteration   5: 1.062 ms/op
Iteration   1: 1.040 ms/op
Iteration   2: 1.060 ms/op
Iteration   3: 1.043 ms/op
Iteration   4: 1.080 ms/op
Iteration   5: 0.868 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.018 ±(99.9%) 0.329 ms/op [Average]
  (min, avg, max) = (0.868, 1.018, 1.080), stdev = 0.085
  CI (99.9%): [0.690, 1.347] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 66.92% complete, ETA 02:55:18
# Fork: 1 of 1
# Warmup Iteration   1: 1.259 ms/op
# Warmup Iteration   2: 1.121 ms/op
# Warmup Iteration   3: 1.085 ms/op
# Warmup Iteration   4: 1.132 ms/op
# Warmup Iteration   5: 1.030 ms/op
Iteration   1: 0.986 ms/op
Iteration   2: 0.974 ms/op
Iteration   3: 0.947 ms/op
Iteration   4: 0.995 ms/op
Iteration   5: 0.961 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.973 ±(99.9%) 0.074 ms/op [Average]
  (min, avg, max) = (0.947, 0.973, 0.995), stdev = 0.019
  CI (99.9%): [0.898, 1.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 67.00% complete, ETA 02:54:44
# Fork: 1 of 1
# Warmup Iteration   1: 176.074 ms/op
# Warmup Iteration   2: 158.992 ms/op
# Warmup Iteration   3: 163.862 ms/op
# Warmup Iteration   4: 156.013 ms/op
# Warmup Iteration   5: 153.092 ms/op
Iteration   1: 152.468 ms/op
Iteration   2: 180.560 ms/op
Iteration   3: 149.743 ms/op
Iteration   4: 141.221 ms/op
Iteration   5: 144.501 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  153.699 ±(99.9%) 60.240 ms/op [Average]
  (min, avg, max) = (141.221, 153.699, 180.560), stdev = 15.644
  CI (99.9%): [93.458, 213.939] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 67.09% complete, ETA 02:54:10
# Fork: 1 of 1
# Warmup Iteration   1: 160.332 ms/op
# Warmup Iteration   2: 143.323 ms/op
# Warmup Iteration   3: 146.274 ms/op
# Warmup Iteration   4: 155.735 ms/op
# Warmup Iteration   5: 145.991 ms/op
Iteration   1: 137.857 ms/op
Iteration   2: 142.334 ms/op
Iteration   3: 141.912 ms/op
Iteration   4: 144.917 ms/op
Iteration   5: 144.974 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  142.399 ±(99.9%) 11.201 ms/op [Average]
  (min, avg, max) = (137.857, 142.399, 144.974), stdev = 2.909
  CI (99.9%): [131.198, 153.599] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 67.17% complete, ETA 02:53:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.060 ms/op
# Warmup Iteration   4: 0.062 ms/op
# Warmup Iteration   5: 0.061 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.065 ms/op
Iteration   3: 0.060 ms/op
Iteration   4: 0.063 ms/op
Iteration   5: 0.060 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.062 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.060, 0.062, 0.065), stdev = 0.002
  CI (99.9%): [0.054, 0.071] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 67.26% complete, ETA 02:53:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.060 ms/op
# Warmup Iteration   4: 0.067 ms/op
# Warmup Iteration   5: 0.063 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.063 ms/op
Iteration   3: 0.062 ms/op
Iteration   4: 0.066 ms/op
Iteration   5: 0.063 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.063 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.062, 0.063, 0.066), stdev = 0.001
  CI (99.9%): [0.058, 0.069] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 67.34% complete, ETA 02:52:26
# Fork: 1 of 1
# Warmup Iteration   1: 2.277 ms/op
# Warmup Iteration   2: 1.929 ms/op
# Warmup Iteration   3: 1.878 ms/op
# Warmup Iteration   4: 1.913 ms/op
# Warmup Iteration   5: 1.932 ms/op
Iteration   1: 1.874 ms/op
Iteration   2: 1.907 ms/op
Iteration   3: 1.933 ms/op
Iteration   4: 1.884 ms/op
Iteration   5: 2.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.920 ±(99.9%) 0.198 ms/op [Average]
  (min, avg, max) = (1.874, 1.920, 2.002), stdev = 0.051
  CI (99.9%): [1.722, 2.118] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 67.42% complete, ETA 02:51:52
# Fork: 1 of 1
# Warmup Iteration   1: 2.305 ms/op
# Warmup Iteration   2: 1.962 ms/op
# Warmup Iteration   3: 1.980 ms/op
# Warmup Iteration   4: 2.063 ms/op
# Warmup Iteration   5: 2.180 ms/op
Iteration   1: 2.022 ms/op
Iteration   2: 2.008 ms/op
Iteration   3: 1.981 ms/op
Iteration   4: 1.975 ms/op
Iteration   5: 2.118 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.021 ±(99.9%) 0.221 ms/op [Average]
  (min, avg, max) = (1.975, 2.021, 2.118), stdev = 0.058
  CI (99.9%): [1.799, 2.242] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 67.51% complete, ETA 02:51:18
# Fork: 1 of 1
# Warmup Iteration   1: 354.909 ms/op
# Warmup Iteration   2: 348.762 ms/op
# Warmup Iteration   3: 341.129 ms/op
# Warmup Iteration   4: 355.888 ms/op
# Warmup Iteration   5: 352.776 ms/op
Iteration   1: 336.001 ms/op
Iteration   2: 339.904 ms/op
Iteration   3: 328.245 ms/op
Iteration   4: 355.440 ms/op
Iteration   5: 366.424 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  345.203 ±(99.9%) 59.514 ms/op [Average]
  (min, avg, max) = (328.245, 345.203, 366.424), stdev = 15.456
  CI (99.9%): [285.689, 404.717] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 67.59% complete, ETA 02:50:44
# Fork: 1 of 1
# Warmup Iteration   1: 366.026 ms/op
# Warmup Iteration   2: 339.843 ms/op
# Warmup Iteration   3: 340.551 ms/op
# Warmup Iteration   4: 331.665 ms/op
# Warmup Iteration   5: 323.203 ms/op
Iteration   1: 314.933 ms/op
Iteration   2: 296.700 ms/op
Iteration   3: 293.823 ms/op
Iteration   4: 290.531 ms/op
Iteration   5: 293.533 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  297.904 ±(99.9%) 37.609 ms/op [Average]
  (min, avg, max) = (290.531, 297.904, 314.933), stdev = 9.767
  CI (99.9%): [260.295, 335.513] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 67.68% complete, ETA 02:50:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.142 ms/op
# Warmup Iteration   2: 0.135 ms/op
# Warmup Iteration   3: 0.127 ms/op
# Warmup Iteration   4: 0.125 ms/op
# Warmup Iteration   5: 0.125 ms/op
Iteration   1: 0.125 ms/op
Iteration   2: 0.125 ms/op
Iteration   3: 0.126 ms/op
Iteration   4: 0.124 ms/op
Iteration   5: 0.118 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.124 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.118, 0.124, 0.126), stdev = 0.003
  CI (99.9%): [0.111, 0.136] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 67.76% complete, ETA 02:49:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.126 ms/op
# Warmup Iteration   2: 0.118 ms/op
# Warmup Iteration   3: 0.117 ms/op
# Warmup Iteration   4: 0.117 ms/op
# Warmup Iteration   5: 0.120 ms/op
Iteration   1: 0.120 ms/op
Iteration   2: 0.115 ms/op
Iteration   3: 0.118 ms/op
Iteration   4: 0.116 ms/op
Iteration   5: 0.116 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.117 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.115, 0.117, 0.120), stdev = 0.002
  CI (99.9%): [0.110, 0.125] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 67.85% complete, ETA 02:49:02
# Fork: 1 of 1
# Warmup Iteration   1: 3.984 ms/op
# Warmup Iteration   2: 3.765 ms/op
# Warmup Iteration   3: 3.760 ms/op
# Warmup Iteration   4: 3.715 ms/op
# Warmup Iteration   5: 3.704 ms/op
Iteration   1: 3.689 ms/op
Iteration   2: 3.658 ms/op
Iteration   3: 3.817 ms/op
Iteration   4: 3.775 ms/op
Iteration   5: 3.737 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  3.735 ±(99.9%) 0.246 ms/op [Average]
  (min, avg, max) = (3.658, 3.735, 3.817), stdev = 0.064
  CI (99.9%): [3.489, 3.982] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 67.93% complete, ETA 02:48:28
# Fork: 1 of 1
# Warmup Iteration   1: 4.204 ms/op
# Warmup Iteration   2: 3.663 ms/op
# Warmup Iteration   3: 3.862 ms/op
# Warmup Iteration   4: 3.688 ms/op
# Warmup Iteration   5: 3.638 ms/op
Iteration   1: 3.857 ms/op
Iteration   2: 3.668 ms/op
Iteration   3: 3.911 ms/op
Iteration   4: 3.837 ms/op
Iteration   5: 3.869 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  3.828 ±(99.9%) 0.360 ms/op [Average]
  (min, avg, max) = (3.668, 3.828, 3.911), stdev = 0.093
  CI (99.9%): [3.468, 4.188] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 68.01% complete, ETA 02:47:54
# Fork: 1 of 1
# Warmup Iteration   1: 678.528 ms/op
# Warmup Iteration   2: 678.666 ms/op
# Warmup Iteration   3: 621.884 ms/op
# Warmup Iteration   4: 623.119 ms/op
# Warmup Iteration   5: 608.712 ms/op
Iteration   1: 622.233 ms/op
Iteration   2: 615.121 ms/op
Iteration   3: 710.234 ms/op
Iteration   4: 646.863 ms/op
Iteration   5: 626.462 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  644.183 ±(99.9%) 149.263 ms/op [Average]
  (min, avg, max) = (615.121, 644.183, 710.234), stdev = 38.763
  CI (99.9%): [494.920, 793.445] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 68.10% complete, ETA 02:47:21
# Fork: 1 of 1
# Warmup Iteration   1: 695.142 ms/op
# Warmup Iteration   2: 619.642 ms/op
# Warmup Iteration   3: 626.689 ms/op
# Warmup Iteration   4: 678.557 ms/op
# Warmup Iteration   5: 615.298 ms/op
Iteration   1: 613.749 ms/op
Iteration   2: 622.443 ms/op
Iteration   3: 632.800 ms/op
Iteration   4: 594.406 ms/op
Iteration   5: 604.055 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  613.490 ±(99.9%) 57.962 ms/op [Average]
  (min, avg, max) = (594.406, 613.490, 632.800), stdev = 15.053
  CI (99.9%): [555.528, 671.453] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 68.18% complete, ETA 02:46:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.338 ms/op
# Warmup Iteration   2: 0.279 ms/op
# Warmup Iteration   3: 0.285 ms/op
# Warmup Iteration   4: 0.273 ms/op
# Warmup Iteration   5: 0.273 ms/op
Iteration   1: 0.279 ms/op
Iteration   2: 0.267 ms/op
Iteration   3: 0.284 ms/op
Iteration   4: 0.241 ms/op
Iteration   5: 0.288 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.272 ±(99.9%) 0.073 ms/op [Average]
  (min, avg, max) = (0.241, 0.272, 0.288), stdev = 0.019
  CI (99.9%): [0.198, 0.345] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 68.27% complete, ETA 02:46:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.318 ms/op
# Warmup Iteration   2: 0.283 ms/op
# Warmup Iteration   3: 0.292 ms/op
# Warmup Iteration   4: 0.277 ms/op
# Warmup Iteration   5: 0.264 ms/op
Iteration   1: 0.248 ms/op
Iteration   2: 0.261 ms/op
Iteration   3: 0.263 ms/op
Iteration   4: 0.259 ms/op
Iteration   5: 0.258 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.258 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.248, 0.258, 0.263), stdev = 0.006
  CI (99.9%): [0.234, 0.282] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 68.35% complete, ETA 02:45:41
# Fork: 1 of 1
# Warmup Iteration   1: 9.264 ms/op
# Warmup Iteration   2: 7.709 ms/op
# Warmup Iteration   3: 7.918 ms/op
# Warmup Iteration   4: 7.672 ms/op
# Warmup Iteration   5: 7.476 ms/op
Iteration   1: 7.478 ms/op
Iteration   2: 7.456 ms/op
Iteration   3: 7.649 ms/op
Iteration   4: 8.475 ms/op
Iteration   5: 7.890 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  7.790 ±(99.9%) 1.619 ms/op [Average]
  (min, avg, max) = (7.456, 7.790, 8.475), stdev = 0.421
  CI (99.9%): [6.170, 9.409] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 68.43% complete, ETA 02:45:08
# Fork: 1 of 1
# Warmup Iteration   1: 9.239 ms/op
# Warmup Iteration   2: 8.054 ms/op
# Warmup Iteration   3: 8.322 ms/op
# Warmup Iteration   4: 8.467 ms/op
# Warmup Iteration   5: 8.271 ms/op
Iteration   1: 8.319 ms/op
Iteration   2: 8.182 ms/op
Iteration   3: 8.061 ms/op
Iteration   4: 8.445 ms/op
Iteration   5: 8.032 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  8.208 ±(99.9%) 0.671 ms/op [Average]
  (min, avg, max) = (8.032, 8.208, 8.445), stdev = 0.174
  CI (99.9%): [7.537, 8.879] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 68.52% complete, ETA 02:44:34
# Fork: 1 of 1
# Warmup Iteration   1: 1395.414 ms/op
# Warmup Iteration   2: 1312.682 ms/op
# Warmup Iteration   3: 1245.869 ms/op
# Warmup Iteration   4: 1261.361 ms/op
# Warmup Iteration   5: 1219.392 ms/op
Iteration   1: 1235.864 ms/op
Iteration   2: 1336.751 ms/op
Iteration   3: 1228.533 ms/op
Iteration   4: 1192.584 ms/op
Iteration   5: 1144.133 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1227.573 ±(99.9%) 273.477 ms/op [Average]
  (min, avg, max) = (1144.133, 1227.573, 1336.751), stdev = 71.021
  CI (99.9%): [954.096, 1501.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 68.60% complete, ETA 02:44:02
# Fork: 1 of 1
# Warmup Iteration   1: 1341.555 ms/op
# Warmup Iteration   2: 1232.192 ms/op
# Warmup Iteration   3: 1183.247 ms/op
# Warmup Iteration   4: 1133.826 ms/op
# Warmup Iteration   5: 1156.693 ms/op
Iteration   1: 1106.223 ms/op
Iteration   2: 1135.590 ms/op
Iteration   3: 1120.959 ms/op
Iteration   4: 1156.616 ms/op
Iteration   5: 1127.711 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1129.420 ±(99.9%) 71.788 ms/op [Average]
  (min, avg, max) = (1106.223, 1129.420, 1156.616), stdev = 18.643
  CI (99.9%): [1057.631, 1201.208] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 68.69% complete, ETA 02:43:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.499 ms/op
# Warmup Iteration   2: 0.447 ms/op
# Warmup Iteration   3: 0.441 ms/op
# Warmup Iteration   4: 0.445 ms/op
# Warmup Iteration   5: 0.466 ms/op
Iteration   1: 0.451 ms/op
Iteration   2: 0.452 ms/op
Iteration   3: 0.451 ms/op
Iteration   4: 0.472 ms/op
Iteration   5: 0.484 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.462 ±(99.9%) 0.058 ms/op [Average]
  (min, avg, max) = (0.451, 0.462, 0.484), stdev = 0.015
  CI (99.9%): [0.404, 0.520] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 68.77% complete, ETA 02:42:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.540 ms/op
# Warmup Iteration   2: 0.498 ms/op
# Warmup Iteration   3: 0.488 ms/op
# Warmup Iteration   4: 0.480 ms/op
# Warmup Iteration   5: 0.499 ms/op
Iteration   1: 0.498 ms/op
Iteration   2: 0.486 ms/op
Iteration   3: 0.469 ms/op
Iteration   4: 0.505 ms/op
Iteration   5: 0.498 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.491 ±(99.9%) 0.054 ms/op [Average]
  (min, avg, max) = (0.469, 0.491, 0.505), stdev = 0.014
  CI (99.9%): [0.437, 0.545] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 68.86% complete, ETA 02:42:22
# Fork: 1 of 1
# Warmup Iteration   1: 17.217 ms/op
# Warmup Iteration   2: 15.880 ms/op
# Warmup Iteration   3: 15.271 ms/op
# Warmup Iteration   4: 15.180 ms/op
# Warmup Iteration   5: 15.634 ms/op
Iteration   1: 15.316 ms/op
Iteration   2: 15.713 ms/op
Iteration   3: 14.878 ms/op
Iteration   4: 15.014 ms/op
Iteration   5: 15.728 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  15.330 ±(99.9%) 1.503 ms/op [Average]
  (min, avg, max) = (14.878, 15.330, 15.728), stdev = 0.390
  CI (99.9%): [13.827, 16.833] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 68.94% complete, ETA 02:41:48
# Fork: 1 of 1
# Warmup Iteration   1: 17.567 ms/op
# Warmup Iteration   2: 15.308 ms/op
# Warmup Iteration   3: 15.606 ms/op
# Warmup Iteration   4: 14.871 ms/op
# Warmup Iteration   5: 16.233 ms/op
Iteration   1: 15.803 ms/op
Iteration   2: 15.648 ms/op
Iteration   3: 15.647 ms/op
Iteration   4: 15.883 ms/op
Iteration   5: 16.446 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  15.885 ±(99.9%) 1.270 ms/op [Average]
  (min, avg, max) = (15.647, 15.885, 16.446), stdev = 0.330
  CI (99.9%): [14.616, 17.155] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 69.02% complete, ETA 02:41:15
# Fork: 1 of 1
# Warmup Iteration   1: 2602.408 ms/op
# Warmup Iteration   2: 2536.394 ms/op
# Warmup Iteration   3: 2599.671 ms/op
# Warmup Iteration   4: 2611.808 ms/op
# Warmup Iteration   5: 2623.535 ms/op
Iteration   1: 2544.512 ms/op
Iteration   2: 2629.196 ms/op
Iteration   3: 2534.084 ms/op
Iteration   4: 2671.158 ms/op
Iteration   5: 2681.677 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2612.125 ±(99.9%) 267.305 ms/op [Average]
  (min, avg, max) = (2534.084, 2612.125, 2681.677), stdev = 69.418
  CI (99.9%): [2344.820, 2879.431] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 69.11% complete, ETA 02:40:49
# Fork: 1 of 1
# Warmup Iteration   1: 2867.916 ms/op
# Warmup Iteration   2: 2732.007 ms/op
# Warmup Iteration   3: 2782.322 ms/op
# Warmup Iteration   4: 2616.372 ms/op
# Warmup Iteration   5: 2834.804 ms/op
Iteration   1: 2773.938 ms/op
Iteration   2: 2773.758 ms/op
Iteration   3: 3481.179 ms/op
Iteration   4: 3365.988 ms/op
Iteration   5: 2644.896 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  3007.952 ±(99.9%) 1483.314 ms/op [Average]
  (min, avg, max) = (2644.896, 3007.952, 3481.179), stdev = 385.212
  CI (99.9%): [1524.638, 4491.265] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 69.19% complete, ETA 02:40:24
# Fork: 1 of 1
# Warmup Iteration   1: 1.188 ms/op
# Warmup Iteration   2: 1.021 ms/op
# Warmup Iteration   3: 1.078 ms/op
# Warmup Iteration   4: 1.080 ms/op
# Warmup Iteration   5: 1.084 ms/op
Iteration   1: 1.014 ms/op
Iteration   2: 1.032 ms/op
Iteration   3: 1.044 ms/op
Iteration   4: 1.042 ms/op
Iteration   5: 1.153 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.057 ±(99.9%) 0.211 ms/op [Average]
  (min, avg, max) = (1.014, 1.057, 1.153), stdev = 0.055
  CI (99.9%): [0.846, 1.268] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 69.28% complete, ETA 02:39:51
# Fork: 1 of 1
# Warmup Iteration   1: 1.209 ms/op
# Warmup Iteration   2: 0.959 ms/op
# Warmup Iteration   3: 0.971 ms/op
# Warmup Iteration   4: 0.944 ms/op
# Warmup Iteration   5: 1.000 ms/op
Iteration   1: 0.967 ms/op
Iteration   2: 1.006 ms/op
Iteration   3: 0.974 ms/op
Iteration   4: 0.776 ms/op
Iteration   5: 0.981 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.941 ±(99.9%) 0.359 ms/op [Average]
  (min, avg, max) = (0.776, 0.941, 1.006), stdev = 0.093
  CI (99.9%): [0.582, 1.300] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 69.36% complete, ETA 02:39:18
# Fork: 1 of 1
# Warmup Iteration   1: 33.664 ms/op
# Warmup Iteration   2: 30.429 ms/op
# Warmup Iteration   3: 31.791 ms/op
# Warmup Iteration   4: 30.716 ms/op
# Warmup Iteration   5: 30.384 ms/op
Iteration   1: 29.665 ms/op
Iteration   2: 28.146 ms/op
Iteration   3: 28.585 ms/op
Iteration   4: 28.847 ms/op
Iteration   5: 29.122 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  28.873 ±(99.9%) 2.196 ms/op [Average]
  (min, avg, max) = (28.146, 28.873, 29.665), stdev = 0.570
  CI (99.9%): [26.677, 31.069] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 69.44% complete, ETA 02:38:45
# Fork: 1 of 1
# Warmup Iteration   1: 32.570 ms/op
# Warmup Iteration   2: 28.113 ms/op
# Warmup Iteration   3: 28.209 ms/op
# Warmup Iteration   4: 28.692 ms/op
# Warmup Iteration   5: 27.957 ms/op
Iteration   1: 30.507 ms/op
Iteration   2: 27.505 ms/op
Iteration   3: 27.482 ms/op
Iteration   4: 28.019 ms/op
Iteration   5: 27.912 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  28.285 ±(99.9%) 4.871 ms/op [Average]
  (min, avg, max) = (27.482, 28.285, 30.507), stdev = 1.265
  CI (99.9%): [23.414, 33.156] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 69.53% complete, ETA 02:38:12
# Fork: 1 of 1
# Warmup Iteration   1: 4868.351 ms/op
# Warmup Iteration   2: 5799.411 ms/op
# Warmup Iteration   3: 5873.901 ms/op
# Warmup Iteration   4: 4753.545 ms/op
# Warmup Iteration   5: 5219.437 ms/op
Iteration   1: 4916.882 ms/op
Iteration   2: 4961.535 ms/op
Iteration   3: 4906.237 ms/op
Iteration   4: 4949.463 ms/op
Iteration   5: 5122.463 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  4971.316 ±(99.9%) 336.887 ms/op [Average]
  (min, avg, max) = (4906.237, 4971.316, 5122.463), stdev = 87.488
  CI (99.9%): [4634.429, 5308.203] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 69.61% complete, ETA 02:37:57
# Fork: 1 of 1
# Warmup Iteration   1: 5306.764 ms/op
# Warmup Iteration   2: 4997.343 ms/op
# Warmup Iteration   3: 4758.221 ms/op
# Warmup Iteration   4: 5489.459 ms/op
# Warmup Iteration   5: 4779.255 ms/op
Iteration   1: 4761.337 ms/op
Iteration   2: 4584.175 ms/op
Iteration   3: 4849.650 ms/op
Iteration   4: 4946.790 ms/op
Iteration   5: 4874.302 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  4803.251 ±(99.9%) 536.179 ms/op [Average]
  (min, avg, max) = (4584.175, 4803.251, 4946.790), stdev = 139.244
  CI (99.9%): [4267.072, 5339.430] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 69.70% complete, ETA 02:37:41
# Fork: 1 of 1
# Warmup Iteration   1: 2.524 ms/op
# Warmup Iteration   2: 2.082 ms/op
# Warmup Iteration   3: 1.955 ms/op
# Warmup Iteration   4: 2.003 ms/op
# Warmup Iteration   5: 1.922 ms/op
Iteration   1: 2.055 ms/op
Iteration   2: 1.942 ms/op
Iteration   3: 1.922 ms/op
Iteration   4: 2.045 ms/op
Iteration   5: 1.918 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.976 ±(99.9%) 0.262 ms/op [Average]
  (min, avg, max) = (1.918, 1.976, 2.055), stdev = 0.068
  CI (99.9%): [1.715, 2.238] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 69.78% complete, ETA 02:37:08
# Fork: 1 of 1
# Warmup Iteration   1: 2.239 ms/op
# Warmup Iteration   2: 1.981 ms/op
# Warmup Iteration   3: 1.997 ms/op
# Warmup Iteration   4: 1.968 ms/op
# Warmup Iteration   5: 1.909 ms/op
Iteration   1: 1.896 ms/op
Iteration   2: 1.939 ms/op
Iteration   3: 2.056 ms/op
Iteration   4: 2.166 ms/op
Iteration   5: 2.036 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.019 ±(99.9%) 0.407 ms/op [Average]
  (min, avg, max) = (1.896, 2.019, 2.166), stdev = 0.106
  CI (99.9%): [1.611, 2.426] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 69.87% complete, ETA 02:36:35
# Fork: 1 of 1
# Warmup Iteration   1: 70.042 ms/op
# Warmup Iteration   2: 61.035 ms/op
# Warmup Iteration   3: 60.369 ms/op
# Warmup Iteration   4: 63.251 ms/op
# Warmup Iteration   5: 61.647 ms/op
Iteration   1: 61.252 ms/op
Iteration   2: 62.458 ms/op
Iteration   3: 59.708 ms/op
Iteration   4: 64.043 ms/op
Iteration   5: 62.382 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  61.968 ±(99.9%) 6.190 ms/op [Average]
  (min, avg, max) = (59.708, 61.968, 64.043), stdev = 1.607
  CI (99.9%): [55.779, 68.158] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 69.95% complete, ETA 02:36:02
# Fork: 1 of 1
# Warmup Iteration   1: 74.783 ms/op
# Warmup Iteration   2: 66.688 ms/op
# Warmup Iteration   3: 63.364 ms/op
# Warmup Iteration   4: 65.829 ms/op
# Warmup Iteration   5: 64.996 ms/op
Iteration   1: 62.970 ms/op
Iteration   2: 63.960 ms/op
Iteration   3: 62.511 ms/op
Iteration   4: 71.220 ms/op
Iteration   5: 65.870 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  65.306 ±(99.9%) 13.665 ms/op [Average]
  (min, avg, max) = (62.511, 65.306, 71.220), stdev = 3.549
  CI (99.9%): [51.642, 78.971] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 70.03% complete, ETA 02:35:29
# Fork: 1 of 1
# Warmup Iteration   1: 11433.731 ms/op
# Warmup Iteration   2: 12717.770 ms/op
# Warmup Iteration   3: 9983.453 ms/op
# Warmup Iteration   4: 9349.855 ms/op
# Warmup Iteration   5: 9490.037 ms/op
Iteration   1: 9771.795 ms/op
Iteration   2: 10105.986 ms/op
Iteration   3: 10278.417 ms/op
Iteration   4: 10357.851 ms/op
Iteration   5: 9820.378 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  10066.885 ±(99.9%) 1016.562 ms/op [Average]
  (min, avg, max) = (9771.795, 10066.885, 10357.851), stdev = 263.998
  CI (99.9%): [9050.323, 11083.448] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 70.12% complete, ETA 02:35:36
# Fork: 1 of 1
# Warmup Iteration   1: 9922.618 ms/op
# Warmup Iteration   2: 9669.390 ms/op
# Warmup Iteration   3: 10380.261 ms/op
# Warmup Iteration   4: 10148.583 ms/op
# Warmup Iteration   5: 10251.707 ms/op
Iteration   1: 9682.755 ms/op
Iteration   2: 9274.686 ms/op
Iteration   3: 9018.480 ms/op
Iteration   4: 8492.945 ms/op
Iteration   5: 9113.957 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  9116.565 ±(99.9%) 1660.809 ms/op [Average]
  (min, avg, max) = (8492.945, 9116.565, 9682.755), stdev = 431.307
  CI (99.9%): [7455.756, 10777.373] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 70.20% complete, ETA 02:35:40
# Fork: 1 of 1
# Warmup Iteration   1: 4.219 ms/op
# Warmup Iteration   2: 3.829 ms/op
# Warmup Iteration   3: 3.635 ms/op
# Warmup Iteration   4: 3.751 ms/op
# Warmup Iteration   5: 3.679 ms/op
Iteration   1: 3.688 ms/op
Iteration   2: 3.594 ms/op
Iteration   3: 3.607 ms/op
Iteration   4: 3.808 ms/op
Iteration   5: 3.617 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  3.663 ±(99.9%) 0.343 ms/op [Average]
  (min, avg, max) = (3.594, 3.663, 3.808), stdev = 0.089
  CI (99.9%): [3.320, 4.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 70.29% complete, ETA 02:35:07
# Fork: 1 of 1
# Warmup Iteration   1: 4.049 ms/op
# Warmup Iteration   2: 3.612 ms/op
# Warmup Iteration   3: 3.618 ms/op
# Warmup Iteration   4: 3.688 ms/op
# Warmup Iteration   5: 3.797 ms/op
Iteration   1: 4.368 ms/op
Iteration   2: 3.735 ms/op
Iteration   3: 3.654 ms/op
Iteration   4: 3.604 ms/op
Iteration   5: 3.668 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  3.806 ±(99.9%) 1.224 ms/op [Average]
  (min, avg, max) = (3.604, 3.806, 4.368), stdev = 0.318
  CI (99.9%): [2.582, 5.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 70.37% complete, ETA 02:34:34
# Fork: 1 of 1
# Warmup Iteration   1: 137.221 ms/op
# Warmup Iteration   2: 118.212 ms/op
# Warmup Iteration   3: 119.691 ms/op
# Warmup Iteration   4: 115.532 ms/op
# Warmup Iteration   5: 116.853 ms/op
Iteration   1: 122.647 ms/op
Iteration   2: 117.301 ms/op
Iteration   3: 120.410 ms/op
Iteration   4: 120.068 ms/op
Iteration   5: 122.149 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  120.515 ±(99.9%) 8.114 ms/op [Average]
  (min, avg, max) = (117.301, 120.515, 122.647), stdev = 2.107
  CI (99.9%): [112.401, 128.629] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 70.45% complete, ETA 02:34:01
# Fork: 1 of 1
# Warmup Iteration   1: 136.818 ms/op
# Warmup Iteration   2: 117.708 ms/op
# Warmup Iteration   3: 118.651 ms/op
# Warmup Iteration   4: 116.166 ms/op
# Warmup Iteration   5: 118.041 ms/op
Iteration   1: 128.685 ms/op
Iteration   2: 122.550 ms/op
Iteration   3: 119.185 ms/op
Iteration   4: 116.606 ms/op
Iteration   5: 119.327 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  121.271 ±(99.9%) 17.905 ms/op [Average]
  (min, avg, max) = (116.606, 121.271, 128.685), stdev = 4.650
  CI (99.9%): [103.365, 139.176] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 70.54% complete, ETA 02:33:29
# Fork: 1 of 1
# Warmup Iteration   1: 20056.955 ms/op
# Warmup Iteration   2: 20540.618 ms/op
# Warmup Iteration   3: 21587.974 ms/op
# Warmup Iteration   4: 19410.998 ms/op
# Warmup Iteration   5: 18168.809 ms/op
Iteration   1: 17925.028 ms/op
Iteration   2: 18491.104 ms/op
Iteration   3: 20036.166 ms/op
Iteration   4: 20733.146 ms/op
Iteration   5: 19660.597 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  19369.208 ±(99.9%) 4410.118 ms/op [Average]
  (min, avg, max) = (17925.028, 19369.208, 20733.146), stdev = 1145.294
  CI (99.9%): [14959.090, 23779.327] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 70.62% complete, ETA 02:34:13
# Fork: 1 of 1
# Warmup Iteration   1: 20853.348 ms/op
# Warmup Iteration   2: 19528.510 ms/op
# Warmup Iteration   3: 18157.184 ms/op
# Warmup Iteration   4: 18755.653 ms/op
# Warmup Iteration   5: 19516.728 ms/op
Iteration   1: 20284.394 ms/op
Iteration   2: 18963.443 ms/op
Iteration   3: 18284.936 ms/op
Iteration   4: 18994.802 ms/op
Iteration   5: 19861.652 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  19277.845 ±(99.9%) 3055.627 ms/op [Average]
  (min, avg, max) = (18284.936, 19277.845, 20284.394), stdev = 793.537
  CI (99.9%): [16222.219, 22333.472] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 70.71% complete, ETA 02:34:56
# Fork: 1 of 1
# Warmup Iteration   1: 8.922 ms/op
# Warmup Iteration   2: 7.803 ms/op
# Warmup Iteration   3: 7.798 ms/op
# Warmup Iteration   4: 7.847 ms/op
# Warmup Iteration   5: 7.546 ms/op
Iteration   1: 7.907 ms/op
Iteration   2: 7.599 ms/op
Iteration   3: 7.627 ms/op
Iteration   4: 7.581 ms/op
Iteration   5: 7.669 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  7.676 ±(99.9%) 0.513 ms/op [Average]
  (min, avg, max) = (7.581, 7.676, 7.907), stdev = 0.133
  CI (99.9%): [7.163, 8.190] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 70.79% complete, ETA 02:34:23
# Fork: 1 of 1
# Warmup Iteration   1: 9.083 ms/op
# Warmup Iteration   2: 7.504 ms/op
# Warmup Iteration   3: 7.571 ms/op
# Warmup Iteration   4: 7.744 ms/op
# Warmup Iteration   5: 7.738 ms/op
Iteration   1: 8.209 ms/op
Iteration   2: 7.844 ms/op
Iteration   3: 7.714 ms/op
Iteration   4: 7.927 ms/op
Iteration   5: 7.987 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  7.936 ±(99.9%) 0.707 ms/op [Average]
  (min, avg, max) = (7.714, 7.936, 8.209), stdev = 0.184
  CI (99.9%): [7.229, 8.643] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 70.88% complete, ETA 02:33:50
# Fork: 1 of 1
# Warmup Iteration   1: 288.410 ms/op
# Warmup Iteration   2: 246.674 ms/op
# Warmup Iteration   3: 250.615 ms/op
# Warmup Iteration   4: 240.666 ms/op
# Warmup Iteration   5: 251.858 ms/op
Iteration   1: 260.774 ms/op
Iteration   2: 255.786 ms/op
Iteration   3: 251.989 ms/op
Iteration   4: 258.110 ms/op
Iteration   5: 258.681 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  257.068 ±(99.9%) 12.896 ms/op [Average]
  (min, avg, max) = (251.989, 257.068, 260.774), stdev = 3.349
  CI (99.9%): [244.172, 269.964] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 70.96% complete, ETA 02:33:17
# Fork: 1 of 1
# Warmup Iteration   1: 292.678 ms/op
# Warmup Iteration   2: 261.032 ms/op
# Warmup Iteration   3: 257.990 ms/op
# Warmup Iteration   4: 266.946 ms/op
# Warmup Iteration   5: 262.975 ms/op
Iteration   1: 252.326 ms/op
Iteration   2: 264.649 ms/op
Iteration   3: 253.322 ms/op
Iteration   4: 257.365 ms/op
Iteration   5: 246.114 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  254.755 ±(99.9%) 26.351 ms/op [Average]
  (min, avg, max) = (246.114, 254.755, 264.649), stdev = 6.843
  CI (99.9%): [228.405, 281.106] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 71.04% complete, ETA 02:32:44
# Fork: 1 of 1
# Warmup Iteration   1: 39588.568 ms/op
# Warmup Iteration   2: 39695.403 ms/op
# Warmup Iteration   3: 39961.308 ms/op
# Warmup Iteration   4: 39074.899 ms/op
# Warmup Iteration   5: 37908.463 ms/op
Iteration   1: 41407.012 ms/op
Iteration   2: 38074.188 ms/op
Iteration   3: 37198.514 ms/op
Iteration   4: 39559.085 ms/op
Iteration   5: 43278.816 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  39903.523 ±(99.9%) 9517.258 ms/op [Average]
  (min, avg, max) = (37198.514, 39903.523, 43278.816), stdev = 2471.602
  CI (99.9%): [30386.265, 49420.781] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 71.13% complete, ETA 02:34:48
# Fork: 1 of 1
# Warmup Iteration   1: 37819.379 ms/op
# Warmup Iteration   2: 38221.674 ms/op
# Warmup Iteration   3: 40982.960 ms/op
# Warmup Iteration   4: 39160.206 ms/op
# Warmup Iteration   5: 36253.969 ms/op
Iteration   1: 39251.369 ms/op
Iteration   2: 40755.648 ms/op
Iteration   3: 38686.020 ms/op
Iteration   4: 40390.980 ms/op
Iteration   5: 40464.135 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  39909.630 ±(99.9%) 3436.281 ms/op [Average]
  (min, avg, max) = (38686.020, 39909.630, 40755.648), stdev = 892.391
  CI (99.9%): [36473.349, 43345.912] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 71.21% complete, ETA 02:36:48
# Fork: 1 of 1
# Warmup Iteration   1: 18.862 ms/op
# Warmup Iteration   2: 16.029 ms/op
# Warmup Iteration   3: 15.681 ms/op
# Warmup Iteration   4: 16.674 ms/op
# Warmup Iteration   5: 15.851 ms/op
Iteration   1: 14.736 ms/op
Iteration   2: 14.764 ms/op
Iteration   3: 14.533 ms/op
Iteration   4: 14.575 ms/op
Iteration   5: 15.361 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  14.794 ±(99.9%) 1.280 ms/op [Average]
  (min, avg, max) = (14.533, 14.794, 15.361), stdev = 0.332
  CI (99.9%): [13.514, 16.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 71.30% complete, ETA 02:36:14
# Fork: 1 of 1
# Warmup Iteration   1: 17.087 ms/op
# Warmup Iteration   2: 15.474 ms/op
# Warmup Iteration   3: 15.102 ms/op
# Warmup Iteration   4: 14.918 ms/op
# Warmup Iteration   5: 15.445 ms/op
Iteration   1: 14.655 ms/op
Iteration   2: 15.181 ms/op
Iteration   3: 14.929 ms/op
Iteration   4: 14.591 ms/op
Iteration   5: 14.452 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  14.762 ±(99.9%) 1.124 ms/op [Average]
  (min, avg, max) = (14.452, 14.762, 15.181), stdev = 0.292
  CI (99.9%): [13.638, 15.885] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 71.38% complete, ETA 02:35:40
# Fork: 1 of 1
# Warmup Iteration   1: 475.901 ms/op
# Warmup Iteration   2: 460.215 ms/op
# Warmup Iteration   3: 506.122 ms/op
# Warmup Iteration   4: 499.035 ms/op
# Warmup Iteration   5: 454.470 ms/op
Iteration   1: 423.052 ms/op
Iteration   2: 423.142 ms/op
Iteration   3: 446.451 ms/op
Iteration   4: 432.482 ms/op
Iteration   5: 425.961 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  430.218 ±(99.9%) 37.933 ms/op [Average]
  (min, avg, max) = (423.052, 430.218, 446.451), stdev = 9.851
  CI (99.9%): [392.285, 468.151] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 71.46% complete, ETA 02:35:07
# Fork: 1 of 1
# Warmup Iteration   1: 507.566 ms/op
# Warmup Iteration   2: 461.067 ms/op
# Warmup Iteration   3: 449.299 ms/op
# Warmup Iteration   4: 458.000 ms/op
# Warmup Iteration   5: 452.315 ms/op
Iteration   1: 458.576 ms/op
Iteration   2: 457.954 ms/op
Iteration   3: 440.017 ms/op
Iteration   4: 449.362 ms/op
Iteration   5: 476.794 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  456.541 ±(99.9%) 52.407 ms/op [Average]
  (min, avg, max) = (440.017, 456.541, 476.794), stdev = 13.610
  CI (99.9%): [404.134, 508.947] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 71.55% complete, ETA 02:34:34
# Fork: 1 of 1
# Warmup Iteration   1: 80039.270 ms/op
# Warmup Iteration   2: 79452.490 ms/op
# Warmup Iteration   3: 79993.343 ms/op
# Warmup Iteration   4: 80056.233 ms/op
# Warmup Iteration   5: 81261.864 ms/op
Iteration   1: 77008.418 ms/op
Iteration   2: 67402.925 ms/op
Iteration   3: 59439.720 ms/op
Iteration   4: 53431.425 ms/op
Iteration   5: 51204.782 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  61697.454 ±(99.9%) 40864.875 ms/op [Average]
  (min, avg, max) = (51204.782, 61697.454, 77008.418), stdev = 10612.478
  CI (99.9%): [20832.579, 102562.329] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 71.63% complete, ETA 02:38:37
# Fork: 1 of 1
# Warmup Iteration   1: 49406.759 ms/op
# Warmup Iteration   2: 47850.433 ms/op
# Warmup Iteration   3: 51345.338 ms/op
# Warmup Iteration   4: 48122.796 ms/op
# Warmup Iteration   5: 48648.905 ms/op
Iteration   1: 51588.128 ms/op
Iteration   2: 47443.500 ms/op
Iteration   3: 49253.811 ms/op
Iteration   4: 48398.024 ms/op
Iteration   5: 49501.171 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  49236.927 ±(99.9%) 5939.983 ms/op [Average]
  (min, avg, max) = (47443.500, 49236.927, 51588.128), stdev = 1542.595
  CI (99.9%): [43296.943, 55176.910] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 71.72% complete, ETA 02:41:11
# Fork: 1 of 1
# Warmup Iteration   1: 24.410 ms/op
# Warmup Iteration   2: 21.802 ms/op
# Warmup Iteration   3: 22.123 ms/op
# Warmup Iteration   4: 21.817 ms/op
# Warmup Iteration   5: 22.802 ms/op
Iteration   1: 23.154 ms/op
Iteration   2: 22.227 ms/op
Iteration   3: 22.051 ms/op
Iteration   4: 21.997 ms/op
Iteration   5: 21.917 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  22.269 ±(99.9%) 1.954 ms/op [Average]
  (min, avg, max) = (21.917, 22.269, 23.154), stdev = 0.507
  CI (99.9%): [20.316, 24.223] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 71.80% complete, ETA 02:40:36
# Fork: 1 of 1
# Warmup Iteration   1: 24.310 ms/op
# Warmup Iteration   2: 21.876 ms/op
# Warmup Iteration   3: 21.980 ms/op
# Warmup Iteration   4: 21.894 ms/op
# Warmup Iteration   5: 22.390 ms/op
Iteration   1: 22.487 ms/op
Iteration   2: 21.932 ms/op
Iteration   3: 22.251 ms/op
Iteration   4: 22.160 ms/op
Iteration   5: 22.374 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  22.241 ±(99.9%) 0.817 ms/op [Average]
  (min, avg, max) = (21.932, 22.241, 22.487), stdev = 0.212
  CI (99.9%): [21.423, 23.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 71.89% complete, ETA 02:40:00
# Fork: 1 of 1
# Warmup Iteration   1: 845.059 ms/op
# Warmup Iteration   2: 720.579 ms/op
# Warmup Iteration   3: 731.762 ms/op
# Warmup Iteration   4: 716.728 ms/op
# Warmup Iteration   5: 709.233 ms/op
Iteration   1: 791.548 ms/op
Iteration   2: 747.928 ms/op
Iteration   3: 731.694 ms/op
Iteration   4: 690.278 ms/op
Iteration   5: 682.628 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  728.815 ±(99.9%) 171.422 ms/op [Average]
  (min, avg, max) = (682.628, 728.815, 791.548), stdev = 44.518
  CI (99.9%): [557.393, 900.238] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 71.97% complete, ETA 02:39:26
# Fork: 1 of 1
# Warmup Iteration   1: 758.814 ms/op
# Warmup Iteration   2: 690.461 ms/op
# Warmup Iteration   3: 665.538 ms/op
# Warmup Iteration   4: 677.335 ms/op
# Warmup Iteration   5: 678.375 ms/op
Iteration   1: 678.843 ms/op
Iteration   2: 681.441 ms/op
Iteration   3: 681.502 ms/op
Iteration   4: 690.898 ms/op
Iteration   5: 702.295 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  686.996 ±(99.9%) 37.373 ms/op [Average]
  (min, avg, max) = (678.843, 686.996, 702.295), stdev = 9.706
  CI (99.9%): [649.622, 724.369] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 72.05% complete, ETA 02:38:51
# Fork: 1 of 1
# Warmup Iteration   1: 104085.498 ms/op
# Warmup Iteration   2: 104003.758 ms/op
# Warmup Iteration   3: 101501.834 ms/op
# Warmup Iteration   4: 101729.472 ms/op
# Warmup Iteration   5: 101291.591 ms/op
Iteration   1: 103730.572 ms/op
Iteration   2: 101624.702 ms/op
Iteration   3: 103100.430 ms/op
Iteration   4: 100056.400 ms/op
Iteration   5: 101188.785 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  101940.178 ±(99.9%) 5699.874 ms/op [Average]
  (min, avg, max) = (100056.400, 101940.178, 103730.572), stdev = 1480.239
  CI (99.9%): [96240.304, 107640.051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 72.14% complete, ETA 02:44:46
# Fork: 1 of 1
# Warmup Iteration   1: 106615.869 ms/op
# Warmup Iteration   2: 109784.025 ms/op
# Warmup Iteration   3: 106920.540 ms/op
# Warmup Iteration   4: 102216.181 ms/op
# Warmup Iteration   5: 102107.756 ms/op
Iteration   1: 100830.787 ms/op
Iteration   2: 109498.663 ms/op
Iteration   3: 104029.516 ms/op
Iteration   4: 103720.211 ms/op
Iteration   5: 101445.150 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  103904.865 ±(99.9%) 13176.908 ms/op [Average]
  (min, avg, max) = (100830.787, 103904.865, 109498.663), stdev = 3422.001
  CI (99.9%): [90727.957, 117081.774] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 72.22% complete, ETA 02:50:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.022 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.021, 0.022, 0.022), stdev = 0.001
  CI (99.9%): [0.020, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 72.31% complete, ETA 02:50:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.020 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.020, 0.020, 0.021), stdev = 0.001
  CI (99.9%): [0.019, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 72.39% complete, ETA 02:49:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.714 ms/op
# Warmup Iteration   2: 0.661 ms/op
# Warmup Iteration   3: 0.665 ms/op
# Warmup Iteration   4: 0.664 ms/op
# Warmup Iteration   5: 0.684 ms/op
Iteration   1: 0.661 ms/op
Iteration   2: 0.663 ms/op
Iteration   3: 0.670 ms/op
Iteration   4: 0.671 ms/op
Iteration   5: 0.678 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.669 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.661, 0.669, 0.678), stdev = 0.007
  CI (99.9%): [0.643, 0.695] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 72.47% complete, ETA 02:48:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.749 ms/op
# Warmup Iteration   2: 0.674 ms/op
# Warmup Iteration   3: 0.665 ms/op
# Warmup Iteration   4: 0.661 ms/op
# Warmup Iteration   5: 0.668 ms/op
Iteration   1: 0.663 ms/op
Iteration   2: 0.664 ms/op
Iteration   3: 0.660 ms/op
Iteration   4: 0.652 ms/op
Iteration   5: 0.638 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.656 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.638, 0.656, 0.664), stdev = 0.011
  CI (99.9%): [0.614, 0.697] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 72.56% complete, ETA 02:48:13
# Fork: 1 of 1
# Warmup Iteration   1: 135.541 ms/op
# Warmup Iteration   2: 114.319 ms/op
# Warmup Iteration   3: 117.922 ms/op
# Warmup Iteration   4: 102.386 ms/op
# Warmup Iteration   5: 120.996 ms/op
Iteration   1: 114.528 ms/op
Iteration   2: 114.616 ms/op
Iteration   3: 111.156 ms/op
Iteration   4: 105.430 ms/op
Iteration   5: 107.197 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  110.585 ±(99.9%) 16.128 ms/op [Average]
  (min, avg, max) = (105.430, 110.585, 114.616), stdev = 4.188
  CI (99.9%): [94.457, 126.714] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 72.64% complete, ETA 02:47:35
# Fork: 1 of 1
# Warmup Iteration   1: 135.863 ms/op
# Warmup Iteration   2: 113.272 ms/op
# Warmup Iteration   3: 120.733 ms/op
# Warmup Iteration   4: 143.865 ms/op
# Warmup Iteration   5: 119.500 ms/op
Iteration   1: 118.320 ms/op
Iteration   2: 117.948 ms/op
Iteration   3: 116.164 ms/op
Iteration   4: 112.244 ms/op
Iteration   5: 102.491 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  113.433 ±(99.9%) 25.314 ms/op [Average]
  (min, avg, max) = (102.491, 113.433, 118.320), stdev = 6.574
  CI (99.9%): [88.119, 138.748] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 72.73% complete, ETA 02:46:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.044 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.044 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.044, 0.044, 0.045), stdev = 0.001
  CI (99.9%): [0.042, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 72.81% complete, ETA 02:46:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.043 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.043 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.043, 0.043, 0.044), stdev = 0.001
  CI (99.9%): [0.041, 0.046] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 72.90% complete, ETA 02:45:39
# Fork: 1 of 1
# Warmup Iteration   1: 1.390 ms/op
# Warmup Iteration   2: 1.289 ms/op
# Warmup Iteration   3: 1.435 ms/op
# Warmup Iteration   4: 1.452 ms/op
# Warmup Iteration   5: 1.310 ms/op
Iteration   1: 1.397 ms/op
Iteration   2: 1.425 ms/op
Iteration   3: 1.316 ms/op
Iteration   4: 1.416 ms/op
Iteration   5: 1.313 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.373 ±(99.9%) 0.211 ms/op [Average]
  (min, avg, max) = (1.313, 1.373, 1.425), stdev = 0.055
  CI (99.9%): [1.162, 1.584] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 72.98% complete, ETA 02:45:01
# Fork: 1 of 1
# Warmup Iteration   1: 1.408 ms/op
# Warmup Iteration   2: 1.299 ms/op
# Warmup Iteration   3: 1.358 ms/op
# Warmup Iteration   4: 1.332 ms/op
# Warmup Iteration   5: 1.343 ms/op
Iteration   1: 1.581 ms/op
Iteration   2: 1.309 ms/op
Iteration   3: 1.269 ms/op
Iteration   4: 1.317 ms/op
Iteration   5: 1.279 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.351 ±(99.9%) 0.500 ms/op [Average]
  (min, avg, max) = (1.269, 1.351, 1.581), stdev = 0.130
  CI (99.9%): [0.851, 1.851] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 73.06% complete, ETA 02:44:23
# Fork: 1 of 1
# Warmup Iteration   1: 262.195 ms/op
# Warmup Iteration   2: 222.437 ms/op
# Warmup Iteration   3: 227.386 ms/op
# Warmup Iteration   4: 210.394 ms/op
# Warmup Iteration   5: 223.209 ms/op
Iteration   1: 233.752 ms/op
Iteration   2: 357.085 ms/op
Iteration   3: 284.061 ms/op
Iteration   4: 284.528 ms/op
Iteration   5: 291.868 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  290.259 ±(99.9%) 169.303 ms/op [Average]
  (min, avg, max) = (233.752, 290.259, 357.085), stdev = 43.967
  CI (99.9%): [120.956, 459.562] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 73.15% complete, ETA 02:43:45
# Fork: 1 of 1
# Warmup Iteration   1: 339.255 ms/op
# Warmup Iteration   2: 294.417 ms/op
# Warmup Iteration   3: 260.336 ms/op
# Warmup Iteration   4: 231.741 ms/op
# Warmup Iteration   5: 216.912 ms/op
Iteration   1: 228.688 ms/op
Iteration   2: 218.993 ms/op
Iteration   3: 225.608 ms/op
Iteration   4: 270.705 ms/op
Iteration   5: 197.906 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  228.380 ±(99.9%) 102.169 ms/op [Average]
  (min, avg, max) = (197.906, 228.380, 270.705), stdev = 26.533
  CI (99.9%): [126.211, 330.549] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 73.23% complete, ETA 02:43:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.102 ms/op
# Warmup Iteration   2: 0.092 ms/op
# Warmup Iteration   3: 0.090 ms/op
# Warmup Iteration   4: 0.091 ms/op
# Warmup Iteration   5: 0.100 ms/op
Iteration   1: 0.100 ms/op
Iteration   2: 0.143 ms/op
Iteration   3: 0.096 ms/op
Iteration   4: 0.088 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.104 ±(99.9%) 0.087 ms/op [Average]
  (min, avg, max) = (0.088, 0.104, 0.143), stdev = 0.023
  CI (99.9%): [0.017, 0.191] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 73.32% complete, ETA 02:42:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.111 ms/op
# Warmup Iteration   2: 0.099 ms/op
# Warmup Iteration   3: 0.095 ms/op
# Warmup Iteration   4: 0.096 ms/op
# Warmup Iteration   5: 0.093 ms/op
Iteration   1: 0.095 ms/op
Iteration   2: 0.093 ms/op
Iteration   3: 0.098 ms/op
Iteration   4: 0.104 ms/op
Iteration   5: 0.112 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.100 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.093, 0.100, 0.112), stdev = 0.008
  CI (99.9%): [0.070, 0.130] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 73.40% complete, ETA 02:41:51
# Fork: 1 of 1
# Warmup Iteration   1: 3.578 ms/op
# Warmup Iteration   2: 4.193 ms/op
# Warmup Iteration   3: 3.196 ms/op
# Warmup Iteration   4: 2.847 ms/op
# Warmup Iteration   5: 2.984 ms/op
Iteration   1: 3.525 ms/op
Iteration   2: 2.861 ms/op
Iteration   3: 2.704 ms/op
Iteration   4: 2.703 ms/op
Iteration   5: 2.724 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.903 ±(99.9%) 1.362 ms/op [Average]
  (min, avg, max) = (2.703, 2.903, 3.525), stdev = 0.354
  CI (99.9%): [1.541, 4.265] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 73.48% complete, ETA 02:41:13
# Fork: 1 of 1
# Warmup Iteration   1: 3.036 ms/op
# Warmup Iteration   2: 3.197 ms/op
# Warmup Iteration   3: 2.828 ms/op
# Warmup Iteration   4: 2.744 ms/op
# Warmup Iteration   5: 2.879 ms/op
Iteration   1: 2.852 ms/op
Iteration   2: 2.937 ms/op
Iteration   3: 2.785 ms/op
Iteration   4: 2.695 ms/op
Iteration   5: 2.812 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.816 ±(99.9%) 0.342 ms/op [Average]
  (min, avg, max) = (2.695, 2.816, 2.937), stdev = 0.089
  CI (99.9%): [2.474, 3.159] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 73.57% complete, ETA 02:40:35
# Fork: 1 of 1
# Warmup Iteration   1: 763.972 ms/op
# Warmup Iteration   2: 699.340 ms/op
# Warmup Iteration   3: 620.543 ms/op
# Warmup Iteration   4: 555.267 ms/op
# Warmup Iteration   5: 495.325 ms/op
Iteration   1: 523.783 ms/op
Iteration   2: 566.693 ms/op
Iteration   3: 581.417 ms/op
Iteration   4: 506.458 ms/op
Iteration   5: 504.757 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  536.621 ±(99.9%) 136.153 ms/op [Average]
  (min, avg, max) = (504.757, 536.621, 581.417), stdev = 35.359
  CI (99.9%): [400.468, 672.775] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 73.65% complete, ETA 02:39:59
# Fork: 1 of 1
# Warmup Iteration   1: 583.189 ms/op
# Warmup Iteration   2: 518.919 ms/op
# Warmup Iteration   3: 492.284 ms/op
# Warmup Iteration   4: 472.653 ms/op
# Warmup Iteration   5: 510.742 ms/op
Iteration   1: 516.757 ms/op
Iteration   2: 522.909 ms/op
Iteration   3: 475.844 ms/op
Iteration   4: 536.077 ms/op
Iteration   5: 505.624 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  511.442 ±(99.9%) 87.548 ms/op [Average]
  (min, avg, max) = (475.844, 511.442, 536.077), stdev = 22.736
  CI (99.9%): [423.894, 598.990] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 73.74% complete, ETA 02:39:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.231 ms/op
# Warmup Iteration   2: 0.202 ms/op
# Warmup Iteration   3: 0.226 ms/op
# Warmup Iteration   4: 0.232 ms/op
# Warmup Iteration   5: 0.209 ms/op
Iteration   1: 0.209 ms/op
Iteration   2: 0.202 ms/op
Iteration   3: 0.214 ms/op
Iteration   4: 0.210 ms/op
Iteration   5: 0.211 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.209 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.202, 0.209, 0.214), stdev = 0.004
  CI (99.9%): [0.192, 0.226] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 73.82% complete, ETA 02:38:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.232 ms/op
# Warmup Iteration   2: 0.197 ms/op
# Warmup Iteration   3: 0.195 ms/op
# Warmup Iteration   4: 0.197 ms/op
# Warmup Iteration   5: 0.195 ms/op
Iteration   1: 0.198 ms/op
Iteration   2: 0.202 ms/op
Iteration   3: 0.217 ms/op
Iteration   4: 0.199 ms/op
Iteration   5: 0.249 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.213 ±(99.9%) 0.082 ms/op [Average]
  (min, avg, max) = (0.198, 0.213, 0.249), stdev = 0.021
  CI (99.9%): [0.131, 0.295] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 73.91% complete, ETA 02:38:08
# Fork: 1 of 1
# Warmup Iteration   1: 6.120 ms/op
# Warmup Iteration   2: 5.808 ms/op
# Warmup Iteration   3: 6.509 ms/op
# Warmup Iteration   4: 5.738 ms/op
# Warmup Iteration   5: 6.377 ms/op
Iteration   1: 6.974 ms/op
Iteration   2: 8.367 ms/op
Iteration   3: 7.378 ms/op
Iteration   4: 8.795 ms/op
Iteration   5: 13.272 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  8.957 ±(99.9%) 9.707 ms/op [Average]
  (min, avg, max) = (6.974, 8.957, 13.272), stdev = 2.521
  CI (99.9%): [? 0, 18.664] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 73.99% complete, ETA 02:37:30
# Fork: 1 of 1
# Warmup Iteration   1: 8.809 ms/op
# Warmup Iteration   2: 5.982 ms/op
# Warmup Iteration   3: 5.634 ms/op
# Warmup Iteration   4: 6.095 ms/op
# Warmup Iteration   5: 5.788 ms/op
Iteration   1: 5.716 ms/op
Iteration   2: 5.634 ms/op
Iteration   3: 5.413 ms/op
Iteration   4: 6.306 ms/op
Iteration   5: 6.502 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  5.914 ±(99.9%) 1.794 ms/op [Average]
  (min, avg, max) = (5.413, 5.914, 6.502), stdev = 0.466
  CI (99.9%): [4.120, 7.708] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 74.07% complete, ETA 02:36:52
# Fork: 1 of 1
# Warmup Iteration   1: 1440.285 ms/op
# Warmup Iteration   2: 1182.344 ms/op
# Warmup Iteration   3: 1518.951 ms/op
# Warmup Iteration   4: 1450.546 ms/op
# Warmup Iteration   5: 1137.374 ms/op
Iteration   1: 1467.445 ms/op
Iteration   2: 1443.354 ms/op
Iteration   3: 1044.112 ms/op
Iteration   4: 1087.155 ms/op
Iteration   5: 1115.705 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1231.554 ±(99.9%) 793.622 ms/op [Average]
  (min, avg, max) = (1044.112, 1231.554, 1467.445), stdev = 206.101
  CI (99.9%): [437.932, 2025.176] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 74.16% complete, ETA 02:36:16
# Fork: 1 of 1
# Warmup Iteration   1: 1399.593 ms/op
# Warmup Iteration   2: 964.010 ms/op
# Warmup Iteration   3: 1042.708 ms/op
# Warmup Iteration   4: 1032.212 ms/op
# Warmup Iteration   5: 1114.065 ms/op
Iteration   1: 959.652 ms/op
Iteration   2: 908.204 ms/op
Iteration   3: 1133.692 ms/op
Iteration   4: 962.235 ms/op
Iteration   5: 1662.144 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1125.185 ±(99.9%) 1201.487 ms/op [Average]
  (min, avg, max) = (908.204, 1125.185, 1662.144), stdev = 312.022
  CI (99.9%): [? 0, 2326.673] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 74.24% complete, ETA 02:35:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.492 ms/op
# Warmup Iteration   2: 0.379 ms/op
# Warmup Iteration   3: 0.378 ms/op
# Warmup Iteration   4: 0.375 ms/op
# Warmup Iteration   5: 0.371 ms/op
Iteration   1: 0.408 ms/op
Iteration   2: 0.407 ms/op
Iteration   3: 0.372 ms/op
Iteration   4: 0.405 ms/op
Iteration   5: 0.375 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.393 ±(99.9%) 0.070 ms/op [Average]
  (min, avg, max) = (0.372, 0.393, 0.408), stdev = 0.018
  CI (99.9%): [0.324, 0.463] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 74.33% complete, ETA 02:35:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.402 ms/op
# Warmup Iteration   2: 0.421 ms/op
# Warmup Iteration   3: 0.366 ms/op
# Warmup Iteration   4: 0.361 ms/op
# Warmup Iteration   5: 0.370 ms/op
Iteration   1: 0.359 ms/op
Iteration   2: 0.396 ms/op
Iteration   3: 0.403 ms/op
Iteration   4: 0.368 ms/op
Iteration   5: 0.367 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.379 ±(99.9%) 0.076 ms/op [Average]
  (min, avg, max) = (0.359, 0.379, 0.403), stdev = 0.020
  CI (99.9%): [0.302, 0.455] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 74.41% complete, ETA 02:34:26
# Fork: 1 of 1
# Warmup Iteration   1: 11.480 ms/op
# Warmup Iteration   2: 10.861 ms/op
# Warmup Iteration   3: 12.322 ms/op
# Warmup Iteration   4: 11.623 ms/op
# Warmup Iteration   5: 10.663 ms/op
Iteration   1: 10.626 ms/op
Iteration   2: 11.184 ms/op
Iteration   3: 12.740 ms/op
Iteration   4: 13.701 ms/op
Iteration   5: 12.841 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  12.219 ±(99.9%) 4.895 ms/op [Average]
  (min, avg, max) = (10.626, 12.219, 13.701), stdev = 1.271
  CI (99.9%): [7.324, 17.113] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 74.49% complete, ETA 02:33:49
# Fork: 1 of 1
# Warmup Iteration   1: 15.228 ms/op
# Warmup Iteration   2: 13.662 ms/op
# Warmup Iteration   3: 14.573 ms/op
# Warmup Iteration   4: 12.813 ms/op
# Warmup Iteration   5: 12.337 ms/op
Iteration   1: 14.129 ms/op
Iteration   2: 12.899 ms/op
Iteration   3: 12.198 ms/op
Iteration   4: 12.330 ms/op
Iteration   5: 11.766 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  12.664 ±(99.9%) 3.517 ms/op [Average]
  (min, avg, max) = (11.766, 12.664, 14.129), stdev = 0.913
  CI (99.9%): [9.147, 16.182] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 74.58% complete, ETA 02:33:12
# Fork: 1 of 1
# Warmup Iteration   1: 2439.322 ms/op
# Warmup Iteration   2: 2411.386 ms/op
# Warmup Iteration   3: 1937.404 ms/op
# Warmup Iteration   4: 1973.490 ms/op
# Warmup Iteration   5: 1788.141 ms/op
Iteration   1: 1911.477 ms/op
Iteration   2: 2033.181 ms/op
Iteration   3: 1871.792 ms/op
Iteration   4: 1810.963 ms/op
Iteration   5: 1805.305 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1886.544 ±(99.9%) 358.410 ms/op [Average]
  (min, avg, max) = (1805.305, 1886.544, 2033.181), stdev = 93.078
  CI (99.9%): [1528.133, 2244.954] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 74.66% complete, ETA 02:32:38
# Fork: 1 of 1
# Warmup Iteration   1: 1970.772 ms/op
# Warmup Iteration   2: 2004.296 ms/op
# Warmup Iteration   3: 2025.502 ms/op
# Warmup Iteration   4: 2071.596 ms/op
# Warmup Iteration   5: 2119.443 ms/op
Iteration   1: 2281.707 ms/op
Iteration   2: 2331.179 ms/op
Iteration   3: 2118.548 ms/op
Iteration   4: 2008.717 ms/op
Iteration   5: 2017.275 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2151.485 ±(99.9%) 573.500 ms/op [Average]
  (min, avg, max) = (2008.717, 2151.485, 2331.179), stdev = 148.936
  CI (99.9%): [1577.985, 2724.985] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 74.75% complete, ETA 02:32:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.926 ms/op
# Warmup Iteration   2: 0.791 ms/op
# Warmup Iteration   3: 0.826 ms/op
# Warmup Iteration   4: 0.830 ms/op
# Warmup Iteration   5: 0.838 ms/op
Iteration   1: 0.822 ms/op
Iteration   2: 0.875 ms/op
Iteration   3: 0.866 ms/op
Iteration   4: 0.871 ms/op
Iteration   5: 0.803 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.847 ±(99.9%) 0.127 ms/op [Average]
  (min, avg, max) = (0.803, 0.847, 0.875), stdev = 0.033
  CI (99.9%): [0.721, 0.974] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 74.83% complete, ETA 02:31:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.941 ms/op
# Warmup Iteration   2: 0.831 ms/op
# Warmup Iteration   3: 0.812 ms/op
# Warmup Iteration   4: 0.868 ms/op
# Warmup Iteration   5: 0.817 ms/op
Iteration   1: 0.851 ms/op
Iteration   2: 0.801 ms/op
Iteration   3: 0.802 ms/op
Iteration   4: 0.824 ms/op
Iteration   5: 0.844 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.824 ±(99.9%) 0.089 ms/op [Average]
  (min, avg, max) = (0.801, 0.824, 0.851), stdev = 0.023
  CI (99.9%): [0.735, 0.913] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 74.92% complete, ETA 02:30:51
# Fork: 1 of 1
# Warmup Iteration   1: 27.894 ms/op
# Warmup Iteration   2: 25.877 ms/op
# Warmup Iteration   3: 25.962 ms/op
# Warmup Iteration   4: 25.797 ms/op
# Warmup Iteration   5: 27.335 ms/op
Iteration   1: 25.559 ms/op
Iteration   2: 26.456 ms/op
Iteration   3: 27.347 ms/op
Iteration   4: 27.005 ms/op
Iteration   5: 29.248 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  27.123 ±(99.9%) 5.262 ms/op [Average]
  (min, avg, max) = (25.559, 27.123, 29.248), stdev = 1.367
  CI (99.9%): [21.861, 32.385] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 75.00% complete, ETA 02:30:14
# Fork: 1 of 1
# Warmup Iteration   1: 30.114 ms/op
# Warmup Iteration   2: 26.058 ms/op
# Warmup Iteration   3: 26.334 ms/op
# Warmup Iteration   4: 28.053 ms/op
# Warmup Iteration   5: 30.356 ms/op
Iteration   1: 29.171 ms/op
Iteration   2: 27.650 ms/op
Iteration   3: 27.797 ms/op
Iteration   4: 27.694 ms/op
Iteration   5: 29.743 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  28.411 ±(99.9%) 3.764 ms/op [Average]
  (min, avg, max) = (27.650, 28.411, 29.743), stdev = 0.978
  CI (99.9%): [24.647, 32.175] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 75.08% complete, ETA 02:29:37
# Fork: 1 of 1
# Warmup Iteration   1: 4612.664 ms/op
# Warmup Iteration   2: 3922.761 ms/op
# Warmup Iteration   3: 4221.626 ms/op
# Warmup Iteration   4: 3791.873 ms/op
# Warmup Iteration   5: 3504.466 ms/op
Iteration   1: 3491.247 ms/op
Iteration   2: 5029.470 ms/op
Iteration   3: 7160.441 ms/op
Iteration   4: 7726.055 ms/op
Iteration   5: 6801.501 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  6041.743 ±(99.9%) 6723.579 ms/op [Average]
  (min, avg, max) = (3491.247, 6041.743, 7726.055), stdev = 1746.092
  CI (99.9%): [? 0, 12765.322] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 75.17% complete, ETA 02:29:14
# Fork: 1 of 1
# Warmup Iteration   1: 5062.177 ms/op
# Warmup Iteration   2: 3843.977 ms/op
# Warmup Iteration   3: 4539.130 ms/op
# Warmup Iteration   4: 3755.779 ms/op
# Warmup Iteration   5: 3970.208 ms/op
Iteration   1: 3620.078 ms/op
Iteration   2: 3411.087 ms/op
Iteration   3: 4862.802 ms/op
Iteration   4: 4615.377 ms/op
Iteration   5: 5193.532 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  4340.575 ±(99.9%) 3019.035 ms/op [Average]
  (min, avg, max) = (3411.087, 4340.575, 5193.532), stdev = 784.034
  CI (99.9%): [1321.540, 7359.610] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 75.25% complete, ETA 02:28:48
# Fork: 1 of 1
# Warmup Iteration   1: 1.961 ms/op
# Warmup Iteration   2: 1.523 ms/op
# Warmup Iteration   3: 1.484 ms/op
# Warmup Iteration   4: 1.622 ms/op
# Warmup Iteration   5: 1.847 ms/op
Iteration   1: 2.214 ms/op
Iteration   2: 1.656 ms/op
Iteration   3: 1.724 ms/op
Iteration   4: 1.665 ms/op
Iteration   5: 1.709 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.794 ±(99.9%) 0.912 ms/op [Average]
  (min, avg, max) = (1.656, 1.794, 2.214), stdev = 0.237
  CI (99.9%): [0.881, 2.706] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 75.34% complete, ETA 02:28:11
# Fork: 1 of 1
# Warmup Iteration   1: 1.799 ms/op
# Warmup Iteration   2: 1.628 ms/op
# Warmup Iteration   3: 1.607 ms/op
# Warmup Iteration   4: 1.578 ms/op
# Warmup Iteration   5: 1.566 ms/op
Iteration   1: 1.628 ms/op
Iteration   2: 1.623 ms/op
Iteration   3: 1.619 ms/op
Iteration   4: 1.589 ms/op
Iteration   5: 1.523 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.597 ±(99.9%) 0.170 ms/op [Average]
  (min, avg, max) = (1.523, 1.597, 1.628), stdev = 0.044
  CI (99.9%): [1.427, 1.766] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 75.42% complete, ETA 02:27:35
# Fork: 1 of 1
# Warmup Iteration   1: 53.491 ms/op
# Warmup Iteration   2: 52.939 ms/op
# Warmup Iteration   3: 48.707 ms/op
# Warmup Iteration   4: 49.915 ms/op
# Warmup Iteration   5: 48.054 ms/op
Iteration   1: 47.665 ms/op
Iteration   2: 47.608 ms/op
Iteration   3: 46.931 ms/op
Iteration   4: 50.128 ms/op
Iteration   5: 51.500 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  48.766 ±(99.9%) 7.519 ms/op [Average]
  (min, avg, max) = (46.931, 48.766, 51.500), stdev = 1.953
  CI (99.9%): [41.248, 56.285] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 75.51% complete, ETA 02:26:58
# Fork: 1 of 1
# Warmup Iteration   1: 51.454 ms/op
# Warmup Iteration   2: 47.381 ms/op
# Warmup Iteration   3: 80.298 ms/op
# Warmup Iteration   4: 84.902 ms/op
# Warmup Iteration   5: 74.019 ms/op
Iteration   1: 61.699 ms/op
Iteration   2: 90.294 ms/op
Iteration   3: 66.985 ms/op
Iteration   4: 72.248 ms/op
Iteration   5: 66.335 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  71.512 ±(99.9%) 42.918 ms/op [Average]
  (min, avg, max) = (61.699, 71.512, 90.294), stdev = 11.146
  CI (99.9%): [28.594, 114.430] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 75.59% complete, ETA 02:26:21
# Fork: 1 of 1
# Warmup Iteration   1: 8916.076 ms/op
# Warmup Iteration   2: 7959.243 ms/op
# Warmup Iteration   3: 9207.669 ms/op
# Warmup Iteration   4: 12570.917 ms/op
# Warmup Iteration   5: 12101.640 ms/op
Iteration   1: 13500.246 ms/op
Iteration   2: 11782.440 ms/op
Iteration   3: 10090.517 ms/op
Iteration   4: 11309.098 ms/op
Iteration   5: 10880.212 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  11512.503 ±(99.9%) 4903.790 ms/op [Average]
  (min, avg, max) = (10090.517, 11512.503, 13500.246), stdev = 1273.499
  CI (99.9%): [6608.712, 16416.293] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 75.67% complete, ETA 02:26:17
# Fork: 1 of 1
# Warmup Iteration   1: 7988.073 ms/op
# Warmup Iteration   2: 7508.996 ms/op
# Warmup Iteration   3: 7542.304 ms/op
# Warmup Iteration   4: 11299.016 ms/op
# Warmup Iteration   5: 12181.548 ms/op
Iteration   1: 12845.628 ms/op
Iteration   2: 11583.049 ms/op
Iteration   3: 9980.632 ms/op
Iteration   4: 10740.614 ms/op
Iteration   5: 11575.259 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  11345.036 ±(99.9%) 4124.124 ms/op [Average]
  (min, avg, max) = (9980.632, 11345.036, 12845.628), stdev = 1071.022
  CI (99.9%): [7220.912, 15469.161] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 75.76% complete, ETA 02:26:10
# Fork: 1 of 1
# Warmup Iteration   1: 3.644 ms/op
# Warmup Iteration   2: 3.268 ms/op
# Warmup Iteration   3: 3.181 ms/op
# Warmup Iteration   4: 3.094 ms/op
# Warmup Iteration   5: 3.201 ms/op
Iteration   1: 3.087 ms/op
Iteration   2: 3.044 ms/op
Iteration   3: 3.080 ms/op
Iteration   4: 3.148 ms/op
Iteration   5: 3.153 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  3.102 ±(99.9%) 0.181 ms/op [Average]
  (min, avg, max) = (3.044, 3.102, 3.153), stdev = 0.047
  CI (99.9%): [2.922, 3.283] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 75.84% complete, ETA 02:25:33
# Fork: 1 of 1
# Warmup Iteration   1: 3.332 ms/op
# Warmup Iteration   2: 3.207 ms/op
# Warmup Iteration   3: 3.265 ms/op
# Warmup Iteration   4: 3.185 ms/op
# Warmup Iteration   5: 3.070 ms/op
Iteration   1: 3.046 ms/op
Iteration   2: 3.031 ms/op
Iteration   3: 3.019 ms/op
Iteration   4: 3.066 ms/op
Iteration   5: 3.037 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  3.040 ±(99.9%) 0.068 ms/op [Average]
  (min, avg, max) = (3.019, 3.040, 3.066), stdev = 0.018
  CI (99.9%): [2.972, 3.108] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 75.93% complete, ETA 02:24:56
# Fork: 1 of 1
# Warmup Iteration   1: 102.561 ms/op
# Warmup Iteration   2: 93.055 ms/op
# Warmup Iteration   3: 94.997 ms/op
# Warmup Iteration   4: 93.426 ms/op
# Warmup Iteration   5: 91.597 ms/op
Iteration   1: 92.252 ms/op
Iteration   2: 103.961 ms/op
Iteration   3: 113.007 ms/op
Iteration   4: 103.741 ms/op
Iteration   5: 100.412 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  102.674 ±(99.9%) 28.770 ms/op [Average]
  (min, avg, max) = (92.252, 102.674, 113.007), stdev = 7.472
  CI (99.9%): [73.904, 131.445] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 76.01% complete, ETA 02:24:20
# Fork: 1 of 1
# Warmup Iteration   1: 113.762 ms/op
# Warmup Iteration   2: 103.064 ms/op
# Warmup Iteration   3: 103.692 ms/op
# Warmup Iteration   4: 106.222 ms/op
# Warmup Iteration   5: 100.982 ms/op
Iteration   1: 102.234 ms/op
Iteration   2: 99.985 ms/op
Iteration   3: 102.126 ms/op
Iteration   4: 107.245 ms/op
Iteration   5: 105.086 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  103.335 ±(99.9%) 10.933 ms/op [Average]
  (min, avg, max) = (99.985, 103.335, 107.245), stdev = 2.839
  CI (99.9%): [92.402, 114.268] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 76.09% complete, ETA 02:23:43
# Fork: 1 of 1
# Warmup Iteration   1: 18115.048 ms/op
# Warmup Iteration   2: 20814.731 ms/op
# Warmup Iteration   3: 25692.905 ms/op
# Warmup Iteration   4: 21683.778 ms/op
# Warmup Iteration   5: 22685.573 ms/op
Iteration   1: 26799.749 ms/op
Iteration   2: 25095.785 ms/op
Iteration   3: 22893.269 ms/op
Iteration   4: 21284.863 ms/op
Iteration   5: 26366.407 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  24488.015 ±(99.9%) 9039.843 ms/op [Average]
  (min, avg, max) = (21284.863, 24488.015, 26799.749), stdev = 2347.618
  CI (99.9%): [15448.172, 33527.857] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 76.18% complete, ETA 02:24:16
# Fork: 1 of 1
# Warmup Iteration   1: 17904.358 ms/op
# Warmup Iteration   2: 20374.590 ms/op
# Warmup Iteration   3: 25233.762 ms/op
# Warmup Iteration   4: 21531.964 ms/op
# Warmup Iteration   5: 24505.073 ms/op
Iteration   1: 26634.739 ms/op
Iteration   2: 21435.778 ms/op
Iteration   3: 17900.410 ms/op
Iteration   4: 21629.733 ms/op
Iteration   5: 20333.011 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  21586.734 ±(99.9%) 12278.031 ms/op [Average]
  (min, avg, max) = (17900.410, 21586.734, 26634.739), stdev = 3188.566
  CI (99.9%): [9308.703, 33864.765] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 76.26% complete, ETA 02:24:44
# Fork: 1 of 1
# Warmup Iteration   1: 6.683 ms/op
# Warmup Iteration   2: 6.306 ms/op
# Warmup Iteration   3: 5.671 ms/op
# Warmup Iteration   4: 5.760 ms/op
# Warmup Iteration   5: 5.541 ms/op
Iteration   1: 5.675 ms/op
Iteration   2: 5.855 ms/op
Iteration   3: 5.655 ms/op
Iteration   4: 5.828 ms/op
Iteration   5: 5.890 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  5.781 ±(99.9%) 0.416 ms/op [Average]
  (min, avg, max) = (5.655, 5.781, 5.890), stdev = 0.108
  CI (99.9%): [5.365, 6.196] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 76.35% complete, ETA 02:24:07
# Fork: 1 of 1
# Warmup Iteration   1: 6.988 ms/op
# Warmup Iteration   2: 10.126 ms/op
# Warmup Iteration   3: 9.154 ms/op
# Warmup Iteration   4: 8.551 ms/op
# Warmup Iteration   5: 7.620 ms/op
Iteration   1: 7.570 ms/op
Iteration   2: 7.633 ms/op
Iteration   3: 7.566 ms/op
Iteration   4: 6.746 ms/op
Iteration   5: 6.436 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  7.190 ±(99.9%) 2.150 ms/op [Average]
  (min, avg, max) = (6.436, 7.190, 7.633), stdev = 0.558
  CI (99.9%): [5.040, 9.341] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 76.43% complete, ETA 02:23:30
# Fork: 1 of 1
# Warmup Iteration   1: 223.609 ms/op
# Warmup Iteration   2: 197.241 ms/op
# Warmup Iteration   3: 192.987 ms/op
# Warmup Iteration   4: 189.813 ms/op
# Warmup Iteration   5: 191.782 ms/op
Iteration   1: 187.525 ms/op
Iteration   2: 195.545 ms/op
Iteration   3: 193.237 ms/op
Iteration   4: 185.249 ms/op
Iteration   5: 208.729 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  194.057 ±(99.9%) 35.418 ms/op [Average]
  (min, avg, max) = (185.249, 194.057, 208.729), stdev = 9.198
  CI (99.9%): [158.639, 229.475] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 76.52% complete, ETA 02:22:54
# Fork: 1 of 1
# Warmup Iteration   1: 303.860 ms/op
# Warmup Iteration   2: 272.476 ms/op
# Warmup Iteration   3: 247.389 ms/op
# Warmup Iteration   4: 221.791 ms/op
# Warmup Iteration   5: 218.152 ms/op
Iteration   1: 197.930 ms/op
Iteration   2: 186.198 ms/op
Iteration   3: 196.476 ms/op
Iteration   4: 200.287 ms/op
Iteration   5: 218.751 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  199.928 ±(99.9%) 45.515 ms/op [Average]
  (min, avg, max) = (186.198, 199.928, 218.751), stdev = 11.820
  CI (99.9%): [154.414, 245.443] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 76.60% complete, ETA 02:22:17
# Fork: 1 of 1
# Warmup Iteration   1: 33659.294 ms/op
# Warmup Iteration   2: 44023.349 ms/op
# Warmup Iteration   3: 47619.953 ms/op
# Warmup Iteration   4: 45096.244 ms/op
# Warmup Iteration   5: 43620.568 ms/op
Iteration   1: 48316.703 ms/op
Iteration   2: 51503.354 ms/op
Iteration   3: 42605.066 ms/op
Iteration   4: 50458.181 ms/op
Iteration   5: 45862.958 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  47749.252 ±(99.9%) 13853.535 ms/op [Average]
  (min, avg, max) = (42605.066, 47749.252, 51503.354), stdev = 3597.719
  CI (99.9%): [33895.717, 61602.788] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 76.68% complete, ETA 02:23:55
# Fork: 1 of 1
# Warmup Iteration   1: 38984.976 ms/op
# Warmup Iteration   2: 44628.570 ms/op
# Warmup Iteration   3: 51357.915 ms/op
# Warmup Iteration   4: 46066.915 ms/op
# Warmup Iteration   5: 42117.490 ms/op
Iteration   1: 53727.939 ms/op
Iteration   2: 44858.579 ms/op
Iteration   3: 46844.442 ms/op
Iteration   4: 50482.120 ms/op
Iteration   5: 42717.882 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  47726.192 ±(99.9%) 16971.248 ms/op [Average]
  (min, avg, max) = (42717.882, 47726.192, 53727.939), stdev = 4407.379
  CI (99.9%): [30754.944, 64697.440] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 76.77% complete, ETA 02:25:35
# Fork: 1 of 1
# Warmup Iteration   1: 14.072 ms/op
# Warmup Iteration   2: 12.731 ms/op
# Warmup Iteration   3: 12.293 ms/op
# Warmup Iteration   4: 12.416 ms/op
# Warmup Iteration   5: 12.529 ms/op
Iteration   1: 12.677 ms/op
Iteration   2: 12.968 ms/op
Iteration   3: 12.715 ms/op
Iteration   4: 11.706 ms/op
Iteration   5: 12.271 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  12.467 ±(99.9%) 1.899 ms/op [Average]
  (min, avg, max) = (11.706, 12.467, 12.968), stdev = 0.493
  CI (99.9%): [10.568, 14.367] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 76.85% complete, ETA 02:24:57
# Fork: 1 of 1
# Warmup Iteration   1: 15.236 ms/op
# Warmup Iteration   2: 11.896 ms/op
# Warmup Iteration   3: 11.566 ms/op
# Warmup Iteration   4: 11.616 ms/op
# Warmup Iteration   5: 12.426 ms/op
Iteration   1: 13.344 ms/op
Iteration   2: 12.198 ms/op
Iteration   3: 12.127 ms/op
Iteration   4: 11.937 ms/op
Iteration   5: 12.030 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  12.327 ±(99.9%) 2.222 ms/op [Average]
  (min, avg, max) = (11.937, 12.327, 13.344), stdev = 0.577
  CI (99.9%): [10.106, 14.549] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 76.94% complete, ETA 02:24:19
# Fork: 1 of 1
# Warmup Iteration   1: 432.421 ms/op
# Warmup Iteration   2: 420.682 ms/op
# Warmup Iteration   3: 557.362 ms/op
# Warmup Iteration   4: 662.124 ms/op
# Warmup Iteration   5: 631.748 ms/op
Iteration   1: 451.159 ms/op
Iteration   2: 522.663 ms/op
Iteration   3: 564.016 ms/op
Iteration   4: 528.217 ms/op
Iteration   5: 591.708 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  531.553 ±(99.9%) 203.992 ms/op [Average]
  (min, avg, max) = (451.159, 531.553, 591.708), stdev = 52.976
  CI (99.9%): [327.561, 735.545] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 77.02% complete, ETA 02:23:42
# Fork: 1 of 1
# Warmup Iteration   1: 564.489 ms/op
# Warmup Iteration   2: 461.644 ms/op
# Warmup Iteration   3: 485.467 ms/op
# Warmup Iteration   4: 482.981 ms/op
# Warmup Iteration   5: 468.054 ms/op
Iteration   1: 450.780 ms/op
Iteration   2: 456.421 ms/op
Iteration   3: 445.694 ms/op
Iteration   4: 439.446 ms/op
Iteration   5: 453.141 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  449.096 ±(99.9%) 25.654 ms/op [Average]
  (min, avg, max) = (439.446, 449.096, 456.421), stdev = 6.662
  CI (99.9%): [423.442, 474.751] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 77.10% complete, ETA 02:23:05
# Fork: 1 of 1
# Warmup Iteration   1: 85987.658 ms/op
# Warmup Iteration   2: 105479.342 ms/op
# Warmup Iteration   3: 93667.416 ms/op
# Warmup Iteration   4: 104679.612 ms/op
# Warmup Iteration   5: 89538.699 ms/op
Iteration   1: 88277.372 ms/op
Iteration   2: 97057.880 ms/op
Iteration   3: 93679.210 ms/op
Iteration   4: 100337.018 ms/op
Iteration   5: 93741.596 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  94618.615 ±(99.9%) 17275.745 ms/op [Average]
  (min, avg, max) = (88277.372, 94618.615, 100337.018), stdev = 4486.456
  CI (99.9%): [77342.870, 111894.360] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 77.19% complete, ETA 02:27:06
# Fork: 1 of 1
# Warmup Iteration   1: 87476.724 ms/op
# Warmup Iteration   2: 89493.806 ms/op
# Warmup Iteration   3: 97315.698 ms/op
# Warmup Iteration   4: 100791.301 ms/op
# Warmup Iteration   5: 83314.664 ms/op
Iteration   1: 80417.877 ms/op
Iteration   2: 98363.634 ms/op
Iteration   3: 101914.208 ms/op
Iteration   4: 101696.705 ms/op
Iteration   5: 94957.668 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  95470.018 ±(99.9%) 34198.276 ms/op [Average]
  (min, avg, max) = (80417.877, 95470.018, 101914.208), stdev = 8881.184
  CI (99.9%): [61271.743, 129668.294] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 77.27% complete, ETA 02:31:00
# Fork: 1 of 1
# Warmup Iteration   1: 24.990 ms/op
# Warmup Iteration   2: 22.003 ms/op
# Warmup Iteration   3: 21.964 ms/op
# Warmup Iteration   4: 21.681 ms/op
# Warmup Iteration   5: 24.317 ms/op
Iteration   1: 22.739 ms/op
Iteration   2: 22.041 ms/op
Iteration   3: 21.985 ms/op
Iteration   4: 21.972 ms/op
Iteration   5: 22.430 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  22.233 ±(99.9%) 1.307 ms/op [Average]
  (min, avg, max) = (21.972, 22.233, 22.739), stdev = 0.339
  CI (99.9%): [20.926, 23.540] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 77.36% complete, ETA 02:30:20
# Fork: 1 of 1
# Warmup Iteration   1: 25.966 ms/op
# Warmup Iteration   2: 22.710 ms/op
# Warmup Iteration   3: 23.222 ms/op
# Warmup Iteration   4: 23.222 ms/op
# Warmup Iteration   5: 26.312 ms/op
Iteration   1: 24.726 ms/op
Iteration   2: 24.616 ms/op
Iteration   3: 27.484 ms/op
Iteration   4: 28.468 ms/op
Iteration   5: 28.521 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  26.763 ±(99.9%) 7.525 ms/op [Average]
  (min, avg, max) = (24.616, 26.763, 28.521), stdev = 1.954
  CI (99.9%): [19.238, 34.288] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 77.44% complete, ETA 02:29:39
# Fork: 1 of 1
# Warmup Iteration   1: 1199.990 ms/op
# Warmup Iteration   2: 830.262 ms/op
# Warmup Iteration   3: 765.790 ms/op
# Warmup Iteration   4: 777.257 ms/op
# Warmup Iteration   5: 849.392 ms/op
Iteration   1: 821.804 ms/op
Iteration   2: 833.787 ms/op
Iteration   3: 897.917 ms/op
Iteration   4: 934.647 ms/op
Iteration   5: 1067.806 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  911.192 ±(99.9%) 381.369 ms/op [Average]
  (min, avg, max) = (821.804, 911.192, 1067.806), stdev = 99.040
  CI (99.9%): [529.823, 1292.561] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 77.53% complete, ETA 02:29:01
# Fork: 1 of 1
# Warmup Iteration   1: 1095.786 ms/op
# Warmup Iteration   2: 947.212 ms/op
# Warmup Iteration   3: 857.815 ms/op
# Warmup Iteration   4: 861.941 ms/op
# Warmup Iteration   5: 914.479 ms/op
Iteration   1: 870.966 ms/op
Iteration   2: 915.615 ms/op
Iteration   3: 835.940 ms/op
Iteration   4: 953.910 ms/op
Iteration   5: 787.989 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  872.884 ±(99.9%) 250.786 ms/op [Average]
  (min, avg, max) = (787.989, 872.884, 953.910), stdev = 65.128
  CI (99.9%): [622.098, 1123.670] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 77.61% complete, ETA 02:28:23
# Fork: 1 of 1
# Warmup Iteration   1: 188741.696 ms/op
# Warmup Iteration   2: 187917.324 ms/op
# Warmup Iteration   3: 193297.812 ms/op
# Warmup Iteration   4: 193126.753 ms/op
# Warmup Iteration   5: 183932.372 ms/op
Iteration   1: 193076.576 ms/op
Iteration   2: 199041.867 ms/op
Iteration   3: 185235.530 ms/op
Iteration   4: 171810.648 ms/op
Iteration   5: 164328.304 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  182698.585 ±(99.9%) 55709.917 ms/op [Average]
  (min, avg, max) = (164328.304, 182698.585, 199041.867), stdev = 14467.689
  CI (99.9%): [126988.668, 238408.502] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 77.69% complete, ETA 02:36:35
# Fork: 1 of 1
# Warmup Iteration   1: 166056.693 ms/op
# Warmup Iteration   2: 173577.602 ms/op
# Warmup Iteration   3: 187754.596 ms/op
# Warmup Iteration   4: 224109.444 ms/op
# Warmup Iteration   5: 204151.017 ms/op
Iteration   1: 269287.803 ms/op
Iteration   2: 257901.647 ms/op
Iteration   3: 240732.675 ms/op
Iteration   4: 258410.469 ms/op
Iteration   5: 266917.576 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  258650.034 ±(99.9%) 43187.490 ms/op [Average]
  (min, avg, max) = (240732.675, 258650.034, 269287.803), stdev = 11215.654
  CI (99.9%): [215462.544, 301837.524] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 77.78% complete, ETA 02:46:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 77.86% complete, ETA 02:45:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [? 10?³, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 77.95% complete, ETA 02:45:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 78.03% complete, ETA 02:44:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 78.11% complete, ETA 02:43:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.002, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 78.20% complete, ETA 02:42:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 78.28% complete, ETA 02:42:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 78.37% complete, ETA 02:41:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 78.45% complete, ETA 02:40:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 78.54% complete, ETA 02:39:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.006 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 78.62% complete, ETA 02:39:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.004, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 78.70% complete, ETA 02:38:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.006 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 78.79% complete, ETA 02:37:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.011 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.017), stdev = 0.004
  CI (99.9%): [? 0, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 78.87% complete, ETA 02:36:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.012 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.008, 0.012, 0.021), stdev = 0.005
  CI (99.9%): [? 0, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 78.96% complete, ETA 02:36:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.011 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.016), stdev = 0.003
  CI (99.9%): [? 0, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 79.04% complete, ETA 02:35:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.011 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.018), stdev = 0.004
  CI (99.9%): [? 0, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 79.12% complete, ETA 02:34:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.011 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.016), stdev = 0.003
  CI (99.9%): [? 0, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 79.21% complete, ETA 02:33:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.009 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.011), stdev = 0.002
  CI (99.9%): [0.001, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 79.29% complete, ETA 02:33:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.016 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.013, 0.016, 0.019), stdev = 0.003
  CI (99.9%): [0.006, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 79.38% complete, ETA 02:32:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.017 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.014, 0.017, 0.022), stdev = 0.003
  CI (99.9%): [0.005, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 79.46% complete, ETA 02:31:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.025 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.017, 0.025, 0.031), stdev = 0.006
  CI (99.9%): [0.001, 0.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 79.55% complete, ETA 02:30:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.020 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.016, 0.020, 0.025), stdev = 0.004
  CI (99.9%): [0.005, 0.035] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 79.63% complete, ETA 02:30:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.020 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.014, 0.020, 0.028), stdev = 0.006
  CI (99.9%): [? 0, 0.042] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 79.71% complete, ETA 02:29:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.017 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.013, 0.017, 0.021), stdev = 0.003
  CI (99.9%): [0.005, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 79.80% complete, ETA 02:28:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.033 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.027, 0.033, 0.044), stdev = 0.006
  CI (99.9%): [0.008, 0.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 79.88% complete, ETA 02:27:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.038 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.030 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.026, 0.030, 0.035), stdev = 0.004
  CI (99.9%): [0.017, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 79.97% complete, ETA 02:27:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.032 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.025, 0.032, 0.038), stdev = 0.005
  CI (99.9%): [0.013, 0.051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 80.05% complete, ETA 02:26:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.041 ms/op
Iteration   4: 0.088 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.051 ±(99.9%) 0.085 ms/op [Average]
  (min, avg, max) = (0.036, 0.051, 0.088), stdev = 0.022
  CI (99.9%): [? 0, 0.135] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 80.13% complete, ETA 02:25:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.053 ms/op
# Warmup Iteration   2: 0.040 ms/op
# Warmup Iteration   3: 0.042 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.043 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.060 ms/op
Iteration   5: 0.071 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.052 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (0.035, 0.052, 0.071), stdev = 0.016
  CI (99.9%): [? 0, 0.113] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 80.22% complete, ETA 02:25:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.042 ms/op
# Warmup Iteration   4: 0.038 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.038 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.061 ms/op
Iteration   4: 0.055 ms/op
Iteration   5: 0.056 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.050 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.038, 0.050, 0.061), stdev = 0.011
  CI (99.9%): [0.009, 0.091] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 80.30% complete, ETA 02:24:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.104 ms/op
# Warmup Iteration   2: 0.085 ms/op
# Warmup Iteration   3: 0.082 ms/op
# Warmup Iteration   4: 0.077 ms/op
# Warmup Iteration   5: 0.076 ms/op
Iteration   1: 0.082 ms/op
Iteration   2: 0.079 ms/op
Iteration   3: 0.097 ms/op
Iteration   4: 0.118 ms/op
Iteration   5: 0.097 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.095 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (0.079, 0.095, 0.118), stdev = 0.016
  CI (99.9%): [0.034, 0.155] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 80.39% complete, ETA 02:23:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.099 ms/op
# Warmup Iteration   2: 0.074 ms/op
# Warmup Iteration   3: 0.063 ms/op
# Warmup Iteration   4: 0.059 ms/op
# Warmup Iteration   5: 0.065 ms/op
Iteration   1: 0.068 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.069 ms/op
Iteration   4: 0.094 ms/op
Iteration   5: 0.077 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.073 ±(99.9%) 0.050 ms/op [Average]
  (min, avg, max) = (0.059, 0.073, 0.094), stdev = 0.013
  CI (99.9%): [0.023, 0.123] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 80.47% complete, ETA 02:22:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.071 ms/op
# Warmup Iteration   2: 0.072 ms/op
# Warmup Iteration   3: 0.070 ms/op
# Warmup Iteration   4: 0.066 ms/op
# Warmup Iteration   5: 0.097 ms/op
Iteration   1: 0.078 ms/op
Iteration   2: 0.066 ms/op
Iteration   3: 0.079 ms/op
Iteration   4: 0.166 ms/op
Iteration   5: 0.142 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.106 ±(99.9%) 0.173 ms/op [Average]
  (min, avg, max) = (0.066, 0.106, 0.166), stdev = 0.045
  CI (99.9%): [? 0, 0.279] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 80.56% complete, ETA 02:22:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.090 ms/op
# Warmup Iteration   2: 0.076 ms/op
# Warmup Iteration   3: 0.069 ms/op
# Warmup Iteration   4: 0.071 ms/op
# Warmup Iteration   5: 0.080 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.076 ms/op
Iteration   4: 0.079 ms/op
Iteration   5: 0.086 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.077 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.070, 0.077, 0.086), stdev = 0.006
  CI (99.9%): [0.053, 0.101] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 80.64% complete, ETA 02:21:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.075 ms/op
# Warmup Iteration   2: 0.070 ms/op
# Warmup Iteration   3: 0.073 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.078 ms/op
Iteration   1: 0.069 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.096 ms/op
Iteration   4: 0.113 ms/op
Iteration   5: 0.090 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.088 ±(99.9%) 0.070 ms/op [Average]
  (min, avg, max) = (0.069, 0.088, 0.113), stdev = 0.018
  CI (99.9%): [0.018, 0.158] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 80.72% complete, ETA 02:20:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.091 ms/op
# Warmup Iteration   2: 0.073 ms/op
# Warmup Iteration   3: 0.065 ms/op
# Warmup Iteration   4: 0.066 ms/op
# Warmup Iteration   5: 0.071 ms/op
Iteration   1: 0.067 ms/op
Iteration   2: 0.066 ms/op
Iteration   3: 0.104 ms/op
Iteration   4: 0.115 ms/op
Iteration   5: 0.115 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.093 ±(99.9%) 0.098 ms/op [Average]
  (min, avg, max) = (0.066, 0.093, 0.115), stdev = 0.025
  CI (99.9%): [? 0, 0.191] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 80.81% complete, ETA 02:20:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.139 ms/op
# Warmup Iteration   2: 0.129 ms/op
# Warmup Iteration   3: 0.129 ms/op
# Warmup Iteration   4: 0.109 ms/op
# Warmup Iteration   5: 0.117 ms/op
Iteration   1: 0.107 ms/op
Iteration   2: 0.105 ms/op
Iteration   3: 0.150 ms/op
Iteration   4: 0.155 ms/op
Iteration   5: 0.138 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.131 ±(99.9%) 0.091 ms/op [Average]
  (min, avg, max) = (0.105, 0.131, 0.155), stdev = 0.024
  CI (99.9%): [0.040, 0.222] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 80.89% complete, ETA 02:19:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.172 ms/op
# Warmup Iteration   2: 0.170 ms/op
# Warmup Iteration   3: 0.153 ms/op
# Warmup Iteration   4: 0.139 ms/op
# Warmup Iteration   5: 0.157 ms/op
Iteration   1: 0.140 ms/op
Iteration   2: 0.148 ms/op
Iteration   3: 0.175 ms/op
Iteration   4: 0.238 ms/op
Iteration   5: 0.222 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.185 ±(99.9%) 0.168 ms/op [Average]
  (min, avg, max) = (0.140, 0.185, 0.238), stdev = 0.044
  CI (99.9%): [0.017, 0.352] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 80.98% complete, ETA 02:18:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.244 ms/op
# Warmup Iteration   2: 0.168 ms/op
# Warmup Iteration   3: 0.174 ms/op
# Warmup Iteration   4: 0.151 ms/op
# Warmup Iteration   5: 0.144 ms/op
Iteration   1: 0.154 ms/op
Iteration   2: 0.139 ms/op
Iteration   3: 0.177 ms/op
Iteration   4: 0.228 ms/op
Iteration   5: 0.202 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.180 ±(99.9%) 0.138 ms/op [Average]
  (min, avg, max) = (0.139, 0.180, 0.228), stdev = 0.036
  CI (99.9%): [0.042, 0.318] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 81.06% complete, ETA 02:17:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.174 ms/op
# Warmup Iteration   2: 0.144 ms/op
# Warmup Iteration   3: 0.135 ms/op
# Warmup Iteration   4: 0.130 ms/op
# Warmup Iteration   5: 0.129 ms/op
Iteration   1: 0.122 ms/op
Iteration   2: 0.125 ms/op
Iteration   3: 0.149 ms/op
Iteration   4: 0.233 ms/op
Iteration   5: 0.158 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.157 ±(99.9%) 0.173 ms/op [Average]
  (min, avg, max) = (0.122, 0.157, 0.233), stdev = 0.045
  CI (99.9%): [? 0, 0.330] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 81.14% complete, ETA 02:17:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.156 ms/op
# Warmup Iteration   2: 0.147 ms/op
# Warmup Iteration   3: 0.148 ms/op
# Warmup Iteration   4: 0.144 ms/op
# Warmup Iteration   5: 0.146 ms/op
Iteration   1: 0.139 ms/op
Iteration   2: 0.136 ms/op
Iteration   3: 0.200 ms/op
Iteration   4: 0.215 ms/op
Iteration   5: 0.226 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.183 ±(99.9%) 0.164 ms/op [Average]
  (min, avg, max) = (0.136, 0.183, 0.226), stdev = 0.043
  CI (99.9%): [0.019, 0.347] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 81.23% complete, ETA 02:16:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.205 ms/op
# Warmup Iteration   2: 0.166 ms/op
# Warmup Iteration   3: 0.167 ms/op
# Warmup Iteration   4: 0.155 ms/op
# Warmup Iteration   5: 0.168 ms/op
Iteration   1: 0.182 ms/op
Iteration   2: 0.163 ms/op
Iteration   3: 0.213 ms/op
Iteration   4: 0.204 ms/op
Iteration   5: 0.193 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.191 ±(99.9%) 0.075 ms/op [Average]
  (min, avg, max) = (0.163, 0.191, 0.213), stdev = 0.019
  CI (99.9%): [0.116, 0.266] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 81.31% complete, ETA 02:15:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.305 ms/op
# Warmup Iteration   2: 0.299 ms/op
# Warmup Iteration   3: 0.300 ms/op
# Warmup Iteration   4: 0.254 ms/op
# Warmup Iteration   5: 0.219 ms/op
Iteration   1: 0.219 ms/op
Iteration   2: 0.200 ms/op
Iteration   3: 0.269 ms/op
Iteration   4: 0.286 ms/op
Iteration   5: 0.279 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.251 ±(99.9%) 0.148 ms/op [Average]
  (min, avg, max) = (0.200, 0.251, 0.286), stdev = 0.038
  CI (99.9%): [0.103, 0.398] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 81.40% complete, ETA 02:15:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.274 ms/op
# Warmup Iteration   2: 0.202 ms/op
# Warmup Iteration   3: 0.184 ms/op
# Warmup Iteration   4: 0.198 ms/op
# Warmup Iteration   5: 0.190 ms/op
Iteration   1: 0.185 ms/op
Iteration   2: 0.206 ms/op
Iteration   3: 0.212 ms/op
Iteration   4: 0.264 ms/op
Iteration   5: 0.248 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.223 ±(99.9%) 0.124 ms/op [Average]
  (min, avg, max) = (0.185, 0.223, 0.264), stdev = 0.032
  CI (99.9%): [0.099, 0.347] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 81.48% complete, ETA 02:14:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.331 ms/op
# Warmup Iteration   2: 0.284 ms/op
# Warmup Iteration   3: 0.278 ms/op
# Warmup Iteration   4: 0.251 ms/op
# Warmup Iteration   5: 0.267 ms/op
Iteration   1: 0.202 ms/op
Iteration   2: 0.215 ms/op
Iteration   3: 0.275 ms/op
Iteration   4: 0.310 ms/op
Iteration   5: 0.398 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.280 ±(99.9%) 0.306 ms/op [Average]
  (min, avg, max) = (0.202, 0.280, 0.398), stdev = 0.079
  CI (99.9%): [? 0, 0.586] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 81.57% complete, ETA 02:13:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.276 ms/op
# Warmup Iteration   2: 0.239 ms/op
# Warmup Iteration   3: 0.216 ms/op
# Warmup Iteration   4: 0.208 ms/op
# Warmup Iteration   5: 0.191 ms/op
Iteration   1: 0.251 ms/op
Iteration   2: 0.236 ms/op
Iteration   3: 0.264 ms/op
Iteration   4: 0.298 ms/op
Iteration   5: 0.262 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.262 ±(99.9%) 0.088 ms/op [Average]
  (min, avg, max) = (0.236, 0.262, 0.298), stdev = 0.023
  CI (99.9%): [0.174, 0.351] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 81.65% complete, ETA 02:12:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.265 ms/op
# Warmup Iteration   2: 0.225 ms/op
# Warmup Iteration   3: 0.197 ms/op
# Warmup Iteration   4: 0.218 ms/op
# Warmup Iteration   5: 0.215 ms/op
Iteration   1: 0.205 ms/op
Iteration   2: 0.202 ms/op
Iteration   3: 0.251 ms/op
Iteration   4: 0.279 ms/op
Iteration   5: 0.286 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.245 ±(99.9%) 0.153 ms/op [Average]
  (min, avg, max) = (0.202, 0.245, 0.286), stdev = 0.040
  CI (99.9%): [0.092, 0.397] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 81.73% complete, ETA 02:12:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.269 ms/op
# Warmup Iteration   2: 0.217 ms/op
# Warmup Iteration   3: 0.210 ms/op
# Warmup Iteration   4: 0.228 ms/op
# Warmup Iteration   5: 0.203 ms/op
Iteration   1: 0.221 ms/op
Iteration   2: 0.253 ms/op
Iteration   3: 0.280 ms/op
Iteration   4: 0.300 ms/op
Iteration   5: 0.281 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.267 ±(99.9%) 0.118 ms/op [Average]
  (min, avg, max) = (0.221, 0.267, 0.300), stdev = 0.031
  CI (99.9%): [0.149, 0.385] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 81.82% complete, ETA 02:11:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.526 ms/op
# Warmup Iteration   2: 0.407 ms/op
# Warmup Iteration   3: 0.411 ms/op
# Warmup Iteration   4: 0.469 ms/op
# Warmup Iteration   5: 0.442 ms/op
Iteration   1: 0.394 ms/op
Iteration   2: 0.442 ms/op
Iteration   3: 0.496 ms/op
Iteration   4: 0.715 ms/op
Iteration   5: 0.739 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.557 ±(99.9%) 0.614 ms/op [Average]
  (min, avg, max) = (0.394, 0.557, 0.739), stdev = 0.159
  CI (99.9%): [? 0, 1.171] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 81.90% complete, ETA 02:10:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.552 ms/op
# Warmup Iteration   2: 0.485 ms/op
# Warmup Iteration   3: 0.457 ms/op
# Warmup Iteration   4: 0.441 ms/op
# Warmup Iteration   5: 0.468 ms/op
Iteration   1: 0.468 ms/op
Iteration   2: 0.444 ms/op
Iteration   3: 0.646 ms/op
Iteration   4: 0.697 ms/op
Iteration   5: 0.640 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.579 ±(99.9%) 0.441 ms/op [Average]
  (min, avg, max) = (0.444, 0.579, 0.697), stdev = 0.115
  CI (99.9%): [0.138, 1.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 81.99% complete, ETA 02:10:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.546 ms/op
# Warmup Iteration   2: 0.493 ms/op
# Warmup Iteration   3: 0.536 ms/op
# Warmup Iteration   4: 0.488 ms/op
# Warmup Iteration   5: 0.481 ms/op
Iteration   1: 0.505 ms/op
Iteration   2: 0.497 ms/op
Iteration   3: 0.628 ms/op
Iteration   4: 0.577 ms/op
Iteration   5: 0.536 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.549 ±(99.9%) 0.209 ms/op [Average]
  (min, avg, max) = (0.497, 0.549, 0.628), stdev = 0.054
  CI (99.9%): [0.340, 0.757] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 82.07% complete, ETA 02:09:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.545 ms/op
# Warmup Iteration   2: 0.710 ms/op
# Warmup Iteration   3: 0.715 ms/op
# Warmup Iteration   4: 0.460 ms/op
# Warmup Iteration   5: 0.585 ms/op
Iteration   1: 0.512 ms/op
Iteration   2: 0.462 ms/op
Iteration   3: 0.562 ms/op
Iteration   4: 1.057 ms/op
Iteration   5: 0.726 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.664 ±(99.9%) 0.929 ms/op [Average]
  (min, avg, max) = (0.462, 0.664, 1.057), stdev = 0.241
  CI (99.9%): [? 0, 1.593] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 82.15% complete, ETA 02:08:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.582 ms/op
# Warmup Iteration   2: 0.490 ms/op
# Warmup Iteration   3: 0.516 ms/op
# Warmup Iteration   4: 0.585 ms/op
# Warmup Iteration   5: 0.781 ms/op
Iteration   1: 0.516 ms/op
Iteration   2: 0.599 ms/op
Iteration   3: 0.834 ms/op
Iteration   4: 0.752 ms/op
Iteration   5: 0.790 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.698 ±(99.9%) 0.519 ms/op [Average]
  (min, avg, max) = (0.516, 0.698, 0.834), stdev = 0.135
  CI (99.9%): [0.179, 1.218] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 82.24% complete, ETA 02:07:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.809 ms/op
# Warmup Iteration   2: 0.570 ms/op
# Warmup Iteration   3: 0.574 ms/op
# Warmup Iteration   4: 0.536 ms/op
# Warmup Iteration   5: 0.583 ms/op
Iteration   1: 0.537 ms/op
Iteration   2: 0.563 ms/op
Iteration   3: 0.748 ms/op
Iteration   4: 0.656 ms/op
Iteration   5: 0.716 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.644 ±(99.9%) 0.356 ms/op [Average]
  (min, avg, max) = (0.537, 0.644, 0.748), stdev = 0.092
  CI (99.9%): [0.288, 1.000] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 82.32% complete, ETA 02:07:16
# Fork: 1 of 1
# Warmup Iteration   1: 1.162 ms/op
# Warmup Iteration   2: 0.978 ms/op
# Warmup Iteration   3: 0.992 ms/op
# Warmup Iteration   4: 1.047 ms/op
# Warmup Iteration   5: 0.961 ms/op
Iteration   1: 0.989 ms/op
Iteration   2: 0.936 ms/op
Iteration   3: 1.134 ms/op
Iteration   4: 1.226 ms/op
Iteration   5: 1.185 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.094 ±(99.9%) 0.484 ms/op [Average]
  (min, avg, max) = (0.936, 1.094, 1.226), stdev = 0.126
  CI (99.9%): [0.610, 1.579] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 82.41% complete, ETA 02:06:34
# Fork: 1 of 1
# Warmup Iteration   1: 1.251 ms/op
# Warmup Iteration   2: 0.879 ms/op
# Warmup Iteration   3: 0.900 ms/op
# Warmup Iteration   4: 0.989 ms/op
# Warmup Iteration   5: 0.973 ms/op
Iteration   1: 0.918 ms/op
Iteration   2: 0.953 ms/op
Iteration   3: 1.154 ms/op
Iteration   4: 1.434 ms/op
Iteration   5: 1.225 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.137 ±(99.9%) 0.812 ms/op [Average]
  (min, avg, max) = (0.918, 1.137, 1.434), stdev = 0.211
  CI (99.9%): [0.325, 1.949] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 82.49% complete, ETA 02:05:52
# Fork: 1 of 1
# Warmup Iteration   1: 1.123 ms/op
# Warmup Iteration   2: 0.851 ms/op
# Warmup Iteration   3: 0.845 ms/op
# Warmup Iteration   4: 0.880 ms/op
# Warmup Iteration   5: 0.791 ms/op
Iteration   1: 0.742 ms/op
Iteration   2: 0.854 ms/op
Iteration   3: 0.920 ms/op
Iteration   4: 1.074 ms/op
Iteration   5: 1.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.919 ±(99.9%) 0.497 ms/op [Average]
  (min, avg, max) = (0.742, 0.919, 1.074), stdev = 0.129
  CI (99.9%): [0.422, 1.415] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 82.58% complete, ETA 02:05:11
# Fork: 1 of 1
# Warmup Iteration   1: 1.247 ms/op
# Warmup Iteration   2: 0.832 ms/op
# Warmup Iteration   3: 0.910 ms/op
# Warmup Iteration   4: 0.839 ms/op
# Warmup Iteration   5: 0.803 ms/op
Iteration   1: 0.772 ms/op
Iteration   2: 0.802 ms/op
Iteration   3: 0.837 ms/op
Iteration   4: 1.254 ms/op
Iteration   5: 1.321 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.997 ±(99.9%) 1.029 ms/op [Average]
  (min, avg, max) = (0.772, 0.997, 1.321), stdev = 0.267
  CI (99.9%): [? 0, 2.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 82.66% complete, ETA 02:04:29
# Fork: 1 of 1
# Warmup Iteration   1: 1.104 ms/op
# Warmup Iteration   2: 0.934 ms/op
# Warmup Iteration   3: 0.875 ms/op
# Warmup Iteration   4: 0.992 ms/op
# Warmup Iteration   5: 1.455 ms/op
Iteration   1: 1.807 ms/op
Iteration   2: 1.252 ms/op
Iteration   3: 1.592 ms/op
Iteration   4: 1.748 ms/op
Iteration   5: 2.019 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.684 ±(99.9%) 1.101 ms/op [Average]
  (min, avg, max) = (1.252, 1.684, 2.019), stdev = 0.286
  CI (99.9%): [0.583, 2.785] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 82.74% complete, ETA 02:03:47
# Fork: 1 of 1
# Warmup Iteration   1: 1.043 ms/op
# Warmup Iteration   2: 0.912 ms/op
# Warmup Iteration   3: 0.807 ms/op
# Warmup Iteration   4: 0.900 ms/op
# Warmup Iteration   5: 0.813 ms/op
Iteration   1: 0.741 ms/op
Iteration   2: 0.803 ms/op
Iteration   3: 1.049 ms/op
Iteration   4: 1.041 ms/op
Iteration   5: 1.006 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.928 ±(99.9%) 0.558 ms/op [Average]
  (min, avg, max) = (0.741, 0.928, 1.049), stdev = 0.145
  CI (99.9%): [0.370, 1.486] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 82.83% complete, ETA 02:03:06
# Fork: 1 of 1
# Warmup Iteration   1: 2.216 ms/op
# Warmup Iteration   2: 1.783 ms/op
# Warmup Iteration   3: 1.597 ms/op
# Warmup Iteration   4: 1.828 ms/op
# Warmup Iteration   5: 1.687 ms/op
Iteration   1: 1.641 ms/op
Iteration   2: 1.963 ms/op
Iteration   3: 2.214 ms/op
Iteration   4: 2.810 ms/op
Iteration   5: 2.426 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.211 ±(99.9%) 1.712 ms/op [Average]
  (min, avg, max) = (1.641, 2.211, 2.810), stdev = 0.445
  CI (99.9%): [0.498, 3.923] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 82.91% complete, ETA 02:02:24
# Fork: 1 of 1
# Warmup Iteration   1: 2.958 ms/op
# Warmup Iteration   2: 2.003 ms/op
# Warmup Iteration   3: 2.029 ms/op
# Warmup Iteration   4: 1.843 ms/op
# Warmup Iteration   5: 1.809 ms/op
Iteration   1: 1.908 ms/op
Iteration   2: 1.748 ms/op
Iteration   3: 2.312 ms/op
Iteration   4: 2.435 ms/op
Iteration   5: 2.664 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.213 ±(99.9%) 1.456 ms/op [Average]
  (min, avg, max) = (1.748, 2.213, 2.664), stdev = 0.378
  CI (99.9%): [0.757, 3.670] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 83.00% complete, ETA 02:01:43
# Fork: 1 of 1
# Warmup Iteration   1: 2.813 ms/op
# Warmup Iteration   2: 1.873 ms/op
# Warmup Iteration   3: 1.955 ms/op
# Warmup Iteration   4: 1.900 ms/op
# Warmup Iteration   5: 1.832 ms/op
Iteration   1: 2.283 ms/op
Iteration   2: 1.779 ms/op
Iteration   3: 2.360 ms/op
Iteration   4: 2.444 ms/op
Iteration   5: 2.099 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.193 ±(99.9%) 1.017 ms/op [Average]
  (min, avg, max) = (1.779, 2.193, 2.444), stdev = 0.264
  CI (99.9%): [1.176, 3.210] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 83.08% complete, ETA 02:01:02
# Fork: 1 of 1
# Warmup Iteration   1: 2.113 ms/op
# Warmup Iteration   2: 1.755 ms/op
# Warmup Iteration   3: 1.817 ms/op
# Warmup Iteration   4: 1.810 ms/op
# Warmup Iteration   5: 1.661 ms/op
Iteration   1: 1.809 ms/op
Iteration   2: 2.226 ms/op
Iteration   3: 2.399 ms/op
Iteration   4: 3.334 ms/op
Iteration   5: 2.426 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.439 ±(99.9%) 2.150 ms/op [Average]
  (min, avg, max) = (1.809, 2.439, 3.334), stdev = 0.558
  CI (99.9%): [0.289, 4.588] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 83.16% complete, ETA 02:00:20
# Fork: 1 of 1
# Warmup Iteration   1: 2.709 ms/op
# Warmup Iteration   2: 2.485 ms/op
# Warmup Iteration   3: 2.132 ms/op
# Warmup Iteration   4: 2.088 ms/op
# Warmup Iteration   5: 2.150 ms/op
Iteration   1: 2.272 ms/op
Iteration   2: 1.963 ms/op
Iteration   3: 2.792 ms/op
Iteration   4: 3.266 ms/op
Iteration   5: 3.138 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.686 ±(99.9%) 2.149 ms/op [Average]
  (min, avg, max) = (1.963, 2.686, 3.266), stdev = 0.558
  CI (99.9%): [0.537, 4.836] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 83.25% complete, ETA 01:59:39
# Fork: 1 of 1
# Warmup Iteration   1: 2.242 ms/op
# Warmup Iteration   2: 2.177 ms/op
# Warmup Iteration   3: 2.247 ms/op
# Warmup Iteration   4: 1.963 ms/op
# Warmup Iteration   5: 2.242 ms/op
Iteration   1: 1.959 ms/op
Iteration   2: 1.740 ms/op
Iteration   3: 3.119 ms/op
Iteration   4: 2.774 ms/op
Iteration   5: 2.467 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.412 ±(99.9%) 2.188 ms/op [Average]
  (min, avg, max) = (1.740, 2.412, 3.119), stdev = 0.568
  CI (99.9%): [0.224, 4.600] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 83.33% complete, ETA 01:58:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 83.42% complete, ETA 01:58:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 83.50% complete, ETA 01:57:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 83.59% complete, ETA 01:56:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 83.67% complete, ETA 01:56:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 83.75% complete, ETA 01:55:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10?³, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 83.84% complete, ETA 01:54:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.006 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.009), stdev = 0.003
  CI (99.9%): [? 0, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 83.92% complete, ETA 01:54:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [0.001, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 84.01% complete, ETA 01:53:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.004, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 84.09% complete, ETA 01:52:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 84.18% complete, ETA 01:52:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.008, 0.009), stdev = 0.002
  CI (99.9%): [0.001, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 84.26% complete, ETA 01:51:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.008, 0.009), stdev = 0.002
  CI (99.9%): [0.002, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 84.34% complete, ETA 01:50:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.011 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.007, 0.011, 0.019), stdev = 0.005
  CI (99.9%): [? 0, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 84.43% complete, ETA 01:50:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.009 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.011), stdev = 0.001
  CI (99.9%): [0.003, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 84.51% complete, ETA 01:49:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.011 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.009, 0.011, 0.016), stdev = 0.003
  CI (99.9%): [? 0, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 84.60% complete, ETA 01:48:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.010 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.011), stdev = 0.001
  CI (99.9%): [0.006, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 84.68% complete, ETA 01:48:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.009 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.011), stdev = 0.002
  CI (99.9%): [0.002, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 84.76% complete, ETA 01:47:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.012 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.015), stdev = 0.003
  CI (99.9%): [0.002, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 84.85% complete, ETA 01:46:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.021 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.013, 0.021, 0.028), stdev = 0.006
  CI (99.9%): [? 0, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 84.93% complete, ETA 01:46:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.032 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.024 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.019, 0.024, 0.032), stdev = 0.005
  CI (99.9%): [0.003, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 85.02% complete, ETA 01:45:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.020 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.014, 0.020, 0.025), stdev = 0.004
  CI (99.9%): [0.004, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 85.10% complete, ETA 01:44:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.019 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.016, 0.019, 0.026), stdev = 0.004
  CI (99.9%): [0.004, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 85.19% complete, ETA 01:44:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.025 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.014, 0.025, 0.034), stdev = 0.009
  CI (99.9%): [? 0, 0.059] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 85.27% complete, ETA 01:43:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.041 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.027 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.025 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.019, 0.025, 0.030), stdev = 0.004
  CI (99.9%): [0.010, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 85.35% complete, ETA 01:42:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.055 ms/op
# Warmup Iteration   2: 0.041 ms/op
# Warmup Iteration   3: 0.042 ms/op
# Warmup Iteration   4: 0.038 ms/op
# Warmup Iteration   5: 0.038 ms/op
Iteration   1: 0.038 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.054 ms/op
Iteration   4: 0.058 ms/op
Iteration   5: 0.058 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.049 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.038, 0.049, 0.058), stdev = 0.010
  CI (99.9%): [0.011, 0.088] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 85.44% complete, ETA 01:42:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.038 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.039 ms/op
Iteration   1: 0.040 ms/op
Iteration   2: 0.038 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.053 ms/op
Iteration   5: 0.053 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.047 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.038, 0.047, 0.053), stdev = 0.008
  CI (99.9%): [0.018, 0.077] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 85.52% complete, ETA 01:41:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.056 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.039 ±(99.9%) 0.043 ms/op [Average]
  (min, avg, max) = (0.029, 0.039, 0.056), stdev = 0.011
  CI (99.9%): [? 0, 0.083] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 85.61% complete, ETA 01:40:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.040 ms/op
# Warmup Iteration   2: 0.033 ms/op
# Warmup Iteration   3: 0.038 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.035 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.029, 0.035, 0.047), stdev = 0.007
  CI (99.9%): [0.009, 0.061] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 85.69% complete, ETA 01:40:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.032 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.024, 0.032, 0.037), stdev = 0.006
  CI (99.9%): [0.009, 0.054] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 85.77% complete, ETA 01:39:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.030 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.023, 0.030, 0.036), stdev = 0.005
  CI (99.9%): [0.012, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 85.86% complete, ETA 01:38:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.049 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.061 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.093 ms/op
Iteration   5: 0.071 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.068 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.049, 0.068, 0.093), stdev = 0.016
  CI (99.9%): [0.005, 0.130] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 85.94% complete, ETA 01:38:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.049 ms/op
# Warmup Iteration   4: 0.050 ms/op
# Warmup Iteration   5: 0.052 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.049 ms/op
Iteration   3: 0.055 ms/op
Iteration   4: 0.069 ms/op
Iteration   5: 0.064 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.057 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.048, 0.057, 0.069), stdev = 0.009
  CI (99.9%): [0.021, 0.093] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 86.03% complete, ETA 01:37:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.054 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.049 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.074 ms/op
Iteration   5: 0.083 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.062 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.048, 0.062, 0.083), stdev = 0.015
  CI (99.9%): [0.002, 0.122] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 86.11% complete, ETA 01:36:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.069 ms/op
# Warmup Iteration   5: 0.054 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.051 ms/op
Iteration   3: 0.060 ms/op
Iteration   4: 0.074 ms/op
Iteration   5: 0.077 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.063 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (0.050, 0.063, 0.077), stdev = 0.013
  CI (99.9%): [0.014, 0.111] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 86.20% complete, ETA 01:36:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.079 ms/op
# Warmup Iteration   2: 0.058 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.078 ms/op
# Warmup Iteration   5: 0.070 ms/op
Iteration   1: 0.065 ms/op
Iteration   2: 0.086 ms/op
Iteration   3: 0.093 ms/op
Iteration   4: 0.114 ms/op
Iteration   5: 0.087 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.089 ±(99.9%) 0.068 ms/op [Average]
  (min, avg, max) = (0.065, 0.089, 0.114), stdev = 0.018
  CI (99.9%): [0.021, 0.157] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 86.28% complete, ETA 01:35:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.087 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.057 ms/op
# Warmup Iteration   5: 0.053 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.099 ms/op
Iteration   4: 0.095 ms/op
Iteration   5: 0.072 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.076 ±(99.9%) 0.080 ms/op [Average]
  (min, avg, max) = (0.053, 0.076, 0.099), stdev = 0.021
  CI (99.9%): [? 0, 0.156] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 86.36% complete, ETA 01:34:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.141 ms/op
# Warmup Iteration   2: 0.109 ms/op
# Warmup Iteration   3: 0.117 ms/op
# Warmup Iteration   4: 0.123 ms/op
# Warmup Iteration   5: 0.108 ms/op
Iteration   1: 0.108 ms/op
Iteration   2: 0.110 ms/op
Iteration   3: 0.149 ms/op
Iteration   4: 0.166 ms/op
Iteration   5: 0.154 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.137 ±(99.9%) 0.103 ms/op [Average]
  (min, avg, max) = (0.108, 0.137, 0.166), stdev = 0.027
  CI (99.9%): [0.034, 0.241] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 86.45% complete, ETA 01:34:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.136 ms/op
# Warmup Iteration   2: 0.114 ms/op
# Warmup Iteration   3: 0.118 ms/op
# Warmup Iteration   4: 0.121 ms/op
# Warmup Iteration   5: 0.110 ms/op
Iteration   1: 0.108 ms/op
Iteration   2: 0.109 ms/op
Iteration   3: 0.137 ms/op
Iteration   4: 0.176 ms/op
Iteration   5: 0.138 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.134 ±(99.9%) 0.108 ms/op [Average]
  (min, avg, max) = (0.108, 0.134, 0.176), stdev = 0.028
  CI (99.9%): [0.026, 0.241] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 86.53% complete, ETA 01:33:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.138 ms/op
# Warmup Iteration   2: 0.125 ms/op
# Warmup Iteration   3: 0.127 ms/op
# Warmup Iteration   4: 0.134 ms/op
# Warmup Iteration   5: 0.122 ms/op
Iteration   1: 0.123 ms/op
Iteration   2: 0.119 ms/op
Iteration   3: 0.167 ms/op
Iteration   4: 0.191 ms/op
Iteration   5: 0.171 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.154 ±(99.9%) 0.122 ms/op [Average]
  (min, avg, max) = (0.119, 0.154, 0.191), stdev = 0.032
  CI (99.9%): [0.032, 0.276] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 86.62% complete, ETA 01:33:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.171 ms/op
# Warmup Iteration   2: 0.119 ms/op
# Warmup Iteration   3: 0.261 ms/op
# Warmup Iteration   4: 0.217 ms/op
# Warmup Iteration   5: 0.205 ms/op
Iteration   1: 0.207 ms/op
Iteration   2: 0.210 ms/op
Iteration   3: 0.168 ms/op
Iteration   4: 0.191 ms/op
Iteration   5: 0.223 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.200 ±(99.9%) 0.082 ms/op [Average]
  (min, avg, max) = (0.168, 0.200, 0.223), stdev = 0.021
  CI (99.9%): [0.118, 0.281] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 86.70% complete, ETA 01:32:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.314 ms/op
# Warmup Iteration   2: 0.128 ms/op
# Warmup Iteration   3: 0.129 ms/op
# Warmup Iteration   4: 0.132 ms/op
# Warmup Iteration   5: 0.128 ms/op
Iteration   1: 0.117 ms/op
Iteration   2: 0.158 ms/op
Iteration   3: 0.167 ms/op
Iteration   4: 0.195 ms/op
Iteration   5: 0.148 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.157 ±(99.9%) 0.109 ms/op [Average]
  (min, avg, max) = (0.117, 0.157, 0.195), stdev = 0.028
  CI (99.9%): [0.047, 0.266] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 86.78% complete, ETA 01:31:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.141 ms/op
# Warmup Iteration   2: 0.110 ms/op
# Warmup Iteration   3: 0.114 ms/op
# Warmup Iteration   4: 0.117 ms/op
# Warmup Iteration   5: 0.107 ms/op
Iteration   1: 0.105 ms/op
Iteration   2: 0.130 ms/op
Iteration   3: 0.238 ms/op
Iteration   4: 0.154 ms/op
Iteration   5: 0.144 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.154 ±(99.9%) 0.194 ms/op [Average]
  (min, avg, max) = (0.105, 0.154, 0.238), stdev = 0.050
  CI (99.9%): [? 0, 0.349] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 86.87% complete, ETA 01:31:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.313 ms/op
# Warmup Iteration   2: 0.231 ms/op
# Warmup Iteration   3: 0.239 ms/op
# Warmup Iteration   4: 0.233 ms/op
# Warmup Iteration   5: 0.234 ms/op
Iteration   1: 0.232 ms/op
Iteration   2: 0.228 ms/op
Iteration   3: 0.320 ms/op
Iteration   4: 0.335 ms/op
Iteration   5: 0.311 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.285 ±(99.9%) 0.196 ms/op [Average]
  (min, avg, max) = (0.228, 0.285, 0.335), stdev = 0.051
  CI (99.9%): [0.089, 0.481] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 86.95% complete, ETA 01:30:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.308 ms/op
# Warmup Iteration   2: 0.236 ms/op
# Warmup Iteration   3: 0.261 ms/op
# Warmup Iteration   4: 0.244 ms/op
# Warmup Iteration   5: 0.220 ms/op
Iteration   1: 0.230 ms/op
Iteration   2: 0.233 ms/op
Iteration   3: 0.329 ms/op
Iteration   4: 0.368 ms/op
Iteration   5: 0.311 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.294 ±(99.9%) 0.235 ms/op [Average]
  (min, avg, max) = (0.230, 0.294, 0.368), stdev = 0.061
  CI (99.9%): [0.059, 0.529] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 87.04% complete, ETA 01:29:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.287 ms/op
# Warmup Iteration   2: 0.247 ms/op
# Warmup Iteration   3: 0.257 ms/op
# Warmup Iteration   4: 0.250 ms/op
# Warmup Iteration   5: 0.240 ms/op
Iteration   1: 0.232 ms/op
Iteration   2: 0.221 ms/op
Iteration   3: 0.344 ms/op
Iteration   4: 0.347 ms/op
Iteration   5: 0.334 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.296 ±(99.9%) 0.244 ms/op [Average]
  (min, avg, max) = (0.221, 0.296, 0.347), stdev = 0.063
  CI (99.9%): [0.051, 0.540] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 87.12% complete, ETA 01:29:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.288 ms/op
# Warmup Iteration   2: 0.254 ms/op
# Warmup Iteration   3: 0.282 ms/op
# Warmup Iteration   4: 0.240 ms/op
# Warmup Iteration   5: 0.268 ms/op
Iteration   1: 0.244 ms/op
Iteration   2: 0.229 ms/op
Iteration   3: 0.369 ms/op
Iteration   4: 0.379 ms/op
Iteration   5: 0.313 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.307 ±(99.9%) 0.267 ms/op [Average]
  (min, avg, max) = (0.229, 0.307, 0.379), stdev = 0.069
  CI (99.9%): [0.040, 0.574] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 87.21% complete, ETA 01:28:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.379 ms/op
# Warmup Iteration   2: 0.225 ms/op
# Warmup Iteration   3: 0.264 ms/op
# Warmup Iteration   4: 0.235 ms/op
# Warmup Iteration   5: 0.241 ms/op
Iteration   1: 0.216 ms/op
Iteration   2: 0.250 ms/op
Iteration   3: 0.402 ms/op
Iteration   4: 0.331 ms/op
Iteration   5: 0.324 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.304 ±(99.9%) 0.282 ms/op [Average]
  (min, avg, max) = (0.216, 0.304, 0.402), stdev = 0.073
  CI (99.9%): [0.022, 0.586] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 87.29% complete, ETA 01:27:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.283 ms/op
# Warmup Iteration   2: 0.202 ms/op
# Warmup Iteration   3: 0.224 ms/op
# Warmup Iteration   4: 0.230 ms/op
# Warmup Iteration   5: 0.212 ms/op
Iteration   1: 0.216 ms/op
Iteration   2: 0.247 ms/op
Iteration   3: 0.309 ms/op
Iteration   4: 0.297 ms/op
Iteration   5: 0.289 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.272 ±(99.9%) 0.149 ms/op [Average]
  (min, avg, max) = (0.216, 0.272, 0.309), stdev = 0.039
  CI (99.9%): [0.122, 0.421] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 87.37% complete, ETA 01:27:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.598 ms/op
# Warmup Iteration   2: 0.431 ms/op
# Warmup Iteration   3: 0.444 ms/op
# Warmup Iteration   4: 0.443 ms/op
# Warmup Iteration   5: 0.401 ms/op
Iteration   1: 0.403 ms/op
Iteration   2: 0.442 ms/op
Iteration   3: 0.448 ms/op
Iteration   4: 0.559 ms/op
Iteration   5: 0.626 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.495 ±(99.9%) 0.358 ms/op [Average]
  (min, avg, max) = (0.403, 0.495, 0.626), stdev = 0.093
  CI (99.9%): [0.137, 0.854] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 87.46% complete, ETA 01:26:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.611 ms/op
# Warmup Iteration   2: 0.460 ms/op
# Warmup Iteration   3: 0.466 ms/op
# Warmup Iteration   4: 0.454 ms/op
# Warmup Iteration   5: 0.416 ms/op
Iteration   1: 0.445 ms/op
Iteration   2: 0.464 ms/op
Iteration   3: 0.622 ms/op
Iteration   4: 0.615 ms/op
Iteration   5: 0.567 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.543 ±(99.9%) 0.322 ms/op [Average]
  (min, avg, max) = (0.445, 0.543, 0.622), stdev = 0.084
  CI (99.9%): [0.221, 0.865] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 87.54% complete, ETA 01:25:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.603 ms/op
# Warmup Iteration   2: 0.465 ms/op
# Warmup Iteration   3: 0.475 ms/op
# Warmup Iteration   4: 0.456 ms/op
# Warmup Iteration   5: 0.436 ms/op
Iteration   1: 0.488 ms/op
Iteration   2: 0.467 ms/op
Iteration   3: 0.631 ms/op
Iteration   4: 0.652 ms/op
Iteration   5: 0.639 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.575 ±(99.9%) 0.347 ms/op [Average]
  (min, avg, max) = (0.467, 0.575, 0.652), stdev = 0.090
  CI (99.9%): [0.228, 0.922] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 87.63% complete, ETA 01:25:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.588 ms/op
# Warmup Iteration   2: 0.478 ms/op
# Warmup Iteration   3: 0.471 ms/op
# Warmup Iteration   4: 0.453 ms/op
# Warmup Iteration   5: 0.450 ms/op
Iteration   1: 0.447 ms/op
Iteration   2: 0.431 ms/op
Iteration   3: 0.594 ms/op
Iteration   4: 0.683 ms/op
Iteration   5: 0.628 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.556 ±(99.9%) 0.432 ms/op [Average]
  (min, avg, max) = (0.431, 0.556, 0.683), stdev = 0.112
  CI (99.9%): [0.124, 0.988] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 87.71% complete, ETA 01:24:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.687 ms/op
# Warmup Iteration   2: 0.426 ms/op
# Warmup Iteration   3: 0.496 ms/op
# Warmup Iteration   4: 0.497 ms/op
# Warmup Iteration   5: 0.475 ms/op
Iteration   1: 0.459 ms/op
Iteration   2: 0.509 ms/op
Iteration   3: 0.906 ms/op
Iteration   4: 0.682 ms/op
Iteration   5: 0.653 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.642 ±(99.9%) 0.674 ms/op [Average]
  (min, avg, max) = (0.459, 0.642, 0.906), stdev = 0.175
  CI (99.9%): [? 0, 1.316] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 87.79% complete, ETA 01:24:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.732 ms/op
# Warmup Iteration   2: 0.455 ms/op
# Warmup Iteration   3: 0.540 ms/op
# Warmup Iteration   4: 0.509 ms/op
# Warmup Iteration   5: 0.636 ms/op
Iteration   1: 0.493 ms/op
Iteration   2: 0.533 ms/op
Iteration   3: 0.749 ms/op
Iteration   4: 0.876 ms/op
Iteration   5: 0.717 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.674 ±(99.9%) 0.611 ms/op [Average]
  (min, avg, max) = (0.493, 0.674, 0.876), stdev = 0.159
  CI (99.9%): [0.063, 1.284] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 87.88% complete, ETA 01:23:25
# Fork: 1 of 1
# Warmup Iteration   1: 1.191 ms/op
# Warmup Iteration   2: 0.938 ms/op
# Warmup Iteration   3: 1.003 ms/op
# Warmup Iteration   4: 0.926 ms/op
# Warmup Iteration   5: 0.924 ms/op
Iteration   1: 0.956 ms/op
Iteration   2: 0.962 ms/op
Iteration   3: 1.271 ms/op
Iteration   4: 1.459 ms/op
Iteration   5: 1.324 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.194 ±(99.9%) 0.868 ms/op [Average]
  (min, avg, max) = (0.956, 1.194, 1.459), stdev = 0.225
  CI (99.9%): [0.327, 2.062] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 87.96% complete, ETA 01:22:47
# Fork: 1 of 1
# Warmup Iteration   1: 1.141 ms/op
# Warmup Iteration   2: 0.982 ms/op
# Warmup Iteration   3: 1.058 ms/op
# Warmup Iteration   4: 1.006 ms/op
# Warmup Iteration   5: 0.992 ms/op
Iteration   1: 0.947 ms/op
Iteration   2: 0.921 ms/op
Iteration   3: 1.258 ms/op
Iteration   4: 1.471 ms/op
Iteration   5: 1.211 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.162 ±(99.9%) 0.885 ms/op [Average]
  (min, avg, max) = (0.921, 1.162, 1.471), stdev = 0.230
  CI (99.9%): [0.277, 2.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 88.05% complete, ETA 01:22:09
# Fork: 1 of 1
# Warmup Iteration   1: 1.084 ms/op
# Warmup Iteration   2: 0.943 ms/op
# Warmup Iteration   3: 0.899 ms/op
# Warmup Iteration   4: 0.880 ms/op
# Warmup Iteration   5: 0.913 ms/op
Iteration   1: 0.870 ms/op
Iteration   2: 0.923 ms/op
Iteration   3: 1.043 ms/op
Iteration   4: 1.219 ms/op
Iteration   5: 1.187 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.048 ±(99.9%) 0.596 ms/op [Average]
  (min, avg, max) = (0.870, 1.048, 1.219), stdev = 0.155
  CI (99.9%): [0.452, 1.644] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 88.13% complete, ETA 01:21:31
# Fork: 1 of 1
# Warmup Iteration   1: 1.093 ms/op
# Warmup Iteration   2: 0.942 ms/op
# Warmup Iteration   3: 0.851 ms/op
# Warmup Iteration   4: 0.876 ms/op
# Warmup Iteration   5: 0.815 ms/op
Iteration   1: 0.840 ms/op
Iteration   2: 0.876 ms/op
Iteration   3: 0.935 ms/op
Iteration   4: 1.198 ms/op
Iteration   5: 1.147 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.999 ±(99.9%) 0.627 ms/op [Average]
  (min, avg, max) = (0.840, 0.999, 1.198), stdev = 0.163
  CI (99.9%): [0.372, 1.626] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 88.22% complete, ETA 01:20:53
# Fork: 1 of 1
# Warmup Iteration   1: 1.075 ms/op
# Warmup Iteration   2: 0.770 ms/op
# Warmup Iteration   3: 0.825 ms/op
# Warmup Iteration   4: 0.867 ms/op
# Warmup Iteration   5: 0.865 ms/op
Iteration   1: 0.816 ms/op
Iteration   2: 0.914 ms/op
Iteration   3: 1.213 ms/op
Iteration   4: 1.134 ms/op
Iteration   5: 1.321 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.079 ±(99.9%) 0.808 ms/op [Average]
  (min, avg, max) = (0.816, 1.079, 1.321), stdev = 0.210
  CI (99.9%): [0.271, 1.888] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 88.30% complete, ETA 01:20:15
# Fork: 1 of 1
# Warmup Iteration   1: 1.064 ms/op
# Warmup Iteration   2: 0.774 ms/op
# Warmup Iteration   3: 0.802 ms/op
# Warmup Iteration   4: 0.853 ms/op
# Warmup Iteration   5: 0.830 ms/op
Iteration   1: 0.790 ms/op
Iteration   2: 0.844 ms/op
Iteration   3: 1.061 ms/op
Iteration   4: 1.183 ms/op
Iteration   5: 1.080 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.992 ±(99.9%) 0.644 ms/op [Average]
  (min, avg, max) = (0.790, 0.992, 1.183), stdev = 0.167
  CI (99.9%): [0.347, 1.636] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 88.38% complete, ETA 01:19:38
# Fork: 1 of 1
# Warmup Iteration   1: 2.159 ms/op
# Warmup Iteration   2: 1.805 ms/op
# Warmup Iteration   3: 1.619 ms/op
# Warmup Iteration   4: 1.721 ms/op
# Warmup Iteration   5: 1.522 ms/op
Iteration   1: 1.696 ms/op
Iteration   2: 1.695 ms/op
Iteration   3: 1.712 ms/op
Iteration   4: 2.434 ms/op
Iteration   5: 2.439 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.995 ±(99.9%) 1.552 ms/op [Average]
  (min, avg, max) = (1.695, 1.995, 2.439), stdev = 0.403
  CI (99.9%): [0.443, 3.548] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 88.47% complete, ETA 01:19:00
# Fork: 1 of 1
# Warmup Iteration   1: 2.188 ms/op
# Warmup Iteration   2: 1.770 ms/op
# Warmup Iteration   3: 1.756 ms/op
# Warmup Iteration   4: 1.748 ms/op
# Warmup Iteration   5: 1.562 ms/op
Iteration   1: 1.647 ms/op
Iteration   2: 1.749 ms/op
Iteration   3: 2.000 ms/op
Iteration   4: 2.434 ms/op
Iteration   5: 2.311 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.028 ±(99.9%) 1.317 ms/op [Average]
  (min, avg, max) = (1.647, 2.028, 2.434), stdev = 0.342
  CI (99.9%): [0.711, 3.345] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 88.55% complete, ETA 01:18:22
# Fork: 1 of 1
# Warmup Iteration   1: 2.106 ms/op
# Warmup Iteration   2: 1.749 ms/op
# Warmup Iteration   3: 1.508 ms/op
# Warmup Iteration   4: 1.822 ms/op
# Warmup Iteration   5: 1.537 ms/op
Iteration   1: 1.520 ms/op
Iteration   2: 1.692 ms/op
Iteration   3: 1.882 ms/op
Iteration   4: 2.763 ms/op
Iteration   5: 2.176 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.007 ±(99.9%) 1.879 ms/op [Average]
  (min, avg, max) = (1.520, 2.007, 2.763), stdev = 0.488
  CI (99.9%): [0.128, 3.885] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 88.64% complete, ETA 01:17:45
# Fork: 1 of 1
# Warmup Iteration   1: 2.165 ms/op
# Warmup Iteration   2: 1.856 ms/op
# Warmup Iteration   3: 1.672 ms/op
# Warmup Iteration   4: 1.770 ms/op
# Warmup Iteration   5: 1.765 ms/op
Iteration   1: 1.688 ms/op
Iteration   2: 1.866 ms/op
Iteration   3: 2.098 ms/op
Iteration   4: 2.554 ms/op
Iteration   5: 2.323 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.106 ±(99.9%) 1.333 ms/op [Average]
  (min, avg, max) = (1.688, 2.106, 2.554), stdev = 0.346
  CI (99.9%): [0.772, 3.439] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 88.72% complete, ETA 01:17:07
# Fork: 1 of 1
# Warmup Iteration   1: 1.831 ms/op
# Warmup Iteration   2: 1.648 ms/op
# Warmup Iteration   3: 1.671 ms/op
# Warmup Iteration   4: 1.802 ms/op
# Warmup Iteration   5: 1.724 ms/op
Iteration   1: 1.680 ms/op
Iteration   2: 1.858 ms/op
Iteration   3: 2.792 ms/op
Iteration   4: 2.155 ms/op
Iteration   5: 2.469 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.191 ±(99.9%) 1.735 ms/op [Average]
  (min, avg, max) = (1.680, 2.191, 2.792), stdev = 0.450
  CI (99.9%): [0.456, 3.925] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 88.80% complete, ETA 01:16:30
# Fork: 1 of 1
# Warmup Iteration   1: 2.091 ms/op
# Warmup Iteration   2: 1.620 ms/op
# Warmup Iteration   3: 1.718 ms/op
# Warmup Iteration   4: 1.761 ms/op
# Warmup Iteration   5: 1.789 ms/op
Iteration   1: 1.712 ms/op
Iteration   2: 2.047 ms/op
Iteration   3: 2.902 ms/op
Iteration   4: 2.301 ms/op
Iteration   5: 2.370 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.266 ±(99.9%) 1.690 ms/op [Average]
  (min, avg, max) = (1.712, 2.266, 2.902), stdev = 0.439
  CI (99.9%): [0.576, 3.957] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 88.89% complete, ETA 01:15:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 88.97% complete, ETA 01:15:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 89.06% complete, ETA 01:14:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 89.14% complete, ETA 01:14:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 89.23% complete, ETA 01:13:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 89.31% complete, ETA 01:12:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 89.39% complete, ETA 01:12:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 89.48% complete, ETA 01:11:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 89.56% complete, ETA 01:10:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 89.65% complete, ETA 01:10:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 89.73% complete, ETA 01:09:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 89.81% complete, ETA 01:09:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 89.90% complete, ETA 01:08:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 89.98% complete, ETA 01:07:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 90.07% complete, ETA 01:07:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.007 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [? 10??, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 90.15% complete, ETA 01:06:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 90.24% complete, ETA 01:05:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.001
  CI (99.9%): [? 10?³, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 90.32% complete, ETA 01:05:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 10?³, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 90.40% complete, ETA 01:04:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.013 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.017), stdev = 0.004
  CI (99.9%): [? 0, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 90.49% complete, ETA 01:04:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.012 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.016), stdev = 0.003
  CI (99.9%): [0.001, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 90.57% complete, ETA 01:03:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.012 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.016), stdev = 0.003
  CI (99.9%): [? 0, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 90.66% complete, ETA 01:02:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.012 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.016), stdev = 0.003
  CI (99.9%): [? 10?³, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 90.74% complete, ETA 01:02:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.012 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.019), stdev = 0.004
  CI (99.9%): [? 0, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 90.82% complete, ETA 01:01:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.013 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.016), stdev = 0.003
  CI (99.9%): [0.003, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 90.91% complete, ETA 01:01:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.027 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.019, 0.027, 0.037), stdev = 0.009
  CI (99.9%): [? 0, 0.060] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 90.99% complete, ETA 01:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.027 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.019, 0.027, 0.037), stdev = 0.008
  CI (99.9%): [? 0, 0.059] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 91.08% complete, ETA 00:59:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.027 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.020, 0.027, 0.036), stdev = 0.008
  CI (99.9%): [? 0, 0.057] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 91.16% complete, ETA 00:59:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.031 ±(99.9%) 0.042 ms/op [Average]
  (min, avg, max) = (0.020, 0.031, 0.047), stdev = 0.011
  CI (99.9%): [? 0, 0.073] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 91.25% complete, ETA 00:58:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.028 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.020, 0.028, 0.035), stdev = 0.007
  CI (99.9%): [? 0, 0.055] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 91.33% complete, ETA 00:58:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.026 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.019, 0.026, 0.033), stdev = 0.006
  CI (99.9%): [0.004, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 91.41% complete, ETA 00:57:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.038 ms/op
# Warmup Iteration   3: 0.038 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.076 ms/op
Iteration   5: 0.069 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.057 ±(99.9%) 0.056 ms/op [Average]
  (min, avg, max) = (0.044, 0.057, 0.076), stdev = 0.015
  CI (99.9%): [0.001, 0.114] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 91.50% complete, ETA 00:56:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
# Warmup Iteration   2: 0.040 ms/op
# Warmup Iteration   3: 0.041 ms/op
# Warmup Iteration   4: 0.043 ms/op
# Warmup Iteration   5: 0.042 ms/op
Iteration   1: 0.041 ms/op
Iteration   2: 0.041 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.070 ms/op
Iteration   5: 0.070 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.054 ±(99.9%) 0.056 ms/op [Average]
  (min, avg, max) = (0.041, 0.054, 0.070), stdev = 0.015
  CI (99.9%): [? 0, 0.111] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 91.58% complete, ETA 00:56:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.039 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.038 ms/op
# Warmup Iteration   5: 0.039 ms/op
Iteration   1: 0.038 ms/op
Iteration   2: 0.038 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.069 ms/op
Iteration   5: 0.068 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.052 ±(99.9%) 0.059 ms/op [Average]
  (min, avg, max) = (0.038, 0.052, 0.069), stdev = 0.015
  CI (99.9%): [? 0, 0.111] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 91.67% complete, ETA 00:55:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.039 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.039 ms/op
Iteration   1: 0.039 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.060 ms/op
Iteration   5: 0.071 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.051 ±(99.9%) 0.054 ms/op [Average]
  (min, avg, max) = (0.039, 0.051, 0.071), stdev = 0.014
  CI (99.9%): [? 0, 0.105] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 91.75% complete, ETA 00:55:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.038 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.037 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.046 ms/op
Iteration   4: 0.064 ms/op
Iteration   5: 0.062 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.049 ±(99.9%) 0.051 ms/op [Average]
  (min, avg, max) = (0.037, 0.049, 0.064), stdev = 0.013
  CI (99.9%): [? 0, 0.100] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 91.84% complete, ETA 00:54:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
# Warmup Iteration   2: 0.039 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.043 ms/op
Iteration   3: 0.054 ms/op
Iteration   4: 0.070 ms/op
Iteration   5: 0.066 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.055 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (0.043, 0.055, 0.070), stdev = 0.012
  CI (99.9%): [0.008, 0.103] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 91.92% complete, ETA 00:53:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.088 ms/op
# Warmup Iteration   2: 0.074 ms/op
# Warmup Iteration   3: 0.074 ms/op
# Warmup Iteration   4: 0.094 ms/op
# Warmup Iteration   5: 0.087 ms/op
Iteration   1: 0.081 ms/op
Iteration   2: 0.077 ms/op
Iteration   3: 0.099 ms/op
Iteration   4: 0.128 ms/op
Iteration   5: 0.125 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.102 ±(99.9%) 0.092 ms/op [Average]
  (min, avg, max) = (0.077, 0.102, 0.128), stdev = 0.024
  CI (99.9%): [0.010, 0.194] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 92.00% complete, ETA 00:53:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.078 ms/op
# Warmup Iteration   3: 0.124 ms/op
# Warmup Iteration   4: 0.086 ms/op
# Warmup Iteration   5: 0.079 ms/op
Iteration   1: 0.080 ms/op
Iteration   2: 0.075 ms/op
Iteration   3: 0.101 ms/op
Iteration   4: 0.110 ms/op
Iteration   5: 0.115 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.096 ±(99.9%) 0.069 ms/op [Average]
  (min, avg, max) = (0.075, 0.096, 0.115), stdev = 0.018
  CI (99.9%): [0.027, 0.166] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 92.09% complete, ETA 00:52:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ms/op
# Warmup Iteration   2: 0.075 ms/op
# Warmup Iteration   3: 0.074 ms/op
# Warmup Iteration   4: 0.085 ms/op
# Warmup Iteration   5: 0.078 ms/op
Iteration   1: 0.074 ms/op
Iteration   2: 0.074 ms/op
Iteration   3: 0.092 ms/op
Iteration   4: 0.155 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.104 ±(99.9%) 0.138 ms/op [Average]
  (min, avg, max) = (0.074, 0.104, 0.155), stdev = 0.036
  CI (99.9%): [? 0, 0.242] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 92.17% complete, ETA 00:52:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.082 ms/op
# Warmup Iteration   2: 0.070 ms/op
# Warmup Iteration   3: 0.073 ms/op
# Warmup Iteration   4: 0.072 ms/op
# Warmup Iteration   5: 0.078 ms/op
Iteration   1: 0.078 ms/op
Iteration   2: 0.074 ms/op
Iteration   3: 0.101 ms/op
Iteration   4: 0.121 ms/op
Iteration   5: 0.120 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.099 ±(99.9%) 0.087 ms/op [Average]
  (min, avg, max) = (0.074, 0.099, 0.121), stdev = 0.022
  CI (99.9%): [0.012, 0.185] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 92.26% complete, ETA 00:51:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.095 ms/op
# Warmup Iteration   2: 0.072 ms/op
# Warmup Iteration   3: 0.083 ms/op
# Warmup Iteration   4: 0.080 ms/op
# Warmup Iteration   5: 0.072 ms/op
Iteration   1: 0.074 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.092 ms/op
Iteration   4: 0.117 ms/op
Iteration   5: 0.128 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.096 ±(99.9%) 0.097 ms/op [Average]
  (min, avg, max) = (0.072, 0.096, 0.128), stdev = 0.025
  CI (99.9%): [? 0, 0.193] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 92.34% complete, ETA 00:50:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.097 ms/op
# Warmup Iteration   2: 0.079 ms/op
# Warmup Iteration   3: 0.068 ms/op
# Warmup Iteration   4: 0.077 ms/op
# Warmup Iteration   5: 0.085 ms/op
Iteration   1: 0.072 ms/op
Iteration   2: 0.071 ms/op
Iteration   3: 0.091 ms/op
Iteration   4: 0.105 ms/op
Iteration   5: 0.108 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.089 ±(99.9%) 0.067 ms/op [Average]
  (min, avg, max) = (0.071, 0.089, 0.108), stdev = 0.017
  CI (99.9%): [0.022, 0.156] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 92.42% complete, ETA 00:50:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.193 ms/op
# Warmup Iteration   2: 0.156 ms/op
# Warmup Iteration   3: 0.173 ms/op
# Warmup Iteration   4: 0.181 ms/op
# Warmup Iteration   5: 0.176 ms/op
Iteration   1: 0.158 ms/op
Iteration   2: 0.159 ms/op
Iteration   3: 0.180 ms/op
Iteration   4: 0.255 ms/op
Iteration   5: 0.232 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.197 ±(99.9%) 0.171 ms/op [Average]
  (min, avg, max) = (0.158, 0.197, 0.255), stdev = 0.044
  CI (99.9%): [0.026, 0.368] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 92.51% complete, ETA 00:49:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.172 ms/op
# Warmup Iteration   2: 0.141 ms/op
# Warmup Iteration   3: 0.139 ms/op
# Warmup Iteration   4: 0.133 ms/op
# Warmup Iteration   5: 0.130 ms/op
Iteration   1: 0.139 ms/op
Iteration   2: 0.144 ms/op
Iteration   3: 0.200 ms/op
Iteration   4: 0.237 ms/op
Iteration   5: 0.239 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.192 ±(99.9%) 0.188 ms/op [Average]
  (min, avg, max) = (0.139, 0.192, 0.239), stdev = 0.049
  CI (99.9%): [0.004, 0.380] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 92.59% complete, ETA 00:49:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.223 ms/op
# Warmup Iteration   2: 0.178 ms/op
# Warmup Iteration   3: 0.185 ms/op
# Warmup Iteration   4: 0.167 ms/op
# Warmup Iteration   5: 0.192 ms/op
Iteration   1: 0.186 ms/op
Iteration   2: 0.171 ms/op
Iteration   3: 0.209 ms/op
Iteration   4: 0.275 ms/op
Iteration   5: 0.288 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.226 ±(99.9%) 0.203 ms/op [Average]
  (min, avg, max) = (0.171, 0.226, 0.288), stdev = 0.053
  CI (99.9%): [0.023, 0.429] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 92.68% complete, ETA 00:48:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.184 ms/op
# Warmup Iteration   2: 0.147 ms/op
# Warmup Iteration   3: 0.157 ms/op
# Warmup Iteration   4: 0.166 ms/op
# Warmup Iteration   5: 0.163 ms/op
Iteration   1: 0.162 ms/op
Iteration   2: 0.166 ms/op
Iteration   3: 0.199 ms/op
Iteration   4: 0.255 ms/op
Iteration   5: 0.255 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.207 ±(99.9%) 0.177 ms/op [Average]
  (min, avg, max) = (0.162, 0.207, 0.255), stdev = 0.046
  CI (99.9%): [0.031, 0.384] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 92.76% complete, ETA 00:48:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.225 ms/op
# Warmup Iteration   2: 0.149 ms/op
# Warmup Iteration   3: 0.154 ms/op
# Warmup Iteration   4: 0.150 ms/op
# Warmup Iteration   5: 0.146 ms/op
Iteration   1: 0.162 ms/op
Iteration   2: 0.159 ms/op
Iteration   3: 0.209 ms/op
Iteration   4: 0.229 ms/op
Iteration   5: 0.258 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.203 ±(99.9%) 0.165 ms/op [Average]
  (min, avg, max) = (0.159, 0.203, 0.258), stdev = 0.043
  CI (99.9%): [0.039, 0.368] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 92.85% complete, ETA 00:47:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.207 ms/op
# Warmup Iteration   2: 0.162 ms/op
# Warmup Iteration   3: 0.163 ms/op
# Warmup Iteration   4: 0.148 ms/op
# Warmup Iteration   5: 0.145 ms/op
Iteration   1: 0.152 ms/op
Iteration   2: 0.160 ms/op
Iteration   3: 0.203 ms/op
Iteration   4: 0.264 ms/op
Iteration   5: 0.250 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.206 ±(99.9%) 0.196 ms/op [Average]
  (min, avg, max) = (0.152, 0.206, 0.264), stdev = 0.051
  CI (99.9%): [0.010, 0.402] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 92.93% complete, ETA 00:46:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.368 ms/op
# Warmup Iteration   2: 0.309 ms/op
# Warmup Iteration   3: 0.294 ms/op
# Warmup Iteration   4: 0.295 ms/op
# Warmup Iteration   5: 0.292 ms/op
Iteration   1: 0.291 ms/op
Iteration   2: 0.299 ms/op
Iteration   3: 0.366 ms/op
Iteration   4: 0.504 ms/op
Iteration   5: 0.502 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.392 ±(99.9%) 0.405 ms/op [Average]
  (min, avg, max) = (0.291, 0.392, 0.504), stdev = 0.105
  CI (99.9%): [? 0, 0.797] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 93.01% complete, ETA 00:46:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.351 ms/op
# Warmup Iteration   2: 0.297 ms/op
# Warmup Iteration   3: 0.300 ms/op
# Warmup Iteration   4: 0.288 ms/op
# Warmup Iteration   5: 0.287 ms/op
Iteration   1: 0.288 ms/op
Iteration   2: 0.288 ms/op
Iteration   3: 0.351 ms/op
Iteration   4: 0.514 ms/op
Iteration   5: 0.436 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.376 ±(99.9%) 0.379 ms/op [Average]
  (min, avg, max) = (0.288, 0.376, 0.514), stdev = 0.098
  CI (99.9%): [? 0, 0.755] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 93.10% complete, ETA 00:45:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.367 ms/op
# Warmup Iteration   2: 0.293 ms/op
# Warmup Iteration   3: 0.304 ms/op
# Warmup Iteration   4: 0.299 ms/op
# Warmup Iteration   5: 0.296 ms/op
Iteration   1: 0.294 ms/op
Iteration   2: 0.333 ms/op
Iteration   3: 0.468 ms/op
Iteration   4: 0.496 ms/op
Iteration   5: 0.563 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.431 ±(99.9%) 0.435 ms/op [Average]
  (min, avg, max) = (0.294, 0.431, 0.563), stdev = 0.113
  CI (99.9%): [? 0, 0.866] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 93.18% complete, ETA 00:45:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.373 ms/op
# Warmup Iteration   2: 0.301 ms/op
# Warmup Iteration   3: 0.308 ms/op
# Warmup Iteration   4: 0.316 ms/op
# Warmup Iteration   5: 0.310 ms/op
Iteration   1: 0.302 ms/op
Iteration   2: 0.335 ms/op
Iteration   3: 0.365 ms/op
Iteration   4: 0.498 ms/op
Iteration   5: 0.492 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.398 ±(99.9%) 0.351 ms/op [Average]
  (min, avg, max) = (0.302, 0.398, 0.498), stdev = 0.091
  CI (99.9%): [0.047, 0.749] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 93.27% complete, ETA 00:44:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.425 ms/op
# Warmup Iteration   2: 0.322 ms/op
# Warmup Iteration   3: 0.308 ms/op
# Warmup Iteration   4: 0.272 ms/op
# Warmup Iteration   5: 0.316 ms/op
Iteration   1: 0.299 ms/op
Iteration   2: 0.306 ms/op
Iteration   3: 0.395 ms/op
Iteration   4: 0.493 ms/op
Iteration   5: 0.511 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.401 ±(99.9%) 0.385 ms/op [Average]
  (min, avg, max) = (0.299, 0.401, 0.511), stdev = 0.100
  CI (99.9%): [0.015, 0.786] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 93.35% complete, ETA 00:43:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.395 ms/op
# Warmup Iteration   2: 0.294 ms/op
# Warmup Iteration   3: 0.306 ms/op
# Warmup Iteration   4: 0.288 ms/op
# Warmup Iteration   5: 0.289 ms/op
Iteration   1: 0.290 ms/op
Iteration   2: 0.287 ms/op
Iteration   3: 0.414 ms/op
Iteration   4: 0.502 ms/op
Iteration   5: 0.480 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.395 ±(99.9%) 0.394 ms/op [Average]
  (min, avg, max) = (0.287, 0.395, 0.502), stdev = 0.102
  CI (99.9%): [0.001, 0.789] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 93.43% complete, ETA 00:43:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.758 ms/op
# Warmup Iteration   2: 0.626 ms/op
# Warmup Iteration   3: 0.632 ms/op
# Warmup Iteration   4: 0.609 ms/op
# Warmup Iteration   5: 0.611 ms/op
Iteration   1: 0.615 ms/op
Iteration   2: 0.690 ms/op
Iteration   3: 0.920 ms/op
Iteration   4: 1.330 ms/op
Iteration   5: 1.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.914 ±(99.9%) 1.094 ms/op [Average]
  (min, avg, max) = (0.615, 0.914, 1.330), stdev = 0.284
  CI (99.9%): [? 0, 2.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 93.52% complete, ETA 00:42:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.786 ms/op
# Warmup Iteration   2: 0.678 ms/op
# Warmup Iteration   3: 0.684 ms/op
# Warmup Iteration   4: 0.739 ms/op
# Warmup Iteration   5: 0.790 ms/op
Iteration   1: 0.748 ms/op
Iteration   2: 0.746 ms/op
Iteration   3: 1.066 ms/op
Iteration   4: 1.248 ms/op
Iteration   5: 1.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.962 ±(99.9%) 0.832 ms/op [Average]
  (min, avg, max) = (0.746, 0.962, 1.248), stdev = 0.216
  CI (99.9%): [0.131, 1.794] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 93.60% complete, ETA 00:42:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.757 ms/op
# Warmup Iteration   2: 0.646 ms/op
# Warmup Iteration   3: 0.804 ms/op
# Warmup Iteration   4: 0.744 ms/op
# Warmup Iteration   5: 0.734 ms/op
Iteration   1: 0.716 ms/op
Iteration   2: 0.713 ms/op
Iteration   3: 0.899 ms/op
Iteration   4: 1.306 ms/op
Iteration   5: 1.066 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.940 ±(99.9%) 0.968 ms/op [Average]
  (min, avg, max) = (0.713, 0.940, 1.306), stdev = 0.251
  CI (99.9%): [? 0, 1.908] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 93.69% complete, ETA 00:41:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.772 ms/op
# Warmup Iteration   2: 0.647 ms/op
# Warmup Iteration   3: 0.673 ms/op
# Warmup Iteration   4: 0.678 ms/op
# Warmup Iteration   5: 0.683 ms/op
Iteration   1: 0.676 ms/op
Iteration   2: 0.682 ms/op
Iteration   3: 0.833 ms/op
Iteration   4: 1.145 ms/op
Iteration   5: 1.010 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.869 ±(99.9%) 0.793 ms/op [Average]
  (min, avg, max) = (0.676, 0.869, 1.145), stdev = 0.206
  CI (99.9%): [0.077, 1.662] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 93.77% complete, ETA 00:41:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.888 ms/op
# Warmup Iteration   2: 0.702 ms/op
# Warmup Iteration   3: 0.684 ms/op
# Warmup Iteration   4: 0.700 ms/op
# Warmup Iteration   5: 0.716 ms/op
Iteration   1: 0.690 ms/op
Iteration   2: 0.698 ms/op
Iteration   3: 1.001 ms/op
Iteration   4: 1.203 ms/op
Iteration   5: 0.993 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.917 ±(99.9%) 0.849 ms/op [Average]
  (min, avg, max) = (0.690, 0.917, 1.203), stdev = 0.220
  CI (99.9%): [0.068, 1.766] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 93.86% complete, ETA 00:40:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.999 ms/op
# Warmup Iteration   2: 0.693 ms/op
# Warmup Iteration   3: 0.771 ms/op
# Warmup Iteration   4: 0.802 ms/op
# Warmup Iteration   5: 0.898 ms/op
Iteration   1: 0.808 ms/op
Iteration   2: 0.705 ms/op
Iteration   3: 1.280 ms/op
Iteration   4: 1.831 ms/op
Iteration   5: 1.458 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.216 ±(99.9%) 1.794 ms/op [Average]
  (min, avg, max) = (0.705, 1.216, 1.831), stdev = 0.466
  CI (99.9%): [? 0, 3.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 93.94% complete, ETA 00:39:50
# Fork: 1 of 1
# Warmup Iteration   1: 2.826 ms/op
# Warmup Iteration   2: 1.974 ms/op
# Warmup Iteration   3: 1.821 ms/op
# Warmup Iteration   4: 1.783 ms/op
# Warmup Iteration   5: 1.584 ms/op
Iteration   1: 1.488 ms/op
Iteration   2: 1.440 ms/op
Iteration   3: 1.873 ms/op
Iteration   4: 2.339 ms/op
Iteration   5: 1.937 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.815 ±(99.9%) 1.415 ms/op [Average]
  (min, avg, max) = (1.440, 1.815, 2.339), stdev = 0.367
  CI (99.9%): [0.400, 3.230] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 94.02% complete, ETA 00:39:16
# Fork: 1 of 1
# Warmup Iteration   1: 1.387 ms/op
# Warmup Iteration   2: 1.269 ms/op
# Warmup Iteration   3: 1.391 ms/op
# Warmup Iteration   4: 1.360 ms/op
# Warmup Iteration   5: 1.328 ms/op
Iteration   1: 1.292 ms/op
Iteration   2: 1.690 ms/op
Iteration   3: 1.649 ms/op
Iteration   4: 2.697 ms/op
Iteration   5: 2.689 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  2.003 ±(99.9%) 2.496 ms/op [Average]
  (min, avg, max) = (1.292, 2.003, 2.697), stdev = 0.648
  CI (99.9%): [? 0, 4.499] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 94.11% complete, ETA 00:38:41
# Fork: 1 of 1
# Warmup Iteration   1: 1.906 ms/op
# Warmup Iteration   2: 1.441 ms/op
# Warmup Iteration   3: 1.194 ms/op
# Warmup Iteration   4: 1.304 ms/op
# Warmup Iteration   5: 1.245 ms/op
Iteration   1: 1.261 ms/op
Iteration   2: 1.389 ms/op
Iteration   3: 1.518 ms/op
Iteration   4: 1.932 ms/op
Iteration   5: 2.093 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.638 ±(99.9%) 1.377 ms/op [Average]
  (min, avg, max) = (1.261, 1.638, 2.093), stdev = 0.357
  CI (99.9%): [0.262, 3.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 94.19% complete, ETA 00:38:07
# Fork: 1 of 1
# Warmup Iteration   1: 1.451 ms/op
# Warmup Iteration   2: 1.196 ms/op
# Warmup Iteration   3: 1.218 ms/op
# Warmup Iteration   4: 1.400 ms/op
# Warmup Iteration   5: 1.605 ms/op
Iteration   1: 1.413 ms/op
Iteration   2: 1.324 ms/op
Iteration   3: 1.492 ms/op
Iteration   4: 2.113 ms/op
Iteration   5: 2.145 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.698 ±(99.9%) 1.534 ms/op [Average]
  (min, avg, max) = (1.324, 1.698, 2.145), stdev = 0.398
  CI (99.9%): [0.164, 3.231] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 94.28% complete, ETA 00:37:32
# Fork: 1 of 1
# Warmup Iteration   1: 1.632 ms/op
# Warmup Iteration   2: 1.289 ms/op
# Warmup Iteration   3: 1.230 ms/op
# Warmup Iteration   4: 1.241 ms/op
# Warmup Iteration   5: 1.324 ms/op
Iteration   1: 1.458 ms/op
Iteration   2: 1.191 ms/op
Iteration   3: 1.522 ms/op
Iteration   4: 1.743 ms/op
Iteration   5: 2.050 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.593 ±(99.9%) 1.242 ms/op [Average]
  (min, avg, max) = (1.191, 1.593, 2.050), stdev = 0.323
  CI (99.9%): [0.351, 2.835] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 94.36% complete, ETA 00:36:58
# Fork: 1 of 1
# Warmup Iteration   1: 1.482 ms/op
# Warmup Iteration   2: 1.118 ms/op
# Warmup Iteration   3: 1.087 ms/op
# Warmup Iteration   4: 1.247 ms/op
# Warmup Iteration   5: 1.123 ms/op
Iteration   1: 1.067 ms/op
Iteration   2: 1.062 ms/op
Iteration   3: 1.469 ms/op
Iteration   4: 1.693 ms/op
Iteration   5: 1.575 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.373 ±(99.9%) 1.127 ms/op [Average]
  (min, avg, max) = (1.062, 1.373, 1.693), stdev = 0.293
  CI (99.9%): [0.246, 2.500] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 94.44% complete, ETA 00:36:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 94.53% complete, ETA 00:35:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 94.61% complete, ETA 00:35:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 94.70% complete, ETA 00:34:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 94.78% complete, ETA 00:34:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 94.87% complete, ETA 00:33:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 94.95% complete, ETA 00:32:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 95.03% complete, ETA 00:32:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 95.12% complete, ETA 00:31:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 95.20% complete, ETA 00:31:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 95.29% complete, ETA 00:30:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 95.37% complete, ETA 00:30:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 95.45% complete, ETA 00:29:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.007 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [0.001, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 95.54% complete, ETA 00:29:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.007 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.008), stdev = 0.001
  CI (99.9%): [0.002, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 95.62% complete, ETA 00:28:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 95.71% complete, ETA 00:27:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.007 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [? 10?³, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 95.79% complete, ETA 00:27:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.009 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.011), stdev = 0.002
  CI (99.9%): [0.002, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 95.88% complete, ETA 00:26:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.008 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [0.002, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 95.96% complete, ETA 00:26:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.013 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.017), stdev = 0.003
  CI (99.9%): [0.002, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 96.04% complete, ETA 00:25:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.014 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.010, 0.014, 0.018), stdev = 0.004
  CI (99.9%): [? 10??, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 96.13% complete, ETA 00:25:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.014 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.010, 0.014, 0.019), stdev = 0.004
  CI (99.9%): [? 0, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 96.21% complete, ETA 00:24:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.014 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.010, 0.014, 0.017), stdev = 0.003
  CI (99.9%): [0.001, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 96.30% complete, ETA 00:23:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.014 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.010, 0.014, 0.018), stdev = 0.004
  CI (99.9%): [? 0, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 96.38% complete, ETA 00:23:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.013 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.015), stdev = 0.003
  CI (99.9%): [0.001, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 96.46% complete, ETA 00:22:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.030 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.026, 0.030, 0.036), stdev = 0.005
  CI (99.9%): [0.012, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 96.55% complete, ETA 00:22:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.028 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.022, 0.028, 0.034), stdev = 0.006
  CI (99.9%): [0.004, 0.051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 96.63% complete, ETA 00:21:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.025 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.020, 0.025, 0.030), stdev = 0.005
  CI (99.9%): [0.004, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 96.72% complete, ETA 00:21:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.026 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.020, 0.026, 0.033), stdev = 0.006
  CI (99.9%): [0.004, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 96.80% complete, ETA 00:20:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.028 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.020, 0.028, 0.035), stdev = 0.007
  CI (99.9%): [0.001, 0.055] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 96.89% complete, ETA 00:20:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.027 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.022, 0.027, 0.033), stdev = 0.005
  CI (99.9%): [0.008, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 96.97% complete, ETA 00:19:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.041 ms/op
# Warmup Iteration   3: 0.047 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.041 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.065 ms/op
Iteration   5: 0.063 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.053 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.041, 0.053, 0.065), stdev = 0.011
  CI (99.9%): [0.013, 0.094] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 97.05% complete, ETA 00:18:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.040 ms/op
# Warmup Iteration   4: 0.039 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.041 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.072 ms/op
Iteration   5: 0.071 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.055 ±(99.9%) 0.058 ms/op [Average]
  (min, avg, max) = (0.041, 0.055, 0.072), stdev = 0.015
  CI (99.9%): [? 0, 0.114] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 97.14% complete, ETA 00:18:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.052 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.071 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.055 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.050, 0.055, 0.071), stdev = 0.009
  CI (99.9%): [0.021, 0.089] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 97.22% complete, ETA 00:17:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.042 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.069 ms/op
# Warmup Iteration   5: 0.051 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.094 ms/op
Iteration   4: 0.135 ms/op
Iteration   5: 0.133 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.094 ±(99.9%) 0.152 ms/op [Average]
  (min, avg, max) = (0.053, 0.094, 0.135), stdev = 0.040
  CI (99.9%): [? 0, 0.247] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 97.31% complete, ETA 00:17:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.364 ms/op
# Warmup Iteration   2: 0.168 ms/op
# Warmup Iteration   3: 0.135 ms/op
# Warmup Iteration   4: 0.116 ms/op
# Warmup Iteration   5: 0.068 ms/op
Iteration   1: 0.081 ms/op
Iteration   2: 0.077 ms/op
Iteration   3: 0.063 ms/op
Iteration   4: 0.071 ms/op
Iteration   5: 0.061 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.071 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.061, 0.071, 0.081), stdev = 0.009
  CI (99.9%): [0.038, 0.104] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 97.39% complete, ETA 00:16:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.072 ms/op
Iteration   5: 0.064 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.057 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.047, 0.057, 0.072), stdev = 0.011
  CI (99.9%): [0.016, 0.099] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 97.47% complete, ETA 00:16:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.114 ms/op
# Warmup Iteration   2: 0.084 ms/op
# Warmup Iteration   3: 0.090 ms/op
# Warmup Iteration   4: 0.108 ms/op
# Warmup Iteration   5: 0.079 ms/op
Iteration   1: 0.073 ms/op
Iteration   2: 0.070 ms/op
Iteration   3: 0.077 ms/op
Iteration   4: 0.122 ms/op
Iteration   5: 0.125 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.094 ±(99.9%) 0.106 ms/op [Average]
  (min, avg, max) = (0.070, 0.094, 0.125), stdev = 0.027
  CI (99.9%): [? 0, 0.199] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 97.56% complete, ETA 00:15:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.110 ms/op
# Warmup Iteration   2: 0.089 ms/op
# Warmup Iteration   3: 0.116 ms/op
# Warmup Iteration   4: 0.170 ms/op
# Warmup Iteration   5: 0.139 ms/op
Iteration   1: 0.105 ms/op
Iteration   2: 0.095 ms/op
Iteration   3: 0.120 ms/op
Iteration   4: 0.197 ms/op
Iteration   5: 0.195 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.142 ±(99.9%) 0.192 ms/op [Average]
  (min, avg, max) = (0.095, 0.142, 0.197), stdev = 0.050
  CI (99.9%): [? 0, 0.334] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 97.64% complete, ETA 00:15:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.163 ms/op
# Warmup Iteration   2: 0.117 ms/op
# Warmup Iteration   3: 0.117 ms/op
# Warmup Iteration   4: 0.112 ms/op
# Warmup Iteration   5: 0.111 ms/op
Iteration   1: 0.144 ms/op
Iteration   2: 0.140 ms/op
Iteration   3: 0.175 ms/op
Iteration   4: 0.173 ms/op
Iteration   5: 0.165 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.159 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.140, 0.159, 0.175), stdev = 0.016
  CI (99.9%): [0.096, 0.223] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 97.73% complete, ETA 00:14:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.138 ms/op
# Warmup Iteration   2: 0.122 ms/op
# Warmup Iteration   3: 0.128 ms/op
# Warmup Iteration   4: 0.166 ms/op
# Warmup Iteration   5: 0.121 ms/op
Iteration   1: 0.126 ms/op
Iteration   2: 0.136 ms/op
Iteration   3: 0.187 ms/op
Iteration   4: 0.213 ms/op
Iteration   5: 0.161 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.164 ±(99.9%) 0.137 ms/op [Average]
  (min, avg, max) = (0.126, 0.164, 0.213), stdev = 0.036
  CI (99.9%): [0.027, 0.302] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 97.81% complete, ETA 00:14:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.153 ms/op
# Warmup Iteration   2: 0.116 ms/op
# Warmup Iteration   3: 0.110 ms/op
# Warmup Iteration   4: 0.101 ms/op
# Warmup Iteration   5: 0.108 ms/op
Iteration   1: 0.113 ms/op
Iteration   2: 0.117 ms/op
Iteration   3: 0.138 ms/op
Iteration   4: 0.141 ms/op
Iteration   5: 0.140 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.130 ±(99.9%) 0.051 ms/op [Average]
  (min, avg, max) = (0.113, 0.130, 0.141), stdev = 0.013
  CI (99.9%): [0.079, 0.181] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 97.90% complete, ETA 00:13:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.141 ms/op
# Warmup Iteration   2: 0.098 ms/op
# Warmup Iteration   3: 0.115 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.101 ms/op
Iteration   1: 0.106 ms/op
Iteration   2: 0.112 ms/op
Iteration   3: 0.148 ms/op
Iteration   4: 0.147 ms/op
Iteration   5: 0.139 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.130 ±(99.9%) 0.077 ms/op [Average]
  (min, avg, max) = (0.106, 0.130, 0.148), stdev = 0.020
  CI (99.9%): [0.053, 0.207] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 97.98% complete, ETA 00:12:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.233 ms/op
# Warmup Iteration   2: 0.207 ms/op
# Warmup Iteration   3: 0.214 ms/op
# Warmup Iteration   4: 0.196 ms/op
# Warmup Iteration   5: 0.186 ms/op
Iteration   1: 0.185 ms/op
Iteration   2: 0.184 ms/op
Iteration   3: 0.210 ms/op
Iteration   4: 0.287 ms/op
Iteration   5: 0.263 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.225 ±(99.9%) 0.181 ms/op [Average]
  (min, avg, max) = (0.184, 0.225, 0.287), stdev = 0.047
  CI (99.9%): [0.045, 0.406] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 98.06% complete, ETA 00:12:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.255 ms/op
# Warmup Iteration   2: 0.202 ms/op
# Warmup Iteration   3: 0.210 ms/op
# Warmup Iteration   4: 0.225 ms/op
# Warmup Iteration   5: 0.216 ms/op
Iteration   1: 0.205 ms/op
Iteration   2: 0.204 ms/op
Iteration   3: 0.232 ms/op
Iteration   4: 0.275 ms/op
Iteration   5: 0.316 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.247 ±(99.9%) 0.187 ms/op [Average]
  (min, avg, max) = (0.204, 0.247, 0.316), stdev = 0.048
  CI (99.9%): [0.060, 0.433] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 98.15% complete, ETA 00:11:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.276 ms/op
# Warmup Iteration   2: 0.186 ms/op
# Warmup Iteration   3: 0.192 ms/op
# Warmup Iteration   4: 0.195 ms/op
# Warmup Iteration   5: 0.188 ms/op
Iteration   1: 0.194 ms/op
Iteration   2: 0.189 ms/op
Iteration   3: 0.218 ms/op
Iteration   4: 0.303 ms/op
Iteration   5: 0.281 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.237 ±(99.9%) 0.201 ms/op [Average]
  (min, avg, max) = (0.189, 0.237, 0.303), stdev = 0.052
  CI (99.9%): [0.036, 0.438] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 98.23% complete, ETA 00:11:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.227 ms/op
# Warmup Iteration   2: 0.189 ms/op
# Warmup Iteration   3: 0.198 ms/op
# Warmup Iteration   4: 0.193 ms/op
# Warmup Iteration   5: 0.191 ms/op
Iteration   1: 0.190 ms/op
Iteration   2: 0.198 ms/op
Iteration   3: 0.204 ms/op
Iteration   4: 0.305 ms/op
Iteration   5: 0.278 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.235 ±(99.9%) 0.202 ms/op [Average]
  (min, avg, max) = (0.190, 0.235, 0.305), stdev = 0.052
  CI (99.9%): [0.033, 0.437] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 98.32% complete, ETA 00:10:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.360 ms/op
# Warmup Iteration   2: 0.230 ms/op
# Warmup Iteration   3: 0.225 ms/op
# Warmup Iteration   4: 0.267 ms/op
# Warmup Iteration   5: 0.218 ms/op
Iteration   1: 0.270 ms/op
Iteration   2: 0.471 ms/op
Iteration   3: 0.349 ms/op
Iteration   4: 0.346 ms/op
Iteration   5: 0.360 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.360 ±(99.9%) 0.277 ms/op [Average]
  (min, avg, max) = (0.270, 0.360, 0.471), stdev = 0.072
  CI (99.9%): [0.082, 0.637] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 98.40% complete, ETA 00:10:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.310 ms/op
# Warmup Iteration   2: 0.197 ms/op
# Warmup Iteration   3: 0.202 ms/op
# Warmup Iteration   4: 0.188 ms/op
# Warmup Iteration   5: 0.181 ms/op
Iteration   1: 0.171 ms/op
Iteration   2: 0.248 ms/op
Iteration   3: 0.350 ms/op
Iteration   4: 0.281 ms/op
Iteration   5: 0.284 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.267 ±(99.9%) 0.250 ms/op [Average]
  (min, avg, max) = (0.171, 0.267, 0.350), stdev = 0.065
  CI (99.9%): [0.017, 0.517] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 98.48% complete, ETA 00:09:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.551 ms/op
# Warmup Iteration   2: 0.412 ms/op
# Warmup Iteration   3: 0.364 ms/op
# Warmup Iteration   4: 0.367 ms/op
# Warmup Iteration   5: 0.411 ms/op
Iteration   1: 0.405 ms/op
Iteration   2: 0.417 ms/op
Iteration   3: 0.573 ms/op
Iteration   4: 0.729 ms/op
Iteration   5: 0.584 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.542 ±(99.9%) 0.517 ms/op [Average]
  (min, avg, max) = (0.405, 0.542, 0.729), stdev = 0.134
  CI (99.9%): [0.024, 1.059] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 98.57% complete, ETA 00:09:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.468 ms/op
# Warmup Iteration   2: 0.534 ms/op
# Warmup Iteration   3: 0.499 ms/op
# Warmup Iteration   4: 0.615 ms/op
# Warmup Iteration   5: 0.429 ms/op
Iteration   1: 0.447 ms/op
Iteration   2: 0.450 ms/op
Iteration   3: 0.530 ms/op
Iteration   4: 0.676 ms/op
Iteration   5: 0.631 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.547 ±(99.9%) 0.401 ms/op [Average]
  (min, avg, max) = (0.447, 0.547, 0.676), stdev = 0.104
  CI (99.9%): [0.146, 0.948] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 98.65% complete, ETA 00:08:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.572 ms/op
# Warmup Iteration   2: 0.525 ms/op
# Warmup Iteration   3: 0.455 ms/op
# Warmup Iteration   4: 0.425 ms/op
# Warmup Iteration   5: 0.433 ms/op
Iteration   1: 0.446 ms/op
Iteration   2: 0.515 ms/op
Iteration   3: 0.663 ms/op
Iteration   4: 0.845 ms/op
Iteration   5: 0.778 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.650 ±(99.9%) 0.652 ms/op [Average]
  (min, avg, max) = (0.446, 0.650, 0.845), stdev = 0.169
  CI (99.9%): [? 0, 1.301] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 98.74% complete, ETA 00:08:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.607 ms/op
# Warmup Iteration   2: 0.653 ms/op
# Warmup Iteration   3: 0.436 ms/op
# Warmup Iteration   4: 0.460 ms/op
# Warmup Iteration   5: 0.457 ms/op
Iteration   1: 0.580 ms/op
Iteration   2: 0.492 ms/op
Iteration   3: 0.638 ms/op
Iteration   4: 0.636 ms/op
Iteration   5: 0.532 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.576 ±(99.9%) 0.247 ms/op [Average]
  (min, avg, max) = (0.492, 0.576, 0.638), stdev = 0.064
  CI (99.9%): [0.329, 0.822] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 98.82% complete, ETA 00:07:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.695 ms/op
# Warmup Iteration   2: 0.464 ms/op
# Warmup Iteration   3: 0.417 ms/op
# Warmup Iteration   4: 0.390 ms/op
# Warmup Iteration   5: 0.405 ms/op
Iteration   1: 0.370 ms/op
Iteration   2: 0.420 ms/op
Iteration   3: 0.678 ms/op
Iteration   4: 0.729 ms/op
Iteration   5: 0.663 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.572 ±(99.9%) 0.633 ms/op [Average]
  (min, avg, max) = (0.370, 0.572, 0.729), stdev = 0.164
  CI (99.9%): [? 0, 1.205] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 98.91% complete, ETA 00:06:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.639 ms/op
# Warmup Iteration   2: 0.369 ms/op
# Warmup Iteration   3: 0.424 ms/op
# Warmup Iteration   4: 0.384 ms/op
# Warmup Iteration   5: 0.356 ms/op
Iteration   1: 0.381 ms/op
Iteration   2: 0.448 ms/op
Iteration   3: 0.646 ms/op
Iteration   4: 0.511 ms/op
Iteration   5: 0.491 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.495 ±(99.9%) 0.377 ms/op [Average]
  (min, avg, max) = (0.381, 0.495, 0.646), stdev = 0.098
  CI (99.9%): [0.118, 0.872] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 98.99% complete, ETA 00:06:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.878 ms/op
# Warmup Iteration   2: 0.713 ms/op
# Warmup Iteration   3: 0.698 ms/op
# Warmup Iteration   4: 0.694 ms/op
# Warmup Iteration   5: 0.755 ms/op
Iteration   1: 0.873 ms/op
Iteration   2: 0.804 ms/op
Iteration   3: 0.887 ms/op
Iteration   4: 1.088 ms/op
Iteration   5: 1.020 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.934 ±(99.9%) 0.447 ms/op [Average]
  (min, avg, max) = (0.804, 0.934, 1.088), stdev = 0.116
  CI (99.9%): [0.487, 1.382] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 99.07% complete, ETA 00:05:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.871 ms/op
# Warmup Iteration   2: 0.786 ms/op
# Warmup Iteration   3: 0.879 ms/op
# Warmup Iteration   4: 0.720 ms/op
# Warmup Iteration   5: 0.712 ms/op
Iteration   1: 0.702 ms/op
Iteration   2: 0.708 ms/op
Iteration   3: 0.800 ms/op
Iteration   4: 0.998 ms/op
Iteration   5: 1.037 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.849 ±(99.9%) 0.613 ms/op [Average]
  (min, avg, max) = (0.702, 0.849, 1.037), stdev = 0.159
  CI (99.9%): [0.236, 1.462] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 99.16% complete, ETA 00:05:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.806 ms/op
# Warmup Iteration   2: 0.688 ms/op
# Warmup Iteration   3: 0.690 ms/op
# Warmup Iteration   4: 0.678 ms/op
# Warmup Iteration   5: 0.679 ms/op
Iteration   1: 0.680 ms/op
Iteration   2: 0.680 ms/op
Iteration   3: 0.764 ms/op
Iteration   4: 0.988 ms/op
Iteration   5: 0.987 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.820 ±(99.9%) 0.604 ms/op [Average]
  (min, avg, max) = (0.680, 0.820, 0.988), stdev = 0.157
  CI (99.9%): [0.216, 1.424] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 99.24% complete, ETA 00:04:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.831 ms/op
# Warmup Iteration   2: 0.706 ms/op
# Warmup Iteration   3: 0.701 ms/op
# Warmup Iteration   4: 0.751 ms/op
# Warmup Iteration   5: 0.778 ms/op
Iteration   1: 0.847 ms/op
Iteration   2: 0.866 ms/op
Iteration   3: 0.870 ms/op
Iteration   4: 1.053 ms/op
Iteration   5: 1.052 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.938 ±(99.9%) 0.405 ms/op [Average]
  (min, avg, max) = (0.847, 0.938, 1.053), stdev = 0.105
  CI (99.9%): [0.533, 1.342] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 99.33% complete, ETA 00:04:15
# Fork: 1 of 1
# Warmup Iteration   1: 1.088 ms/op
# Warmup Iteration   2: 0.684 ms/op
# Warmup Iteration   3: 0.703 ms/op
# Warmup Iteration   4: 0.675 ms/op
# Warmup Iteration   5: 0.678 ms/op
Iteration   1: 0.684 ms/op
Iteration   2: 0.686 ms/op
Iteration   3: 0.993 ms/op
Iteration   4: 0.963 ms/op
Iteration   5: 0.917 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.849 ±(99.9%) 0.584 ms/op [Average]
  (min, avg, max) = (0.684, 0.849, 0.993), stdev = 0.152
  CI (99.9%): [0.265, 1.433] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 99.41% complete, ETA 00:03:43
# Fork: 1 of 1
# Warmup Iteration   1: 1.074 ms/op
# Warmup Iteration   2: 0.749 ms/op
# Warmup Iteration   3: 0.740 ms/op
# Warmup Iteration   4: 0.755 ms/op
# Warmup Iteration   5: 0.772 ms/op
Iteration   1: 0.745 ms/op
Iteration   2: 0.719 ms/op
Iteration   3: 1.241 ms/op
Iteration   4: 0.991 ms/op
Iteration   5: 1.264 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.992 ±(99.9%) 1.003 ms/op [Average]
  (min, avg, max) = (0.719, 0.992, 1.264), stdev = 0.260
  CI (99.9%): [? 0, 1.995] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 99.49% complete, ETA 00:03:11
# Fork: 1 of 1
# Warmup Iteration   1: 2.377 ms/op
# Warmup Iteration   2: 1.558 ms/op
# Warmup Iteration   3: 1.520 ms/op
# Warmup Iteration   4: 1.673 ms/op
# Warmup Iteration   5: 1.604 ms/op
Iteration   1: 1.856 ms/op
Iteration   2: 1.699 ms/op
Iteration   3: 1.946 ms/op
Iteration   4: 2.417 ms/op
Iteration   5: 2.256 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  2.035 ±(99.9%) 1.135 ms/op [Average]
  (min, avg, max) = (1.699, 2.035, 2.417), stdev = 0.295
  CI (99.9%): [0.900, 3.170] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 99.58% complete, ETA 00:02:39
# Fork: 1 of 1
# Warmup Iteration   1: 2.111 ms/op
# Warmup Iteration   2: 1.806 ms/op
# Warmup Iteration   3: 1.752 ms/op
# Warmup Iteration   4: 1.730 ms/op
# Warmup Iteration   5: 1.696 ms/op
Iteration   1: 1.733 ms/op
Iteration   2: 1.682 ms/op
Iteration   3: 1.935 ms/op
Iteration   4: 2.485 ms/op
Iteration   5: 2.367 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  2.040 ±(99.9%) 1.413 ms/op [Average]
  (min, avg, max) = (1.682, 2.040, 2.485), stdev = 0.367
  CI (99.9%): [0.627, 3.453] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 99.66% complete, ETA 00:02:07
# Fork: 1 of 1
# Warmup Iteration   1: 2.088 ms/op
# Warmup Iteration   2: 1.698 ms/op
# Warmup Iteration   3: 1.658 ms/op
# Warmup Iteration   4: 1.639 ms/op
# Warmup Iteration   5: 1.688 ms/op
Iteration   1: 1.686 ms/op
Iteration   2: 1.651 ms/op
Iteration   3: 1.887 ms/op
Iteration   4: 2.462 ms/op
Iteration   5: 2.351 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  2.008 ±(99.9%) 1.454 ms/op [Average]
  (min, avg, max) = (1.651, 2.008, 2.462), stdev = 0.378
  CI (99.9%): [0.554, 3.461] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 99.75% complete, ETA 00:01:35
# Fork: 1 of 1
# Warmup Iteration   1: 1.821 ms/op
# Warmup Iteration   2: 1.655 ms/op
# Warmup Iteration   3: 1.544 ms/op
# Warmup Iteration   4: 1.543 ms/op
# Warmup Iteration   5: 1.522 ms/op
Iteration   1: 1.534 ms/op
Iteration   2: 1.542 ms/op
Iteration   3: 2.087 ms/op
Iteration   4: 2.434 ms/op
Iteration   5: 2.340 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.987 ±(99.9%) 1.654 ms/op [Average]
  (min, avg, max) = (1.534, 1.987, 2.434), stdev = 0.429
  CI (99.9%): [0.334, 3.641] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 99.83% complete, ETA 00:01:03
# Fork: 1 of 1
# Warmup Iteration   1: 2.338 ms/op
# Warmup Iteration   2: 2.032 ms/op
# Warmup Iteration   3: 1.654 ms/op
# Warmup Iteration   4: 1.625 ms/op
# Warmup Iteration   5: 1.809 ms/op
Iteration   1: 1.677 ms/op
Iteration   2: 1.879 ms/op
Iteration   3: 2.300 ms/op
Iteration   4: 2.160 ms/op
Iteration   5: 2.548 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  2.113 ±(99.9%) 1.322 ms/op [Average]
  (min, avg, max) = (1.677, 2.113, 2.548), stdev = 0.343
  CI (99.9%): [0.791, 3.435] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 99.92% complete, ETA 00:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 2.557 ms/op
# Warmup Iteration   2: 1.648 ms/op
# Warmup Iteration   3: 1.646 ms/op
# Warmup Iteration   4: 1.627 ms/op
# Warmup Iteration   5: 1.665 ms/op
Iteration   1: 1.608 ms/op
Iteration   2: 1.796 ms/op
Iteration   3: 2.252 ms/op
Iteration   4: 2.244 ms/op
Iteration   5: 2.145 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  2.009 ±(99.9%) 1.121 ms/op [Average]
  (min, avg, max) = (1.608, 2.009, 2.252), stdev = 0.291
  CI (99.9%): [0.888, 3.130] (assumes normal distribution)


# Run complete. Total time: 10:30:40

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         (nCommit)  (nGet)  (nGetDiffCursor)  (nKeys)  (nValues)  Mode  Cnt       Score        Error  Units
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        16     N/A               N/A       32          2  avgt    5       0.013 ±      0.017  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        16     N/A               N/A       32          3  avgt    5       0.013 ±      0.019  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        16     N/A               N/A     1000          2  avgt    5       0.411 ±      0.615  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        16     N/A               N/A     1000          3  avgt    5       0.388 ±      0.561  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        16     N/A               N/A   100000          2  avgt    5     121.781 ±     93.789  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        16     N/A               N/A   100000          3  avgt    5     127.469 ±    114.492  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        32     N/A               N/A       32          2  avgt    5       0.039 ±      0.056  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        32     N/A               N/A       32          3  avgt    5       0.037 ±      0.060  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        32     N/A               N/A     1000          2  avgt    5       0.979 ±      1.555  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        32     N/A               N/A     1000          3  avgt    5       1.045 ±      1.223  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        32     N/A               N/A   100000          2  avgt    5     294.933 ±     86.739  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        32     N/A               N/A   100000          3  avgt    5     382.167 ±    355.227  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        64     N/A               N/A       32          2  avgt    5       0.057 ±      0.065  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        64     N/A               N/A       32          3  avgt    5       0.062 ±      0.096  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        64     N/A               N/A     1000          2  avgt    5       1.902 ±      3.019  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        64     N/A               N/A     1000          3  avgt    5       1.933 ±      2.813  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        64     N/A               N/A   100000          2  avgt    5     595.707 ±    170.972  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                        64     N/A               N/A   100000          3  avgt    5     538.445 ±    171.456  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       128     N/A               N/A       32          2  avgt    5       0.103 ±      0.149  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       128     N/A               N/A       32          3  avgt    5       0.100 ±      0.128  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       128     N/A               N/A     1000          2  avgt    5       2.503 ±      2.297  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       128     N/A               N/A     1000          3  avgt    5       2.430 ±      2.221  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       128     N/A               N/A   100000          2  avgt    5     796.784 ±    500.057  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       128     N/A               N/A   100000          3  avgt    5     907.781 ±    450.263  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       256     N/A               N/A       32          2  avgt    5       0.171 ±      0.187  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       256     N/A               N/A       32          3  avgt    5       0.169 ±      0.191  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       256     N/A               N/A     1000          2  avgt    5       5.353 ±      5.259  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       256     N/A               N/A     1000          3  avgt    5       5.174 ±      4.991  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       256     N/A               N/A   100000          2  avgt    5    1794.963 ±    514.424  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       256     N/A               N/A   100000          3  avgt    5    2062.859 ±   1127.478  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       512     N/A               N/A       32          2  avgt    5       0.334 ±      0.342  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       512     N/A               N/A       32          3  avgt    5       0.317 ±      0.322  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       512     N/A               N/A     1000          2  avgt    5      10.370 ±     11.473  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       512     N/A               N/A     1000          3  avgt    5      11.401 ±     17.360  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       512     N/A               N/A   100000          2  avgt    5    4929.837 ±   1453.555  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                       512     N/A               N/A   100000          3  avgt    5    4080.602 ±    729.032  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      1024     N/A               N/A       32          2  avgt    5       0.657 ±      0.688  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      1024     N/A               N/A       32          3  avgt    5       0.688 ±      0.831  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      1024     N/A               N/A     1000          2  avgt    5      20.494 ±     20.880  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      1024     N/A               N/A     1000          3  avgt    5      20.446 ±     20.437  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      2048     N/A               N/A       32          2  avgt    5       1.462 ±      1.520  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      2048     N/A               N/A       32          3  avgt    5       1.451 ±      1.724  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      2048     N/A               N/A     1000          2  avgt    5      42.211 ±     42.790  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      2048     N/A               N/A     1000          3  avgt    5      42.092 ±     45.435  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      4096     N/A               N/A       32          2  avgt    5       2.956 ±      4.168  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      4096     N/A               N/A       32          3  avgt    5       2.665 ±      2.980  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      4096     N/A               N/A     1000          2  avgt    5      85.064 ±     86.383  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      4096     N/A               N/A     1000          3  avgt    5      86.749 ±     84.802  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      8192     N/A               N/A       32          2  avgt    5       5.757 ±      5.210  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      8192     N/A               N/A       32          3  avgt    5       5.860 ±      5.445  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      8192     N/A               N/A     1000          2  avgt    5     290.770 ±    302.087  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                      8192     N/A               N/A     1000          3  avgt    5     227.563 ±    286.595  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                     16384     N/A               N/A       32          2  avgt    5      10.637 ±     12.011  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                     16384     N/A               N/A       32          3  avgt    5      11.143 ±     14.876  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                     16384     N/A               N/A     1000          2  avgt    5    1166.488 ±    584.548  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark                                     16384     N/A               N/A     1000          3  avgt    5    1089.978 ±    795.901  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                       16     N/A               N/A   100000          2  avgt            0.037               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                       32     N/A               N/A     1000          2  avgt            0.396               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                       32     N/A               N/A     1000          3  avgt            0.599               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                       32     N/A               N/A   100000          2  avgt            0.012               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                       32     N/A               N/A   100000          3  avgt            0.014               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                       64     N/A               N/A   100000          2  avgt            0.093               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                       64     N/A               N/A   100000          3  avgt            0.025               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                      128     N/A               N/A   100000          2  avgt            0.242               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                      128     N/A               N/A   100000          3  avgt            0.526               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                      256     N/A               N/A   100000          2  avgt            0.093               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                      256     N/A               N/A   100000          3  avgt            0.230               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                      512     N/A               N/A       32          2  avgt            4.792               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                      512     N/A               N/A       32          3  avgt            0.459               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                      512     N/A               N/A     1000          2  avgt    2      12.710               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                      512     N/A               N/A   100000          2  avgt            0.660               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                      512     N/A               N/A   100000          3  avgt            0.258               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                     1024     N/A               N/A   100000          2  avgt            0.665               ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark                                     1024     N/A               N/A   100000          3  avgt            0.454               ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      16               N/A       32          2  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      16               N/A       32          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      16               N/A     1000          2  avgt    5       0.040 ±      0.045  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      16               N/A     1000          3  avgt    5       0.040 ±      0.038  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      16               N/A   100000          2  avgt    5      12.942 ±     18.107  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      16               N/A   100000          3  avgt    5      12.017 ±     11.417  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      32               N/A       32          2  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      32               N/A       32          3  avgt    5       0.003 ±      0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      32               N/A     1000          2  avgt    5       0.082 ±      0.090  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      32               N/A     1000          3  avgt    5       0.080 ±      0.090  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      32               N/A   100000          2  avgt    5      20.718 ±     13.419  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      32               N/A   100000          3  avgt    5      21.079 ±     28.843  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      64               N/A       32          2  avgt    5       0.005 ±      0.006  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      64               N/A       32          3  avgt    5       0.005 ±      0.006  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      64               N/A     1000          2  avgt    5       0.139 ±      0.142  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      64               N/A     1000          3  avgt    5       0.136 ±      0.136  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      64               N/A   100000          2  avgt    5      34.335 ±     31.884  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A      64               N/A   100000          3  avgt    5      42.223 ±     52.347  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     128               N/A       32          2  avgt    5       0.010 ±      0.010  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     128               N/A       32          3  avgt    5       0.011 ±      0.012  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     128               N/A     1000          2  avgt    5       0.257 ±      0.267  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     128               N/A     1000          3  avgt    5       0.255 ±      0.245  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     128               N/A   100000          2  avgt    5      69.194 ±     39.692  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     128               N/A   100000          3  avgt    5      68.486 ±     70.201  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     256               N/A       32          2  avgt    5       0.020 ±      0.020  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     256               N/A       32          3  avgt    5       0.020 ±      0.021  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     256               N/A     1000          2  avgt    5       0.494 ±      0.410  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     256               N/A     1000          3  avgt    5       0.515 ±      0.545  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     256               N/A   100000          2  avgt    5     156.000 ±    183.252  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     256               N/A   100000          3  avgt    5     139.075 ±    109.973  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     512               N/A       32          2  avgt    5       0.043 ±      0.051  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     512               N/A       32          3  avgt    5       0.041 ±      0.043  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     512               N/A     1000          2  avgt    5       1.019 ±      0.992  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     512               N/A     1000          3  avgt    5       1.010 ±      1.039  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     512               N/A   100000          2  avgt    5     291.081 ±    269.228  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A     512               N/A   100000          3  avgt    5     292.472 ±    286.508  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    1024               N/A       32          2  avgt    5       0.080 ±      0.076  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    1024               N/A       32          3  avgt    5       0.081 ±      0.094  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    1024               N/A     1000          2  avgt    5       2.112 ±      2.526  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    1024               N/A     1000          3  avgt    5       2.039 ±      1.907  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    1024               N/A   100000          2  avgt    5     593.290 ±    469.363  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    1024               N/A   100000          3  avgt    5     604.284 ±    441.245  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    2048               N/A       32          2  avgt    5       0.159 ±      0.162  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    2048               N/A       32          3  avgt    5       0.163 ±      0.174  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    2048               N/A     1000          2  avgt    5       4.184 ±      4.869  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    2048               N/A     1000          3  avgt    5       4.405 ±      5.701  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    2048               N/A   100000          2  avgt    5    1334.256 ±    915.164  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    2048               N/A   100000          3  avgt    5    1276.219 ±    878.257  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    4096               N/A       32          2  avgt    5       0.325 ±      0.344  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    4096               N/A       32          3  avgt    5       0.322 ±      0.368  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    4096               N/A     1000          2  avgt    5       8.615 ±     10.278  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    4096               N/A     1000          3  avgt    5       8.508 ±     10.176  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    4096               N/A   100000          2  avgt    5    2740.182 ±    512.940  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    4096               N/A   100000          3  avgt    5    2590.224 ±    633.801  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    8192               N/A       32          2  avgt    5       0.652 ±      0.760  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    8192               N/A       32          3  avgt    5       0.643 ±      0.688  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    8192               N/A     1000          2  avgt    5      16.285 ±     16.566  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A    8192               N/A     1000          3  avgt    5      15.591 ±     14.304  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A   16384               N/A       32          2  avgt    5       1.380 ±      1.767  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A   16384               N/A       32          3  avgt    5       1.325 ±      1.410  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A   16384               N/A     1000          2  avgt    5      32.971 ±     34.858  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark                                       N/A   16384               N/A     1000          3  avgt    5      33.655 ±     34.075  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      16               N/A       32          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      16               N/A       32          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      16               N/A     1000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      16               N/A     1000          3  avgt    5      ? 10?³               ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      16               N/A   100000          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      16               N/A   100000          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      32               N/A       32          2  avgt    5      ? 10?³               ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      32               N/A       32          3  avgt    5      ? 10?³               ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      32               N/A     1000          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      32               N/A     1000          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      32               N/A   100000          2  avgt    5       0.001 ±      0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      32               N/A   100000          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      64               N/A       32          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      64               N/A       32          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      64               N/A     1000          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      64               N/A     1000          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      64               N/A   100000          2  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A      64               N/A   100000          3  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     128               N/A       32          2  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     128               N/A       32          3  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     128               N/A     1000          2  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     128               N/A     1000          3  avgt    5       0.003 ±      0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     128               N/A   100000          2  avgt    5       0.005 ±      0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     128               N/A   100000          3  avgt    5       0.005 ±      0.006  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     256               N/A       32          2  avgt    5       0.004 ±      0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     256               N/A       32          3  avgt    5       0.004 ±      0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     256               N/A     1000          2  avgt    5       0.005 ±      0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     256               N/A     1000          3  avgt    5       0.005 ±      0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     256               N/A   100000          2  avgt    5       0.009 ±      0.008  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     256               N/A   100000          3  avgt    5       0.010 ±      0.011  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     512               N/A       32          2  avgt    5       0.008 ±      0.008  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     512               N/A       32          3  avgt    5       0.008 ±      0.008  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     512               N/A     1000          2  avgt    5       0.014 ±      0.012  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     512               N/A     1000          3  avgt    5       0.010 ±      0.008  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     512               N/A   100000          2  avgt    5       0.020 ±      0.024  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A     512               N/A   100000          3  avgt    5       0.020 ±      0.025  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    1024               N/A       32          2  avgt    5       0.016 ±      0.018  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    1024               N/A       32          3  avgt    5       0.015 ±      0.015  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    1024               N/A     1000          2  avgt    5       0.020 ±      0.016  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    1024               N/A     1000          3  avgt    5       0.020 ±      0.020  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    1024               N/A   100000          2  avgt    5       0.040 ±      0.040  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    1024               N/A   100000          3  avgt    5       0.038 ±      0.038  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    2048               N/A       32          2  avgt    5       0.031 ±      0.031  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    2048               N/A       32          3  avgt    5       0.031 ±      0.031  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    2048               N/A     1000          2  avgt    5       0.043 ±      0.058  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    2048               N/A     1000          3  avgt    5       0.039 ±      0.033  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    2048               N/A   100000          2  avgt    5       0.078 ±      0.089  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    2048               N/A   100000          3  avgt    5       0.075 ±      0.079  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    4096               N/A       32          2  avgt    5       0.059 ±      0.053  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    4096               N/A       32          3  avgt    5       0.063 ±      0.067  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    4096               N/A     1000          2  avgt    5       0.081 ±      0.093  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    4096               N/A     1000          3  avgt    5       0.081 ±      0.098  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    4096               N/A   100000          2  avgt    5       0.151 ±      0.155  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    4096               N/A   100000          3  avgt    5       0.161 ±      0.198  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    8192               N/A       32          2  avgt    5       0.118 ±      0.107  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    8192               N/A       32          3  avgt    5       0.125 ±      0.136  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    8192               N/A     1000          2  avgt    5       0.145 ±      0.136  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    8192               N/A     1000          3  avgt    5       0.155 ±      0.180  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    8192               N/A   100000          2  avgt    5       0.308 ±      0.316  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A    8192               N/A   100000          3  avgt    5       0.304 ±      0.264  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A   16384               N/A       32          2  avgt    5       0.239 ±      0.229  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A   16384               N/A       32          3  avgt    5       0.242 ±      0.238  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A   16384               N/A     1000          2  avgt    5       0.301 ±      0.287  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A   16384               N/A     1000          3  avgt    5       0.302 ±      0.278  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A   16384               N/A   100000          2  avgt    5       0.604 ±      0.645  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                                                N/A   16384               N/A   100000          3  avgt    5       0.625 ±      0.687  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      16               N/A       32          2  avgt    5      ? 10?³               ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      16               N/A       32          3  avgt    5      ? 10?³               ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      16               N/A     1000          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      16               N/A     1000          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      16               N/A   100000          2  avgt    5       0.002 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      16               N/A   100000          3  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      32               N/A       32          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      32               N/A       32          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      32               N/A     1000          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      32               N/A     1000          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      32               N/A   100000          2  avgt    5       0.003 ±      0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      32               N/A   100000          3  avgt    5       0.003 ±      0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      64               N/A       32          2  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      64               N/A       32          3  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      64               N/A     1000          2  avgt    5       0.003 ±      0.006  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      64               N/A     1000          3  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      64               N/A   100000          2  avgt    5       0.006 ±      0.006  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A      64               N/A   100000          3  avgt    5       0.006 ±      0.008  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     128               N/A       32          2  avgt    5       0.004 ±      0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     128               N/A       32          3  avgt    5       0.004 ±      0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     128               N/A     1000          2  avgt    5       0.006 ±      0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     128               N/A     1000          3  avgt    5       0.005 ±      0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     128               N/A   100000          2  avgt    5       0.011 ±      0.010  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     128               N/A   100000          3  avgt    5       0.011 ±      0.018  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     256               N/A       32          2  avgt    5       0.007 ±      0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     256               N/A       32          3  avgt    5       0.006 ±      0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     256               N/A     1000          2  avgt    5       0.011 ±      0.011  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     256               N/A     1000          3  avgt    5       0.010 ±      0.011  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     256               N/A   100000          2  avgt    5       0.022 ±      0.028  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     256               N/A   100000          3  avgt    5       0.020 ±      0.023  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     512               N/A       32          2  avgt    5       0.014 ±      0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     512               N/A       32          3  avgt    5       0.014 ±      0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     512               N/A     1000          2  avgt    5       0.025 ±      0.047  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     512               N/A     1000          3  avgt    5       0.023 ±      0.032  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     512               N/A   100000          2  avgt    5       0.045 ±      0.050  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A     512               N/A   100000          3  avgt    5       0.045 ±      0.049  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    1024               N/A       32          2  avgt    5       0.030 ±      0.020  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    1024               N/A       32          3  avgt    5       0.032 ±      0.024  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    1024               N/A     1000          2  avgt    5       0.048 ±      0.082  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    1024               N/A     1000          3  avgt    5       0.041 ±      0.036  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    1024               N/A   100000          2  avgt    5       0.090 ±      0.088  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    1024               N/A   100000          3  avgt    5       0.095 ±      0.095  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    2048               N/A       32          2  avgt    5       0.067 ±      0.038  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    2048               N/A       32          3  avgt    5       0.085 ±      0.095  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    2048               N/A     1000          2  avgt    5       0.169 ±      0.084  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    2048               N/A     1000          3  avgt    5       0.099 ±      0.094  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    2048               N/A   100000          2  avgt    5       0.298 ±      0.589  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    2048               N/A   100000          3  avgt    5       0.210 ±      0.274  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    4096               N/A       32          2  avgt    5       0.145 ±      0.115  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    4096               N/A       32          3  avgt    5       0.131 ±      0.180  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    4096               N/A     1000          2  avgt    5       0.184 ±      0.322  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    4096               N/A     1000          3  avgt    5       0.170 ±      0.227  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    4096               N/A   100000          2  avgt    5       0.384 ±      0.610  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    4096               N/A   100000          3  avgt    5       0.367 ±      0.479  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    8192               N/A       32          2  avgt    5       0.235 ±      0.196  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    8192               N/A       32          3  avgt    5       0.220 ±      0.153  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    8192               N/A     1000          2  avgt    5       0.326 ±      0.259  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    8192               N/A     1000          3  avgt    5       0.299 ±      0.287  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    8192               N/A   100000          2  avgt    5       0.658 ±      0.696  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A    8192               N/A   100000          3  avgt    5       0.779 ±      1.066  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A   16384               N/A       32          2  avgt    5       0.472 ±      0.270  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A   16384               N/A       32          3  avgt    5       0.430 ±      0.228  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A   16384               N/A     1000          2  avgt    5       0.625 ±      0.444  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A   16384               N/A     1000          3  avgt    5       0.626 ±      0.562  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A   16384               N/A   100000          2  avgt    5       1.326 ±      1.165  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark                                      N/A   16384               N/A   100000          3  avgt    5       1.391 ±      1.961  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      16               N/A       32          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      16               N/A       32          3  avgt    5      ? 10?³               ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      16               N/A     1000          2  avgt    5      ? 10?³               ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      16               N/A     1000          3  avgt    5      ? 10?³               ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      16               N/A   100000          2  avgt    5       0.001 ±      0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      16               N/A   100000          3  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      32               N/A       32          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      32               N/A       32          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      32               N/A     1000          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      32               N/A     1000          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      32               N/A   100000          2  avgt    5       0.002 ±      0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      32               N/A   100000          3  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      64               N/A       32          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      64               N/A       32          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      64               N/A     1000          2  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      64               N/A     1000          3  avgt    5       0.002 ±      0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      64               N/A   100000          2  avgt    5       0.005 ±      0.006  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A      64               N/A   100000          3  avgt    5       0.006 ±      0.007  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     128               N/A       32          2  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     128               N/A       32          3  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     128               N/A     1000          2  avgt    5       0.004 ±      0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     128               N/A     1000          3  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     128               N/A   100000          2  avgt    5       0.009 ±      0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     128               N/A   100000          3  avgt    5       0.012 ±      0.014  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     256               N/A       32          2  avgt    5       0.005 ±      0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     256               N/A       32          3  avgt    5       0.005 ±      0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     256               N/A     1000          2  avgt    5       0.007 ±      0.007  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     256               N/A     1000          3  avgt    5       0.006 ±      0.006  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     256               N/A   100000          2  avgt    5       0.018 ±      0.019  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     256               N/A   100000          3  avgt    5       0.022 ±      0.023  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     512               N/A       32          2  avgt    5       0.010 ±      0.008  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     512               N/A       32          3  avgt    5       0.010 ±      0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     512               N/A     1000          2  avgt    5       0.014 ±      0.013  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     512               N/A     1000          3  avgt    5       0.013 ±      0.013  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     512               N/A   100000          2  avgt    5       0.036 ±      0.034  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A     512               N/A   100000          3  avgt    5       0.046 ±      0.055  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    1024               N/A       32          2  avgt    5       0.020 ±      0.020  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    1024               N/A       32          3  avgt    5       0.019 ±      0.019  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    1024               N/A     1000          2  avgt    5       0.028 ±      0.029  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    1024               N/A     1000          3  avgt    5       0.026 ±      0.028  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    1024               N/A   100000          2  avgt    5       0.079 ±      0.107  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    1024               N/A   100000          3  avgt    5       0.090 ±      0.120  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    2048               N/A       32          2  avgt    5       0.041 ±      0.044  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    2048               N/A       32          3  avgt    5       0.041 ±      0.045  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    2048               N/A     1000          2  avgt    5       0.058 ±      0.061  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    2048               N/A     1000          3  avgt    5       0.051 ±      0.045  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    2048               N/A   100000          2  avgt    5       0.145 ±      0.146  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    2048               N/A   100000          3  avgt    5       0.186 ±      0.237  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    4096               N/A       32          2  avgt    5       0.081 ±      0.077  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    4096               N/A       32          3  avgt    5       0.073 ±      0.066  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    4096               N/A     1000          2  avgt    5       0.111 ±      0.120  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    4096               N/A     1000          3  avgt    5       0.104 ±      0.111  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    4096               N/A   100000          2  avgt    5       0.284 ±      0.313  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    4096               N/A   100000          3  avgt    5       0.375 ±      0.488  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    8192               N/A       32          2  avgt    5       0.156 ±      0.159  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    8192               N/A       32          3  avgt    5       0.140 ±      0.144  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    8192               N/A     1000          2  avgt    5       0.219 ±      0.229  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    8192               N/A     1000          3  avgt    5       0.209 ±      0.249  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    8192               N/A   100000          2  avgt    5       0.584 ±      0.721  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A    8192               N/A   100000          3  avgt    5       0.707 ±      0.806  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A   16384               N/A       32          2  avgt    5       0.315 ±      0.365  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A   16384               N/A       32          3  avgt    5       0.286 ±      0.273  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A   16384               N/A     1000          2  avgt    5       0.438 ±      0.403  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A   16384               N/A     1000          3  avgt    5       0.425 ±      0.508  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A   16384               N/A   100000          2  avgt    5       1.182 ±      1.137  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                                               N/A   16384               N/A   100000          3  avgt    5       1.456 ±      1.609  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      16               N/A       32          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      16               N/A       32          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      16               N/A     1000          2  avgt    5       0.039 ±      0.039  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      16               N/A     1000          3  avgt    5       0.040 ±      0.047  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      16               N/A   100000          2  avgt    5      10.268 ±     11.848  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      16               N/A   100000          3  avgt    5      10.617 ±      9.896  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      32               N/A       32          2  avgt    5       0.003 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      32               N/A       32          3  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      32               N/A     1000          2  avgt    5       0.077 ±      0.086  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      32               N/A     1000          3  avgt    5       0.079 ±      0.080  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      32               N/A   100000          2  avgt    5      21.589 ±     23.036  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      32               N/A   100000          3  avgt    5      21.555 ±     25.282  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      64               N/A       32          2  avgt    5       0.004 ±      0.004  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      64               N/A       32          3  avgt    5       0.004 ±      0.004  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      64               N/A     1000          2  avgt    5       0.139 ±      0.156  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      64               N/A     1000          3  avgt    5       0.133 ±      0.118  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      64               N/A   100000          2  avgt    5      34.612 ±     25.883  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A      64               N/A   100000          3  avgt    5      35.551 ±     29.333  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     128               N/A       32          2  avgt    5       0.008 ±      0.008  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     128               N/A       32          3  avgt    5       0.009 ±      0.009  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     128               N/A     1000          2  avgt    5       0.264 ±      0.318  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     128               N/A     1000          3  avgt    5       0.245 ±      0.242  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     128               N/A   100000          2  avgt    5      62.966 ±     62.507  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     128               N/A   100000          3  avgt    5      72.435 ±     53.529  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     256               N/A       32          2  avgt    5       0.016 ±      0.015  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     256               N/A       32          3  avgt    5       0.017 ±      0.017  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     256               N/A     1000          2  avgt    5       0.512 ±      0.583  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     256               N/A     1000          3  avgt    5       0.506 ±      0.553  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     256               N/A   100000          2  avgt    5     132.575 ±    102.787  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     256               N/A   100000          3  avgt    5     133.964 ±    114.471  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     512               N/A       32          2  avgt    5       0.038 ±      0.051  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     512               N/A       32          3  avgt    5       0.032 ±      0.034  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     512               N/A     1000          2  avgt    5       0.984 ±      0.895  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     512               N/A     1000          3  avgt    5       1.023 ±      1.031  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     512               N/A   100000          2  avgt    5     286.648 ±    198.759  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A     512               N/A   100000          3  avgt    5     256.335 ±    214.948  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    1024               N/A       32          2  avgt    5       0.066 ±      0.060  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    1024               N/A       32          3  avgt    5       0.068 ±      0.079  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    1024               N/A     1000          2  avgt    5       2.015 ±      2.242  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    1024               N/A     1000          3  avgt    5       1.893 ±      1.537  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    1024               N/A   100000          2  avgt    5     562.552 ±    389.817  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    1024               N/A   100000          3  avgt    5     571.180 ±    335.838  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    2048               N/A       32          2  avgt    5       0.135 ±      0.142  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    2048               N/A       32          3  avgt    5       0.137 ±      0.156  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    2048               N/A     1000          2  avgt    5       3.851 ±      3.470  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    2048               N/A     1000          3  avgt    5       4.201 ±      5.029  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    2048               N/A   100000          2  avgt    5    1190.552 ±    744.498  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    2048               N/A   100000          3  avgt    5    1503.355 ±    887.572  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    4096               N/A       32          2  avgt    5       0.261 ±      0.269  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    4096               N/A       32          3  avgt    5       0.274 ±      0.322  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    4096               N/A     1000          2  avgt    5       8.321 ±      9.855  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    4096               N/A     1000          3  avgt    5       8.220 ±      9.995  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    4096               N/A   100000          2  avgt    5    2555.815 ±    654.166  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    4096               N/A   100000          3  avgt    5    2604.263 ±    343.524  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    8192               N/A       32          2  avgt    5       0.549 ±      0.612  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    8192               N/A       32          3  avgt    5       0.535 ±      0.589  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    8192               N/A     1000          2  avgt    5      15.810 ±     15.140  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A    8192               N/A     1000          3  avgt    5      15.976 ±     16.998  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A   16384               N/A       32          2  avgt    5       1.130 ±      1.427  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A   16384               N/A       32          3  avgt    5       1.109 ±      1.207  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A   16384               N/A     1000          2  avgt    5      33.114 ±     34.472  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesAndCommitBenchmark                        N/A   16384               N/A     1000          3  avgt    5      31.819 ±     29.903  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      16               N/A       32          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      16               N/A       32          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      16               N/A     1000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      16               N/A     1000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      16               N/A   100000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      16               N/A   100000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      32               N/A       32          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      32               N/A       32          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      32               N/A     1000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      32               N/A     1000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      32               N/A   100000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      32               N/A   100000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      64               N/A       32          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      64               N/A       32          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      64               N/A     1000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      64               N/A     1000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      64               N/A   100000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A      64               N/A   100000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     128               N/A       32          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     128               N/A       32          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     128               N/A     1000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     128               N/A     1000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     128               N/A   100000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     128               N/A   100000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     256               N/A       32          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     256               N/A       32          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     256               N/A     1000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     256               N/A     1000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     256               N/A   100000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     256               N/A   100000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     512               N/A       32          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     512               N/A       32          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     512               N/A     1000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     512               N/A     1000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     512               N/A   100000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A     512               N/A   100000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    1024               N/A       32          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    1024               N/A       32          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    1024               N/A     1000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    1024               N/A     1000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    1024               N/A   100000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    1024               N/A   100000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    2048               N/A       32          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    2048               N/A       32          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    2048               N/A     1000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    2048               N/A     1000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    2048               N/A   100000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    2048               N/A   100000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    4096               N/A       32          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    4096               N/A       32          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    4096               N/A     1000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    4096               N/A     1000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    4096               N/A   100000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    4096               N/A   100000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    8192               N/A       32          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    8192               N/A       32          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    8192               N/A     1000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    8192               N/A     1000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    8192               N/A   100000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A    8192               N/A   100000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A   16384               N/A       32          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A   16384               N/A       32          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A   16384               N/A     1000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A   16384               N/A     1000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A   16384               N/A   100000          2  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.baselineGetAllValuesBenchmark                                 N/A   16384               N/A   100000          3  avgt    5      ? 10??               ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      16               N/A       32          2  avgt    5       0.001 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      16               N/A       32          3  avgt    5       0.001 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      16               N/A     1000          2  avgt    5       0.001 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      16               N/A     1000          3  avgt    5       0.001 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      16               N/A   100000          2  avgt    5       0.001 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      16               N/A   100000          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      32               N/A       32          2  avgt    5       0.002 ±      0.004  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      32               N/A       32          3  avgt    5       0.002 ±      0.006  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      32               N/A     1000          2  avgt    5       0.002 ±      0.005  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      32               N/A     1000          3  avgt    5       0.002 ±      0.003  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      32               N/A   100000          2  avgt    5       0.002 ±      0.005  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      32               N/A   100000          3  avgt    5       0.002 ±      0.003  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      64               N/A       32          2  avgt    5       0.003 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      64               N/A       32          3  avgt    5       0.003 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      64               N/A     1000          2  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      64               N/A     1000          3  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      64               N/A   100000          2  avgt    5       0.003 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A      64               N/A   100000          3  avgt    5       0.003 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     128               N/A       32          2  avgt    5       0.006 ±      0.004  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     128               N/A       32          3  avgt    5       0.006 ±      0.006  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     128               N/A     1000          2  avgt    5       0.006 ±      0.006  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     128               N/A     1000          3  avgt    5       0.006 ±      0.004  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     128               N/A   100000          2  avgt    5       0.006 ±      0.004  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     128               N/A   100000          3  avgt    5       0.006 ±      0.003  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     256               N/A       32          2  avgt    5       0.012 ±      0.006  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     256               N/A       32          3  avgt    5       0.012 ±      0.006  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     256               N/A     1000          2  avgt    5       0.013 ±      0.011  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     256               N/A     1000          3  avgt    5       0.012 ±      0.008  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     256               N/A   100000          2  avgt    5       0.012 ±      0.007  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     256               N/A   100000          3  avgt    5       0.013 ±      0.010  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     512               N/A       32          2  avgt    5       0.025 ±      0.014  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     512               N/A       32          3  avgt    5       0.024 ±      0.015  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     512               N/A     1000          2  avgt    5       0.024 ±      0.015  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     512               N/A     1000          3  avgt    5       0.024 ±      0.011  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     512               N/A   100000          2  avgt    5       0.026 ±      0.025  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A     512               N/A   100000          3  avgt    5       0.026 ±      0.019  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    1024               N/A       32          2  avgt    5       0.048 ±      0.036  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    1024               N/A       32          3  avgt    5       0.048 ±      0.027  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    1024               N/A     1000          2  avgt    5       0.048 ±      0.029  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    1024               N/A     1000          3  avgt    5       0.050 ±      0.036  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    1024               N/A   100000          2  avgt    5       0.051 ±      0.039  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    1024               N/A   100000          3  avgt    5       0.050 ±      0.031  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    2048               N/A       32          2  avgt    5       0.095 ±      0.044  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    2048               N/A       32          3  avgt    5       0.097 ±      0.067  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    2048               N/A     1000          2  avgt    5       0.098 ±      0.065  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    2048               N/A     1000          3  avgt    5       0.097 ±      0.060  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    2048               N/A   100000          2  avgt    5       0.103 ±      0.081  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    2048               N/A   100000          3  avgt    5       0.100 ±      0.054  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    4096               N/A       32          2  avgt    5       0.190 ±      0.090  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    4096               N/A       32          3  avgt    5       0.196 ±      0.118  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    4096               N/A     1000          2  avgt    5       0.189 ±      0.105  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    4096               N/A     1000          3  avgt    5       0.193 ±      0.127  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    4096               N/A   100000          2  avgt    5       0.199 ±      0.154  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    4096               N/A   100000          3  avgt    5       0.197 ±      0.107  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    8192               N/A       32          2  avgt    5       0.384 ±      0.201  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    8192               N/A       32          3  avgt    5       0.373 ±      0.225  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    8192               N/A     1000          2  avgt    5       0.388 ±      0.173  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    8192               N/A     1000          3  avgt    5       0.396 ±      0.319  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    8192               N/A   100000          2  avgt    5       0.394 ±      0.274  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A    8192               N/A   100000          3  avgt    5       0.404 ±      0.308  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A   16384               N/A       32          2  avgt    5       0.803 ±      0.597  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A   16384               N/A       32          3  avgt    5       0.784 ±      0.443  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A   16384               N/A     1000          2  avgt    5       0.761 ±      0.247  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A   16384               N/A     1000          3  avgt    5       0.767 ±      0.464  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A   16384               N/A   100000          2  avgt    5       0.799 ±      0.450  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllAndCommitBenchmark                             N/A   16384               N/A   100000          3  avgt    5       0.763 ±      0.308  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      16               N/A       32          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      16               N/A       32          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      16               N/A     1000          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      16               N/A     1000          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      16               N/A   100000          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      16               N/A   100000          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      32               N/A       32          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      32               N/A       32          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      32               N/A     1000          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      32               N/A     1000          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      32               N/A   100000          2  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      32               N/A   100000          3  avgt    5       0.001 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      64               N/A       32          2  avgt    5       0.002 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      64               N/A       32          3  avgt    5       0.002 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      64               N/A     1000          2  avgt    5       0.002 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      64               N/A     1000          3  avgt    5       0.002 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      64               N/A   100000          2  avgt    5       0.002 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A      64               N/A   100000          3  avgt    5       0.002 ±      0.001  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     128               N/A       32          2  avgt    5       0.004 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     128               N/A       32          3  avgt    5       0.004 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     128               N/A     1000          2  avgt    5       0.004 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     128               N/A     1000          3  avgt    5       0.004 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     128               N/A   100000          2  avgt    5       0.004 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     128               N/A   100000          3  avgt    5       0.004 ±      0.002  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     256               N/A       32          2  avgt    5       0.008 ±      0.005  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     256               N/A       32          3  avgt    5       0.008 ±      0.004  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     256               N/A     1000          2  avgt    5       0.008 ±      0.005  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     256               N/A     1000          3  avgt    5       0.008 ±      0.005  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     256               N/A   100000          2  avgt    5       0.010 ±      0.008  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     256               N/A   100000          3  avgt    5       0.008 ±      0.005  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     512               N/A       32          2  avgt    5       0.017 ±      0.011  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     512               N/A       32          3  avgt    5       0.017 ±      0.009  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     512               N/A     1000          2  avgt    5       0.016 ±      0.007  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     512               N/A     1000          3  avgt    5       0.016 ±      0.009  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     512               N/A   100000          2  avgt    5       0.016 ±      0.009  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A     512               N/A   100000          3  avgt    5       0.016 ±      0.010  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    1024               N/A       32          2  avgt    5       0.033 ±      0.021  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    1024               N/A       32          3  avgt    5       0.032 ±      0.024  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    1024               N/A     1000          2  avgt    5       0.032 ±      0.016  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    1024               N/A     1000          3  avgt    5       0.032 ±      0.016  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    1024               N/A   100000          2  avgt    5       0.033 ±      0.015  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    1024               N/A   100000          3  avgt    5       0.034 ±      0.017  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    2048               N/A       32          2  avgt    5       0.067 ±      0.042  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    2048               N/A       32          3  avgt    5       0.065 ±      0.040  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    2048               N/A     1000          2  avgt    5       0.066 ±      0.045  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    2048               N/A     1000          3  avgt    5       0.065 ±      0.037  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    2048               N/A   100000          2  avgt    5       0.064 ±      0.030  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    2048               N/A   100000          3  avgt    5       0.065 ±      0.028  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    4096               N/A       32          2  avgt    5       0.130 ±      0.073  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    4096               N/A       32          3  avgt    5       0.128 ±      0.049  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    4096               N/A     1000          2  avgt    5       0.126 ±      0.055  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    4096               N/A     1000          3  avgt    5       0.130 ±      0.068  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    4096               N/A   100000          2  avgt    5       0.130 ±      0.077  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    4096               N/A   100000          3  avgt    5       0.132 ±      0.090  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    8192               N/A       32          2  avgt    5       0.265 ±      0.179  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    8192               N/A       32          3  avgt    5       0.256 ±      0.143  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    8192               N/A     1000          2  avgt    5       0.261 ±      0.122  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    8192               N/A     1000          3  avgt    5       0.263 ±      0.146  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    8192               N/A   100000          2  avgt    5       0.260 ±      0.121  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A    8192               N/A   100000          3  avgt    5       0.269 ±      0.130  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A   16384               N/A       32          2  avgt    5       0.526 ±      0.318  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A   16384               N/A       32          3  avgt    5       0.539 ±      0.380  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A   16384               N/A     1000          2  avgt    5       0.521 ±      0.280  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A   16384               N/A     1000          3  avgt    5       0.545 ±      0.406  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A   16384               N/A   100000          2  avgt    5       0.520 ±      0.302  ms/op
t.r.s.m.b.getall.ImmutableGetAllBenchmark.immutableGetAllBenchmark                                      N/A   16384               N/A   100000          3  avgt    5       0.501 ±      0.187  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                16       32          2  avgt    5       0.027 ±      0.030  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                16       32          3  avgt    5       0.026 ±      0.024  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                16     1000          2  avgt    5       0.869 ±      0.891  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                16     1000          3  avgt    5       0.874 ±      0.954  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                16   100000          2  avgt    5     141.404 ±    138.537  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                16   100000          3  avgt    5     132.178 ±    116.874  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                32       32          2  avgt    5       0.060 ±      0.056  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                32       32          3  avgt    5       0.060 ±      0.063  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                32     1000          2  avgt    5       1.737 ±      2.048  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                32     1000          3  avgt    5       1.700 ±      1.763  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                32   100000          2  avgt    5     284.198 ±    282.125  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                32   100000          3  avgt    5     272.599 ±    232.503  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                64       32          2  avgt    5       0.122 ±      0.150  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                64       32          3  avgt    5       0.117 ±      0.129  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                64     1000          2  avgt    5       3.433 ±      3.759  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                64     1000          3  avgt    5       3.337 ±      3.555  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                64   100000          2  avgt    5     551.307 ±    376.722  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A                64   100000          3  avgt    5     613.267 ±    462.057  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               128       32          2  avgt    5       0.234 ±      0.227  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               128       32          3  avgt    5       0.234 ±      0.213  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               128     1000          2  avgt    5       7.160 ±      8.373  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               128     1000          3  avgt    5       6.997 ±      6.891  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               128   100000          2  avgt    5    1291.056 ±    187.764  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               128   100000          3  avgt    5    1277.486 ±    113.136  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               256       32          2  avgt    5       0.478 ±      0.550  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               256       32          3  avgt    5       0.454 ±      0.512  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               256     1000          2  avgt    5      13.623 ±     13.236  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               256     1000          3  avgt    5      13.400 ±     13.147  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               256   100000          2  avgt    5    2693.501 ±    225.382  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               256   100000          3  avgt    5    2507.142 ±    178.995  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               512       32          2  avgt    5       0.919 ±      0.898  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               512       32          3  avgt    5       0.948 ±      0.959  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               512     1000          2  avgt    5      28.229 ±     33.574  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               512     1000          3  avgt    5      26.239 ±     22.801  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               512   100000          2  avgt    5    5253.511 ±    353.195  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A               512   100000          3  avgt    5    5072.632 ±    625.761  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              1024       32          2  avgt    5       1.861 ±      1.977  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              1024       32          3  avgt    5       1.845 ±      1.880  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              1024     1000          2  avgt    5      54.371 ±     54.811  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              1024     1000          3  avgt    5      55.961 ±     59.700  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              1024   100000          2  avgt    5   10004.883 ±   1035.189  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              1024   100000          3  avgt    5    9967.376 ±    834.808  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              2048       32          2  avgt    5       3.681 ±      4.041  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              2048       32          3  avgt    5       3.715 ±      3.937  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              2048     1000          2  avgt    5     111.165 ±    118.834  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              2048     1000          3  avgt    5     115.590 ±    128.460  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              2048   100000          2  avgt    5   20223.222 ±    354.210  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              2048   100000          3  avgt    5   19764.125 ±   1669.475  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              4096       32          2  avgt    5       7.380 ±      7.353  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              4096       32          3  avgt    5       7.305 ±      7.630  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              4096     1000          2  avgt    5     233.611 ±    221.405  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              4096     1000          3  avgt    5     236.299 ±    245.180  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              4096   100000          2  avgt    5   41351.097 ±   1124.382  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              4096   100000          3  avgt    5   38890.789 ±   1991.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              8192       32          2  avgt    5      14.992 ±     15.285  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              8192       32          3  avgt    5      14.852 ±     14.573  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              8192     1000          2  avgt    5     508.914 ±    376.364  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              8192     1000          3  avgt    5     460.494 ±    401.754  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              8192   100000          2  avgt    5   83886.485 ±  12209.387  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A              8192   100000          3  avgt    5   85281.496 ±   8457.634  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A             16384       32          2  avgt    5      32.062 ±     34.737  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A             16384       32          3  avgt    5      32.969 ±     33.288  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A             16384     1000          2  avgt    5    1164.110 ±    590.993  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A             16384     1000          3  avgt    5    1151.199 ±    519.316  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A             16384   100000          2  avgt    5  115453.669 ±  11703.319  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10     N/A             16384   100000          3  avgt    5  115122.743 ±  11702.227  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                16       32          2  avgt    5       0.023 ±      0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                16       32          3  avgt    5       0.027 ±      0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                16     1000          2  avgt    5       0.752 ±      0.054  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                16     1000          3  avgt    5       0.757 ±      0.288  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                16   100000          2  avgt    5     147.749 ±     68.550  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                16   100000          3  avgt    5     144.954 ±     93.553  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                32       32          2  avgt    5       0.053 ±      0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                32       32          3  avgt    5       0.057 ±      0.032  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                32     1000          2  avgt    5       1.450 ±      0.217  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                32     1000          3  avgt    5       1.471 ±      0.296  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                32   100000          2  avgt    5     257.354 ±     67.054  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                32   100000          3  avgt    5     238.846 ±     90.302  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                64       32          2  avgt    5       0.098 ±      0.021  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                64       32          3  avgt    5       0.102 ±      0.008  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                64     1000          2  avgt    5       3.511 ±      0.664  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                64     1000          3  avgt    5       3.723 ±      2.076  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                64   100000          2  avgt    5     785.009 ±    605.512  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A                64   100000          3  avgt    5     672.263 ±    223.351  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               128       32          2  avgt    5       0.232 ±      0.024  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               128       32          3  avgt    5       0.209 ±      0.025  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               128     1000          2  avgt    5       5.987 ±      1.391  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               128     1000          3  avgt    5       6.234 ±      0.704  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               128   100000          2  avgt    5    1088.607 ±    181.154  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               128   100000          3  avgt    5    1088.270 ±    391.041  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               256       32          2  avgt    5       0.376 ±      0.047  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               256       32          3  avgt    5       0.388 ±      0.071  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               256     1000          2  avgt    5      11.892 ±      1.350  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               256     1000          3  avgt    5      12.715 ±      1.548  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               256   100000          2  avgt    5    2148.529 ±    753.819  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               256   100000          3  avgt    5    2094.067 ±    667.613  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               512       32          2  avgt    5       0.797 ±      0.135  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               512       32          3  avgt    5       0.737 ±      0.048  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               512     1000          2  avgt    5      27.443 ±      6.703  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               512     1000          3  avgt    5      25.855 ±      2.444  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               512   100000          2  avgt    5    5245.748 ±   4127.835  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A               512   100000          3  avgt    5    5184.233 ±   2950.285  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              1024       32          2  avgt    5       1.520 ±      0.115  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              1024       32          3  avgt    5       1.478 ±      0.050  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              1024     1000          2  avgt    5      44.728 ±      4.187  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              1024     1000          3  avgt    5      45.040 ±      4.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              1024   100000          2  avgt    5   10377.722 ±    803.722  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              1024   100000          3  avgt    5    9213.816 ±   1523.385  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              2048       32          2  avgt    5       2.921 ±      0.101  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              2048       32          3  avgt    5       3.191 ±      1.265  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              2048     1000          2  avgt    5      97.053 ±     13.711  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              2048     1000          3  avgt    5     112.408 ±     24.126  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              2048   100000          2  avgt    5   23487.580 ±   2871.403  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              2048   100000          3  avgt    5   25274.942 ±   3634.941  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              4096       32          2  avgt    5       7.444 ±      1.045  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              4096       32          3  avgt    5       6.616 ±      1.463  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              4096     1000          2  avgt    5     273.120 ±    209.252  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              4096     1000          3  avgt    5     210.003 ±     39.610  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              4096   100000          2  avgt    5   45614.005 ±   7494.200  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              4096   100000          3  avgt    5   49030.507 ±  11803.482  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              8192       32          2  avgt    5      12.648 ±      2.856  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              8192       32          3  avgt    5      12.970 ±      6.030  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              8192     1000          2  avgt    5     359.445 ±     49.326  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              8192     1000          3  avgt    5     379.210 ±     59.251  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              8192   100000          2  avgt    5   93217.518 ±  11224.702  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A              8192   100000          3  avgt    5   97668.377 ±  12964.015  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A             16384       32          2  avgt    5      25.963 ±      4.847  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A             16384       32          3  avgt    5      25.157 ±      3.706  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A             16384     1000          2  avgt    5     805.336 ±     46.828  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A             16384     1000          3  avgt    5     820.129 ±     41.991  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A             16384   100000          2  avgt    5  162976.627 ± 123469.158  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100     N/A             16384   100000          3  avgt    5  153508.281 ±   5796.354  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                16       32          2  avgt    5       0.032 ±      0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                16       32          3  avgt    5       0.035 ±      0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                16     1000          2  avgt    5       1.018 ±      0.329  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                16     1000          3  avgt    5       0.973 ±      0.074  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                16   100000          2  avgt    5     153.699 ±     60.240  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                16   100000          3  avgt    5     142.399 ±     11.201  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                32       32          2  avgt    5       0.062 ±      0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                32       32          3  avgt    5       0.063 ±      0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                32     1000          2  avgt    5       1.920 ±      0.198  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                32     1000          3  avgt    5       2.021 ±      0.221  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                32   100000          2  avgt    5     345.203 ±     59.514  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                32   100000          3  avgt    5     297.904 ±     37.609  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                64       32          2  avgt    5       0.124 ±      0.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                64       32          3  avgt    5       0.117 ±      0.008  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                64     1000          2  avgt    5       3.735 ±      0.246  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                64     1000          3  avgt    5       3.828 ±      0.360  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                64   100000          2  avgt    5     644.183 ±    149.263  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A                64   100000          3  avgt    5     613.490 ±     57.962  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               128       32          2  avgt    5       0.272 ±      0.073  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               128       32          3  avgt    5       0.258 ±      0.024  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               128     1000          2  avgt    5       7.790 ±      1.619  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               128     1000          3  avgt    5       8.208 ±      0.671  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               128   100000          2  avgt    5    1227.573 ±    273.477  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               128   100000          3  avgt    5    1129.420 ±     71.788  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               256       32          2  avgt    5       0.462 ±      0.058  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               256       32          3  avgt    5       0.491 ±      0.054  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               256     1000          2  avgt    5      15.330 ±      1.503  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               256     1000          3  avgt    5      15.885 ±      1.270  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               256   100000          2  avgt    5    2612.125 ±    267.305  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               256   100000          3  avgt    5    3007.952 ±   1483.314  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               512       32          2  avgt    5       1.057 ±      0.211  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               512       32          3  avgt    5       0.941 ±      0.359  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               512     1000          2  avgt    5      28.873 ±      2.196  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               512     1000          3  avgt    5      28.285 ±      4.871  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               512   100000          2  avgt    5    4971.316 ±    336.887  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A               512   100000          3  avgt    5    4803.251 ±    536.179  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              1024       32          2  avgt    5       1.976 ±      0.262  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              1024       32          3  avgt    5       2.019 ±      0.407  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              1024     1000          2  avgt    5      61.968 ±      6.190  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              1024     1000          3  avgt    5      65.306 ±     13.665  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              1024   100000          2  avgt    5   10066.885 ±   1016.562  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              1024   100000          3  avgt    5    9116.565 ±   1660.809  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              2048       32          2  avgt    5       3.663 ±      0.343  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              2048       32          3  avgt    5       3.806 ±      1.224  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              2048     1000          2  avgt    5     120.515 ±      8.114  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              2048     1000          3  avgt    5     121.271 ±     17.905  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              2048   100000          2  avgt    5   19369.208 ±   4410.118  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              2048   100000          3  avgt    5   19277.845 ±   3055.627  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              4096       32          2  avgt    5       7.676 ±      0.513  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              4096       32          3  avgt    5       7.936 ±      0.707  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              4096     1000          2  avgt    5     257.068 ±     12.896  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              4096     1000          3  avgt    5     254.755 ±     26.351  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              4096   100000          2  avgt    5   39903.523 ±   9517.258  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              4096   100000          3  avgt    5   39909.630 ±   3436.281  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              8192       32          2  avgt    5      14.794 ±      1.280  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              8192       32          3  avgt    5      14.762 ±      1.124  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              8192     1000          2  avgt    5     430.218 ±     37.933  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              8192     1000          3  avgt    5     456.541 ±     52.407  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              8192   100000          2  avgt    5   61697.454 ±  40864.875  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A              8192   100000          3  avgt    5   49236.927 ±   5939.983  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A             16384       32          2  avgt    5      22.269 ±      1.954  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A             16384       32          3  avgt    5      22.241 ±      0.817  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A             16384     1000          2  avgt    5     728.815 ±    171.422  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A             16384     1000          3  avgt    5     686.996 ±     37.373  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A             16384   100000          2  avgt    5  101940.178 ±   5699.874  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10     N/A             16384   100000          3  avgt    5  103904.865 ±  13176.908  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                16       32          2  avgt    5       0.022 ±      0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                16       32          3  avgt    5       0.020 ±      0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                16     1000          2  avgt    5       0.669 ±      0.026  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                16     1000          3  avgt    5       0.656 ±      0.041  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                16   100000          2  avgt    5     110.585 ±     16.128  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                16   100000          3  avgt    5     113.433 ±     25.314  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                32       32          2  avgt    5       0.044 ±      0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                32       32          3  avgt    5       0.043 ±      0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                32     1000          2  avgt    5       1.373 ±      0.211  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                32     1000          3  avgt    5       1.351 ±      0.500  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                32   100000          2  avgt    5     290.259 ±    169.303  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                32   100000          3  avgt    5     228.380 ±    102.169  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                64       32          2  avgt    5       0.104 ±      0.087  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                64       32          3  avgt    5       0.100 ±      0.030  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                64     1000          2  avgt    5       2.903 ±      1.362  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                64     1000          3  avgt    5       2.816 ±      0.342  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                64   100000          2  avgt    5     536.621 ±    136.153  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A                64   100000          3  avgt    5     511.442 ±     87.548  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               128       32          2  avgt    5       0.209 ±      0.017  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               128       32          3  avgt    5       0.213 ±      0.082  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               128     1000          2  avgt    5       8.957 ±      9.707  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               128     1000          3  avgt    5       5.914 ±      1.794  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               128   100000          2  avgt    5    1231.554 ±    793.622  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               128   100000          3  avgt    5    1125.185 ±   1201.487  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               256       32          2  avgt    5       0.393 ±      0.070  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               256       32          3  avgt    5       0.379 ±      0.076  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               256     1000          2  avgt    5      12.219 ±      4.895  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               256     1000          3  avgt    5      12.664 ±      3.517  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               256   100000          2  avgt    5    1886.544 ±    358.410  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               256   100000          3  avgt    5    2151.485 ±    573.500  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               512       32          2  avgt    5       0.847 ±      0.127  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               512       32          3  avgt    5       0.824 ±      0.089  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               512     1000          2  avgt    5      27.123 ±      5.262  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               512     1000          3  avgt    5      28.411 ±      3.764  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               512   100000          2  avgt    5    6041.743 ±   6723.579  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A               512   100000          3  avgt    5    4340.575 ±   3019.035  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              1024       32          2  avgt    5       1.794 ±      0.912  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              1024       32          3  avgt    5       1.597 ±      0.170  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              1024     1000          2  avgt    5      48.766 ±      7.519  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              1024     1000          3  avgt    5      71.512 ±     42.918  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              1024   100000          2  avgt    5   11512.503 ±   4903.790  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              1024   100000          3  avgt    5   11345.036 ±   4124.124  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              2048       32          2  avgt    5       3.102 ±      0.181  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              2048       32          3  avgt    5       3.040 ±      0.068  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              2048     1000          2  avgt    5     102.674 ±     28.770  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              2048     1000          3  avgt    5     103.335 ±     10.933  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              2048   100000          2  avgt    5   24488.015 ±   9039.843  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              2048   100000          3  avgt    5   21586.734 ±  12278.031  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              4096       32          2  avgt    5       5.781 ±      0.416  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              4096       32          3  avgt    5       7.190 ±      2.150  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              4096     1000          2  avgt    5     194.057 ±     35.418  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              4096     1000          3  avgt    5     199.928 ±     45.515  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              4096   100000          2  avgt    5   47749.252 ±  13853.535  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              4096   100000          3  avgt    5   47726.192 ±  16971.248  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              8192       32          2  avgt    5      12.467 ±      1.899  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              8192       32          3  avgt    5      12.327 ±      2.222  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              8192     1000          2  avgt    5     531.553 ±    203.992  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              8192     1000          3  avgt    5     449.096 ±     25.654  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              8192   100000          2  avgt    5   94618.615 ±  17275.745  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A              8192   100000          3  avgt    5   95470.018 ±  34198.276  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A             16384       32          2  avgt    5      22.233 ±      1.307  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A             16384       32          3  avgt    5      26.763 ±      7.525  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A             16384     1000          2  avgt    5     911.192 ±    381.369  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A             16384     1000          3  avgt    5     872.884 ±    250.786  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A             16384   100000          2  avgt    5  182698.585 ±  55709.917  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100     N/A             16384   100000          3  avgt    5  258650.034 ±  43187.490  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                16       32          2  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                16       32          3  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                16     1000          2  avgt    5       0.003 ±      0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                16     1000          3  avgt    5       0.004 ±      0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                16   100000          2  avgt    5       0.004 ±      0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                16   100000          3  avgt    5       0.004 ±      0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                32       32          2  avgt    5       0.007 ±      0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                32       32          3  avgt    5       0.008 ±      0.008  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                32     1000          2  avgt    5       0.007 ±      0.008  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                32     1000          3  avgt    5       0.006 ±      0.008  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                32   100000          2  avgt    5       0.007 ±      0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                32   100000          3  avgt    5       0.006 ±      0.008  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                64       32          2  avgt    5       0.011 ±      0.014  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                64       32          3  avgt    5       0.012 ±      0.020  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                64     1000          2  avgt    5       0.011 ±      0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                64     1000          3  avgt    5       0.011 ±      0.015  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                64   100000          2  avgt    5       0.011 ±      0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A                64   100000          3  avgt    5       0.009 ±      0.008  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               128       32          2  avgt    5       0.016 ±      0.010  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               128       32          3  avgt    5       0.017 ±      0.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               128     1000          2  avgt    5       0.025 ±      0.024  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               128     1000          3  avgt    5       0.020 ±      0.015  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               128   100000          2  avgt    5       0.020 ±      0.023  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               128   100000          3  avgt    5       0.017 ±      0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               256       32          2  avgt    5       0.033 ±      0.025  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               256       32          3  avgt    5       0.030 ±      0.014  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               256     1000          2  avgt    5       0.032 ±      0.019  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               256     1000          3  avgt    5       0.051 ±      0.085  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               256   100000          2  avgt    5       0.052 ±      0.061  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               256   100000          3  avgt    5       0.050 ±      0.041  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               512       32          2  avgt    5       0.095 ±      0.061  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               512       32          3  avgt    5       0.073 ±      0.050  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               512     1000          2  avgt    5       0.106 ±      0.173  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               512     1000          3  avgt    5       0.077 ±      0.024  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               512   100000          2  avgt    5       0.088 ±      0.070  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A               512   100000          3  avgt    5       0.093 ±      0.098  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              1024       32          2  avgt    5       0.131 ±      0.091  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              1024       32          3  avgt    5       0.185 ±      0.168  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              1024     1000          2  avgt    5       0.180 ±      0.138  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              1024     1000          3  avgt    5       0.157 ±      0.173  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              1024   100000          2  avgt    5       0.183 ±      0.164  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              1024   100000          3  avgt    5       0.191 ±      0.075  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              2048       32          2  avgt    5       0.251 ±      0.148  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              2048       32          3  avgt    5       0.223 ±      0.124  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              2048     1000          2  avgt    5       0.280 ±      0.306  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              2048     1000          3  avgt    5       0.262 ±      0.088  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              2048   100000          2  avgt    5       0.245 ±      0.153  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              2048   100000          3  avgt    5       0.267 ±      0.118  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              4096       32          2  avgt    5       0.557 ±      0.614  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              4096       32          3  avgt    5       0.579 ±      0.441  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              4096     1000          2  avgt    5       0.549 ±      0.209  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              4096     1000          3  avgt    5       0.664 ±      0.929  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              4096   100000          2  avgt    5       0.698 ±      0.519  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              4096   100000          3  avgt    5       0.644 ±      0.356  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              8192       32          2  avgt    5       1.094 ±      0.484  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              8192       32          3  avgt    5       1.137 ±      0.812  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              8192     1000          2  avgt    5       0.919 ±      0.497  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              8192     1000          3  avgt    5       0.997 ±      1.029  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              8192   100000          2  avgt    5       1.684 ±      1.101  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A              8192   100000          3  avgt    5       0.928 ±      0.558  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A             16384       32          2  avgt    5       2.211 ±      1.712  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A             16384       32          3  avgt    5       2.213 ±      1.456  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A             16384     1000          2  avgt    5       2.193 ±      1.017  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A             16384     1000          3  avgt    5       2.439 ±      2.150  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A             16384   100000          2  avgt    5       2.686 ±      2.149  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10     N/A             16384   100000          3  avgt    5       2.412 ±      2.188  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                16       32          2  avgt    5       0.002 ±      0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                16       32          3  avgt    5       0.002 ±      0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                16     1000          2  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                16     1000          3  avgt    5       0.002 ±      0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                16   100000          2  avgt    5       0.002 ±      0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                16   100000          3  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                32       32          2  avgt    5       0.006 ±      0.010  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                32       32          3  avgt    5       0.005 ±      0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                32     1000          2  avgt    5       0.007 ±      0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                32     1000          3  avgt    5       0.006 ±      0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                32   100000          2  avgt    5       0.008 ±      0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                32   100000          3  avgt    5       0.008 ±      0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                64       32          2  avgt    5       0.011 ±      0.018  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                64       32          3  avgt    5       0.009 ±      0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                64     1000          2  avgt    5       0.011 ±      0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                64     1000          3  avgt    5       0.010 ±      0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                64   100000          2  avgt    5       0.009 ±      0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A                64   100000          3  avgt    5       0.012 ±      0.010  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               128       32          2  avgt    5       0.021 ±      0.022  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               128       32          3  avgt    5       0.024 ±      0.021  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               128     1000          2  avgt    5       0.020 ±      0.017  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               128     1000          3  avgt    5       0.019 ±      0.015  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               128   100000          2  avgt    5       0.025 ±      0.034  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               128   100000          3  avgt    5       0.025 ±      0.015  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               256       32          2  avgt    5       0.049 ±      0.038  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               256       32          3  avgt    5       0.047 ±      0.029  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               256     1000          2  avgt    5       0.039 ±      0.043  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               256     1000          3  avgt    5       0.035 ±      0.026  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               256   100000          2  avgt    5       0.032 ±      0.022  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               256   100000          3  avgt    5       0.030 ±      0.018  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               512       32          2  avgt    5       0.068 ±      0.063  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               512       32          3  avgt    5       0.057 ±      0.036  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               512     1000          2  avgt    5       0.062 ±      0.060  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               512     1000          3  avgt    5       0.063 ±      0.048  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               512   100000          2  avgt    5       0.089 ±      0.068  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A               512   100000          3  avgt    5       0.076 ±      0.080  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              1024       32          2  avgt    5       0.137 ±      0.103  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              1024       32          3  avgt    5       0.134 ±      0.108  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              1024     1000          2  avgt    5       0.154 ±      0.122  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              1024     1000          3  avgt    5       0.200 ±      0.082  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              1024   100000          2  avgt    5       0.157 ±      0.109  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              1024   100000          3  avgt    5       0.154 ±      0.194  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              2048       32          2  avgt    5       0.285 ±      0.196  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              2048       32          3  avgt    5       0.294 ±      0.235  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              2048     1000          2  avgt    5       0.296 ±      0.244  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              2048     1000          3  avgt    5       0.307 ±      0.267  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              2048   100000          2  avgt    5       0.304 ±      0.282  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              2048   100000          3  avgt    5       0.272 ±      0.149  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              4096       32          2  avgt    5       0.495 ±      0.358  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              4096       32          3  avgt    5       0.543 ±      0.322  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              4096     1000          2  avgt    5       0.575 ±      0.347  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              4096     1000          3  avgt    5       0.556 ±      0.432  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              4096   100000          2  avgt    5       0.642 ±      0.674  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              4096   100000          3  avgt    5       0.674 ±      0.611  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              8192       32          2  avgt    5       1.194 ±      0.868  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              8192       32          3  avgt    5       1.162 ±      0.885  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              8192     1000          2  avgt    5       1.048 ±      0.596  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              8192     1000          3  avgt    5       0.999 ±      0.627  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              8192   100000          2  avgt    5       1.079 ±      0.808  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A              8192   100000          3  avgt    5       0.992 ±      0.644  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A             16384       32          2  avgt    5       1.995 ±      1.552  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A             16384       32          3  avgt    5       2.028 ±      1.317  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A             16384     1000          2  avgt    5       2.007 ±      1.879  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A             16384     1000          3  avgt    5       2.106 ±      1.333  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A             16384   100000          2  avgt    5       2.191 ±      1.735  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100     N/A             16384   100000          3  avgt    5       2.266 ±      1.690  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                16       32          2  avgt    5       0.002 ±      0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                16       32          3  avgt    5       0.002 ±      0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                16     1000          2  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                16     1000          3  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                16   100000          2  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                16   100000          3  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                32       32          2  avgt    5       0.003 ±      0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                32       32          3  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                32     1000          2  avgt    5       0.003 ±      0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                32     1000          3  avgt    5       0.003 ±      0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                32   100000          2  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                32   100000          3  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                64       32          2  avgt    5       0.006 ±      0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                64       32          3  avgt    5       0.006 ±      0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                64     1000          2  avgt    5       0.007 ±      0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                64     1000          3  avgt    5       0.006 ±      0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                64   100000          2  avgt    5       0.006 ±      0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A                64   100000          3  avgt    5       0.006 ±      0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               128       32          2  avgt    5       0.013 ±      0.014  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               128       32          3  avgt    5       0.012 ±      0.011  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               128     1000          2  avgt    5       0.012 ±      0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               128     1000          3  avgt    5       0.012 ±      0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               128   100000          2  avgt    5       0.012 ±      0.016  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               128   100000          3  avgt    5       0.013 ±      0.010  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               256       32          2  avgt    5       0.027 ±      0.033  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               256       32          3  avgt    5       0.027 ±      0.031  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               256     1000          2  avgt    5       0.027 ±      0.030  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               256     1000          3  avgt    5       0.031 ±      0.042  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               256   100000          2  avgt    5       0.028 ±      0.028  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               256   100000          3  avgt    5       0.026 ±      0.022  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               512       32          2  avgt    5       0.057 ±      0.056  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               512       32          3  avgt    5       0.054 ±      0.056  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               512     1000          2  avgt    5       0.052 ±      0.059  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               512     1000          3  avgt    5       0.051 ±      0.054  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               512   100000          2  avgt    5       0.049 ±      0.051  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A               512   100000          3  avgt    5       0.055 ±      0.048  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              1024       32          2  avgt    5       0.102 ±      0.092  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              1024       32          3  avgt    5       0.096 ±      0.069  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              1024     1000          2  avgt    5       0.104 ±      0.138  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              1024     1000          3  avgt    5       0.099 ±      0.087  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              1024   100000          2  avgt    5       0.096 ±      0.097  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              1024   100000          3  avgt    5       0.089 ±      0.067  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              2048       32          2  avgt    5       0.197 ±      0.171  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              2048       32          3  avgt    5       0.192 ±      0.188  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              2048     1000          2  avgt    5       0.226 ±      0.203  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              2048     1000          3  avgt    5       0.207 ±      0.177  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              2048   100000          2  avgt    5       0.203 ±      0.165  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              2048   100000          3  avgt    5       0.206 ±      0.196  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              4096       32          2  avgt    5       0.392 ±      0.405  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              4096       32          3  avgt    5       0.376 ±      0.379  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              4096     1000          2  avgt    5       0.431 ±      0.435  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              4096     1000          3  avgt    5       0.398 ±      0.351  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              4096   100000          2  avgt    5       0.401 ±      0.385  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              4096   100000          3  avgt    5       0.395 ±      0.394  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              8192       32          2  avgt    5       0.914 ±      1.094  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              8192       32          3  avgt    5       0.962 ±      0.832  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              8192     1000          2  avgt    5       0.940 ±      0.968  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              8192     1000          3  avgt    5       0.869 ±      0.793  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              8192   100000          2  avgt    5       0.917 ±      0.849  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A              8192   100000          3  avgt    5       1.216 ±      1.794  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A             16384       32          2  avgt    5       1.815 ±      1.415  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A             16384       32          3  avgt    5       2.003 ±      2.496  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A             16384     1000          2  avgt    5       1.638 ±      1.377  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A             16384     1000          3  avgt    5       1.698 ±      1.534  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A             16384   100000          2  avgt    5       1.593 ±      1.242  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10     N/A             16384   100000          3  avgt    5       1.373 ±      1.127  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                16       32          2  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                16       32          3  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                16     1000          2  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                16     1000          3  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                16   100000          2  avgt    5       0.002 ±      0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                16   100000          3  avgt    5       0.002 ±      0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                32       32          2  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                32       32          3  avgt    5       0.004 ±      0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                32     1000          2  avgt    5       0.003 ±      0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                32     1000          3  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                32   100000          2  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                32   100000          3  avgt    5       0.003 ±      0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                64       32          2  avgt    5       0.007 ±      0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                64       32          3  avgt    5       0.007 ±      0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                64     1000          2  avgt    5       0.006 ±      0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                64     1000          3  avgt    5       0.007 ±      0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                64   100000          2  avgt    5       0.009 ±      0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A                64   100000          3  avgt    5       0.008 ±      0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               128       32          2  avgt    5       0.013 ±      0.011  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               128       32          3  avgt    5       0.014 ±      0.014  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               128     1000          2  avgt    5       0.014 ±      0.015  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               128     1000          3  avgt    5       0.014 ±      0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               128   100000          2  avgt    5       0.014 ±      0.014  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               128   100000          3  avgt    5       0.013 ±      0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               256       32          2  avgt    5       0.030 ±      0.017  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               256       32          3  avgt    5       0.028 ±      0.024  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               256     1000          2  avgt    5       0.025 ±      0.020  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               256     1000          3  avgt    5       0.026 ±      0.021  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               256   100000          2  avgt    5       0.028 ±      0.027  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               256   100000          3  avgt    5       0.027 ±      0.020  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               512       32          2  avgt    5       0.053 ±      0.040  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               512       32          3  avgt    5       0.055 ±      0.058  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               512     1000          2  avgt    5       0.055 ±      0.034  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               512     1000          3  avgt    5       0.094 ±      0.152  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               512   100000          2  avgt    5       0.071 ±      0.033  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A               512   100000          3  avgt    5       0.057 ±      0.041  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              1024       32          2  avgt    5       0.094 ±      0.106  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              1024       32          3  avgt    5       0.142 ±      0.192  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              1024     1000          2  avgt    5       0.159 ±      0.063  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              1024     1000          3  avgt    5       0.164 ±      0.137  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              1024   100000          2  avgt    5       0.130 ±      0.051  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              1024   100000          3  avgt    5       0.130 ±      0.077  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              2048       32          2  avgt    5       0.225 ±      0.181  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              2048       32          3  avgt    5       0.247 ±      0.187  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              2048     1000          2  avgt    5       0.237 ±      0.201  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              2048     1000          3  avgt    5       0.235 ±      0.202  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              2048   100000          2  avgt    5       0.360 ±      0.277  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              2048   100000          3  avgt    5       0.267 ±      0.250  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              4096       32          2  avgt    5       0.542 ±      0.517  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              4096       32          3  avgt    5       0.547 ±      0.401  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              4096     1000          2  avgt    5       0.650 ±      0.652  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              4096     1000          3  avgt    5       0.576 ±      0.247  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              4096   100000          2  avgt    5       0.572 ±      0.633  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              4096   100000          3  avgt    5       0.495 ±      0.377  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              8192       32          2  avgt    5       0.934 ±      0.447  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              8192       32          3  avgt    5       0.849 ±      0.613  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              8192     1000          2  avgt    5       0.820 ±      0.604  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              8192     1000          3  avgt    5       0.938 ±      0.405  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              8192   100000          2  avgt    5       0.849 ±      0.584  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A              8192   100000          3  avgt    5       0.992 ±      1.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A             16384       32          2  avgt    5       2.035 ±      1.135  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A             16384       32          3  avgt    5       2.040 ±      1.413  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A             16384     1000          2  avgt    5       2.008 ±      1.454  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A             16384     1000          3  avgt    5       1.987 ±      1.654  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A             16384   100000          2  avgt    5       2.113 ±      1.322  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100     N/A             16384   100000          3  avgt    5       2.009 ±      1.121  ms/op

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.3.1/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 10h 30m 45s
13 actionable tasks: 2 executed, 11 up-to-date
