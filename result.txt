Type-safe dependency accessors is an incubating feature.
> Task :buildSrc:extractPluginRequests UP-TO-DATE
> Task :buildSrc:generatePluginAdapters UP-TO-DATE
> Task :buildSrc:compileJava UP-TO-DATE
> Task :buildSrc:compileGroovy NO-SOURCE
> Task :buildSrc:compileGroovyPlugins UP-TO-DATE
> Task :buildSrc:pluginDescriptors UP-TO-DATE
> Task :buildSrc:processResources UP-TO-DATE
> Task :buildSrc:classes UP-TO-DATE
> Task :buildSrc:jar UP-TO-DATE
> Task :buildSrc:assemble UP-TO-DATE
> Task :buildSrc:pluginUnderTestMetadata UP-TO-DATE
> Task :buildSrc:compileTestJava NO-SOURCE
> Task :buildSrc:compileTestGroovy NO-SOURCE
> Task :buildSrc:processTestResources NO-SOURCE
> Task :buildSrc:testClasses UP-TO-DATE
> Task :buildSrc:test NO-SOURCE
> Task :buildSrc:validatePlugins UP-TO-DATE
> Task :buildSrc:check UP-TO-DATE
> Task :buildSrc:build UP-TO-DATE
> Task :refinery-store:compileJava UP-TO-DATE
> Task :refinery-store:processResources NO-SOURCE
> Task :refinery-store:classes UP-TO-DATE
> Task :refinery-store:compileTestJava UP-TO-DATE
> Task :refinery-store:processTestResources NO-SOURCE
> Task :refinery-store:testClasses UP-TO-DATE
> Task :refinery-store:compileJmhJava
> Task :refinery-store:processJmhResources NO-SOURCE
> Task :refinery-store:jmhClasses

> Task :refinery-store:jmh
# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1, nKeys = 32, nValues = 2)

# Run progress: 0.00% complete, ETA 00:44:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1, nKeys = 32, nValues = 3)

# Run progress: 0.37% complete, ETA 00:46:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1, nKeys = 1000, nValues = 2)

# Run progress: 0.75% complete, ETA 00:46:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.015 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.014, 0.015, 0.015), stdev = 0.001
  CI (99.9%): [0.013, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1, nKeys = 1000, nValues = 3)

# Run progress: 1.12% complete, ETA 00:46:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.015 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.015, 0.015, 0.016), stdev = 0.001
  CI (99.9%): [0.012, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1, nKeys = 100000, nValues = 2)

# Run progress: 1.49% complete, ETA 00:46:08
# Fork: 1 of 1
# Warmup Iteration   1: 4.479 ms/op
# Warmup Iteration   2: 3.697 ms/op
# Warmup Iteration   3: 4.064 ms/op
# Warmup Iteration   4: 3.559 ms/op
# Warmup Iteration   5: 4.085 ms/op
Iteration   1: 3.874 ms/op
Iteration   2: 4.241 ms/op
Iteration   3: 4.013 ms/op
Iteration   4: 4.384 ms/op
Iteration   5: 4.352 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  4.173 ±(99.9%) 0.852 ms/op [Average]
  (min, avg, max) = (3.874, 4.173, 4.384), stdev = 0.221
  CI (99.9%): [3.320, 5.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1, nKeys = 100000, nValues = 3)

# Run progress: 1.87% complete, ETA 00:46:13
# Fork: 1 of 1
# Warmup Iteration   1: 4.122 ms/op
# Warmup Iteration   2: 4.156 ms/op
# Warmup Iteration   3: 3.959 ms/op
# Warmup Iteration   4: 4.191 ms/op
# Warmup Iteration   5: 3.577 ms/op
Iteration   1: 4.099 ms/op
Iteration   2: 4.597 ms/op
Iteration   3: 4.807 ms/op
Iteration   4: 4.359 ms/op
Iteration   5: 4.336 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  4.440 ±(99.9%) 1.043 ms/op [Average]
  (min, avg, max) = (4.099, 4.440, 4.807), stdev = 0.271
  CI (99.9%): [3.397, 5.482] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2, nKeys = 32, nValues = 2)

# Run progress: 2.24% complete, ETA 00:46:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2, nKeys = 32, nValues = 3)

# Run progress: 2.61% complete, ETA 00:45:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2, nKeys = 1000, nValues = 2)

# Run progress: 2.99% complete, ETA 00:45:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.029 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.029, 0.029, 0.031), stdev = 0.001
  CI (99.9%): [0.025, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2, nKeys = 1000, nValues = 3)

# Run progress: 3.36% complete, ETA 00:45:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.029 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.029, 0.029, 0.030), stdev = 0.001
  CI (99.9%): [0.027, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2, nKeys = 100000, nValues = 2)

# Run progress: 3.73% complete, ETA 00:45:18
# Fork: 1 of 1
# Warmup Iteration   1: 8.570 ms/op
# Warmup Iteration   2: 8.102 ms/op
# Warmup Iteration   3: 7.443 ms/op
# Warmup Iteration   4: 8.754 ms/op
# Warmup Iteration   5: 8.047 ms/op
Iteration   1: 7.785 ms/op
Iteration   2: 7.345 ms/op
Iteration   3: 9.237 ms/op
Iteration   4: 8.063 ms/op
Iteration   5: 8.895 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  8.265 ±(99.9%) 3.019 ms/op [Average]
  (min, avg, max) = (7.345, 8.265, 9.237), stdev = 0.784
  CI (99.9%): [5.246, 11.284] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2, nKeys = 100000, nValues = 3)

# Run progress: 4.10% complete, ETA 00:45:13
# Fork: 1 of 1
# Warmup Iteration   1: 8.214 ms/op
# Warmup Iteration   2: 7.940 ms/op
# Warmup Iteration   3: 7.313 ms/op
# Warmup Iteration   4: 7.725 ms/op
# Warmup Iteration   5: 6.951 ms/op
Iteration   1: 8.817 ms/op
Iteration   2: 8.485 ms/op
Iteration   3: 9.898 ms/op
Iteration   4: 8.535 ms/op
Iteration   5: 7.892 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  8.726 ±(99.9%) 2.838 ms/op [Average]
  (min, avg, max) = (7.892, 8.726, 9.898), stdev = 0.737
  CI (99.9%): [5.888, 11.563] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4, nKeys = 32, nValues = 2)

# Run progress: 4.48% complete, ETA 00:45:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4, nKeys = 32, nValues = 3)

# Run progress: 4.85% complete, ETA 00:44:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4, nKeys = 1000, nValues = 2)

# Run progress: 5.22% complete, ETA 00:44:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.063 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.061 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.058 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.058 ms/op
Iteration   5: 0.058 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.058 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.057, 0.058, 0.058), stdev = 0.001
  CI (99.9%): [0.056, 0.059] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4, nKeys = 1000, nValues = 3)

# Run progress: 5.60% complete, ETA 00:44:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.065 ms/op
# Warmup Iteration   2: 0.058 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.059 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.058 ms/op
Iteration   3: 0.058 ms/op
Iteration   4: 0.059 ms/op
Iteration   5: 0.061 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.060 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.058, 0.060, 0.063), stdev = 0.002
  CI (99.9%): [0.052, 0.067] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4, nKeys = 100000, nValues = 2)

# Run progress: 5.97% complete, ETA 00:44:17
# Fork: 1 of 1
# Warmup Iteration   1: 19.290 ms/op
# Warmup Iteration   2: 18.725 ms/op
# Warmup Iteration   3: 21.224 ms/op
# Warmup Iteration   4: 18.694 ms/op
# Warmup Iteration   5: 20.810 ms/op
Iteration   1: 20.954 ms/op
Iteration   2: 22.989 ms/op
Iteration   3: 21.505 ms/op
Iteration   4: 19.142 ms/op
Iteration   5: 17.514 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  20.421 ±(99.9%) 8.199 ms/op [Average]
  (min, avg, max) = (17.514, 20.421, 22.989), stdev = 2.129
  CI (99.9%): [12.222, 28.620] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4, nKeys = 100000, nValues = 3)

# Run progress: 6.34% complete, ETA 00:44:09
# Fork: 1 of 1
# Warmup Iteration   1: 17.278 ms/op
# Warmup Iteration   2: 14.906 ms/op
# Warmup Iteration   3: 17.668 ms/op
# Warmup Iteration   4: 19.987 ms/op
# Warmup Iteration   5: 17.144 ms/op
Iteration   1: 17.369 ms/op
Iteration   2: 21.434 ms/op
Iteration   3: 19.406 ms/op
Iteration   4: 17.407 ms/op
Iteration   5: 17.419 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  18.607 ±(99.9%) 6.947 ms/op [Average]
  (min, avg, max) = (17.369, 18.607, 21.434), stdev = 1.804
  CI (99.9%): [11.661, 25.554] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8, nKeys = 32, nValues = 2)

# Run progress: 6.72% complete, ETA 00:44:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.003, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8, nKeys = 32, nValues = 3)

# Run progress: 7.09% complete, ETA 00:43:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.004, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8, nKeys = 1000, nValues = 2)

# Run progress: 7.46% complete, ETA 00:43:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.131 ms/op
# Warmup Iteration   2: 0.115 ms/op
# Warmup Iteration   3: 0.119 ms/op
# Warmup Iteration   4: 0.154 ms/op
# Warmup Iteration   5: 0.132 ms/op
Iteration   1: 0.137 ms/op
Iteration   2: 0.131 ms/op
Iteration   3: 0.129 ms/op
Iteration   4: 0.152 ms/op
Iteration   5: 0.133 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.137 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.129, 0.137, 0.152), stdev = 0.009
  CI (99.9%): [0.101, 0.173] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8, nKeys = 1000, nValues = 3)

# Run progress: 7.84% complete, ETA 00:43:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.129 ms/op
# Warmup Iteration   2: 0.119 ms/op
# Warmup Iteration   3: 0.123 ms/op
# Warmup Iteration   4: 0.143 ms/op
# Warmup Iteration   5: 0.144 ms/op
Iteration   1: 0.143 ms/op
Iteration   2: 0.127 ms/op
Iteration   3: 0.136 ms/op
Iteration   4: 0.139 ms/op
Iteration   5: 0.146 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.138 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.127, 0.138, 0.146), stdev = 0.007
  CI (99.9%): [0.111, 0.165] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8, nKeys = 100000, nValues = 2)

# Run progress: 8.21% complete, ETA 00:43:16
# Fork: 1 of 1
# Warmup Iteration   1: 33.943 ms/op
# Warmup Iteration   2: 29.101 ms/op
# Warmup Iteration   3: 38.197 ms/op
# Warmup Iteration   4: 39.577 ms/op
# Warmup Iteration   5: 46.905 ms/op
Iteration   1: 35.258 ms/op
Iteration   2: 41.497 ms/op
Iteration   3: 37.948 ms/op
Iteration   4: 37.941 ms/op
Iteration   5: 32.857 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  37.100 ±(99.9%) 12.500 ms/op [Average]
  (min, avg, max) = (32.857, 37.100, 41.497), stdev = 3.246
  CI (99.9%): [24.600, 49.601] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8, nKeys = 100000, nValues = 3)

# Run progress: 8.58% complete, ETA 00:43:08
# Fork: 1 of 1
# Warmup Iteration   1: 34.220 ms/op
# Warmup Iteration   2: 30.612 ms/op
# Warmup Iteration   3: 32.141 ms/op
# Warmup Iteration   4: 31.381 ms/op
# Warmup Iteration   5: 31.490 ms/op
Iteration   1: 34.407 ms/op
Iteration   2: 44.366 ms/op
Iteration   3: 37.722 ms/op
Iteration   4: 38.346 ms/op
Iteration   5: 33.932 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  37.755 ±(99.9%) 16.095 ms/op [Average]
  (min, avg, max) = (33.932, 37.755, 44.366), stdev = 4.180
  CI (99.9%): [21.660, 53.849] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 32, nValues = 2)

# Run progress: 8.96% complete, ETA 00:43:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.009 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.009, 0.009, 0.010), stdev = 0.001
  CI (99.9%): [0.007, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 32, nValues = 3)

# Run progress: 9.33% complete, ETA 00:42:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.009 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.008, 0.009, 0.010), stdev = 0.001
  CI (99.9%): [0.006, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 1000, nValues = 2)

# Run progress: 9.70% complete, ETA 00:42:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.259 ms/op
# Warmup Iteration   2: 0.250 ms/op
# Warmup Iteration   3: 0.244 ms/op
# Warmup Iteration   4: 0.271 ms/op
# Warmup Iteration   5: 0.257 ms/op
Iteration   1: 0.261 ms/op
Iteration   2: 0.269 ms/op
Iteration   3: 0.286 ms/op
Iteration   4: 0.263 ms/op
Iteration   5: 0.259 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.268 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.259, 0.268, 0.286), stdev = 0.011
  CI (99.9%): [0.226, 0.309] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 1000, nValues = 3)

# Run progress: 10.07% complete, ETA 00:42:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.260 ms/op
# Warmup Iteration   2: 0.232 ms/op
# Warmup Iteration   3: 0.255 ms/op
# Warmup Iteration   4: 0.264 ms/op
# Warmup Iteration   5: 0.263 ms/op
Iteration   1: 0.266 ms/op
Iteration   2: 0.263 ms/op
Iteration   3: 0.308 ms/op
Iteration   4: 0.264 ms/op
Iteration   5: 0.268 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.274 ±(99.9%) 0.074 ms/op [Average]
  (min, avg, max) = (0.263, 0.274, 0.308), stdev = 0.019
  CI (99.9%): [0.200, 0.348] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 100000, nValues = 2)

# Run progress: 10.45% complete, ETA 00:42:15
# Fork: 1 of 1
# Warmup Iteration   1: 64.135 ms/op
# Warmup Iteration   2: 68.651 ms/op
# Warmup Iteration   3: 61.200 ms/op
# Warmup Iteration   4: 73.618 ms/op
# Warmup Iteration   5: 71.820 ms/op
Iteration   1: 74.650 ms/op
Iteration   2: 67.500 ms/op
Iteration   3: 72.768 ms/op
Iteration   4: 70.313 ms/op
Iteration   5: 67.899 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  70.626 ±(99.9%) 11.883 ms/op [Average]
  (min, avg, max) = (67.500, 70.626, 74.650), stdev = 3.086
  CI (99.9%): [58.743, 82.509] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 100000, nValues = 3)

# Run progress: 10.82% complete, ETA 00:42:08
# Fork: 1 of 1
# Warmup Iteration   1: 68.385 ms/op
# Warmup Iteration   2: 60.065 ms/op
# Warmup Iteration   3: 65.781 ms/op
# Warmup Iteration   4: 76.799 ms/op
# Warmup Iteration   5: 64.973 ms/op
Iteration   1: 65.571 ms/op
Iteration   2: 72.585 ms/op
Iteration   3: 73.240 ms/op
Iteration   4: 75.755 ms/op
Iteration   5: 80.311 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  73.492 ±(99.9%) 20.669 ms/op [Average]
  (min, avg, max) = (65.571, 73.492, 80.311), stdev = 5.368
  CI (99.9%): [52.824, 94.161] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 32, nValues = 2)

# Run progress: 11.19% complete, ETA 00:42:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.017 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.017, 0.017, 0.019), stdev = 0.001
  CI (99.9%): [0.014, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 32, nValues = 3)

# Run progress: 11.57% complete, ETA 00:41:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.018 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.017, 0.018, 0.019), stdev = 0.001
  CI (99.9%): [0.016, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 1000, nValues = 2)

# Run progress: 11.94% complete, ETA 00:41:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.547 ms/op
# Warmup Iteration   2: 0.467 ms/op
# Warmup Iteration   3: 0.489 ms/op
# Warmup Iteration   4: 0.535 ms/op
# Warmup Iteration   5: 0.512 ms/op
Iteration   1: 0.555 ms/op
Iteration   2: 0.553 ms/op
Iteration   3: 0.525 ms/op
Iteration   4: 0.522 ms/op
Iteration   5: 0.545 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.540 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (0.522, 0.540, 0.555), stdev = 0.016
  CI (99.9%): [0.480, 0.601] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 1000, nValues = 3)

# Run progress: 12.31% complete, ETA 00:41:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.535 ms/op
# Warmup Iteration   2: 0.481 ms/op
# Warmup Iteration   3: 0.479 ms/op
# Warmup Iteration   4: 0.529 ms/op
# Warmup Iteration   5: 0.529 ms/op
Iteration   1: 0.536 ms/op
Iteration   2: 0.581 ms/op
Iteration   3: 0.552 ms/op
Iteration   4: 0.514 ms/op
Iteration   5: 0.520 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.541 ±(99.9%) 0.104 ms/op [Average]
  (min, avg, max) = (0.514, 0.541, 0.581), stdev = 0.027
  CI (99.9%): [0.437, 0.645] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 100000, nValues = 2)

# Run progress: 12.69% complete, ETA 00:41:14
# Fork: 1 of 1
# Warmup Iteration   1: 136.173 ms/op
# Warmup Iteration   2: 133.087 ms/op
# Warmup Iteration   3: 134.868 ms/op
# Warmup Iteration   4: 132.950 ms/op
# Warmup Iteration   5: 152.169 ms/op
Iteration   1: 145.234 ms/op
Iteration   2: 160.300 ms/op
Iteration   3: 167.766 ms/op
Iteration   4: 150.652 ms/op
Iteration   5: 135.188 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  151.828 ±(99.9%) 48.992 ms/op [Average]
  (min, avg, max) = (135.188, 151.828, 167.766), stdev = 12.723
  CI (99.9%): [102.836, 200.820] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 100000, nValues = 3)

# Run progress: 13.06% complete, ETA 00:41:09
# Fork: 1 of 1
# Warmup Iteration   1: 128.297 ms/op
# Warmup Iteration   2: 136.063 ms/op
# Warmup Iteration   3: 141.546 ms/op
# Warmup Iteration   4: 145.161 ms/op
# Warmup Iteration   5: 129.572 ms/op
Iteration   1: 168.791 ms/op
Iteration   2: 147.838 ms/op
Iteration   3: 153.645 ms/op
Iteration   4: 146.449 ms/op
Iteration   5: 125.375 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  148.420 ±(99.9%) 60.198 ms/op [Average]
  (min, avg, max) = (125.375, 148.420, 168.791), stdev = 15.633
  CI (99.9%): [88.221, 208.618] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 32, nValues = 2)

# Run progress: 13.43% complete, ETA 00:41:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.036 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.032 ms/op
# Warmup Iteration   4: 0.034 ms/op
# Warmup Iteration   5: 0.034 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.035 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.034, 0.035, 0.038), stdev = 0.002
  CI (99.9%): [0.029, 0.042] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 32, nValues = 3)

# Run progress: 13.81% complete, ETA 00:40:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.033 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.035 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.033, 0.035, 0.037), stdev = 0.002
  CI (99.9%): [0.028, 0.041] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 1000, nValues = 2)

# Run progress: 14.18% complete, ETA 00:40:39
# Fork: 1 of 1
# Warmup Iteration   1: 1.021 ms/op
# Warmup Iteration   2: 0.936 ms/op
# Warmup Iteration   3: 1.010 ms/op
# Warmup Iteration   4: 1.092 ms/op
# Warmup Iteration   5: 1.053 ms/op
Iteration   1: 1.073 ms/op
Iteration   2: 1.076 ms/op
Iteration   3: 1.065 ms/op
Iteration   4: 1.204 ms/op
Iteration   5: 1.085 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1.101 ±(99.9%) 0.223 ms/op [Average]
  (min, avg, max) = (1.065, 1.101, 1.204), stdev = 0.058
  CI (99.9%): [0.878, 1.324] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 1000, nValues = 3)

# Run progress: 14.55% complete, ETA 00:40:28
# Fork: 1 of 1
# Warmup Iteration   1: 1.046 ms/op
# Warmup Iteration   2: 0.915 ms/op
# Warmup Iteration   3: 0.964 ms/op
# Warmup Iteration   4: 1.209 ms/op
# Warmup Iteration   5: 1.251 ms/op
Iteration   1: 1.113 ms/op
Iteration   2: 1.050 ms/op
Iteration   3: 1.064 ms/op
Iteration   4: 1.077 ms/op
Iteration   5: 1.181 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1.097 ±(99.9%) 0.202 ms/op [Average]
  (min, avg, max) = (1.050, 1.097, 1.181), stdev = 0.052
  CI (99.9%): [0.895, 1.299] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 100000, nValues = 2)

# Run progress: 14.93% complete, ETA 00:40:16
# Fork: 1 of 1
# Warmup Iteration   1: 287.506 ms/op
# Warmup Iteration   2: 263.132 ms/op
# Warmup Iteration   3: 304.968 ms/op
# Warmup Iteration   4: 347.454 ms/op
# Warmup Iteration   5: 323.841 ms/op
Iteration   1: 328.277 ms/op
Iteration   2: 335.567 ms/op
Iteration   3: 324.781 ms/op
Iteration   4: 302.640 ms/op
Iteration   5: 288.330 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  315.919 ±(99.9%) 75.917 ms/op [Average]
  (min, avg, max) = (288.330, 315.919, 335.567), stdev = 19.715
  CI (99.9%): [240.002, 391.836] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 100000, nValues = 3)

# Run progress: 15.30% complete, ETA 00:40:18
# Fork: 1 of 1
# Warmup Iteration   1: 279.939 ms/op
# Warmup Iteration   2: 287.679 ms/op
# Warmup Iteration   3: 301.796 ms/op
# Warmup Iteration   4: 294.288 ms/op
# Warmup Iteration   5: 263.579 ms/op
Iteration   1: 327.655 ms/op
Iteration   2: 313.932 ms/op
Iteration   3: 322.751 ms/op
Iteration   4: 324.755 ms/op
Iteration   5: 351.017 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  328.022 ±(99.9%) 53.283 ms/op [Average]
  (min, avg, max) = (313.932, 328.022, 351.017), stdev = 13.837
  CI (99.9%): [274.739, 381.305] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 32, nValues = 2)

# Run progress: 15.67% complete, ETA 00:40:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.068 ms/op
# Warmup Iteration   3: 0.064 ms/op
# Warmup Iteration   4: 0.068 ms/op
# Warmup Iteration   5: 0.067 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.073 ms/op
Iteration   4: 0.068 ms/op
Iteration   5: 0.068 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.070 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.068, 0.070, 0.073), stdev = 0.002
  CI (99.9%): [0.061, 0.079] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 32, nValues = 3)

# Run progress: 16.04% complete, ETA 00:40:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.066 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.068 ms/op
# Warmup Iteration   4: 0.066 ms/op
# Warmup Iteration   5: 0.068 ms/op
Iteration   1: 0.068 ms/op
Iteration   2: 0.069 ms/op
Iteration   3: 0.070 ms/op
Iteration   4: 0.071 ms/op
Iteration   5: 0.080 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.071 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.068, 0.071, 0.080), stdev = 0.005
  CI (99.9%): [0.053, 0.090] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 1000, nValues = 2)

# Run progress: 16.42% complete, ETA 00:39:53
# Fork: 1 of 1
# Warmup Iteration   1: 2.277 ms/op
# Warmup Iteration   2: 2.010 ms/op
# Warmup Iteration   3: 2.195 ms/op
# Warmup Iteration   4: 2.671 ms/op
# Warmup Iteration   5: 2.467 ms/op
Iteration   1: 2.188 ms/op
Iteration   2: 2.326 ms/op
Iteration   3: 2.119 ms/op
Iteration   4: 2.474 ms/op
Iteration   5: 2.158 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  2.253 ±(99.9%) 0.563 ms/op [Average]
  (min, avg, max) = (2.119, 2.253, 2.474), stdev = 0.146
  CI (99.9%): [1.690, 2.816] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 1000, nValues = 3)

# Run progress: 16.79% complete, ETA 00:39:42
# Fork: 1 of 1
# Warmup Iteration   1: 2.104 ms/op
# Warmup Iteration   2: 1.903 ms/op
# Warmup Iteration   3: 1.944 ms/op
# Warmup Iteration   4: 2.456 ms/op
# Warmup Iteration   5: 2.285 ms/op
Iteration   1: 2.246 ms/op
Iteration   2: 2.111 ms/op
Iteration   3: 2.339 ms/op
Iteration   4: 2.333 ms/op
Iteration   5: 2.501 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  2.306 ±(99.9%) 0.550 ms/op [Average]
  (min, avg, max) = (2.111, 2.306, 2.501), stdev = 0.143
  CI (99.9%): [1.756, 2.856] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 100000, nValues = 2)

# Run progress: 17.16% complete, ETA 00:39:30
# Fork: 1 of 1
# Warmup Iteration   1: 557.774 ms/op
# Warmup Iteration   2: 492.817 ms/op
# Warmup Iteration   3: 583.689 ms/op
# Warmup Iteration   4: 572.786 ms/op
# Warmup Iteration   5: 601.155 ms/op
Iteration   1: 649.200 ms/op
Iteration   2: 587.762 ms/op
Iteration   3: 585.181 ms/op
Iteration   4: 613.579 ms/op
Iteration   5: 642.757 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  615.696 ±(99.9%) 115.050 ms/op [Average]
  (min, avg, max) = (585.181, 615.696, 649.200), stdev = 29.878
  CI (99.9%): [500.646, 730.746] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 100000, nValues = 3)

# Run progress: 17.54% complete, ETA 00:39:31
# Fork: 1 of 1
# Warmup Iteration   1: 506.701 ms/op
# Warmup Iteration   2: 542.384 ms/op
# Warmup Iteration   3: 566.574 ms/op
# Warmup Iteration   4: 619.874 ms/op
# Warmup Iteration   5: 602.231 ms/op
Iteration   1: 643.301 ms/op
Iteration   2: 740.626 ms/op
Iteration   3: 720.074 ms/op
Iteration   4: 660.783 ms/op
Iteration   5: 630.264 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  679.010 ±(99.9%) 187.324 ms/op [Average]
  (min, avg, max) = (630.264, 679.010, 740.626), stdev = 48.647
  CI (99.9%): [491.686, 866.333] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 32, nValues = 2)

# Run progress: 17.91% complete, ETA 00:39:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.139 ms/op
# Warmup Iteration   2: 0.118 ms/op
# Warmup Iteration   3: 0.121 ms/op
# Warmup Iteration   4: 0.138 ms/op
# Warmup Iteration   5: 0.135 ms/op
Iteration   1: 0.153 ms/op
Iteration   2: 0.136 ms/op
Iteration   3: 0.136 ms/op
Iteration   4: 0.133 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.137 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.127, 0.137, 0.153), stdev = 0.010
  CI (99.9%): [0.100, 0.174] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 32, nValues = 3)

# Run progress: 18.28% complete, ETA 00:39:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.139 ms/op
# Warmup Iteration   2: 0.120 ms/op
# Warmup Iteration   3: 0.123 ms/op
# Warmup Iteration   4: 0.132 ms/op
# Warmup Iteration   5: 0.133 ms/op
Iteration   1: 0.140 ms/op
Iteration   2: 0.144 ms/op
Iteration   3: 0.129 ms/op
Iteration   4: 0.131 ms/op
Iteration   5: 0.131 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.135 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.129, 0.135, 0.144), stdev = 0.007
  CI (99.9%): [0.108, 0.161] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 1000, nValues = 2)

# Run progress: 18.66% complete, ETA 00:39:11
# Fork: 1 of 1
# Warmup Iteration   1: 4.230 ms/op
# Warmup Iteration   2: 4.160 ms/op
# Warmup Iteration   3: 3.900 ms/op
# Warmup Iteration   4: 4.351 ms/op
# Warmup Iteration   5: 4.227 ms/op
Iteration   1: 4.142 ms/op
Iteration   2: 4.548 ms/op
Iteration   3: 4.439 ms/op
Iteration   4: 4.364 ms/op
Iteration   5: 4.313 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  4.361 ±(99.9%) 0.582 ms/op [Average]
  (min, avg, max) = (4.142, 4.361, 4.548), stdev = 0.151
  CI (99.9%): [3.779, 4.943] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 1000, nValues = 3)

# Run progress: 19.03% complete, ETA 00:38:59
# Fork: 1 of 1
# Warmup Iteration   1: 4.122 ms/op
# Warmup Iteration   2: 3.984 ms/op
# Warmup Iteration   3: 4.037 ms/op
# Warmup Iteration   4: 4.402 ms/op
# Warmup Iteration   5: 4.534 ms/op
Iteration   1: 4.402 ms/op
Iteration   2: 4.336 ms/op
Iteration   3: 4.743 ms/op
Iteration   4: 4.435 ms/op
Iteration   5: 4.606 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  4.505 ±(99.9%) 0.642 ms/op [Average]
  (min, avg, max) = (4.336, 4.505, 4.743), stdev = 0.167
  CI (99.9%): [3.863, 5.146] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 100000, nValues = 2)

# Run progress: 19.40% complete, ETA 00:38:47
# Fork: 1 of 1
# Warmup Iteration   1: 1221.058 ms/op
# Warmup Iteration   2: 1130.148 ms/op
# Warmup Iteration   3: 1256.223 ms/op
# Warmup Iteration   4: 1117.569 ms/op
# Warmup Iteration   5: 1611.335 ms/op
Iteration   1: 1212.631 ms/op
Iteration   2: 1354.811 ms/op
Iteration   3: 1150.221 ms/op
Iteration   4: 1204.659 ms/op
Iteration   5: 1292.699 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1243.004 ±(99.9%) 310.281 ms/op [Average]
  (min, avg, max) = (1150.221, 1243.004, 1354.811), stdev = 80.579
  CI (99.9%): [932.723, 1553.285] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 100000, nValues = 3)

# Run progress: 19.78% complete, ETA 00:38:49
# Fork: 1 of 1
# Warmup Iteration   1: 1237.851 ms/op
# Warmup Iteration   2: 1120.898 ms/op
# Warmup Iteration   3: 1199.299 ms/op
# Warmup Iteration   4: 1677.245 ms/op
# Warmup Iteration   5: 1986.625 ms/op
Iteration   1: 1610.974 ms/op
Iteration   2: 1900.553 ms/op
Iteration   3: 1687.858 ms/op
Iteration   4: 1528.731 ms/op
Iteration   5: 1507.131 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1647.049 ±(99.9%) 611.292 ms/op [Average]
  (min, avg, max) = (1507.131, 1647.049, 1900.553), stdev = 158.751
  CI (99.9%): [1035.757, 2258.341] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 32, nValues = 2)

# Run progress: 20.15% complete, ETA 00:39:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.285 ms/op
# Warmup Iteration   2: 0.268 ms/op
# Warmup Iteration   3: 0.249 ms/op
# Warmup Iteration   4: 0.273 ms/op
# Warmup Iteration   5: 0.280 ms/op
Iteration   1: 0.272 ms/op
Iteration   2: 0.271 ms/op
Iteration   3: 0.308 ms/op
Iteration   4: 0.284 ms/op
Iteration   5: 0.279 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.283 ±(99.9%) 0.058 ms/op [Average]
  (min, avg, max) = (0.271, 0.283, 0.308), stdev = 0.015
  CI (99.9%): [0.225, 0.341] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 32, nValues = 3)

# Run progress: 20.52% complete, ETA 00:38:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.275 ms/op
# Warmup Iteration   2: 0.240 ms/op
# Warmup Iteration   3: 0.268 ms/op
# Warmup Iteration   4: 0.279 ms/op
# Warmup Iteration   5: 0.293 ms/op
Iteration   1: 0.269 ms/op
Iteration   2: 0.284 ms/op
Iteration   3: 0.287 ms/op
Iteration   4: 0.275 ms/op
Iteration   5: 0.280 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.279 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.269, 0.279, 0.287), stdev = 0.007
  CI (99.9%): [0.253, 0.305] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 1000, nValues = 2)

# Run progress: 20.90% complete, ETA 00:38:34
# Fork: 1 of 1
# Warmup Iteration   1: 8.760 ms/op
# Warmup Iteration   2: 7.545 ms/op
# Warmup Iteration   3: 8.299 ms/op
# Warmup Iteration   4: 8.725 ms/op
# Warmup Iteration   5: 8.740 ms/op
Iteration   1: 8.637 ms/op
Iteration   2: 9.046 ms/op
Iteration   3: 9.164 ms/op
Iteration   4: 9.780 ms/op
Iteration   5: 8.877 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  9.101 ±(99.9%) 1.650 ms/op [Average]
  (min, avg, max) = (8.637, 9.101, 9.780), stdev = 0.428
  CI (99.9%): [7.451, 10.751] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 1000, nValues = 3)

# Run progress: 21.27% complete, ETA 00:38:22
# Fork: 1 of 1
# Warmup Iteration   1: 8.661 ms/op
# Warmup Iteration   2: 7.416 ms/op
# Warmup Iteration   3: 7.752 ms/op
# Warmup Iteration   4: 9.776 ms/op
# Warmup Iteration   5: 8.998 ms/op
Iteration   1: 9.183 ms/op
Iteration   2: 8.582 ms/op
Iteration   3: 9.131 ms/op
Iteration   4: 8.784 ms/op
Iteration   5: 9.120 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  8.960 ±(99.9%) 1.017 ms/op [Average]
  (min, avg, max) = (8.582, 8.960, 9.183), stdev = 0.264
  CI (99.9%): [7.943, 9.977] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 100000, nValues = 2)

# Run progress: 21.64% complete, ETA 00:38:09
# Fork: 1 of 1
# Warmup Iteration   1: 2354.786 ms/op
# Warmup Iteration   2: 3025.076 ms/op
# Warmup Iteration   3: 2794.113 ms/op
# Warmup Iteration   4: 2950.402 ms/op
# Warmup Iteration   5: 2780.447 ms/op
Iteration   1: 3048.494 ms/op
Iteration   2: 3268.811 ms/op
Iteration   3: 3225.355 ms/op
Iteration   4: 3168.739 ms/op
Iteration   5: 3734.895 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  3289.259 ±(99.9%) 1010.723 ms/op [Average]
  (min, avg, max) = (3048.494, 3289.259, 3734.895), stdev = 262.481
  CI (99.9%): [2278.536, 4299.981] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 100000, nValues = 3)

# Run progress: 22.01% complete, ETA 00:39:13
# Fork: 1 of 1
# Warmup Iteration   1: 2557.358 ms/op
# Warmup Iteration   2: 3285.447 ms/op
# Warmup Iteration   3: 3673.813 ms/op
# Warmup Iteration   4: 3499.046 ms/op
# Warmup Iteration   5: 3432.692 ms/op
Iteration   1: 3584.883 ms/op
Iteration   2: 3219.717 ms/op
Iteration   3: 3512.112 ms/op
Iteration   4: 3403.160 ms/op
Iteration   5: 3339.412 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  3411.857 ±(99.9%) 552.104 ms/op [Average]
  (min, avg, max) = (3219.717, 3411.857, 3584.883), stdev = 143.380
  CI (99.9%): [2859.753, 3963.961] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 32, nValues = 2)

# Run progress: 22.39% complete, ETA 00:40:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.573 ms/op
# Warmup Iteration   2: 0.480 ms/op
# Warmup Iteration   3: 0.492 ms/op
# Warmup Iteration   4: 0.531 ms/op
# Warmup Iteration   5: 0.520 ms/op
Iteration   1: 0.606 ms/op
Iteration   2: 0.533 ms/op
Iteration   3: 0.519 ms/op
Iteration   4: 0.582 ms/op
Iteration   5: 0.578 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.563 ±(99.9%) 0.141 ms/op [Average]
  (min, avg, max) = (0.519, 0.563, 0.606), stdev = 0.037
  CI (99.9%): [0.422, 0.704] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 32, nValues = 3)

# Run progress: 22.76% complete, ETA 00:40:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.556 ms/op
# Warmup Iteration   2: 0.481 ms/op
# Warmup Iteration   3: 0.481 ms/op
# Warmup Iteration   4: 0.519 ms/op
# Warmup Iteration   5: 0.561 ms/op
Iteration   1: 0.549 ms/op
Iteration   2: 0.593 ms/op
Iteration   3: 0.591 ms/op
Iteration   4: 0.553 ms/op
Iteration   5: 0.563 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  0.570 ±(99.9%) 0.081 ms/op [Average]
  (min, avg, max) = (0.549, 0.570, 0.593), stdev = 0.021
  CI (99.9%): [0.489, 0.650] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 1000, nValues = 2)

# Run progress: 23.13% complete, ETA 00:39:55
# Fork: 1 of 1
# Warmup Iteration   1: 20.814 ms/op
# Warmup Iteration   2: 16.760 ms/op
# Warmup Iteration   3: 15.551 ms/op
# Warmup Iteration   4: 17.707 ms/op
# Warmup Iteration   5: 18.011 ms/op
Iteration   1: 17.192 ms/op
Iteration   2: 19.674 ms/op
Iteration   3: 17.779 ms/op
Iteration   4: 16.940 ms/op
Iteration   5: 17.754 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  17.868 ±(99.9%) 4.129 ms/op [Average]
  (min, avg, max) = (16.940, 17.868, 19.674), stdev = 1.072
  CI (99.9%): [13.739, 21.996] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 1000, nValues = 3)

# Run progress: 23.51% complete, ETA 00:39:40
# Fork: 1 of 1
# Warmup Iteration   1: 21.944 ms/op
# Warmup Iteration   2: 15.711 ms/op
# Warmup Iteration   3: 15.411 ms/op
# Warmup Iteration   4: 17.961 ms/op
# Warmup Iteration   5: 17.695 ms/op
Iteration   1: 17.178 ms/op
Iteration   2: 17.483 ms/op
Iteration   3: 19.752 ms/op
Iteration   4: 17.061 ms/op
Iteration   5: 18.059 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  17.907 ±(99.9%) 4.242 ms/op [Average]
  (min, avg, max) = (17.061, 17.907, 19.752), stdev = 1.102
  CI (99.9%): [13.664, 22.149] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 100000, nValues = 2)

# Run progress: 23.88% complete, ETA 00:39:25
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 100000, nValues = 3)

# Run progress: 24.25% complete, ETA 00:39:08
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 32, nValues = 2)

# Run progress: 24.63% complete, ETA 00:39:03
# Fork: 1 of 1
# Warmup Iteration   1: 1.128 ms/op
# Warmup Iteration   2: 1.035 ms/op
# Warmup Iteration   3: 1.024 ms/op
# Warmup Iteration   4: 1.224 ms/op
# Warmup Iteration   5: 1.270 ms/op
Iteration   1: 1.323 ms/op
Iteration   2: 1.226 ms/op
Iteration   3: 1.255 ms/op
Iteration   4: 1.121 ms/op
Iteration   5: 1.237 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1.232 ±(99.9%) 0.280 ms/op [Average]
  (min, avg, max) = (1.121, 1.232, 1.323), stdev = 0.073
  CI (99.9%): [0.952, 1.513] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 32, nValues = 3)

# Run progress: 25.00% complete, ETA 00:38:48
# Fork: 1 of 1
# Warmup Iteration   1: 1.165 ms/op
# Warmup Iteration   2: 0.967 ms/op
# Warmup Iteration   3: 0.995 ms/op
# Warmup Iteration   4: 1.100 ms/op
# Warmup Iteration   5: 1.062 ms/op
Iteration   1: 1.289 ms/op
Iteration   2: 1.155 ms/op
Iteration   3: 1.159 ms/op
Iteration   4: 1.133 ms/op
Iteration   5: 1.062 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1.159 ±(99.9%) 0.316 ms/op [Average]
  (min, avg, max) = (1.062, 1.159, 1.289), stdev = 0.082
  CI (99.9%): [0.844, 1.475] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 1000, nValues = 2)

# Run progress: 25.37% complete, ETA 00:38:33
# Fork: 1 of 1
# Warmup Iteration   1: 50.833 ms/op
# Warmup Iteration   2: 30.808 ms/op
# Warmup Iteration   3: 31.419 ms/op
# Warmup Iteration   4: 35.051 ms/op
# Warmup Iteration   5: 39.363 ms/op
Iteration   1: 37.896 ms/op
Iteration   2: 38.023 ms/op
Iteration   3: 36.127 ms/op
Iteration   4: 35.971 ms/op
Iteration   5: 35.648 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  36.733 ±(99.9%) 4.366 ms/op [Average]
  (min, avg, max) = (35.648, 36.733, 38.023), stdev = 1.134
  CI (99.9%): [32.367, 41.099] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 1000, nValues = 3)

# Run progress: 25.75% complete, ETA 00:38:20
# Fork: 1 of 1
# Warmup Iteration   1: 48.459 ms/op
# Warmup Iteration   2: 31.856 ms/op
# Warmup Iteration   3: 31.252 ms/op
# Warmup Iteration   4: 36.447 ms/op
# Warmup Iteration   5: 36.613 ms/op
Iteration   1: 36.311 ms/op
Iteration   2: 39.732 ms/op
Iteration   3: 35.429 ms/op
Iteration   4: 35.379 ms/op
Iteration   5: 35.166 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  36.403 ±(99.9%) 7.361 ms/op [Average]
  (min, avg, max) = (35.166, 36.403, 39.732), stdev = 1.912
  CI (99.9%): [29.043, 43.764] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 100000, nValues = 2)

# Run progress: 26.12% complete, ETA 00:38:05
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 100000, nValues = 3)

# Run progress: 26.49% complete, ETA 00:37:53
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 32, nValues = 2)

# Run progress: 26.87% complete, ETA 00:37:57
# Fork: 1 of 1
# Warmup Iteration   1: 2.442 ms/op
# Warmup Iteration   2: 2.050 ms/op
# Warmup Iteration   3: 2.158 ms/op
# Warmup Iteration   4: 2.377 ms/op
# Warmup Iteration   5: 2.566 ms/op
Iteration   1: 2.467 ms/op
Iteration   2: 2.338 ms/op
Iteration   3: 2.321 ms/op
Iteration   4: 2.464 ms/op
Iteration   5: 2.304 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  2.379 ±(99.9%) 0.308 ms/op [Average]
  (min, avg, max) = (2.304, 2.379, 2.467), stdev = 0.080
  CI (99.9%): [2.070, 2.687] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 32, nValues = 3)

# Run progress: 27.24% complete, ETA 00:37:42
# Fork: 1 of 1
# Warmup Iteration   1: 2.441 ms/op
# Warmup Iteration   2: 1.974 ms/op
# Warmup Iteration   3: 2.132 ms/op
# Warmup Iteration   4: 2.343 ms/op
# Warmup Iteration   5: 2.326 ms/op
Iteration   1: 2.735 ms/op
Iteration   2: 2.344 ms/op
Iteration   3: 2.408 ms/op
Iteration   4: 2.495 ms/op
Iteration   5: 2.455 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  2.487 ±(99.9%) 0.575 ms/op [Average]
  (min, avg, max) = (2.344, 2.487, 2.735), stdev = 0.149
  CI (99.9%): [1.912, 3.063] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 1000, nValues = 2)

# Run progress: 27.61% complete, ETA 00:37:28
# Fork: 1 of 1
# Warmup Iteration   1: 105.016 ms/op
# Warmup Iteration   2: 62.501 ms/op
# Warmup Iteration   3: 72.960 ms/op
# Warmup Iteration   4: 72.853 ms/op
# Warmup Iteration   5: 70.578 ms/op
Iteration   1: 72.310 ms/op
Iteration   2: 76.241 ms/op
Iteration   3: 70.526 ms/op
Iteration   4: 74.836 ms/op
Iteration   5: 70.862 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  72.955 ±(99.9%) 9.633 ms/op [Average]
  (min, avg, max) = (70.526, 72.955, 76.241), stdev = 2.502
  CI (99.9%): [63.322, 82.588] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 1000, nValues = 3)

# Run progress: 27.99% complete, ETA 00:37:15
# Fork: 1 of 1
# Warmup Iteration   1: 103.064 ms/op
# Warmup Iteration   2: 63.565 ms/op
# Warmup Iteration   3: 67.524 ms/op
# Warmup Iteration   4: 74.927 ms/op
# Warmup Iteration   5: 74.772 ms/op
Iteration   1: 78.172 ms/op
Iteration   2: 80.133 ms/op
Iteration   3: 75.422 ms/op
Iteration   4: 74.605 ms/op
Iteration   5: 74.742 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  76.615 ±(99.9%) 9.388 ms/op [Average]
  (min, avg, max) = (74.605, 76.615, 80.133), stdev = 2.438
  CI (99.9%): [67.227, 86.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 100000, nValues = 2)

# Run progress: 28.36% complete, ETA 00:37:01
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 100000, nValues = 3)

# Run progress: 28.73% complete, ETA 00:36:45
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 32, nValues = 2)

# Run progress: 29.10% complete, ETA 00:36:39
# Fork: 1 of 1
# Warmup Iteration   1: 5.002 ms/op
# Warmup Iteration   2: 4.067 ms/op
# Warmup Iteration   3: 4.094 ms/op
# Warmup Iteration   4: 4.599 ms/op
# Warmup Iteration   5: 4.577 ms/op
Iteration   1: 4.932 ms/op
Iteration   2: 4.511 ms/op
Iteration   3: 4.888 ms/op
Iteration   4: 5.836 ms/op
Iteration   5: 5.801 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  5.194 ±(99.9%) 2.286 ms/op [Average]
  (min, avg, max) = (4.511, 5.194, 5.836), stdev = 0.594
  CI (99.9%): [2.907, 7.480] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 32, nValues = 3)

# Run progress: 29.48% complete, ETA 00:36:24
# Fork: 1 of 1
# Warmup Iteration   1: 4.940 ms/op
# Warmup Iteration   2: 3.995 ms/op
# Warmup Iteration   3: 4.194 ms/op
# Warmup Iteration   4: 4.585 ms/op
# Warmup Iteration   5: 4.635 ms/op
Iteration   1: 5.436 ms/op
Iteration   2: 4.698 ms/op
Iteration   3: 4.792 ms/op
Iteration   4: 5.205 ms/op
Iteration   5: 4.506 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  4.927 ±(99.9%) 1.472 ms/op [Average]
  (min, avg, max) = (4.506, 4.927, 5.436), stdev = 0.382
  CI (99.9%): [3.456, 6.399] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 1000, nValues = 2)

# Run progress: 29.85% complete, ETA 00:36:10
# Fork: 1 of 1
# Warmup Iteration   1: 265.113 ms/op
# Warmup Iteration   2: 271.889 ms/op
# Warmup Iteration   3: 265.347 ms/op
# Warmup Iteration   4: 210.789 ms/op
# Warmup Iteration   5: 230.236 ms/op
Iteration   1: 267.394 ms/op
Iteration   2: 264.482 ms/op
Iteration   3: 274.521 ms/op
Iteration   4: 273.946 ms/op
Iteration   5: 202.190 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  256.506 ±(99.9%) 118.076 ms/op [Average]
  (min, avg, max) = (202.190, 256.506, 274.521), stdev = 30.664
  CI (99.9%): [138.430, 374.583] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 1000, nValues = 3)

# Run progress: 30.22% complete, ETA 00:35:58
# Fork: 1 of 1
# Warmup Iteration   1: 222.992 ms/op
# Warmup Iteration   2: 154.006 ms/op
# Warmup Iteration   3: 172.082 ms/op
# Warmup Iteration   4: 212.937 ms/op
# Warmup Iteration   5: 197.028 ms/op
Iteration   1: 308.209 ms/op
Iteration   2: 264.826 ms/op
Iteration   3: 260.515 ms/op
Iteration   4: 207.872 ms/op
Iteration   5: 183.366 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  244.958 ±(99.9%) 190.660 ms/op [Average]
  (min, avg, max) = (183.366, 244.958, 308.209), stdev = 49.514
  CI (99.9%): [54.297, 435.618] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 100000, nValues = 2)

# Run progress: 30.60% complete, ETA 00:35:47
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 100000, nValues = 3)

# Run progress: 30.97% complete, ETA 00:35:41
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 32, nValues = 2)

# Run progress: 31.34% complete, ETA 00:35:41
# Fork: 1 of 1
# Warmup Iteration   1: 14.169 ms/op
# Warmup Iteration   2: 8.443 ms/op
# Warmup Iteration   3: 9.364 ms/op
# Warmup Iteration   4: 9.612 ms/op
# Warmup Iteration   5: 9.732 ms/op
Iteration   1: 11.362 ms/op
Iteration   2: 9.278 ms/op
Iteration   3: 9.676 ms/op
Iteration   4: 9.598 ms/op
Iteration   5: 9.416 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  9.866 ±(99.9%) 3.276 ms/op [Average]
  (min, avg, max) = (9.278, 9.866, 11.362), stdev = 0.851
  CI (99.9%): [6.590, 13.142] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 32, nValues = 3)

# Run progress: 31.72% complete, ETA 00:35:27
# Fork: 1 of 1
# Warmup Iteration   1: 10.115 ms/op
# Warmup Iteration   2: 8.136 ms/op
# Warmup Iteration   3: 8.179 ms/op
# Warmup Iteration   4: 9.278 ms/op
# Warmup Iteration   5: 8.666 ms/op
Iteration   1: 10.163 ms/op
Iteration   2: 9.643 ms/op
Iteration   3: 9.494 ms/op
Iteration   4: 9.237 ms/op
Iteration   5: 8.910 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  9.489 ±(99.9%) 1.803 ms/op [Average]
  (min, avg, max) = (8.910, 9.489, 10.163), stdev = 0.468
  CI (99.9%): [7.687, 11.292] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 1000, nValues = 2)

# Run progress: 32.09% complete, ETA 00:35:13
# Fork: 1 of 1
# Warmup Iteration   1: 544.489 ms/op
# Warmup Iteration   2: 628.522 ms/op
# Warmup Iteration   3: 644.286 ms/op
# Warmup Iteration   4: 567.304 ms/op
# Warmup Iteration   5: 668.375 ms/op
Iteration   1: 632.381 ms/op
Iteration   2: 701.766 ms/op
Iteration   3: 599.823 ms/op
Iteration   4: 743.841 ms/op
Iteration   5: 797.706 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  695.103 ±(99.9%) 310.207 ms/op [Average]
  (min, avg, max) = (599.823, 695.103, 797.706), stdev = 80.560
  CI (99.9%): [384.896, 1005.310] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 1000, nValues = 3)

# Run progress: 32.46% complete, ETA 00:35:05
# Fork: 1 of 1
# Warmup Iteration   1: 572.328 ms/op
# Warmup Iteration   2: 780.944 ms/op
# Warmup Iteration   3: 774.222 ms/op
# Warmup Iteration   4: 680.184 ms/op
# Warmup Iteration   5: 755.068 ms/op
Iteration   1: 850.664 ms/op
Iteration   2: 688.552 ms/op
Iteration   3: 802.675 ms/op
Iteration   4: 884.642 ms/op
Iteration   5: 743.497 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  794.006 ±(99.9%) 305.464 ms/op [Average]
  (min, avg, max) = (688.552, 794.006, 884.642), stdev = 79.328
  CI (99.9%): [488.542, 1099.470] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 100000, nValues = 2)

# Run progress: 32.84% complete, ETA 00:35:03
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 100000, nValues = 3)

# Run progress: 33.21% complete, ETA 00:34:53
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32768, nKeys = 32, nValues = 2)

# Run progress: 33.58% complete, ETA 00:34:47
# Fork: 1 of 1
# Warmup Iteration   1: 23.736 ms/op
# Warmup Iteration   2: 17.285 ms/op
# Warmup Iteration   3: 16.138 ms/op
# Warmup Iteration   4: 20.387 ms/op
# Warmup Iteration   5: 18.430 ms/op
Iteration   1: 19.170 ms/op
Iteration   2: 19.363 ms/op
Iteration   3: 17.486 ms/op
Iteration   4: 17.755 ms/op
Iteration   5: 18.841 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  18.523 ±(99.9%) 3.274 ms/op [Average]
  (min, avg, max) = (17.486, 18.523, 19.363), stdev = 0.850
  CI (99.9%): [15.249, 21.797] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32768, nKeys = 32, nValues = 3)

# Run progress: 33.96% complete, ETA 00:34:33
# Fork: 1 of 1
# Warmup Iteration   1: 23.451 ms/op
# Warmup Iteration   2: 16.466 ms/op
# Warmup Iteration   3: 16.663 ms/op
# Warmup Iteration   4: 17.678 ms/op
# Warmup Iteration   5: 17.883 ms/op
Iteration   1: 21.158 ms/op
Iteration   2: 18.248 ms/op
Iteration   3: 17.109 ms/op
Iteration   4: 18.935 ms/op
Iteration   5: 17.654 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  18.621 ±(99.9%) 6.056 ms/op [Average]
  (min, avg, max) = (17.109, 18.621, 21.158), stdev = 1.573
  CI (99.9%): [12.564, 24.677] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32768, nKeys = 1000, nValues = 2)

# Run progress: 34.33% complete, ETA 00:34:19
# Fork: 1 of 1
# Warmup Iteration   1: 1054.244 ms/op
# Warmup Iteration   2: 1322.076 ms/op
# Warmup Iteration   3: 1513.855 ms/op
# Warmup Iteration   4: 1272.016 ms/op
# Warmup Iteration   5: 1692.052 ms/op
Iteration   1: 1268.414 ms/op
Iteration   2: 1422.975 ms/op
Iteration   3: 1198.820 ms/op
Iteration   4: 1445.087 ms/op
Iteration   5: 1575.123 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1382.084 ±(99.9%) 575.706 ms/op [Average]
  (min, avg, max) = (1198.820, 1382.084, 1575.123), stdev = 149.509
  CI (99.9%): [806.377, 1957.790] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32768, nKeys = 1000, nValues = 3)

# Run progress: 34.70% complete, ETA 00:34:12
# Fork: 1 of 1
# Warmup Iteration   1: 1175.183 ms/op
# Warmup Iteration   2: 1521.086 ms/op
# Warmup Iteration   3: 1766.355 ms/op
# Warmup Iteration   4: 1573.036 ms/op
# Warmup Iteration   5: 1981.305 ms/op
Iteration   1: 1523.723 ms/op
Iteration   2: 1928.612 ms/op
Iteration   3: 1398.296 ms/op
Iteration   4: 1735.477 ms/op
Iteration   5: 1686.660 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  1654.554 ±(99.9%) 783.188 ms/op [Average]
  (min, avg, max) = (1398.296, 1654.554, 1928.612), stdev = 203.391
  CI (99.9%): [871.366, 2437.742] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32768, nKeys = 100000, nValues = 2)

# Run progress: 35.07% complete, ETA 00:34:10
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 32768, nKeys = 100000, nValues = 3)

# Run progress: 35.45% complete, ETA 00:34:01
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 65536, nKeys = 32, nValues = 2)

# Run progress: 35.82% complete, ETA 00:33:54
# Fork: 1 of 1
# Warmup Iteration   1: 54.123 ms/op
# Warmup Iteration   2: 32.514 ms/op
# Warmup Iteration   3: 39.301 ms/op
# Warmup Iteration   4: 43.317 ms/op
# Warmup Iteration   5: 41.784 ms/op
Iteration   1: 39.723 ms/op
Iteration   2: 35.953 ms/op
Iteration   3: 35.971 ms/op
Iteration   4: 37.667 ms/op
Iteration   5: 40.947 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  38.052 ±(99.9%) 8.622 ms/op [Average]
  (min, avg, max) = (35.953, 38.052, 40.947), stdev = 2.239
  CI (99.9%): [29.430, 46.675] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 65536, nKeys = 32, nValues = 3)

# Run progress: 36.19% complete, ETA 00:33:40
# Fork: 1 of 1
# Warmup Iteration   1: 49.050 ms/op
# Warmup Iteration   2: 31.706 ms/op
# Warmup Iteration   3: 33.134 ms/op
# Warmup Iteration   4: 38.971 ms/op
# Warmup Iteration   5: 36.653 ms/op
Iteration   1: 42.040 ms/op
Iteration   2: 37.050 ms/op
Iteration   3: 35.518 ms/op
Iteration   4: 34.941 ms/op
Iteration   5: 39.876 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  37.885 ±(99.9%) 11.583 ms/op [Average]
  (min, avg, max) = (34.941, 37.885, 42.040), stdev = 3.008
  CI (99.9%): [26.302, 49.468] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 65536, nKeys = 1000, nValues = 2)

# Run progress: 36.57% complete, ETA 00:33:26
# Fork: 1 of 1
# Warmup Iteration   1: 2384.273 ms/op
# Warmup Iteration   2: 2624.621 ms/op
# Warmup Iteration   3: 2775.660 ms/op
# Warmup Iteration   4: 2718.737 ms/op
# Warmup Iteration   5: 3099.046 ms/op
Iteration   1: 3322.436 ms/op
Iteration   2: 3475.868 ms/op
Iteration   3: 3427.879 ms/op
Iteration   4: 3285.866 ms/op
Iteration   5: 3325.537 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  3367.517 ±(99.9%) 309.521 ms/op [Average]
  (min, avg, max) = (3285.866, 3367.517, 3475.868), stdev = 80.382
  CI (99.9%): [3057.996, 3677.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 65536, nKeys = 1000, nValues = 3)

# Run progress: 36.94% complete, ETA 00:33:47
# Fork: 1 of 1
# Warmup Iteration   1: 2702.315 ms/op
# Warmup Iteration   2: 3258.904 ms/op
# Warmup Iteration   3: 3157.364 ms/op
# Warmup Iteration   4: 3457.591 ms/op
# Warmup Iteration   5: 3432.074 ms/op
Iteration   1: 3457.612 ms/op
Iteration   2: 3334.778 ms/op
Iteration   3: 3286.040 ms/op
Iteration   4: 3383.564 ms/op
Iteration   5: 3287.717 ms/op


Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark":
  3349.942 ±(99.9%) 278.398 ms/op [Average]
  (min, avg, max) = (3286.040, 3349.942, 3457.612), stdev = 72.299
  CI (99.9%): [3071.544, 3628.340] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 65536, nKeys = 100000, nValues = 2)

# Run progress: 37.31% complete, ETA 00:34:12
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark
# Parameters: (nCommit = 65536, nKeys = 100000, nValues = 3)

# Run progress: 37.69% complete, ETA 00:34:02
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.baselineCommitBenchmark(ImmutableCommitBenchmark.java:37)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.baselineCommitBenchmark_AverageTime(ImmutableCommitBenchmark_baselineCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1, nKeys = 32, nValues = 2)

# Run progress: 38.06% complete, ETA 00:33:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1, nKeys = 32, nValues = 3)

# Run progress: 38.43% complete, ETA 00:33:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1, nKeys = 1000, nValues = 2)

# Run progress: 38.81% complete, ETA 00:33:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1, nKeys = 1000, nValues = 3)

# Run progress: 39.18% complete, ETA 00:33:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1, nKeys = 100000, nValues = 2)

# Run progress: 39.55% complete, ETA 00:32:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.002 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.002 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1, nKeys = 100000, nValues = 3)

# Run progress: 39.93% complete, ETA 00:32:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.007 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.007 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2, nKeys = 32, nValues = 2)

# Run progress: 40.30% complete, ETA 00:32:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2, nKeys = 32, nValues = 3)

# Run progress: 40.67% complete, ETA 00:32:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2, nKeys = 1000, nValues = 2)

# Run progress: 41.04% complete, ETA 00:31:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2, nKeys = 1000, nValues = 3)

# Run progress: 41.42% complete, ETA 00:31:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2, nKeys = 100000, nValues = 2)

# Run progress: 41.79% complete, ETA 00:31:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2, nKeys = 100000, nValues = 3)

# Run progress: 42.16% complete, ETA 00:30:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4, nKeys = 32, nValues = 2)

# Run progress: 42.54% complete, ETA 00:30:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4, nKeys = 32, nValues = 3)

# Run progress: 42.91% complete, ETA 00:30:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4, nKeys = 1000, nValues = 2)

# Run progress: 43.28% complete, ETA 00:30:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4, nKeys = 1000, nValues = 3)

# Run progress: 43.66% complete, ETA 00:29:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4, nKeys = 100000, nValues = 2)

# Run progress: 44.03% complete, ETA 00:29:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4, nKeys = 100000, nValues = 3)

# Run progress: 44.40% complete, ETA 00:29:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8, nKeys = 32, nValues = 2)

# Run progress: 44.78% complete, ETA 00:29:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8, nKeys = 32, nValues = 3)

# Run progress: 45.15% complete, ETA 00:29:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8, nKeys = 1000, nValues = 2)

# Run progress: 45.52% complete, ETA 00:28:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8, nKeys = 1000, nValues = 3)

# Run progress: 45.90% complete, ETA 00:28:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8, nKeys = 100000, nValues = 2)

# Run progress: 46.27% complete, ETA 00:28:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8, nKeys = 100000, nValues = 3)

# Run progress: 46.64% complete, ETA 00:28:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 32, nValues = 2)

# Run progress: 47.01% complete, ETA 00:27:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 32, nValues = 3)

# Run progress: 47.39% complete, ETA 00:27:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 1000, nValues = 2)

# Run progress: 47.76% complete, ETA 00:27:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 1000, nValues = 3)

# Run progress: 48.13% complete, ETA 00:27:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 100000, nValues = 2)

# Run progress: 48.51% complete, ETA 00:26:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16, nKeys = 100000, nValues = 3)

# Run progress: 48.88% complete, ETA 00:26:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 32, nValues = 2)

# Run progress: 49.25% complete, ETA 00:26:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 32, nValues = 3)

# Run progress: 49.63% complete, ETA 00:26:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 1000, nValues = 2)

# Run progress: 50.00% complete, ETA 00:26:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 1000, nValues = 3)

# Run progress: 50.37% complete, ETA 00:25:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 100000, nValues = 2)

# Run progress: 50.75% complete, ETA 00:25:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32, nKeys = 100000, nValues = 3)

# Run progress: 51.12% complete, ETA 00:25:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.264 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.264 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 32, nValues = 2)

# Run progress: 51.49% complete, ETA 00:25:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 32, nValues = 3)

# Run progress: 51.87% complete, ETA 00:24:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 1000, nValues = 2)

# Run progress: 52.24% complete, ETA 00:24:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 1000, nValues = 3)

# Run progress: 52.61% complete, ETA 00:24:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 100000, nValues = 2)

# Run progress: 52.99% complete, ETA 00:24:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 64, nKeys = 100000, nValues = 3)

# Run progress: 53.36% complete, ETA 00:23:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.919 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  0.919 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 32, nValues = 2)

# Run progress: 53.73% complete, ETA 00:23:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.062 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 32, nValues = 3)

# Run progress: 54.10% complete, ETA 00:23:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.066 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 1000, nValues = 2)

# Run progress: 54.48% complete, ETA 00:23:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.039 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 1000, nValues = 3)

# Run progress: 54.85% complete, ETA 00:23:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 100000, nValues = 2)

# Run progress: 55.22% complete, ETA 00:22:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.035 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 128, nKeys = 100000, nValues = 3)

# Run progress: 55.60% complete, ETA 00:22:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 32, nValues = 2)

# Run progress: 55.97% complete, ETA 00:22:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.034 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.120 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 32, nValues = 3)

# Run progress: 56.34% complete, ETA 00:22:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.051 ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 1000, nValues = 2)

# Run progress: 56.72% complete, ETA 00:22:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.163 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 1000, nValues = 3)

# Run progress: 57.09% complete, ETA 00:21:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.055 ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 100000, nValues = 2)

# Run progress: 57.46% complete, ETA 00:21:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.028 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.049 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.068 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 256, nKeys = 100000, nValues = 3)

# Run progress: 57.84% complete, ETA 00:21:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.073 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 32, nValues = 2)

# Run progress: 58.21% complete, ETA 00:21:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.041 ms/op
# Warmup Iteration   3: 0.099 ms/op
# Warmup Iteration   4: 0.039 ms/op
# Warmup Iteration   5: 0.143 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 32, nValues = 3)

# Run progress: 58.58% complete, ETA 00:20:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.050 ms/op
# Warmup Iteration   3: 0.060 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.175 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 1000, nValues = 2)

# Run progress: 58.96% complete, ETA 00:20:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.053 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.106 ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 1000, nValues = 3)

# Run progress: 59.33% complete, ETA 00:20:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.076 ms/op
# Warmup Iteration   4: 0.039 ms/op
# Warmup Iteration   5: 0.235 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 100000, nValues = 2)

# Run progress: 59.70% complete, ETA 00:20:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.056 ms/op
# Warmup Iteration   2: 0.049 ms/op
# Warmup Iteration   3: 0.105 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.058 ms/op
Iteration   1: 2.909 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  2.909 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 512, nKeys = 100000, nValues = 3)

# Run progress: 60.07% complete, ETA 00:20:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.054 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.097 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.130 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 32, nValues = 2)

# Run progress: 60.45% complete, ETA 00:19:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.099 ms/op
# Warmup Iteration   2: 0.082 ms/op
# Warmup Iteration   3: 0.133 ms/op
# Warmup Iteration   4: 0.080 ms/op
# Warmup Iteration   5: 0.351 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 32, nValues = 3)

# Run progress: 60.82% complete, ETA 00:19:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.113 ms/op
# Warmup Iteration   3: 0.076 ms/op
# Warmup Iteration   4: 0.249 ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 1000, nValues = 2)

# Run progress: 61.19% complete, ETA 00:19:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.084 ms/op
# Warmup Iteration   2: 0.092 ms/op
# Warmup Iteration   3: 0.150 ms/op
# Warmup Iteration   4: 0.075 ms/op
# Warmup Iteration   5: 0.478 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 1000, nValues = 3)

# Run progress: 61.57% complete, ETA 00:19:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ms/op
# Warmup Iteration   2: 0.113 ms/op
# Warmup Iteration   3: 0.074 ms/op
# Warmup Iteration   4: 0.212 ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 100000, nValues = 2)

# Run progress: 61.94% complete, ETA 00:19:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.101 ms/op
# Warmup Iteration   2: 0.120 ms/op
# Warmup Iteration   3: 0.152 ms/op
# Warmup Iteration   4: 0.085 ms/op
# Warmup Iteration   5: 0.288 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 1024, nKeys = 100000, nValues = 3)

# Run progress: 62.31% complete, ETA 00:18:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.121 ms/op
# Warmup Iteration   2: 0.096 ms/op
# Warmup Iteration   3: 0.193 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.255 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 32, nValues = 2)

# Run progress: 62.69% complete, ETA 00:18:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.188 ms/op
# Warmup Iteration   2: 0.219 ms/op
# Warmup Iteration   3: 0.166 ms/op
# Warmup Iteration   4: 0.380 ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 32, nValues = 3)

# Run progress: 63.06% complete, ETA 00:18:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.175 ms/op
# Warmup Iteration   2: 0.245 ms/op
# Warmup Iteration   3: 0.243 ms/op
# Warmup Iteration   4: 0.175 ms/op
# Warmup Iteration   5: 0.645 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 1000, nValues = 2)

# Run progress: 63.43% complete, ETA 00:18:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.199 ms/op
# Warmup Iteration   2: 0.214 ms/op
# Warmup Iteration   3: 0.232 ms/op
# Warmup Iteration   4: 0.186 ms/op
# Warmup Iteration   5: 0.623 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 1000, nValues = 3)

# Run progress: 63.81% complete, ETA 00:18:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.179 ms/op
# Warmup Iteration   2: 0.178 ms/op
# Warmup Iteration   3: 0.310 ms/op
# Warmup Iteration   4: 0.140 ms/op
# Warmup Iteration   5: 1.537 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 100000, nValues = 2)

# Run progress: 64.18% complete, ETA 00:17:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.217 ms/op
# Warmup Iteration   2: 0.233 ms/op
# Warmup Iteration   3: 0.326 ms/op
# Warmup Iteration   4: 0.166 ms/op
# Warmup Iteration   5: 0.565 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 2048, nKeys = 100000, nValues = 3)

# Run progress: 64.55% complete, ETA 00:17:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.217 ms/op
# Warmup Iteration   2: 0.229 ms/op
# Warmup Iteration   3: 0.347 ms/op
# Warmup Iteration   4: 0.175 ms/op
# Warmup Iteration   5: 0.579 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 32, nValues = 2)

# Run progress: 64.93% complete, ETA 00:17:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.359 ms/op
# Warmup Iteration   2: 0.486 ms/op
# Warmup Iteration   3: 0.312 ms/op
# Warmup Iteration   4: 0.784 ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 32, nValues = 3)

# Run progress: 65.30% complete, ETA 00:17:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.416 ms/op
# Warmup Iteration   2: 0.391 ms/op
# Warmup Iteration   3: 0.666 ms/op
# Warmup Iteration   4: 0.347 ms/op
# Warmup Iteration   5: 0.817 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 1000, nValues = 2)

# Run progress: 65.67% complete, ETA 00:17:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.387 ms/op
# Warmup Iteration   2: 0.383 ms/op
# Warmup Iteration   3: 0.603 ms/op
# Warmup Iteration   4: 0.382 ms/op
# Warmup Iteration   5: 0.930 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 1000, nValues = 3)

# Run progress: 66.04% complete, ETA 00:16:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.361 ms/op
# Warmup Iteration   2: 0.438 ms/op
# Warmup Iteration   3: 0.489 ms/op
# Warmup Iteration   4: 0.352 ms/op
# Warmup Iteration   5: 1.436 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 100000, nValues = 2)

# Run progress: 66.42% complete, ETA 00:16:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.432 ms/op
# Warmup Iteration   2: 0.472 ms/op
# Warmup Iteration   3: 0.714 ms/op
# Warmup Iteration   4: 0.326 ms/op
# Warmup Iteration   5: 1.027 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 4096, nKeys = 100000, nValues = 3)

# Run progress: 66.79% complete, ETA 00:16:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.441 ms/op
# Warmup Iteration   2: 0.357 ms/op
# Warmup Iteration   3: 0.617 ms/op
# Warmup Iteration   4: 0.384 ms/op
# Warmup Iteration   5: 0.845 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 32, nValues = 2)

# Run progress: 67.16% complete, ETA 00:16:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.658 ms/op
# Warmup Iteration   2: 0.749 ms/op
# Warmup Iteration   3: 1.259 ms/op
# Warmup Iteration   4: 0.590 ms/op
# Warmup Iteration   5: 4.962 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 32, nValues = 3)

# Run progress: 67.54% complete, ETA 00:16:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.696 ms/op
# Warmup Iteration   2: 0.691 ms/op
# Warmup Iteration   3: 1.327 ms/op
# Warmup Iteration   4: 0.663 ms/op
# Warmup Iteration   5: 2.472 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 1000, nValues = 2)

# Run progress: 67.91% complete, ETA 00:15:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.794 ms/op
# Warmup Iteration   2: 0.625 ms/op
# Warmup Iteration   3: 1.204 ms/op
# Warmup Iteration   4: 0.654 ms/op
# Warmup Iteration   5: 3.022 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 1000, nValues = 3)

# Run progress: 68.28% complete, ETA 00:15:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.681 ms/op
# Warmup Iteration   2: 0.726 ms/op
# Warmup Iteration   3: 1.242 ms/op
# Warmup Iteration   4: 0.581 ms/op
# Warmup Iteration   5: 5.323 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 100000, nValues = 2)

# Run progress: 68.66% complete, ETA 00:15:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.882 ms/op
# Warmup Iteration   2: 0.869 ms/op
# Warmup Iteration   3: 1.533 ms/op
# Warmup Iteration   4: 0.718 ms/op
# Warmup Iteration   5: 0.989 ms/op
Iteration   1: 46.398 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark":
  46.398 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 8192, nKeys = 100000, nValues = 3)

# Run progress: 69.03% complete, ETA 00:15:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.888 ms/op
# Warmup Iteration   2: 0.937 ms/op
# Warmup Iteration   3: 1.507 ms/op
# Warmup Iteration   4: 0.711 ms/op
# Warmup Iteration   5: 2.055 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 32, nValues = 2)

# Run progress: 69.40% complete, ETA 00:15:07
# Fork: 1 of 1
# Warmup Iteration   1: 1.608 ms/op
# Warmup Iteration   2: 1.280 ms/op
# Warmup Iteration   3: 2.506 ms/op
# Warmup Iteration   4: 1.222 ms/op
# Warmup Iteration   5: 6.490 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 32, nValues = 3)

# Run progress: 69.78% complete, ETA 00:14:55
# Fork: 1 of 1
# Warmup Iteration   1: 1.470 ms/op
# Warmup Iteration   2: 1.507 ms/op
# Warmup Iteration   3: 2.131 ms/op
# Warmup Iteration   4: 1.418 ms/op
# Warmup Iteration   5: 7.102 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 1000, nValues = 2)

# Run progress: 70.15% complete, ETA 00:14:43
# Fork: 1 of 1
# Warmup Iteration   1: 1.375 ms/op
# Warmup Iteration   2: 1.471 ms/op
# Warmup Iteration   3: 2.045 ms/op
# Warmup Iteration   4: 1.393 ms/op
# Warmup Iteration   5: 11.180 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 1000, nValues = 3)

# Run progress: 70.52% complete, ETA 00:14:32
# Fork: 1 of 1
# Warmup Iteration   1: 1.488 ms/op
# Warmup Iteration   2: 1.300 ms/op
# Warmup Iteration   3: 2.437 ms/op
# Warmup Iteration   4: 1.290 ms/op
# Warmup Iteration   5: 6.063 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 100000, nValues = 2)

# Run progress: 70.90% complete, ETA 00:14:20
# Fork: 1 of 1
# Warmup Iteration   1: 1.714 ms/op
# Warmup Iteration   2: 1.881 ms/op
# Warmup Iteration   3: 2.540 ms/op
# Warmup Iteration   4: 1.434 ms/op
# Warmup Iteration   5: 4.398 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 16384, nKeys = 100000, nValues = 3)

# Run progress: 71.27% complete, ETA 00:14:08
# Fork: 1 of 1
# Warmup Iteration   1: 1.625 ms/op
# Warmup Iteration   2: 1.965 ms/op
# Warmup Iteration   3: 3.052 ms/op
# Warmup Iteration   4: 1.373 ms/op
# Warmup Iteration   5: 4.136 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32768, nKeys = 32, nValues = 2)

# Run progress: 71.64% complete, ETA 00:13:57
# Fork: 1 of 1
# Warmup Iteration   1: 2.795 ms/op
# Warmup Iteration   2: 3.292 ms/op
# Warmup Iteration   3: 3.832 ms/op
# Warmup Iteration   4: 2.894 ms/op
# Warmup Iteration   5: 14.888 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32768, nKeys = 32, nValues = 3)

# Run progress: 72.01% complete, ETA 00:13:46
# Fork: 1 of 1
# Warmup Iteration   1: 2.788 ms/op
# Warmup Iteration   2: 2.839 ms/op
# Warmup Iteration   3: 4.924 ms/op
# Warmup Iteration   4: 2.290 ms/op
# Warmup Iteration   5: 19.492 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32768, nKeys = 1000, nValues = 2)

# Run progress: 72.39% complete, ETA 00:13:34
# Fork: 1 of 1
# Warmup Iteration   1: 2.855 ms/op
# Warmup Iteration   2: 3.006 ms/op
# Warmup Iteration   3: 3.857 ms/op
# Warmup Iteration   4: 2.917 ms/op
# Warmup Iteration   5: 15.444 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32768, nKeys = 1000, nValues = 3)

# Run progress: 72.76% complete, ETA 00:13:22
# Fork: 1 of 1
# Warmup Iteration   1: 2.835 ms/op
# Warmup Iteration   2: 2.730 ms/op
# Warmup Iteration   3: 4.879 ms/op
# Warmup Iteration   4: 2.335 ms/op
# Warmup Iteration   5: 18.346 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32768, nKeys = 100000, nValues = 2)

# Run progress: 73.13% complete, ETA 00:13:11
# Fork: 1 of 1
# Warmup Iteration   1: 3.755 ms/op
# Warmup Iteration   2: 3.340 ms/op
# Warmup Iteration   3: 6.053 ms/op
# Warmup Iteration   4: 2.703 ms/op
# Warmup Iteration   5: 8.271 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 32768, nKeys = 100000, nValues = 3)

# Run progress: 73.51% complete, ETA 00:13:00
# Fork: 1 of 1
# Warmup Iteration   1: 3.536 ms/op
# Warmup Iteration   2: 3.730 ms/op
# Warmup Iteration   3: 6.379 ms/op
# Warmup Iteration   4: 2.806 ms/op
# Warmup Iteration   5: 8.027 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 65536, nKeys = 32, nValues = 2)

# Run progress: 73.88% complete, ETA 00:12:48
# Fork: 1 of 1
# Warmup Iteration   1: 6.274 ms/op
# Warmup Iteration   2: 6.684 ms/op
# Warmup Iteration   3: 7.265 ms/op
# Warmup Iteration   4: 5.784 ms/op
# Warmup Iteration   5: 23.853 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 65536, nKeys = 32, nValues = 3)

# Run progress: 74.25% complete, ETA 00:12:37
# Fork: 1 of 1
# Warmup Iteration   1: 6.068 ms/op
# Warmup Iteration   2: 5.479 ms/op
# Warmup Iteration   3: 9.640 ms/op
# Warmup Iteration   4: 5.262 ms/op
# Warmup Iteration   5: 19.543 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 65536, nKeys = 1000, nValues = 2)

# Run progress: 74.63% complete, ETA 00:12:25
# Fork: 1 of 1
# Warmup Iteration   1: 5.825 ms/op
# Warmup Iteration   2: 5.366 ms/op
# Warmup Iteration   3: 8.794 ms/op
# Warmup Iteration   4: 5.102 ms/op
# Warmup Iteration   5: 25.661 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 65536, nKeys = 1000, nValues = 3)

# Run progress: 75.00% complete, ETA 00:12:14
# Fork: 1 of 1
# Warmup Iteration   1: 6.313 ms/op
# Warmup Iteration   2: 6.742 ms/op
# Warmup Iteration   3: 5.022 ms/op
# Warmup Iteration   4: 12.460 ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 65536, nKeys = 100000, nValues = 2)

# Run progress: 75.37% complete, ETA 00:12:02
# Fork: 1 of 1
# Warmup Iteration   1: 6.983 ms/op
# Warmup Iteration   2: 6.261 ms/op
# Warmup Iteration   3: 14.636 ms/op
# Warmup Iteration   4: 5.543 ms/op
# Warmup Iteration   5: 16.184 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark
# Parameters: (nCommit = 65536, nKeys = 100000, nValues = 3)

# Run progress: 75.75% complete, ETA 00:11:51
# Fork: 1 of 1
# Warmup Iteration   1: 7.223 ms/op
# Warmup Iteration   2: 7.282 ms/op
# Warmup Iteration   3: 13.960 ms/op
# Warmup Iteration   4: 5.271 ms/op
# Warmup Iteration   5: 16.960 ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.commit.ImmutableCommitBenchmark.immutableCommitBenchmark(ImmutableCommitBenchmark.java:27)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_avgt_jmhStub(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.commit.jmh_generated.ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.immutableCommitBenchmark_AverageTime(ImmutableCommitBenchmark_immutableCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1, nKeys = 32, nValues = 2)

# Run progress: 76.12% complete, ETA 00:11:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1, nKeys = 32, nValues = 3)

# Run progress: 76.49% complete, ETA 00:11:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1, nKeys = 1000, nValues = 2)

# Run progress: 76.87% complete, ETA 00:11:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.017 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.016, 0.017, 0.018), stdev = 0.001
  CI (99.9%): [0.014, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 1, nKeys = 1000, nValues = 3)

# Run progress: 77.24% complete, ETA 00:11:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.017 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.015, 0.017, 0.018), stdev = 0.001
  CI (99.9%): [0.012, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2, nKeys = 32, nValues = 2)

# Run progress: 77.61% complete, ETA 00:10:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2, nKeys = 32, nValues = 3)

# Run progress: 77.99% complete, ETA 00:10:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2, nKeys = 1000, nValues = 2)

# Run progress: 78.36% complete, ETA 00:10:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.017 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.016, 0.017, 0.017), stdev = 0.001
  CI (99.9%): [0.015, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 2, nKeys = 1000, nValues = 3)

# Run progress: 78.73% complete, ETA 00:10:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.018 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.016, 0.018, 0.020), stdev = 0.001
  CI (99.9%): [0.012, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4, nKeys = 32, nValues = 2)

# Run progress: 79.10% complete, ETA 00:10:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4, nKeys = 32, nValues = 3)

# Run progress: 79.48% complete, ETA 00:10:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4, nKeys = 1000, nValues = 2)

# Run progress: 79.85% complete, ETA 00:09:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.017 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.017, 0.017, 0.018), stdev = 0.001
  CI (99.9%): [0.015, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 4, nKeys = 1000, nValues = 3)

# Run progress: 80.22% complete, ETA 00:09:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.017 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.016, 0.017, 0.019), stdev = 0.001
  CI (99.9%): [0.014, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8, nKeys = 32, nValues = 2)

# Run progress: 80.60% complete, ETA 00:09:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8, nKeys = 32, nValues = 3)

# Run progress: 80.97% complete, ETA 00:09:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8, nKeys = 1000, nValues = 2)

# Run progress: 81.34% complete, ETA 00:09:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.017 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.017, 0.017, 0.019), stdev = 0.001
  CI (99.9%): [0.014, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark
# Parameters: (nGet = 8, nKeys = 1000, nValues = 3)

# Run progress: 81.72% complete, ETA 00:08:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark":
  0.017 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.016, 0.017, 0.018), stdev = 0.001
  CI (99.9%): [0.013, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1, nKeys = 32, nValues = 2)

# Run progress: 82.09% complete, ETA 00:08:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1, nKeys = 32, nValues = 3)

# Run progress: 82.46% complete, ETA 00:08:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1, nKeys = 1000, nValues = 2)

# Run progress: 82.84% complete, ETA 00:08:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 1, nKeys = 1000, nValues = 3)

# Run progress: 83.21% complete, ETA 00:08:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2, nKeys = 32, nValues = 2)

# Run progress: 83.58% complete, ETA 00:07:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2, nKeys = 32, nValues = 3)

# Run progress: 83.96% complete, ETA 00:07:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2, nKeys = 1000, nValues = 2)

# Run progress: 84.33% complete, ETA 00:07:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 2, nKeys = 1000, nValues = 3)

# Run progress: 84.70% complete, ETA 00:07:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4, nKeys = 32, nValues = 2)

# Run progress: 85.07% complete, ETA 00:07:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4, nKeys = 32, nValues = 3)

# Run progress: 85.45% complete, ETA 00:07:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4, nKeys = 1000, nValues = 2)

# Run progress: 85.82% complete, ETA 00:06:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 4, nKeys = 1000, nValues = 3)

# Run progress: 86.19% complete, ETA 00:06:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8, nKeys = 32, nValues = 2)

# Run progress: 86.57% complete, ETA 00:06:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8, nKeys = 32, nValues = 3)

# Run progress: 86.94% complete, ETA 00:06:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8, nKeys = 1000, nValues = 2)

# Run progress: 87.31% complete, ETA 00:06:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark
# Parameters: (nGet = 8, nKeys = 1000, nValues = 3)

# Run progress: 87.69% complete, ETA 00:05:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1, nKeys = 32, nValues = 2)

# Run progress: 88.06% complete, ETA 00:05:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark(ImmutableGetBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1, nKeys = 32, nValues = 3)

# Run progress: 88.43% complete, ETA 00:05:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark(ImmutableGetBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1, nKeys = 1000, nValues = 2)

# Run progress: 88.81% complete, ETA 00:05:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark(ImmutableGetBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 1, nKeys = 1000, nValues = 3)

# Run progress: 89.18% complete, ETA 00:05:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark(ImmutableGetBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2, nKeys = 32, nValues = 2)

# Run progress: 89.55% complete, ETA 00:05:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark(ImmutableGetBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2, nKeys = 32, nValues = 3)

# Run progress: 89.93% complete, ETA 00:04:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark(ImmutableGetBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2, nKeys = 1000, nValues = 2)

# Run progress: 90.30% complete, ETA 00:04:41
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark(ImmutableGetBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 2, nKeys = 1000, nValues = 3)

# Run progress: 90.67% complete, ETA 00:04:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark(ImmutableGetBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4, nKeys = 32, nValues = 2)

# Run progress: 91.04% complete, ETA 00:04:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark(ImmutableGetBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4, nKeys = 32, nValues = 3)

# Run progress: 91.42% complete, ETA 00:04:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark(ImmutableGetBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4, nKeys = 1000, nValues = 2)

# Run progress: 91.79% complete, ETA 00:03:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  0.001 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.004), stdev = 0.002
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 4, nKeys = 1000, nValues = 3)

# Run progress: 92.16% complete, ETA 00:03:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark(ImmutableGetBenchmark.java:38)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.immutableGetAndCommitBenchmark_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8, nKeys = 32, nValues = 2)

# Run progress: 92.54% complete, ETA 00:03:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8, nKeys = 32, nValues = 3)

# Run progress: 92.91% complete, ETA 00:03:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8, nKeys = 1000, nValues = 2)

# Run progress: 93.28% complete, ETA 00:03:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark
# Parameters: (nGet = 8, nKeys = 1000, nValues = 3)

# Run progress: 93.66% complete, ETA 00:03:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1, nKeys = 32, nValues = 2)

# Run progress: 94.03% complete, ETA 00:02:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1, nKeys = 32, nValues = 3)

# Run progress: 94.40% complete, ETA 00:02:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1, nKeys = 1000, nValues = 2)

# Run progress: 94.78% complete, ETA 00:02:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 1, nKeys = 1000, nValues = 3)

# Run progress: 95.15% complete, ETA 00:02:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2, nKeys = 32, nValues = 2)

# Run progress: 95.52% complete, ETA 00:02:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2, nKeys = 32, nValues = 3)

# Run progress: 95.90% complete, ETA 00:01:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2, nKeys = 1000, nValues = 2)

# Run progress: 96.27% complete, ETA 00:01:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 2, nKeys = 1000, nValues = 3)

# Run progress: 96.64% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4, nKeys = 32, nValues = 2)

# Run progress: 97.01% complete, ETA 00:01:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4, nKeys = 32, nValues = 3)

# Run progress: 97.39% complete, ETA 00:01:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4, nKeys = 1000, nValues = 2)

# Run progress: 97.76% complete, ETA 00:01:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 4, nKeys = 1000, nValues = 3)

# Run progress: 98.13% complete, ETA 00:00:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8, nKeys = 32, nValues = 2)

# Run progress: 98.51% complete, ETA 00:00:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8, nKeys = 32, nValues = 3)

# Run progress: 98.88% complete, ETA 00:00:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8, nKeys = 1000, nValues = 2)

# Run progress: 99.25% complete, ETA 00:00:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark
# Parameters: (nGet = 8, nKeys = 1000, nValues = 3)

# Run progress: 99.63% complete, ETA 00:00:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmark":
  ? 10?? ms/op


# Run complete. Total time: 00:48:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (nCommit)  (nGet)  (nKeys)  (nValues)  Mode  Cnt     Score      Error  Units
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           1     N/A       32          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           1     N/A       32          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           1     N/A     1000          2  avgt    5     0.015 ±    0.001  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           1     N/A     1000          3  avgt    5     0.015 ±    0.002  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           1     N/A   100000          2  avgt    5     4.173 ±    0.852  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           1     N/A   100000          3  avgt    5     4.440 ±    1.043  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           2     N/A       32          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           2     N/A       32          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           2     N/A     1000          2  avgt    5     0.029 ±    0.004  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           2     N/A     1000          3  avgt    5     0.029 ±    0.002  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           2     N/A   100000          2  avgt    5     8.265 ±    3.019  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           2     N/A   100000          3  avgt    5     8.726 ±    2.838  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           4     N/A       32          2  avgt    5     0.002 ±    0.001  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           4     N/A       32          3  avgt    5     0.002 ±    0.001  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           4     N/A     1000          2  avgt    5     0.058 ±    0.001  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           4     N/A     1000          3  avgt    5     0.060 ±    0.008  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           4     N/A   100000          2  avgt    5    20.421 ±    8.199  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           4     N/A   100000          3  avgt    5    18.607 ±    6.947  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           8     N/A       32          2  avgt    5     0.004 ±    0.001  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           8     N/A       32          3  avgt    5     0.004 ±    0.001  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           8     N/A     1000          2  avgt    5     0.137 ±    0.036  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           8     N/A     1000          3  avgt    5     0.138 ±    0.027  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           8     N/A   100000          2  avgt    5    37.100 ±   12.500  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark           8     N/A   100000          3  avgt    5    37.755 ±   16.095  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          16     N/A       32          2  avgt    5     0.009 ±    0.002  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          16     N/A       32          3  avgt    5     0.009 ±    0.002  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          16     N/A     1000          2  avgt    5     0.268 ±    0.041  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          16     N/A     1000          3  avgt    5     0.274 ±    0.074  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          16     N/A   100000          2  avgt    5    70.626 ±   11.883  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          16     N/A   100000          3  avgt    5    73.492 ±   20.669  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          32     N/A       32          2  avgt    5     0.017 ±    0.004  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          32     N/A       32          3  avgt    5     0.018 ±    0.002  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          32     N/A     1000          2  avgt    5     0.540 ±    0.061  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          32     N/A     1000          3  avgt    5     0.541 ±    0.104  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          32     N/A   100000          2  avgt    5   151.828 ±   48.992  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          32     N/A   100000          3  avgt    5   148.420 ±   60.198  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          64     N/A       32          2  avgt    5     0.035 ±    0.007  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          64     N/A       32          3  avgt    5     0.035 ±    0.007  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          64     N/A     1000          2  avgt    5     1.101 ±    0.223  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          64     N/A     1000          3  avgt    5     1.097 ±    0.202  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          64     N/A   100000          2  avgt    5   315.919 ±   75.917  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark          64     N/A   100000          3  avgt    5   328.022 ±   53.283  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         128     N/A       32          2  avgt    5     0.070 ±    0.009  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         128     N/A       32          3  avgt    5     0.071 ±    0.018  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         128     N/A     1000          2  avgt    5     2.253 ±    0.563  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         128     N/A     1000          3  avgt    5     2.306 ±    0.550  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         128     N/A   100000          2  avgt    5   615.696 ±  115.050  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         128     N/A   100000          3  avgt    5   679.010 ±  187.324  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         256     N/A       32          2  avgt    5     0.137 ±    0.037  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         256     N/A       32          3  avgt    5     0.135 ±    0.027  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         256     N/A     1000          2  avgt    5     4.361 ±    0.582  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         256     N/A     1000          3  avgt    5     4.505 ±    0.642  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         256     N/A   100000          2  avgt    5  1243.004 ±  310.281  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         256     N/A   100000          3  avgt    5  1647.049 ±  611.292  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         512     N/A       32          2  avgt    5     0.283 ±    0.058  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         512     N/A       32          3  avgt    5     0.279 ±    0.026  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         512     N/A     1000          2  avgt    5     9.101 ±    1.650  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         512     N/A     1000          3  avgt    5     8.960 ±    1.017  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         512     N/A   100000          2  avgt    5  3289.259 ± 1010.723  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark         512     N/A   100000          3  avgt    5  3411.857 ±  552.104  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        1024     N/A       32          2  avgt    5     0.563 ±    0.141  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        1024     N/A       32          3  avgt    5     0.570 ±    0.081  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        1024     N/A     1000          2  avgt    5    17.868 ±    4.129  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        1024     N/A     1000          3  avgt    5    17.907 ±    4.242  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        2048     N/A       32          2  avgt    5     1.232 ±    0.280  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        2048     N/A       32          3  avgt    5     1.159 ±    0.316  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        2048     N/A     1000          2  avgt    5    36.733 ±    4.366  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        2048     N/A     1000          3  avgt    5    36.403 ±    7.361  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        4096     N/A       32          2  avgt    5     2.379 ±    0.308  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        4096     N/A       32          3  avgt    5     2.487 ±    0.575  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        4096     N/A     1000          2  avgt    5    72.955 ±    9.633  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        4096     N/A     1000          3  avgt    5    76.615 ±    9.388  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        8192     N/A       32          2  avgt    5     5.194 ±    2.286  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        8192     N/A       32          3  avgt    5     4.927 ±    1.472  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        8192     N/A     1000          2  avgt    5   256.506 ±  118.076  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark        8192     N/A     1000          3  avgt    5   244.958 ±  190.660  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark       16384     N/A       32          2  avgt    5     9.866 ±    3.276  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark       16384     N/A       32          3  avgt    5     9.489 ±    1.803  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark       16384     N/A     1000          2  avgt    5   695.103 ±  310.207  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark       16384     N/A     1000          3  avgt    5   794.006 ±  305.464  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark       32768     N/A       32          2  avgt    5    18.523 ±    3.274  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark       32768     N/A       32          3  avgt    5    18.621 ±    6.056  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark       32768     N/A     1000          2  avgt    5  1382.084 ±  575.706  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark       32768     N/A     1000          3  avgt    5  1654.554 ±  783.188  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark       65536     N/A       32          2  avgt    5    38.052 ±    8.622  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark       65536     N/A       32          3  avgt    5    37.885 ±   11.583  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark       65536     N/A     1000          2  avgt    5  3367.517 ±  309.521  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.baselineCommitBenchmark       65536     N/A     1000          3  avgt    5  3349.942 ±  278.398  ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark          1     N/A   100000          2  avgt          0.002             ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark          1     N/A   100000          3  avgt          0.007             ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark         32     N/A   100000          3  avgt          0.264             ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark         64     N/A   100000          3  avgt          0.919             ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark        512     N/A   100000          2  avgt          2.909             ms/op
t.r.s.m.b.commit.ImmutableCommitBenchmark.immutableCommitBenchmark       8192     N/A   100000          2  avgt         46.398             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       1       32          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       1       32          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       1     1000          2  avgt    5     0.017 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       1     1000          3  avgt    5     0.017 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       2       32          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       2       32          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       2     1000          2  avgt    5     0.017 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       2     1000          3  avgt    5     0.018 ±    0.006  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       4       32          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       4       32          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       4     1000          2  avgt    5     0.017 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       4     1000          3  avgt    5     0.017 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       8       32          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       8       32          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       8     1000          2  avgt    5     0.017 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmark         N/A       8     1000          3  avgt    5     0.017 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       1       32          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       1       32          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       1     1000          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       1     1000          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       2       32          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       2       32          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       2     1000          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       2     1000          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       4       32          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       4       32          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       4     1000          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       4     1000          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       8       32          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       8       32          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       8     1000          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmark                  N/A       8     1000          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark        N/A       1     1000          2  avgt          0.001             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark        N/A       1     1000          3  avgt         ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark        N/A       2       32          2  avgt         ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark        N/A       2       32          3  avgt         ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark        N/A       2     1000          2  avgt    2    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark        N/A       2     1000          3  avgt    3    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark        N/A       4       32          2  avgt    3     0.001 ±    0.011  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark        N/A       4       32          3  avgt    2    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark        N/A       4     1000          2  avgt    5     0.001 ±    0.007  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark        N/A       4     1000          3  avgt    4    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark        N/A       8       32          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark        N/A       8       32          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark        N/A       8     1000          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmark        N/A       8     1000          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       1       32          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       1       32          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       1     1000          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       1     1000          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       2       32          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       2       32          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       2     1000          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       2     1000          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       4       32          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       4       32          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       4     1000          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       4     1000          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       8       32          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       8       32          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       8     1000          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmark                 N/A       8     1000          3  avgt    5    ? 10??             ms/op

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.3.1/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 48m 35s
13 actionable tasks: 2 executed, 11 up-to-date
