Type-safe dependency accessors is an incubating feature.
> Task :buildSrc:extractPluginRequests UP-TO-DATE
> Task :buildSrc:generatePluginAdapters UP-TO-DATE
> Task :buildSrc:compileJava UP-TO-DATE
> Task :buildSrc:compileGroovy NO-SOURCE
> Task :buildSrc:compileGroovyPlugins UP-TO-DATE
> Task :buildSrc:pluginDescriptors UP-TO-DATE
> Task :buildSrc:processResources UP-TO-DATE
> Task :buildSrc:classes UP-TO-DATE
> Task :buildSrc:jar UP-TO-DATE
> Task :buildSrc:assemble UP-TO-DATE
> Task :buildSrc:pluginUnderTestMetadata UP-TO-DATE
> Task :buildSrc:compileTestJava NO-SOURCE
> Task :buildSrc:compileTestGroovy NO-SOURCE
> Task :buildSrc:processTestResources NO-SOURCE
> Task :buildSrc:testClasses UP-TO-DATE
> Task :buildSrc:test NO-SOURCE
> Task :buildSrc:validatePlugins UP-TO-DATE
> Task :buildSrc:check UP-TO-DATE
> Task :buildSrc:build UP-TO-DATE
> Task :refinery-store:compileJava UP-TO-DATE
> Task :refinery-store:processResources NO-SOURCE
> Task :refinery-store:classes UP-TO-DATE
> Task :refinery-store:compileTestJava UP-TO-DATE
> Task :refinery-store:processTestResources NO-SOURCE
> Task :refinery-store:testClasses UP-TO-DATE
> Task :refinery-store:compileJmhJava UP-TO-DATE
> Task :refinery-store:processJmhResources NO-SOURCE
> Task :refinery-store:jmhClasses UP-TO-DATE

> Task :refinery-store:jmh
# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 0.00% complete, ETA 03:28:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.019 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.019, 0.019, 0.019), stdev = 0.001
  CI (99.9%): [0.018, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 0.08% complete, ETA 03:37:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.019 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.019, 0.019, 0.019), stdev = 0.001
  CI (99.9%): [0.019, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 0.16% complete, ETA 03:37:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.667 ms/op
# Warmup Iteration   2: 0.614 ms/op
# Warmup Iteration   3: 0.612 ms/op
# Warmup Iteration   4: 0.611 ms/op
# Warmup Iteration   5: 0.610 ms/op
Iteration   1: 0.611 ms/op
Iteration   2: 0.610 ms/op
Iteration   3: 0.609 ms/op
Iteration   4: 0.614 ms/op
Iteration   5: 0.617 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.612 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.609, 0.612, 0.617), stdev = 0.003
  CI (99.9%): [0.601, 0.624] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 0.24% complete, ETA 03:36:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.666 ms/op
# Warmup Iteration   2: 0.611 ms/op
# Warmup Iteration   3: 0.614 ms/op
# Warmup Iteration   4: 0.608 ms/op
# Warmup Iteration   5: 0.608 ms/op
Iteration   1: 0.609 ms/op
Iteration   2: 0.610 ms/op
Iteration   3: 0.615 ms/op
Iteration   4: 0.613 ms/op
Iteration   5: 0.612 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.612 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.609, 0.612, 0.615), stdev = 0.002
  CI (99.9%): [0.603, 0.620] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 0.32% complete, ETA 03:36:21
# Fork: 1 of 1
# Warmup Iteration   1: 107.394 ms/op
# Warmup Iteration   2: 96.072 ms/op
# Warmup Iteration   3: 98.565 ms/op
# Warmup Iteration   4: 97.837 ms/op
# Warmup Iteration   5: 100.348 ms/op
Iteration   1: 94.045 ms/op
Iteration   2: 92.256 ms/op
Iteration   3: 95.554 ms/op
Iteration   4: 97.245 ms/op
Iteration   5: 97.088 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  95.237 ±(99.9%) 8.137 ms/op [Average]
  (min, avg, max) = (92.256, 95.237, 97.245), stdev = 2.113
  CI (99.9%): [87.100, 103.375] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 0.40% complete, ETA 03:39:09
# Fork: 1 of 1
# Warmup Iteration   1: 106.776 ms/op
# Warmup Iteration   2: 99.029 ms/op
# Warmup Iteration   3: 97.263 ms/op
# Warmup Iteration   4: 96.928 ms/op
# Warmup Iteration   5: 93.530 ms/op
Iteration   1: 93.639 ms/op
Iteration   2: 92.746 ms/op
Iteration   3: 90.168 ms/op
Iteration   4: 93.538 ms/op
Iteration   5: 95.719 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  93.162 ±(99.9%) 7.712 ms/op [Average]
  (min, avg, max) = (90.168, 93.162, 95.719), stdev = 2.003
  CI (99.9%): [85.450, 100.874] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 0.48% complete, ETA 03:40:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.042 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.042 ms/op
Iteration   1: 0.042 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.042 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.042 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.042, 0.042, 0.042), stdev = 0.001
  CI (99.9%): [0.041, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 0.56% complete, ETA 03:40:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.043 ms/op
# Warmup Iteration   5: 0.042 ms/op
Iteration   1: 0.042 ms/op
Iteration   2: 0.043 ms/op
Iteration   3: 0.042 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.043 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.042, 0.043, 0.043), stdev = 0.001
  CI (99.9%): [0.042, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 0.64% complete, ETA 03:39:21
# Fork: 1 of 1
# Warmup Iteration   1: 1.350 ms/op
# Warmup Iteration   2: 1.226 ms/op
# Warmup Iteration   3: 1.222 ms/op
# Warmup Iteration   4: 1.221 ms/op
# Warmup Iteration   5: 1.218 ms/op
Iteration   1: 1.231 ms/op
Iteration   2: 1.230 ms/op
Iteration   3: 1.217 ms/op
Iteration   4: 1.219 ms/op
Iteration   5: 1.224 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.224 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (1.217, 1.224, 1.231), stdev = 0.006
  CI (99.9%): [1.201, 1.248] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 0.72% complete, ETA 03:38:49
# Fork: 1 of 1
# Warmup Iteration   1: 1.332 ms/op
# Warmup Iteration   2: 1.217 ms/op
# Warmup Iteration   3: 1.222 ms/op
# Warmup Iteration   4: 1.223 ms/op
# Warmup Iteration   5: 1.227 ms/op
Iteration   1: 1.214 ms/op
Iteration   2: 1.221 ms/op
Iteration   3: 1.217 ms/op
Iteration   4: 1.218 ms/op
Iteration   5: 1.217 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.217 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (1.214, 1.217, 1.221), stdev = 0.003
  CI (99.9%): [1.207, 1.228] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 0.80% complete, ETA 03:38:18
# Fork: 1 of 1
# Warmup Iteration   1: 212.460 ms/op
# Warmup Iteration   2: 201.886 ms/op
# Warmup Iteration   3: 187.935 ms/op
# Warmup Iteration   4: 190.618 ms/op
# Warmup Iteration   5: 190.900 ms/op
Iteration   1: 193.772 ms/op
Iteration   2: 193.227 ms/op
Iteration   3: 191.846 ms/op
Iteration   4: 191.462 ms/op
Iteration   5: 195.956 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  193.252 ±(99.9%) 6.878 ms/op [Average]
  (min, avg, max) = (191.462, 193.252, 195.956), stdev = 1.786
  CI (99.9%): [186.374, 200.131] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 0.88% complete, ETA 03:40:56
# Fork: 1 of 1
# Warmup Iteration   1: 208.592 ms/op
# Warmup Iteration   2: 195.807 ms/op
# Warmup Iteration   3: 196.575 ms/op
# Warmup Iteration   4: 192.705 ms/op
# Warmup Iteration   5: 190.764 ms/op
Iteration   1: 192.192 ms/op
Iteration   2: 193.369 ms/op
Iteration   3: 188.437 ms/op
Iteration   4: 182.457 ms/op
Iteration   5: 187.156 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  188.722 ±(99.9%) 16.721 ms/op [Average]
  (min, avg, max) = (182.457, 188.722, 193.369), stdev = 4.342
  CI (99.9%): [172.002, 205.443] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 0.96% complete, ETA 03:42:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.090 ms/op
# Warmup Iteration   2: 0.084 ms/op
# Warmup Iteration   3: 0.085 ms/op
# Warmup Iteration   4: 0.083 ms/op
# Warmup Iteration   5: 0.084 ms/op
Iteration   1: 0.084 ms/op
Iteration   2: 0.084 ms/op
Iteration   3: 0.083 ms/op
Iteration   4: 0.084 ms/op
Iteration   5: 0.084 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.084 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.083, 0.084, 0.084), stdev = 0.001
  CI (99.9%): [0.082, 0.085] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 1.04% complete, ETA 03:42:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ms/op
# Warmup Iteration   2: 0.085 ms/op
# Warmup Iteration   3: 0.086 ms/op
# Warmup Iteration   4: 0.085 ms/op
# Warmup Iteration   5: 0.085 ms/op
Iteration   1: 0.084 ms/op
Iteration   2: 0.085 ms/op
Iteration   3: 0.084 ms/op
Iteration   4: 0.085 ms/op
Iteration   5: 0.085 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.085 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.084, 0.085, 0.085), stdev = 0.001
  CI (99.9%): [0.084, 0.086] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 1.12% complete, ETA 03:41:25
# Fork: 1 of 1
# Warmup Iteration   1: 2.664 ms/op
# Warmup Iteration   2: 2.452 ms/op
# Warmup Iteration   3: 2.451 ms/op
# Warmup Iteration   4: 2.442 ms/op
# Warmup Iteration   5: 2.447 ms/op
Iteration   1: 2.460 ms/op
Iteration   2: 2.432 ms/op
Iteration   3: 2.443 ms/op
Iteration   4: 2.462 ms/op
Iteration   5: 2.448 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2.449 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (2.432, 2.449, 2.462), stdev = 0.013
  CI (99.9%): [2.401, 2.497] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 1.20% complete, ETA 03:40:48
# Fork: 1 of 1
# Warmup Iteration   1: 2.674 ms/op
# Warmup Iteration   2: 2.444 ms/op
# Warmup Iteration   3: 2.433 ms/op
# Warmup Iteration   4: 2.434 ms/op
# Warmup Iteration   5: 2.445 ms/op
Iteration   1: 2.449 ms/op
Iteration   2: 2.434 ms/op
Iteration   3: 2.440 ms/op
Iteration   4: 2.445 ms/op
Iteration   5: 2.438 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2.441 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (2.434, 2.441, 2.449), stdev = 0.006
  CI (99.9%): [2.419, 2.464] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 1.28% complete, ETA 03:40:15
# Fork: 1 of 1
# Warmup Iteration   1: 424.753 ms/op
# Warmup Iteration   2: 392.417 ms/op
# Warmup Iteration   3: 401.272 ms/op
# Warmup Iteration   4: 383.542 ms/op
# Warmup Iteration   5: 391.578 ms/op
Iteration   1: 378.745 ms/op
Iteration   2: 381.677 ms/op
Iteration   3: 413.937 ms/op
Iteration   4: 391.914 ms/op
Iteration   5: 375.332 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  388.321 ±(99.9%) 60.077 ms/op [Average]
  (min, avg, max) = (375.332, 388.321, 413.937), stdev = 15.602
  CI (99.9%): [328.244, 448.398] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 1.36% complete, ETA 03:42:03
# Fork: 1 of 1
# Warmup Iteration   1: 416.031 ms/op
# Warmup Iteration   2: 395.503 ms/op
# Warmup Iteration   3: 385.831 ms/op
# Warmup Iteration   4: 386.499 ms/op
# Warmup Iteration   5: 377.446 ms/op
Iteration   1: 378.359 ms/op
Iteration   2: 371.918 ms/op
Iteration   3: 379.204 ms/op
Iteration   4: 375.533 ms/op
Iteration   5: 381.740 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  377.351 ±(99.9%) 14.477 ms/op [Average]
  (min, avg, max) = (371.918, 377.351, 381.740), stdev = 3.760
  CI (99.9%): [362.874, 391.828] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 1.44% complete, ETA 03:43:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.182 ms/op
# Warmup Iteration   2: 0.173 ms/op
# Warmup Iteration   3: 0.171 ms/op
# Warmup Iteration   4: 0.169 ms/op
# Warmup Iteration   5: 0.171 ms/op
Iteration   1: 0.171 ms/op
Iteration   2: 0.170 ms/op
Iteration   3: 0.170 ms/op
Iteration   4: 0.170 ms/op
Iteration   5: 0.170 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.170 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.170, 0.170, 0.171), stdev = 0.001
  CI (99.9%): [0.169, 0.172] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 1.52% complete, ETA 03:42:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.180 ms/op
# Warmup Iteration   2: 0.172 ms/op
# Warmup Iteration   3: 0.169 ms/op
# Warmup Iteration   4: 0.167 ms/op
# Warmup Iteration   5: 0.168 ms/op
Iteration   1: 0.168 ms/op
Iteration   2: 0.168 ms/op
Iteration   3: 0.169 ms/op
Iteration   4: 0.167 ms/op
Iteration   5: 0.168 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.168 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.167, 0.168, 0.169), stdev = 0.001
  CI (99.9%): [0.166, 0.170] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 1.60% complete, ETA 03:42:05
# Fork: 1 of 1
# Warmup Iteration   1: 5.348 ms/op
# Warmup Iteration   2: 4.990 ms/op
# Warmup Iteration   3: 4.883 ms/op
# Warmup Iteration   4: 4.894 ms/op
# Warmup Iteration   5: 4.873 ms/op
Iteration   1: 4.875 ms/op
Iteration   2: 4.887 ms/op
Iteration   3: 4.886 ms/op
Iteration   4: 4.872 ms/op
Iteration   5: 4.871 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  4.878 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (4.871, 4.878, 4.887), stdev = 0.008
  CI (99.9%): [4.848, 4.908] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 1.68% complete, ETA 03:41:34
# Fork: 1 of 1
# Warmup Iteration   1: 5.320 ms/op
# Warmup Iteration   2: 4.869 ms/op
# Warmup Iteration   3: 4.875 ms/op
# Warmup Iteration   4: 4.852 ms/op
# Warmup Iteration   5: 4.843 ms/op
Iteration   1: 4.858 ms/op
Iteration   2: 4.839 ms/op
Iteration   3: 4.862 ms/op
Iteration   4: 4.884 ms/op
Iteration   5: 4.856 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  4.860 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (4.839, 4.860, 4.884), stdev = 0.016
  CI (99.9%): [4.797, 4.923] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 1.76% complete, ETA 03:41:02
# Fork: 1 of 1
# Warmup Iteration   1: 830.140 ms/op
# Warmup Iteration   2: 866.204 ms/op
# Warmup Iteration   3: 781.228 ms/op
# Warmup Iteration   4: 763.580 ms/op
# Warmup Iteration   5: 752.447 ms/op
Iteration   1: 745.272 ms/op
Iteration   2: 759.254 ms/op
Iteration   3: 769.536 ms/op
Iteration   4: 738.280 ms/op
Iteration   5: 759.709 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  754.410 ±(99.9%) 48.096 ms/op [Average]
  (min, avg, max) = (738.280, 754.410, 769.536), stdev = 12.490
  CI (99.9%): [706.315, 802.506] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 1.84% complete, ETA 03:45:35
# Fork: 1 of 1
# Warmup Iteration   1: 808.482 ms/op
# Warmup Iteration   2: 762.279 ms/op
# Warmup Iteration   3: 759.279 ms/op
# Warmup Iteration   4: 746.676 ms/op
# Warmup Iteration   5: 848.658 ms/op
Iteration   1: 741.587 ms/op
Iteration   2: 750.122 ms/op
Iteration   3: 751.115 ms/op
Iteration   4: 748.323 ms/op
Iteration   5: 740.521 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  746.333 ±(99.9%) 19.010 ms/op [Average]
  (min, avg, max) = (740.521, 746.333, 751.115), stdev = 4.937
  CI (99.9%): [727.324, 765.343] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 1.92% complete, ETA 03:49:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.366 ms/op
# Warmup Iteration   2: 0.343 ms/op
# Warmup Iteration   3: 0.349 ms/op
# Warmup Iteration   4: 0.335 ms/op
# Warmup Iteration   5: 0.336 ms/op
Iteration   1: 0.337 ms/op
Iteration   2: 0.335 ms/op
Iteration   3: 0.336 ms/op
Iteration   4: 0.337 ms/op
Iteration   5: 0.335 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.336 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.335, 0.336, 0.337), stdev = 0.001
  CI (99.9%): [0.332, 0.340] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 2.00% complete, ETA 03:48:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.367 ms/op
# Warmup Iteration   2: 0.339 ms/op
# Warmup Iteration   3: 0.348 ms/op
# Warmup Iteration   4: 0.343 ms/op
# Warmup Iteration   5: 0.341 ms/op
Iteration   1: 0.340 ms/op
Iteration   2: 0.355 ms/op
Iteration   3: 0.360 ms/op
Iteration   4: 0.341 ms/op
Iteration   5: 0.340 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.347 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.340, 0.347, 0.360), stdev = 0.009
  CI (99.9%): [0.311, 0.383] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 2.08% complete, ETA 03:47:53
# Fork: 1 of 1
# Warmup Iteration   1: 10.699 ms/op
# Warmup Iteration   2: 9.765 ms/op
# Warmup Iteration   3: 9.845 ms/op
# Warmup Iteration   4: 9.807 ms/op
# Warmup Iteration   5: 9.795 ms/op
Iteration   1: 9.758 ms/op
Iteration   2: 9.760 ms/op
Iteration   3: 9.794 ms/op
Iteration   4: 9.852 ms/op
Iteration   5: 9.736 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  9.780 ±(99.9%) 0.173 ms/op [Average]
  (min, avg, max) = (9.736, 9.780, 9.852), stdev = 0.045
  CI (99.9%): [9.607, 9.953] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 2.16% complete, ETA 03:47:12
# Fork: 1 of 1
# Warmup Iteration   1: 10.798 ms/op
# Warmup Iteration   2: 9.795 ms/op
# Warmup Iteration   3: 9.848 ms/op
# Warmup Iteration   4: 9.745 ms/op
# Warmup Iteration   5: 9.765 ms/op
Iteration   1: 9.747 ms/op
Iteration   2: 9.799 ms/op
Iteration   3: 9.873 ms/op
Iteration   4: 9.782 ms/op
Iteration   5: 9.824 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  9.805 ±(99.9%) 0.182 ms/op [Average]
  (min, avg, max) = (9.747, 9.805, 9.873), stdev = 0.047
  CI (99.9%): [9.623, 9.987] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 2.24% complete, ETA 03:46:31
# Fork: 1 of 1
# Warmup Iteration   1: 1664.859 ms/op
# Warmup Iteration   2: 1529.529 ms/op
# Warmup Iteration   3: 1619.718 ms/op
# Warmup Iteration   4: 1602.855 ms/op
# Warmup Iteration   5: 1529.258 ms/op
Iteration   1: 1529.289 ms/op
Iteration   2: 1489.132 ms/op
Iteration   3: 1484.478 ms/op
Iteration   4: 1479.902 ms/op
Iteration   5: 1519.118 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1500.384 ±(99.9%) 85.793 ms/op [Average]
  (min, avg, max) = (1479.902, 1500.384, 1529.289), stdev = 22.280
  CI (99.9%): [1414.591, 1586.176] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 2.32% complete, ETA 03:49:44
# Fork: 1 of 1
# Warmup Iteration   1: 1635.609 ms/op
# Warmup Iteration   2: 1571.080 ms/op
# Warmup Iteration   3: 1533.486 ms/op
# Warmup Iteration   4: 1476.819 ms/op
# Warmup Iteration   5: 1498.815 ms/op
Iteration   1: 1498.941 ms/op
Iteration   2: 1544.946 ms/op
Iteration   3: 1459.422 ms/op
Iteration   4: 1484.158 ms/op
Iteration   5: 1429.643 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1483.422 ±(99.9%) 166.680 ms/op [Average]
  (min, avg, max) = (1429.643, 1483.422, 1544.946), stdev = 43.286
  CI (99.9%): [1316.742, 1650.102] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 2.40% complete, ETA 03:52:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.742 ms/op
# Warmup Iteration   2: 0.685 ms/op
# Warmup Iteration   3: 0.692 ms/op
# Warmup Iteration   4: 0.680 ms/op
# Warmup Iteration   5: 0.684 ms/op
Iteration   1: 0.686 ms/op
Iteration   2: 0.689 ms/op
Iteration   3: 0.682 ms/op
Iteration   4: 0.681 ms/op
Iteration   5: 0.679 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.683 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.679, 0.683, 0.689), stdev = 0.004
  CI (99.9%): [0.667, 0.699] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 2.48% complete, ETA 03:51:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.736 ms/op
# Warmup Iteration   2: 0.685 ms/op
# Warmup Iteration   3: 0.685 ms/op
# Warmup Iteration   4: 0.678 ms/op
# Warmup Iteration   5: 0.676 ms/op
Iteration   1: 0.680 ms/op
Iteration   2: 0.677 ms/op
Iteration   3: 0.678 ms/op
Iteration   4: 0.673 ms/op
Iteration   5: 0.678 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.677 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.673, 0.677, 0.680), stdev = 0.003
  CI (99.9%): [0.667, 0.687] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 2.56% complete, ETA 03:50:51
# Fork: 1 of 1
# Warmup Iteration   1: 21.912 ms/op
# Warmup Iteration   2: 19.683 ms/op
# Warmup Iteration   3: 19.693 ms/op
# Warmup Iteration   4: 19.559 ms/op
# Warmup Iteration   5: 19.615 ms/op
Iteration   1: 19.555 ms/op
Iteration   2: 19.598 ms/op
Iteration   3: 19.572 ms/op
Iteration   4: 19.491 ms/op
Iteration   5: 19.470 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  19.537 ±(99.9%) 0.210 ms/op [Average]
  (min, avg, max) = (19.470, 19.537, 19.598), stdev = 0.055
  CI (99.9%): [19.327, 19.747] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 2.64% complete, ETA 03:50:08
# Fork: 1 of 1
# Warmup Iteration   1: 21.441 ms/op
# Warmup Iteration   2: 19.648 ms/op
# Warmup Iteration   3: 19.495 ms/op
# Warmup Iteration   4: 19.627 ms/op
# Warmup Iteration   5: 19.592 ms/op
Iteration   1: 19.555 ms/op
Iteration   2: 19.575 ms/op
Iteration   3: 19.524 ms/op
Iteration   4: 19.579 ms/op
Iteration   5: 19.523 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  19.551 ±(99.9%) 0.104 ms/op [Average]
  (min, avg, max) = (19.523, 19.551, 19.579), stdev = 0.027
  CI (99.9%): [19.447, 19.655] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 2.72% complete, ETA 03:49:27
# Fork: 1 of 1
# Warmup Iteration   1: 3207.798 ms/op
# Warmup Iteration   2: 3093.105 ms/op
# Warmup Iteration   3: 3105.680 ms/op
# Warmup Iteration   4: 3017.590 ms/op
# Warmup Iteration   5: 3024.821 ms/op
Iteration   1: 3074.871 ms/op
Iteration   2: 3079.423 ms/op
Iteration   3: 3091.074 ms/op
Iteration   4: 3076.382 ms/op
Iteration   5: 3028.318 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  3070.014 ±(99.9%) 93.031 ms/op [Average]
  (min, avg, max) = (3028.318, 3070.014, 3091.074), stdev = 24.160
  CI (99.9%): [2976.983, 3163.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 2.80% complete, ETA 04:00:51
# Fork: 1 of 1
# Warmup Iteration   1: 3211.137 ms/op
# Warmup Iteration   2: 3106.887 ms/op
# Warmup Iteration   3: 2976.758 ms/op
# Warmup Iteration   4: 2947.597 ms/op
# Warmup Iteration   5: 2905.831 ms/op
Iteration   1: 2921.029 ms/op
Iteration   2: 2950.205 ms/op
Iteration   3: 2922.477 ms/op
Iteration   4: 2951.753 ms/op
Iteration   5: 2925.666 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2934.226 ±(99.9%) 59.279 ms/op [Average]
  (min, avg, max) = (2921.029, 2934.226, 2951.753), stdev = 15.395
  CI (99.9%): [2874.947, 2993.505] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 2.88% complete, ETA 04:11:01
# Fork: 1 of 1
# Warmup Iteration   1: 1.478 ms/op
# Warmup Iteration   2: 1.379 ms/op
# Warmup Iteration   3: 1.366 ms/op
# Warmup Iteration   4: 1.359 ms/op
# Warmup Iteration   5: 1.369 ms/op
Iteration   1: 1.373 ms/op
Iteration   2: 1.360 ms/op
Iteration   3: 1.366 ms/op
Iteration   4: 1.365 ms/op
Iteration   5: 1.358 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.364 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (1.358, 1.364, 1.373), stdev = 0.006
  CI (99.9%): [1.342, 1.386] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 2.96% complete, ETA 04:09:43
# Fork: 1 of 1
# Warmup Iteration   1: 1.458 ms/op
# Warmup Iteration   2: 1.357 ms/op
# Warmup Iteration   3: 1.346 ms/op
# Warmup Iteration   4: 1.337 ms/op
# Warmup Iteration   5: 1.344 ms/op
Iteration   1: 1.340 ms/op
Iteration   2: 1.338 ms/op
Iteration   3: 1.340 ms/op
Iteration   4: 1.338 ms/op
Iteration   5: 1.337 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.338 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (1.337, 1.338, 1.340), stdev = 0.002
  CI (99.9%): [1.333, 1.344] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 3.04% complete, ETA 04:08:29
# Fork: 1 of 1
# Warmup Iteration   1: 43.037 ms/op
# Warmup Iteration   2: 39.498 ms/op
# Warmup Iteration   3: 39.605 ms/op
# Warmup Iteration   4: 39.232 ms/op
# Warmup Iteration   5: 39.286 ms/op
Iteration   1: 38.997 ms/op
Iteration   2: 39.354 ms/op
Iteration   3: 39.160 ms/op
Iteration   4: 39.092 ms/op
Iteration   5: 39.617 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  39.244 ±(99.9%) 0.949 ms/op [Average]
  (min, avg, max) = (38.997, 39.244, 39.617), stdev = 0.246
  CI (99.9%): [38.295, 40.193] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 3.13% complete, ETA 04:07:23
# Fork: 1 of 1
# Warmup Iteration   1: 43.135 ms/op
# Warmup Iteration   2: 39.176 ms/op
# Warmup Iteration   3: 39.617 ms/op
# Warmup Iteration   4: 39.086 ms/op
# Warmup Iteration   5: 38.990 ms/op
Iteration   1: 39.166 ms/op
Iteration   2: 38.992 ms/op
Iteration   3: 39.061 ms/op
Iteration   4: 39.062 ms/op
Iteration   5: 38.960 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  39.048 ±(99.9%) 0.305 ms/op [Average]
  (min, avg, max) = (38.960, 39.048, 39.166), stdev = 0.079
  CI (99.9%): [38.743, 39.353] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 3.21% complete, ETA 04:06:19
# Fork: 1 of 1
# Warmup Iteration   1: 6217.275 ms/op
# Warmup Iteration   2: 6050.249 ms/op
# Warmup Iteration   3: 5917.979 ms/op
# Warmup Iteration   4: 5998.835 ms/op
# Warmup Iteration   5: 6009.027 ms/op
Iteration   1: 6039.084 ms/op
Iteration   2: 5987.174 ms/op
Iteration   3: 5976.847 ms/op
Iteration   4: 6044.099 ms/op
Iteration   5: 6039.433 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  6017.328 ±(99.9%) 125.170 ms/op [Average]
  (min, avg, max) = (5976.847, 6017.328, 6044.099), stdev = 32.506
  CI (99.9%): [5892.157, 6142.498] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 3.29% complete, ETA 04:29:58
# Fork: 1 of 1
# Warmup Iteration   1: 6213.102 ms/op
# Warmup Iteration   2: 6060.139 ms/op
# Warmup Iteration   3: 6103.818 ms/op
# Warmup Iteration   4: 6043.165 ms/op
# Warmup Iteration   5: 6113.197 ms/op
Iteration   1: 5929.082 ms/op
Iteration   2: 5994.374 ms/op
Iteration   3: 5877.833 ms/op
Iteration   4: 5873.448 ms/op
Iteration   5: 5953.938 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  5925.735 ±(99.9%) 197.723 ms/op [Average]
  (min, avg, max) = (5873.448, 5925.735, 5994.374), stdev = 51.348
  CI (99.9%): [5728.012, 6123.458] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 3.37% complete, ETA 04:52:24
# Fork: 1 of 1
# Warmup Iteration   1: 2.895 ms/op
# Warmup Iteration   2: 2.723 ms/op
# Warmup Iteration   3: 2.661 ms/op
# Warmup Iteration   4: 2.694 ms/op
# Warmup Iteration   5: 2.677 ms/op
Iteration   1: 2.684 ms/op
Iteration   2: 2.673 ms/op
Iteration   3: 2.700 ms/op
Iteration   4: 2.678 ms/op
Iteration   5: 2.678 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2.682 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (2.673, 2.682, 2.700), stdev = 0.010
  CI (99.9%): [2.642, 2.723] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 3.45% complete, ETA 04:50:14
# Fork: 1 of 1
# Warmup Iteration   1: 2.975 ms/op
# Warmup Iteration   2: 2.735 ms/op
# Warmup Iteration   3: 2.718 ms/op
# Warmup Iteration   4: 2.700 ms/op
# Warmup Iteration   5: 2.703 ms/op
Iteration   1: 2.684 ms/op
Iteration   2: 2.695 ms/op
Iteration   3: 2.719 ms/op
Iteration   4: 2.695 ms/op
Iteration   5: 2.702 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2.699 ±(99.9%) 0.050 ms/op [Average]
  (min, avg, max) = (2.684, 2.699, 2.719), stdev = 0.013
  CI (99.9%): [2.649, 2.749] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 3.53% complete, ETA 04:48:10
# Fork: 1 of 1
# Warmup Iteration   1: 86.096 ms/op
# Warmup Iteration   2: 78.728 ms/op
# Warmup Iteration   3: 78.215 ms/op
# Warmup Iteration   4: 78.445 ms/op
# Warmup Iteration   5: 78.214 ms/op
Iteration   1: 78.181 ms/op
Iteration   2: 78.240 ms/op
Iteration   3: 79.176 ms/op
Iteration   4: 78.528 ms/op
Iteration   5: 78.379 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  78.501 ±(99.9%) 1.543 ms/op [Average]
  (min, avg, max) = (78.181, 78.501, 79.176), stdev = 0.401
  CI (99.9%): [76.958, 80.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 3.61% complete, ETA 04:46:15
# Fork: 1 of 1
# Warmup Iteration   1: 85.608 ms/op
# Warmup Iteration   2: 78.712 ms/op
# Warmup Iteration   3: 78.412 ms/op
# Warmup Iteration   4: 78.095 ms/op
# Warmup Iteration   5: 77.999 ms/op
Iteration   1: 78.115 ms/op
Iteration   2: 79.650 ms/op
Iteration   3: 78.352 ms/op
Iteration   4: 78.807 ms/op
Iteration   5: 77.961 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  78.577 ±(99.9%) 2.617 ms/op [Average]
  (min, avg, max) = (77.961, 78.577, 79.650), stdev = 0.680
  CI (99.9%): [75.960, 81.194] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 3.69% complete, ETA 04:44:24
# Fork: 1 of 1
# Warmup Iteration   1: 12623.599 ms/op
# Warmup Iteration   2: 12351.080 ms/op
# Warmup Iteration   3: 12326.658 ms/op
# Warmup Iteration   4: 12438.597 ms/op
# Warmup Iteration   5: 12455.460 ms/op
Iteration   1: 12428.884 ms/op
Iteration   2: 12341.597 ms/op
Iteration   3: 12392.181 ms/op
Iteration   4: 12421.581 ms/op
Iteration   5: 12519.448 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  12420.738 ±(99.9%) 250.213 ms/op [Average]
  (min, avg, max) = (12341.597, 12420.738, 12519.448), stdev = 64.980
  CI (99.9%): [12170.525, 12670.951] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 3.77% complete, ETA 05:31:19
# Fork: 1 of 1
# Warmup Iteration   1: 12281.343 ms/op
# Warmup Iteration   2: 11839.663 ms/op
# Warmup Iteration   3: 11822.876 ms/op
# Warmup Iteration   4: 11787.959 ms/op
# Warmup Iteration   5: 11828.980 ms/op
Iteration   1: 11723.713 ms/op
Iteration   2: 11662.336 ms/op
Iteration   3: 12155.145 ms/op
Iteration   4: 11848.748 ms/op
Iteration   5: 11813.738 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  11840.736 ±(99.9%) 733.563 ms/op [Average]
  (min, avg, max) = (11662.336, 11840.736, 12155.145), stdev = 190.504
  CI (99.9%): [11107.173, 12574.299] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 3.85% complete, ETA 06:13:54
# Fork: 1 of 1
# Warmup Iteration   1: 5.834 ms/op
# Warmup Iteration   2: 5.458 ms/op
# Warmup Iteration   3: 5.450 ms/op
# Warmup Iteration   4: 5.459 ms/op
# Warmup Iteration   5: 5.426 ms/op
Iteration   1: 5.406 ms/op
Iteration   2: 5.423 ms/op
Iteration   3: 5.403 ms/op
Iteration   4: 5.429 ms/op
Iteration   5: 5.423 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  5.417 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (5.403, 5.417, 5.429), stdev = 0.011
  CI (99.9%): [5.373, 5.460] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 3.93% complete, ETA 06:10:14
# Fork: 1 of 1
# Warmup Iteration   1: 6.794 ms/op
# Warmup Iteration   2: 6.151 ms/op
# Warmup Iteration   3: 5.811 ms/op
# Warmup Iteration   4: 5.500 ms/op
# Warmup Iteration   5: 5.448 ms/op
Iteration   1: 5.478 ms/op
Iteration   2: 5.460 ms/op
Iteration   3: 5.485 ms/op
Iteration   4: 5.467 ms/op
Iteration   5: 5.504 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  5.479 ±(99.9%) 0.067 ms/op [Average]
  (min, avg, max) = (5.460, 5.479, 5.504), stdev = 0.017
  CI (99.9%): [5.412, 5.546] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 4.01% complete, ETA 06:06:42
# Fork: 1 of 1
# Warmup Iteration   1: 174.857 ms/op
# Warmup Iteration   2: 160.014 ms/op
# Warmup Iteration   3: 157.627 ms/op
# Warmup Iteration   4: 157.153 ms/op
# Warmup Iteration   5: 157.201 ms/op
Iteration   1: 158.033 ms/op
Iteration   2: 157.173 ms/op
Iteration   3: 157.171 ms/op
Iteration   4: 156.008 ms/op
Iteration   5: 157.598 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  157.197 ±(99.9%) 2.904 ms/op [Average]
  (min, avg, max) = (156.008, 157.197, 158.033), stdev = 0.754
  CI (99.9%): [154.293, 160.100] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 4.09% complete, ETA 06:03:38
# Fork: 1 of 1
# Warmup Iteration   1: 172.005 ms/op
# Warmup Iteration   2: 158.776 ms/op
# Warmup Iteration   3: 156.622 ms/op
# Warmup Iteration   4: 156.752 ms/op
# Warmup Iteration   5: 156.130 ms/op
Iteration   1: 156.409 ms/op
Iteration   2: 156.703 ms/op
Iteration   3: 156.188 ms/op
Iteration   4: 156.326 ms/op
Iteration   5: 156.082 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  156.341 ±(99.9%) 0.916 ms/op [Average]
  (min, avg, max) = (156.082, 156.341, 156.703), stdev = 0.238
  CI (99.9%): [155.425, 157.258] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 4.17% complete, ETA 06:00:40
# Fork: 1 of 1
# Warmup Iteration   1: 24812.295 ms/op
# Warmup Iteration   2: 24326.545 ms/op
# Warmup Iteration   3: 24461.387 ms/op
# Warmup Iteration   4: 24355.831 ms/op
# Warmup Iteration   5: 24272.404 ms/op
Iteration   1: 24299.491 ms/op
Iteration   2: 24112.607 ms/op
Iteration   3: 24595.465 ms/op
Iteration   4: 24250.872 ms/op
Iteration   5: 24273.447 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  24306.376 ±(99.9%) 681.605 ms/op [Average]
  (min, avg, max) = (24112.607, 24306.376, 24595.465), stdev = 177.011
  CI (99.9%): [23624.771, 24987.981] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 4.25% complete, ETA 07:25:22
# Fork: 1 of 1
# Warmup Iteration   1: 24245.376 ms/op
# Warmup Iteration   2: 23349.854 ms/op
# Warmup Iteration   3: 23403.981 ms/op
# Warmup Iteration   4: 23549.435 ms/op
# Warmup Iteration   5: 23295.731 ms/op
Iteration   1: 23456.776 ms/op
Iteration   2: 23515.523 ms/op
Iteration   3: 23438.702 ms/op
Iteration   4: 23569.193 ms/op
Iteration   5: 23300.508 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  23456.141 ±(99.9%) 389.054 ms/op [Average]
  (min, avg, max) = (23300.508, 23456.141, 23569.193), stdev = 101.036
  CI (99.9%): [23067.087, 23845.194] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 4.33% complete, ETA 08:43:38
# Fork: 1 of 1
# Warmup Iteration   1: 11.882 ms/op
# Warmup Iteration   2: 11.062 ms/op
# Warmup Iteration   3: 10.946 ms/op
# Warmup Iteration   4: 10.987 ms/op
# Warmup Iteration   5: 10.960 ms/op
Iteration   1: 10.924 ms/op
Iteration   2: 10.902 ms/op
Iteration   3: 10.950 ms/op
Iteration   4: 10.913 ms/op
Iteration   5: 10.946 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  10.927 ±(99.9%) 0.080 ms/op [Average]
  (min, avg, max) = (10.902, 10.927, 10.950), stdev = 0.021
  CI (99.9%): [10.847, 11.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 4.41% complete, ETA 08:37:29
# Fork: 1 of 1
# Warmup Iteration   1: 11.855 ms/op
# Warmup Iteration   2: 11.123 ms/op
# Warmup Iteration   3: 10.970 ms/op
# Warmup Iteration   4: 10.947 ms/op
# Warmup Iteration   5: 10.946 ms/op
Iteration   1: 10.943 ms/op
Iteration   2: 10.937 ms/op
Iteration   3: 10.978 ms/op
Iteration   4: 11.023 ms/op
Iteration   5: 10.954 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  10.967 ±(99.9%) 0.135 ms/op [Average]
  (min, avg, max) = (10.937, 10.967, 11.023), stdev = 0.035
  CI (99.9%): [10.832, 11.102] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 4.49% complete, ETA 08:31:33
# Fork: 1 of 1
# Warmup Iteration   1: 354.499 ms/op
# Warmup Iteration   2: 323.092 ms/op
# Warmup Iteration   3: 319.470 ms/op
# Warmup Iteration   4: 316.119 ms/op
# Warmup Iteration   5: 314.051 ms/op
Iteration   1: 314.844 ms/op
Iteration   2: 314.555 ms/op
Iteration   3: 314.408 ms/op
Iteration   4: 313.434 ms/op
Iteration   5: 314.402 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  314.329 ±(99.9%) 2.046 ms/op [Average]
  (min, avg, max) = (313.434, 314.329, 314.844), stdev = 0.531
  CI (99.9%): [312.283, 316.374] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 4.57% complete, ETA 08:26:36
# Fork: 1 of 1
# Warmup Iteration   1: 345.918 ms/op
# Warmup Iteration   2: 317.635 ms/op
# Warmup Iteration   3: 311.746 ms/op
# Warmup Iteration   4: 313.551 ms/op
# Warmup Iteration   5: 313.727 ms/op
Iteration   1: 312.570 ms/op
Iteration   2: 313.057 ms/op
Iteration   3: 312.867 ms/op
Iteration   4: 313.381 ms/op
Iteration   5: 311.809 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  312.737 ±(99.9%) 2.296 ms/op [Average]
  (min, avg, max) = (311.809, 312.737, 313.381), stdev = 0.596
  CI (99.9%): [310.441, 315.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 4.65% complete, ETA 08:21:47
# Fork: 1 of 1
# Warmup Iteration   1: 47766.301 ms/op
# Warmup Iteration   2: 47551.295 ms/op
# Warmup Iteration   3: 47466.150 ms/op
# Warmup Iteration   4: 47465.054 ms/op
# Warmup Iteration   5: 47537.777 ms/op
Iteration   1: 47386.958 ms/op
Iteration   2: 47494.119 ms/op
Iteration   3: 47502.277 ms/op
Iteration   4: 47851.104 ms/op
Iteration   5: 47787.152 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  47604.322 ±(99.9%) 780.012 ms/op [Average]
  (min, avg, max) = (47386.958, 47604.322, 47851.104), stdev = 202.567
  CI (99.9%): [46824.310, 48384.335] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 4.73% complete, ETA 10:52:52
# Fork: 1 of 1
# Warmup Iteration   1: 48308.366 ms/op
# Warmup Iteration   2: 48293.962 ms/op
# Warmup Iteration   3: 47526.165 ms/op
# Warmup Iteration   4: 47341.928 ms/op
# Warmup Iteration   5: 47111.472 ms/op
Iteration   1: 47430.871 ms/op
Iteration   2: 47337.767 ms/op
Iteration   3: 47443.413 ms/op
Iteration   4: 47370.131 ms/op
Iteration   5: 47360.256 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  47388.488 ±(99.9%) 177.711 ms/op [Average]
  (min, avg, max) = (47337.767, 47388.488, 47443.413), stdev = 46.151
  CI (99.9%): [47210.777, 47566.199] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 4.81% complete, ETA 13:18:34
# Fork: 1 of 1
# Warmup Iteration   1: 23.397 ms/op
# Warmup Iteration   2: 21.998 ms/op
# Warmup Iteration   3: 21.710 ms/op
# Warmup Iteration   4: 21.623 ms/op
# Warmup Iteration   5: 21.631 ms/op
Iteration   1: 21.699 ms/op
Iteration   2: 21.703 ms/op
Iteration   3: 21.706 ms/op
Iteration   4: 21.649 ms/op
Iteration   5: 21.698 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  21.691 ±(99.9%) 0.091 ms/op [Average]
  (min, avg, max) = (21.649, 21.691, 21.706), stdev = 0.024
  CI (99.9%): [21.599, 21.782] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 4.89% complete, ETA 13:08:14
# Fork: 1 of 1
# Warmup Iteration   1: 23.687 ms/op
# Warmup Iteration   2: 22.111 ms/op
# Warmup Iteration   3: 21.714 ms/op
# Warmup Iteration   4: 21.672 ms/op
# Warmup Iteration   5: 21.734 ms/op
Iteration   1: 21.756 ms/op
Iteration   2: 21.673 ms/op
Iteration   3: 21.841 ms/op
Iteration   4: 21.756 ms/op
Iteration   5: 21.829 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  21.771 ±(99.9%) 0.260 ms/op [Average]
  (min, avg, max) = (21.673, 21.771, 21.841), stdev = 0.068
  CI (99.9%): [21.511, 22.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 4.97% complete, ETA 12:58:14
# Fork: 1 of 1
# Warmup Iteration   1: 662.534 ms/op
# Warmup Iteration   2: 628.880 ms/op
# Warmup Iteration   3: 626.910 ms/op
# Warmup Iteration   4: 625.456 ms/op
# Warmup Iteration   5: 621.549 ms/op
Iteration   1: 622.568 ms/op
Iteration   2: 625.920 ms/op
Iteration   3: 626.818 ms/op
Iteration   4: 628.515 ms/op
Iteration   5: 623.818 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  625.528 ±(99.9%) 9.117 ms/op [Average]
  (min, avg, max) = (622.568, 625.528, 628.515), stdev = 2.368
  CI (99.9%): [616.411, 634.645] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 5.05% complete, ETA 12:49:17
# Fork: 1 of 1
# Warmup Iteration   1: 671.505 ms/op
# Warmup Iteration   2: 632.420 ms/op
# Warmup Iteration   3: 624.572 ms/op
# Warmup Iteration   4: 623.665 ms/op
# Warmup Iteration   5: 623.380 ms/op
Iteration   1: 624.403 ms/op
Iteration   2: 622.061 ms/op
Iteration   3: 624.534 ms/op
Iteration   4: 624.922 ms/op
Iteration   5: 621.474 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  623.479 ±(99.9%) 6.113 ms/op [Average]
  (min, avg, max) = (621.474, 623.479, 624.922), stdev = 1.588
  CI (99.9%): [617.365, 629.592] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 5.13% complete, ETA 12:40:37
# Fork: 1 of 1
# Warmup Iteration   1: 96458.680 ms/op
# Warmup Iteration   2: 96727.169 ms/op
# Warmup Iteration   3: 96399.277 ms/op
# Warmup Iteration   4: 95905.846 ms/op
# Warmup Iteration   5: 93900.082 ms/op
Iteration   1: 94170.698 ms/op
Iteration   2: 94374.772 ms/op
Iteration   3: 96461.555 ms/op
Iteration   4: 96453.410 ms/op
Iteration   5: 96099.984 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  95512.084 ±(99.9%) 4401.376 ms/op [Average]
  (min, avg, max) = (94170.698, 95512.084, 96461.555), stdev = 1143.023
  CI (99.9%): [91110.708, 99913.460] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 5.21% complete, ETA 17:18:44
# Fork: 1 of 1
# Warmup Iteration   1: 96169.396 ms/op
# Warmup Iteration   2: 95452.512 ms/op
# Warmup Iteration   3: 95400.945 ms/op
# Warmup Iteration   4: 95495.092 ms/op
# Warmup Iteration   5: 94825.544 ms/op
Iteration   1: 94728.660 ms/op
Iteration   2: 95108.120 ms/op
Iteration   3: 95285.936 ms/op
Iteration   4: 95003.850 ms/op
Iteration   5: 95304.985 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  95086.310 ±(99.9%) 908.903 ms/op [Average]
  (min, avg, max) = (94728.660, 95086.310, 95304.985), stdev = 236.039
  CI (99.9%): [94177.407, 95995.214] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 5.29% complete, ETA 21:46:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.019 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.019, 0.019, 0.019), stdev = 0.001
  CI (99.9%): [0.019, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 5.37% complete, ETA 21:29:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.019 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.019, 0.019, 0.019), stdev = 0.001
  CI (99.9%): [0.019, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 5.45% complete, ETA 21:12:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.694 ms/op
# Warmup Iteration   2: 0.636 ms/op
# Warmup Iteration   3: 0.635 ms/op
# Warmup Iteration   4: 0.636 ms/op
# Warmup Iteration   5: 0.635 ms/op
Iteration   1: 0.630 ms/op
Iteration   2: 0.631 ms/op
Iteration   3: 0.632 ms/op
Iteration   4: 0.632 ms/op
Iteration   5: 0.635 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.632 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.630, 0.632, 0.635), stdev = 0.002
  CI (99.9%): [0.624, 0.640] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 5.53% complete, ETA 20:55:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.705 ms/op
# Warmup Iteration   2: 0.635 ms/op
# Warmup Iteration   3: 0.631 ms/op
# Warmup Iteration   4: 0.632 ms/op
# Warmup Iteration   5: 0.630 ms/op
Iteration   1: 0.631 ms/op
Iteration   2: 0.633 ms/op
Iteration   3: 0.632 ms/op
Iteration   4: 0.628 ms/op
Iteration   5: 0.642 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.633 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.628, 0.633, 0.642), stdev = 0.005
  CI (99.9%): [0.613, 0.654] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 5.61% complete, ETA 20:39:34
# Fork: 1 of 1
# Warmup Iteration   1: 119.106 ms/op
# Warmup Iteration   2: 112.817 ms/op
# Warmup Iteration   3: 103.865 ms/op
# Warmup Iteration   4: 99.829 ms/op
# Warmup Iteration   5: 102.320 ms/op
Iteration   1: 100.047 ms/op
Iteration   2: 97.921 ms/op
Iteration   3: 100.600 ms/op
Iteration   4: 93.780 ms/op
Iteration   5: 92.342 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  96.938 ±(99.9%) 14.297 ms/op [Average]
  (min, avg, max) = (92.342, 96.938, 100.600), stdev = 3.713
  CI (99.9%): [82.641, 111.235] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 5.69% complete, ETA 20:24:25
# Fork: 1 of 1
# Warmup Iteration   1: 111.431 ms/op
# Warmup Iteration   2: 102.345 ms/op
# Warmup Iteration   3: 103.095 ms/op
# Warmup Iteration   4: 94.193 ms/op
# Warmup Iteration   5: 100.924 ms/op
Iteration   1: 93.010 ms/op
Iteration   2: 95.628 ms/op
Iteration   3: 97.079 ms/op
Iteration   4: 94.518 ms/op
Iteration   5: 97.021 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  95.451 ±(99.9%) 6.662 ms/op [Average]
  (min, avg, max) = (93.010, 95.451, 97.079), stdev = 1.730
  CI (99.9%): [88.789, 102.113] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 5.77% complete, ETA 20:09:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.043 ms/op
# Warmup Iteration   5: 0.042 ms/op
Iteration   1: 0.042 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.042 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.042, 0.042, 0.043), stdev = 0.001
  CI (99.9%): [0.042, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 5.85% complete, ETA 19:54:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.043 ms/op
# Warmup Iteration   5: 0.043 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.045 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.042, 0.045, 0.052), stdev = 0.004
  CI (99.9%): [0.030, 0.060] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 5.93% complete, ETA 19:40:27
# Fork: 1 of 1
# Warmup Iteration   1: 1.402 ms/op
# Warmup Iteration   2: 1.284 ms/op
# Warmup Iteration   3: 1.281 ms/op
# Warmup Iteration   4: 1.271 ms/op
# Warmup Iteration   5: 1.274 ms/op
Iteration   1: 1.274 ms/op
Iteration   2: 1.279 ms/op
Iteration   3: 1.277 ms/op
Iteration   4: 1.274 ms/op
Iteration   5: 1.289 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.279 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (1.274, 1.279, 1.289), stdev = 0.006
  CI (99.9%): [1.255, 1.302] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 6.01% complete, ETA 19:26:27
# Fork: 1 of 1
# Warmup Iteration   1: 1.389 ms/op
# Warmup Iteration   2: 1.265 ms/op
# Warmup Iteration   3: 1.272 ms/op
# Warmup Iteration   4: 1.271 ms/op
# Warmup Iteration   5: 1.268 ms/op
Iteration   1: 1.265 ms/op
Iteration   2: 1.266 ms/op
Iteration   3: 1.266 ms/op
Iteration   4: 1.270 ms/op
Iteration   5: 1.269 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.267 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (1.265, 1.267, 1.270), stdev = 0.002
  CI (99.9%): [1.259, 1.275] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 6.09% complete, ETA 19:12:48
# Fork: 1 of 1
# Warmup Iteration   1: 227.424 ms/op
# Warmup Iteration   2: 210.454 ms/op
# Warmup Iteration   3: 196.326 ms/op
# Warmup Iteration   4: 211.534 ms/op
# Warmup Iteration   5: 194.071 ms/op
Iteration   1: 200.700 ms/op
Iteration   2: 194.511 ms/op
Iteration   3: 204.595 ms/op
Iteration   4: 198.632 ms/op
Iteration   5: 195.149 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  198.718 ±(99.9%) 15.982 ms/op [Average]
  (min, avg, max) = (194.511, 198.718, 204.595), stdev = 4.151
  CI (99.9%): [182.735, 214.700] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 6.17% complete, ETA 19:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 230.113 ms/op
# Warmup Iteration   2: 206.161 ms/op
# Warmup Iteration   3: 198.139 ms/op
# Warmup Iteration   4: 197.811 ms/op
# Warmup Iteration   5: 195.862 ms/op
Iteration   1: 193.927 ms/op
Iteration   2: 195.848 ms/op
Iteration   3: 204.970 ms/op
Iteration   4: 237.497 ms/op
Iteration   5: 232.446 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  212.938 ±(99.9%) 79.399 ms/op [Average]
  (min, avg, max) = (193.927, 212.938, 237.497), stdev = 20.620
  CI (99.9%): [133.539, 292.337] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 6.25% complete, ETA 18:47:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.097 ms/op
# Warmup Iteration   2: 0.086 ms/op
# Warmup Iteration   3: 0.085 ms/op
# Warmup Iteration   4: 0.084 ms/op
# Warmup Iteration   5: 0.086 ms/op
Iteration   1: 0.085 ms/op
Iteration   2: 0.085 ms/op
Iteration   3: 0.084 ms/op
Iteration   4: 0.085 ms/op
Iteration   5: 0.086 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.085 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.084, 0.085, 0.086), stdev = 0.001
  CI (99.9%): [0.083, 0.088] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 6.33% complete, ETA 18:35:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.091 ms/op
# Warmup Iteration   2: 0.086 ms/op
# Warmup Iteration   3: 0.087 ms/op
# Warmup Iteration   4: 0.085 ms/op
# Warmup Iteration   5: 0.086 ms/op
Iteration   1: 0.085 ms/op
Iteration   2: 0.085 ms/op
Iteration   3: 0.085 ms/op
Iteration   4: 0.085 ms/op
Iteration   5: 0.085 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.085 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.085, 0.085, 0.085), stdev = 0.001
  CI (99.9%): [0.084, 0.086] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 6.41% complete, ETA 18:22:41
# Fork: 1 of 1
# Warmup Iteration   1: 2.797 ms/op
# Warmup Iteration   2: 2.556 ms/op
# Warmup Iteration   3: 2.552 ms/op
# Warmup Iteration   4: 2.538 ms/op
# Warmup Iteration   5: 2.540 ms/op
Iteration   1: 2.540 ms/op
Iteration   2: 2.527 ms/op
Iteration   3: 2.552 ms/op
Iteration   4: 2.542 ms/op
Iteration   5: 2.539 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2.540 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (2.527, 2.540, 2.552), stdev = 0.009
  CI (99.9%): [2.506, 2.574] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 6.49% complete, ETA 18:10:39
# Fork: 1 of 1
# Warmup Iteration   1: 2.797 ms/op
# Warmup Iteration   2: 2.537 ms/op
# Warmup Iteration   3: 2.536 ms/op
# Warmup Iteration   4: 2.529 ms/op
# Warmup Iteration   5: 2.531 ms/op
Iteration   1: 2.536 ms/op
Iteration   2: 2.530 ms/op
Iteration   3: 2.534 ms/op
Iteration   4: 2.529 ms/op
Iteration   5: 2.530 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2.532 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (2.529, 2.532, 2.536), stdev = 0.003
  CI (99.9%): [2.521, 2.543] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 6.57% complete, ETA 17:58:56
# Fork: 1 of 1
# Warmup Iteration   1: 449.671 ms/op
# Warmup Iteration   2: 415.125 ms/op
# Warmup Iteration   3: 388.948 ms/op
# Warmup Iteration   4: 394.576 ms/op
# Warmup Iteration   5: 394.310 ms/op
Iteration   1: 396.698 ms/op
Iteration   2: 395.108 ms/op
Iteration   3: 391.879 ms/op
Iteration   4: 403.530 ms/op
Iteration   5: 397.122 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  396.867 ±(99.9%) 16.389 ms/op [Average]
  (min, avg, max) = (391.879, 396.867, 403.530), stdev = 4.256
  CI (99.9%): [380.478, 413.256] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 6.65% complete, ETA 17:48:07
# Fork: 1 of 1
# Warmup Iteration   1: 435.972 ms/op
# Warmup Iteration   2: 399.960 ms/op
# Warmup Iteration   3: 385.247 ms/op
# Warmup Iteration   4: 386.081 ms/op
# Warmup Iteration   5: 388.028 ms/op
Iteration   1: 385.678 ms/op
Iteration   2: 396.883 ms/op
Iteration   3: 389.210 ms/op
Iteration   4: 381.112 ms/op
Iteration   5: 384.176 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  387.412 ±(99.9%) 23.272 ms/op [Average]
  (min, avg, max) = (381.112, 387.412, 396.883), stdev = 6.044
  CI (99.9%): [364.140, 410.684] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 6.73% complete, ETA 17:37:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.187 ms/op
# Warmup Iteration   2: 0.175 ms/op
# Warmup Iteration   3: 0.173 ms/op
# Warmup Iteration   4: 0.174 ms/op
# Warmup Iteration   5: 0.172 ms/op
Iteration   1: 0.171 ms/op
Iteration   2: 0.171 ms/op
Iteration   3: 0.172 ms/op
Iteration   4: 0.171 ms/op
Iteration   5: 0.169 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.171 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.169, 0.171, 0.172), stdev = 0.001
  CI (99.9%): [0.167, 0.175] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 6.81% complete, ETA 17:26:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.182 ms/op
# Warmup Iteration   2: 0.172 ms/op
# Warmup Iteration   3: 0.170 ms/op
# Warmup Iteration   4: 0.169 ms/op
# Warmup Iteration   5: 0.169 ms/op
Iteration   1: 0.169 ms/op
Iteration   2: 0.169 ms/op
Iteration   3: 0.169 ms/op
Iteration   4: 0.170 ms/op
Iteration   5: 0.169 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.169 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.169, 0.169, 0.170), stdev = 0.001
  CI (99.9%): [0.167, 0.171] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 6.89% complete, ETA 17:15:49
# Fork: 1 of 1
# Warmup Iteration   1: 5.590 ms/op
# Warmup Iteration   2: 5.051 ms/op
# Warmup Iteration   3: 5.108 ms/op
# Warmup Iteration   4: 5.044 ms/op
# Warmup Iteration   5: 5.059 ms/op
Iteration   1: 5.045 ms/op
Iteration   2: 5.041 ms/op
Iteration   3: 5.039 ms/op
Iteration   4: 5.057 ms/op
Iteration   5: 5.057 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  5.048 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (5.039, 5.048, 5.057), stdev = 0.009
  CI (99.9%): [5.014, 5.082] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 6.97% complete, ETA 17:05:22
# Fork: 1 of 1
# Warmup Iteration   1: 5.550 ms/op
# Warmup Iteration   2: 5.026 ms/op
# Warmup Iteration   3: 5.061 ms/op
# Warmup Iteration   4: 5.078 ms/op
# Warmup Iteration   5: 5.090 ms/op
Iteration   1: 5.063 ms/op
Iteration   2: 5.108 ms/op
Iteration   3: 5.093 ms/op
Iteration   4: 5.063 ms/op
Iteration   5: 5.085 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  5.083 ±(99.9%) 0.075 ms/op [Average]
  (min, avg, max) = (5.063, 5.083, 5.108), stdev = 0.020
  CI (99.9%): [5.007, 5.158] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 7.05% complete, ETA 16:55:09
# Fork: 1 of 1
# Warmup Iteration   1: 866.435 ms/op
# Warmup Iteration   2: 837.253 ms/op
# Warmup Iteration   3: 779.143 ms/op
# Warmup Iteration   4: 804.096 ms/op
# Warmup Iteration   5: 772.517 ms/op
Iteration   1: 828.510 ms/op
Iteration   2: 752.917 ms/op
Iteration   3: 803.951 ms/op
Iteration   4: 782.938 ms/op
Iteration   5: 880.202 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  809.704 ±(99.9%) 185.650 ms/op [Average]
  (min, avg, max) = (752.917, 809.704, 880.202), stdev = 48.213
  CI (99.9%): [624.053, 995.354] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 7.13% complete, ETA 16:46:38
# Fork: 1 of 1
# Warmup Iteration   1: 854.869 ms/op
# Warmup Iteration   2: 860.928 ms/op
# Warmup Iteration   3: 760.360 ms/op
# Warmup Iteration   4: 809.285 ms/op
# Warmup Iteration   5: 747.161 ms/op
Iteration   1: 738.197 ms/op
Iteration   2: 814.111 ms/op
Iteration   3: 769.541 ms/op
Iteration   4: 801.312 ms/op
Iteration   5: 767.244 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  778.081 ±(99.9%) 115.823 ms/op [Average]
  (min, avg, max) = (738.197, 778.081, 814.111), stdev = 30.079
  CI (99.9%): [662.258, 893.904] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 7.21% complete, ETA 16:38:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.368 ms/op
# Warmup Iteration   2: 0.341 ms/op
# Warmup Iteration   3: 0.347 ms/op
# Warmup Iteration   4: 0.349 ms/op
# Warmup Iteration   5: 0.373 ms/op
Iteration   1: 0.338 ms/op
Iteration   2: 0.340 ms/op
Iteration   3: 0.340 ms/op
Iteration   4: 0.336 ms/op
Iteration   5: 0.340 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.339 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.336, 0.339, 0.340), stdev = 0.002
  CI (99.9%): [0.332, 0.345] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 7.29% complete, ETA 16:28:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.359 ms/op
# Warmup Iteration   2: 0.339 ms/op
# Warmup Iteration   3: 0.341 ms/op
# Warmup Iteration   4: 0.336 ms/op
# Warmup Iteration   5: 0.335 ms/op
Iteration   1: 0.336 ms/op
Iteration   2: 0.334 ms/op
Iteration   3: 0.336 ms/op
Iteration   4: 0.335 ms/op
Iteration   5: 0.334 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.335 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.334, 0.335, 0.336), stdev = 0.001
  CI (99.9%): [0.330, 0.340] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 7.37% complete, ETA 16:19:12
# Fork: 1 of 1
# Warmup Iteration   1: 11.227 ms/op
# Warmup Iteration   2: 10.100 ms/op
# Warmup Iteration   3: 10.054 ms/op
# Warmup Iteration   4: 10.055 ms/op
# Warmup Iteration   5: 10.122 ms/op
Iteration   1: 10.060 ms/op
Iteration   2: 10.076 ms/op
Iteration   3: 10.053 ms/op
Iteration   4: 10.117 ms/op
Iteration   5: 10.020 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  10.065 ±(99.9%) 0.136 ms/op [Average]
  (min, avg, max) = (10.020, 10.065, 10.117), stdev = 0.035
  CI (99.9%): [9.930, 10.201] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 7.45% complete, ETA 16:10:00
# Fork: 1 of 1
# Warmup Iteration   1: 10.974 ms/op
# Warmup Iteration   2: 10.097 ms/op
# Warmup Iteration   3: 10.173 ms/op
# Warmup Iteration   4: 10.116 ms/op
# Warmup Iteration   5: 10.056 ms/op
Iteration   1: 9.975 ms/op
Iteration   2: 10.097 ms/op
Iteration   3: 10.021 ms/op
Iteration   4: 10.125 ms/op
Iteration   5: 10.056 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  10.055 ±(99.9%) 0.229 ms/op [Average]
  (min, avg, max) = (9.975, 10.055, 10.125), stdev = 0.059
  CI (99.9%): [9.826, 10.284] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 7.53% complete, ETA 16:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1734.791 ms/op
# Warmup Iteration   2: 1633.730 ms/op
# Warmup Iteration   3: 1588.671 ms/op
# Warmup Iteration   4: 1517.047 ms/op
# Warmup Iteration   5: 1517.667 ms/op
Iteration   1: 1534.018 ms/op
Iteration   2: 1555.588 ms/op
Iteration   3: 1533.588 ms/op
Iteration   4: 1498.742 ms/op
Iteration   5: 1495.814 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1523.550 ±(99.9%) 98.578 ms/op [Average]
  (min, avg, max) = (1495.814, 1523.550, 1555.588), stdev = 25.600
  CI (99.9%): [1424.972, 1622.128] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 7.61% complete, ETA 15:53:27
# Fork: 1 of 1
# Warmup Iteration   1: 1687.843 ms/op
# Warmup Iteration   2: 1636.866 ms/op
# Warmup Iteration   3: 1465.031 ms/op
# Warmup Iteration   4: 1488.845 ms/op
# Warmup Iteration   5: 1597.316 ms/op
Iteration   1: 1485.743 ms/op
Iteration   2: 1457.119 ms/op
Iteration   3: 1462.824 ms/op
Iteration   4: 1461.569 ms/op
Iteration   5: 1419.480 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1457.347 ±(99.9%) 92.095 ms/op [Average]
  (min, avg, max) = (1419.480, 1457.347, 1485.743), stdev = 23.917
  CI (99.9%): [1365.252, 1549.442] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 7.69% complete, ETA 15:45:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.750 ms/op
# Warmup Iteration   2: 0.689 ms/op
# Warmup Iteration   3: 0.679 ms/op
# Warmup Iteration   4: 0.679 ms/op
# Warmup Iteration   5: 0.683 ms/op
Iteration   1: 0.684 ms/op
Iteration   2: 0.676 ms/op
Iteration   3: 0.676 ms/op
Iteration   4: 0.677 ms/op
Iteration   5: 0.681 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.679 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.676, 0.679, 0.684), stdev = 0.003
  CI (99.9%): [0.666, 0.692] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 7.77% complete, ETA 15:37:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.725 ms/op
# Warmup Iteration   2: 0.686 ms/op
# Warmup Iteration   3: 0.675 ms/op
# Warmup Iteration   4: 0.674 ms/op
# Warmup Iteration   5: 0.678 ms/op
Iteration   1: 0.674 ms/op
Iteration   2: 0.679 ms/op
Iteration   3: 0.675 ms/op
Iteration   4: 0.673 ms/op
Iteration   5: 0.674 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.675 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.673, 0.675, 0.679), stdev = 0.002
  CI (99.9%): [0.666, 0.683] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 7.85% complete, ETA 15:29:07
# Fork: 1 of 1
# Warmup Iteration   1: 22.309 ms/op
# Warmup Iteration   2: 20.441 ms/op
# Warmup Iteration   3: 20.321 ms/op
# Warmup Iteration   4: 20.441 ms/op
# Warmup Iteration   5: 20.289 ms/op
Iteration   1: 20.259 ms/op
Iteration   2: 20.224 ms/op
Iteration   3: 20.246 ms/op
Iteration   4: 20.290 ms/op
Iteration   5: 20.306 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  20.265 ±(99.9%) 0.128 ms/op [Average]
  (min, avg, max) = (20.224, 20.265, 20.306), stdev = 0.033
  CI (99.9%): [20.137, 20.393] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 7.93% complete, ETA 15:20:58
# Fork: 1 of 1
# Warmup Iteration   1: 22.365 ms/op
# Warmup Iteration   2: 20.197 ms/op
# Warmup Iteration   3: 20.208 ms/op
# Warmup Iteration   4: 20.336 ms/op
# Warmup Iteration   5: 20.181 ms/op
Iteration   1: 20.171 ms/op
Iteration   2: 20.127 ms/op
Iteration   3: 20.180 ms/op
Iteration   4: 20.294 ms/op
Iteration   5: 20.180 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  20.190 ±(99.9%) 0.238 ms/op [Average]
  (min, avg, max) = (20.127, 20.190, 20.294), stdev = 0.062
  CI (99.9%): [19.952, 20.428] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 8.01% complete, ETA 15:12:59
# Fork: 1 of 1
# Warmup Iteration   1: 3427.516 ms/op
# Warmup Iteration   2: 3175.528 ms/op
# Warmup Iteration   3: 3158.960 ms/op
# Warmup Iteration   4: 3131.849 ms/op
# Warmup Iteration   5: 2963.512 ms/op
Iteration   1: 3744.069 ms/op
Iteration   2: 4105.326 ms/op
Iteration   3: 4530.497 ms/op
Iteration   4: 4773.995 ms/op
Iteration   5: 4565.198 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  4343.817 ±(99.9%) 1594.054 ms/op [Average]
  (min, avg, max) = (3744.069, 4343.817, 4773.995), stdev = 413.971
  CI (99.9%): [2749.762, 5937.871] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 8.09% complete, ETA 15:10:32
# Fork: 1 of 1
# Warmup Iteration   1: 3301.076 ms/op
# Warmup Iteration   2: 3151.673 ms/op
# Warmup Iteration   3: 2956.778 ms/op
# Warmup Iteration   4: 3049.230 ms/op
# Warmup Iteration   5: 3010.563 ms/op
Iteration   1: 2971.928 ms/op
Iteration   2: 2900.326 ms/op
Iteration   3: 3171.297 ms/op
Iteration   4: 3748.408 ms/op
Iteration   5: 4348.753 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  3428.142 ±(99.9%) 2360.217 ms/op [Average]
  (min, avg, max) = (2900.326, 3428.142, 4348.753), stdev = 612.941
  CI (99.9%): [1067.926, 5788.359] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 8.17% complete, ETA 15:07:12
# Fork: 1 of 1
# Warmup Iteration   1: 1.481 ms/op
# Warmup Iteration   2: 1.385 ms/op
# Warmup Iteration   3: 1.353 ms/op
# Warmup Iteration   4: 1.374 ms/op
# Warmup Iteration   5: 1.359 ms/op
Iteration   1: 1.353 ms/op
Iteration   2: 1.361 ms/op
Iteration   3: 1.362 ms/op
Iteration   4: 1.362 ms/op
Iteration   5: 1.363 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.360 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (1.353, 1.360, 1.363), stdev = 0.004
  CI (99.9%): [1.345, 1.375] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 8.25% complete, ETA 14:59:33
# Fork: 1 of 1
# Warmup Iteration   1: 1.509 ms/op
# Warmup Iteration   2: 1.383 ms/op
# Warmup Iteration   3: 1.373 ms/op
# Warmup Iteration   4: 1.366 ms/op
# Warmup Iteration   5: 1.367 ms/op
Iteration   1: 1.363 ms/op
Iteration   2: 1.361 ms/op
Iteration   3: 1.368 ms/op
Iteration   4: 1.362 ms/op
Iteration   5: 1.360 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.363 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (1.360, 1.363, 1.368), stdev = 0.003
  CI (99.9%): [1.352, 1.374] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 8.33% complete, ETA 14:52:03
# Fork: 1 of 1
# Warmup Iteration   1: 44.667 ms/op
# Warmup Iteration   2: 40.941 ms/op
# Warmup Iteration   3: 40.801 ms/op
# Warmup Iteration   4: 40.889 ms/op
# Warmup Iteration   5: 40.670 ms/op
Iteration   1: 40.589 ms/op
Iteration   2: 40.429 ms/op
Iteration   3: 40.671 ms/op
Iteration   4: 41.117 ms/op
Iteration   5: 40.673 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  40.696 ±(99.9%) 0.984 ms/op [Average]
  (min, avg, max) = (40.429, 40.696, 41.117), stdev = 0.256
  CI (99.9%): [39.712, 41.680] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 8.41% complete, ETA 14:44:42
# Fork: 1 of 1
# Warmup Iteration   1: 44.373 ms/op
# Warmup Iteration   2: 40.811 ms/op
# Warmup Iteration   3: 40.865 ms/op
# Warmup Iteration   4: 40.658 ms/op
# Warmup Iteration   5: 40.690 ms/op
Iteration   1: 40.724 ms/op
Iteration   2: 40.940 ms/op
Iteration   3: 40.943 ms/op
Iteration   4: 40.843 ms/op
Iteration   5: 40.482 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  40.786 ±(99.9%) 0.740 ms/op [Average]
  (min, avg, max) = (40.482, 40.786, 40.943), stdev = 0.192
  CI (99.9%): [40.046, 41.527] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 8.49% complete, ETA 14:37:29
# Fork: 1 of 1
# Warmup Iteration   1: 6508.438 ms/op
# Warmup Iteration   2: 6153.755 ms/op
# Warmup Iteration   3: 7191.433 ms/op
# Warmup Iteration   4: 8469.342 ms/op
# Warmup Iteration   5: 9265.161 ms/op
Iteration   1: 9273.960 ms/op
Iteration   2: 9019.610 ms/op
Iteration   3: 9008.346 ms/op
Iteration   4: 9139.507 ms/op
Iteration   5: 8810.934 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  9050.471 ±(99.9%) 661.312 ms/op [Average]
  (min, avg, max) = (8810.934, 9050.471, 9273.960), stdev = 171.741
  CI (99.9%): [8389.159, 9711.784] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 8.57% complete, ETA 14:43:26
# Fork: 1 of 1
# Warmup Iteration   1: 6446.571 ms/op
# Warmup Iteration   2: 6066.458 ms/op
# Warmup Iteration   3: 5955.948 ms/op
# Warmup Iteration   4: 7365.388 ms/op
# Warmup Iteration   5: 9026.827 ms/op
Iteration   1: 8740.085 ms/op
Iteration   2: 8767.315 ms/op
Iteration   3: 8454.103 ms/op
Iteration   4: 7927.133 ms/op
Iteration   5: 8793.870 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  8536.501 ±(99.9%) 1413.611 ms/op [Average]
  (min, avg, max) = (7927.133, 8536.501, 8793.870), stdev = 367.110
  CI (99.9%): [7122.890, 9950.112] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 8.65% complete, ETA 14:48:22
# Fork: 1 of 1
# Warmup Iteration   1: 2.992 ms/op
# Warmup Iteration   2: 2.816 ms/op
# Warmup Iteration   3: 2.757 ms/op
# Warmup Iteration   4: 2.772 ms/op
# Warmup Iteration   5: 2.767 ms/op
Iteration   1: 2.770 ms/op
Iteration   2: 2.752 ms/op
Iteration   3: 2.750 ms/op
Iteration   4: 2.751 ms/op
Iteration   5: 2.770 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2.759 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (2.750, 2.759, 2.770), stdev = 0.010
  CI (99.9%): [2.719, 2.798] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 8.73% complete, ETA 14:41:16
# Fork: 1 of 1
# Warmup Iteration   1: 2.932 ms/op
# Warmup Iteration   2: 2.760 ms/op
# Warmup Iteration   3: 2.731 ms/op
# Warmup Iteration   4: 2.709 ms/op
# Warmup Iteration   5: 2.721 ms/op
Iteration   1: 2.722 ms/op
Iteration   2: 2.705 ms/op
Iteration   3: 2.721 ms/op
Iteration   4: 2.718 ms/op
Iteration   5: 2.729 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2.719 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (2.705, 2.719, 2.729), stdev = 0.009
  CI (99.9%): [2.684, 2.753] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 8.81% complete, ETA 14:34:17
# Fork: 1 of 1
# Warmup Iteration   1: 90.150 ms/op
# Warmup Iteration   2: 82.652 ms/op
# Warmup Iteration   3: 82.114 ms/op
# Warmup Iteration   4: 81.736 ms/op
# Warmup Iteration   5: 81.679 ms/op
Iteration   1: 81.337 ms/op
Iteration   2: 81.050 ms/op
Iteration   3: 81.970 ms/op
Iteration   4: 81.866 ms/op
Iteration   5: 82.869 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  81.818 ±(99.9%) 2.689 ms/op [Average]
  (min, avg, max) = (81.050, 81.818, 82.869), stdev = 0.698
  CI (99.9%): [79.129, 84.507] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 8.89% complete, ETA 14:27:32
# Fork: 1 of 1
# Warmup Iteration   1: 89.258 ms/op
# Warmup Iteration   2: 82.258 ms/op
# Warmup Iteration   3: 82.251 ms/op
# Warmup Iteration   4: 81.304 ms/op
# Warmup Iteration   5: 81.613 ms/op
Iteration   1: 82.243 ms/op
Iteration   2: 82.271 ms/op
Iteration   3: 81.318 ms/op
Iteration   4: 81.132 ms/op
Iteration   5: 82.266 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  81.846 ±(99.9%) 2.198 ms/op [Average]
  (min, avg, max) = (81.132, 81.846, 82.271), stdev = 0.571
  CI (99.9%): [79.648, 84.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 8.97% complete, ETA 14:20:54
# Fork: 1 of 1
# Warmup Iteration   1: 12762.697 ms/op
# Warmup Iteration   2: 14314.494 ms/op
# Warmup Iteration   3: 17345.146 ms/op
# Warmup Iteration   4: 17280.865 ms/op
# Warmup Iteration   5: 17301.121 ms/op
Iteration   1: 17039.394 ms/op
Iteration   2: 17143.743 ms/op
Iteration   3: 16396.525 ms/op
Iteration   4: 17022.952 ms/op
Iteration   5: 16985.424 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  16917.608 ±(99.9%) 1144.220 ms/op [Average]
  (min, avg, max) = (16396.525, 16917.608, 17143.743), stdev = 297.150
  CI (99.9%): [15773.388, 18061.828] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 9.05% complete, ETA 14:40:08
# Fork: 1 of 1
# Warmup Iteration   1: 12836.167 ms/op
# Warmup Iteration   2: 15449.074 ms/op
# Warmup Iteration   3: 16989.577 ms/op
# Warmup Iteration   4: 17076.543 ms/op
# Warmup Iteration   5: 16961.165 ms/op
Iteration   1: 16687.757 ms/op
Iteration   2: 16857.208 ms/op
Iteration   3: 16920.378 ms/op
Iteration   4: 16790.573 ms/op
Iteration   5: 17147.475 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  16880.678 ±(99.9%) 663.175 ms/op [Average]
  (min, avg, max) = (16687.757, 16880.678, 17147.475), stdev = 172.224
  CI (99.9%): [16217.504, 17543.853] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 9.13% complete, ETA 14:58:59
# Fork: 1 of 1
# Warmup Iteration   1: 5.975 ms/op
# Warmup Iteration   2: 5.619 ms/op
# Warmup Iteration   3: 5.493 ms/op
# Warmup Iteration   4: 5.474 ms/op
# Warmup Iteration   5: 5.513 ms/op
Iteration   1: 5.504 ms/op
Iteration   2: 5.529 ms/op
Iteration   3: 5.545 ms/op
Iteration   4: 5.523 ms/op
Iteration   5: 5.511 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  5.522 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (5.504, 5.522, 5.545), stdev = 0.016
  CI (99.9%): [5.462, 5.583] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 9.21% complete, ETA 14:52:06
# Fork: 1 of 1
# Warmup Iteration   1: 5.920 ms/op
# Warmup Iteration   2: 5.497 ms/op
# Warmup Iteration   3: 5.444 ms/op
# Warmup Iteration   4: 5.397 ms/op
# Warmup Iteration   5: 5.417 ms/op
Iteration   1: 5.418 ms/op
Iteration   2: 5.449 ms/op
Iteration   3: 5.416 ms/op
Iteration   4: 5.461 ms/op
Iteration   5: 5.407 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  5.430 ±(99.9%) 0.090 ms/op [Average]
  (min, avg, max) = (5.407, 5.430, 5.461), stdev = 0.023
  CI (99.9%): [5.341, 5.520] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 9.29% complete, ETA 14:45:20
# Fork: 1 of 1
# Warmup Iteration   1: 178.193 ms/op
# Warmup Iteration   2: 164.508 ms/op
# Warmup Iteration   3: 164.033 ms/op
# Warmup Iteration   4: 163.765 ms/op
# Warmup Iteration   5: 163.132 ms/op
Iteration   1: 165.421 ms/op
Iteration   2: 163.609 ms/op
Iteration   3: 163.038 ms/op
Iteration   4: 165.531 ms/op
Iteration   5: 162.090 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  163.938 ±(99.9%) 5.799 ms/op [Average]
  (min, avg, max) = (162.090, 163.938, 165.531), stdev = 1.506
  CI (99.9%): [158.139, 169.737] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 9.38% complete, ETA 14:38:53
# Fork: 1 of 1
# Warmup Iteration   1: 181.008 ms/op
# Warmup Iteration   2: 166.608 ms/op
# Warmup Iteration   3: 164.815 ms/op
# Warmup Iteration   4: 164.702 ms/op
# Warmup Iteration   5: 167.033 ms/op
Iteration   1: 166.404 ms/op
Iteration   2: 166.804 ms/op
Iteration   3: 163.383 ms/op
Iteration   4: 164.750 ms/op
Iteration   5: 165.542 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  165.377 ±(99.9%) 5.269 ms/op [Average]
  (min, avg, max) = (163.383, 165.377, 166.804), stdev = 1.368
  CI (99.9%): [160.108, 170.645] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 9.46% complete, ETA 14:32:32
# Fork: 1 of 1
# Warmup Iteration   1: 25753.877 ms/op
# Warmup Iteration   2: 31791.902 ms/op
# Warmup Iteration   3: 32514.860 ms/op
# Warmup Iteration   4: 32726.252 ms/op
# Warmup Iteration   5: 32500.396 ms/op
Iteration   1: 32390.704 ms/op
Iteration   2: 31081.832 ms/op
Iteration   3: 33295.439 ms/op
Iteration   4: 32373.218 ms/op
Iteration   5: 32427.020 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  32313.643 ±(99.9%) 3046.406 ms/op [Average]
  (min, avg, max) = (31081.832, 32313.643, 33295.439), stdev = 791.142
  CI (99.9%): [29267.237, 35360.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 9.54% complete, ETA 15:14:45
# Fork: 1 of 1
# Warmup Iteration   1: 23881.149 ms/op
# Warmup Iteration   2: 32164.329 ms/op
# Warmup Iteration   3: 32690.548 ms/op
# Warmup Iteration   4: 32477.046 ms/op
# Warmup Iteration   5: 32275.177 ms/op
Iteration   1: 32120.105 ms/op
Iteration   2: 32147.127 ms/op
Iteration   3: 32299.870 ms/op
Iteration   4: 31830.990 ms/op
Iteration   5: 32427.026 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  32165.023 ±(99.9%) 862.633 ms/op [Average]
  (min, avg, max) = (31830.990, 32165.023, 32427.026), stdev = 224.023
  CI (99.9%): [31302.391, 33027.656] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 9.62% complete, ETA 15:55:46
# Fork: 1 of 1
# Warmup Iteration   1: 11.829 ms/op
# Warmup Iteration   2: 10.919 ms/op
# Warmup Iteration   3: 11.049 ms/op
# Warmup Iteration   4: 10.949 ms/op
# Warmup Iteration   5: 10.952 ms/op
Iteration   1: 10.822 ms/op
Iteration   2: 10.937 ms/op
Iteration   3: 10.894 ms/op
Iteration   4: 10.801 ms/op
Iteration   5: 10.864 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  10.864 ±(99.9%) 0.210 ms/op [Average]
  (min, avg, max) = (10.801, 10.864, 10.937), stdev = 0.055
  CI (99.9%): [10.653, 11.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 9.70% complete, ETA 15:48:39
# Fork: 1 of 1
# Warmup Iteration   1: 11.814 ms/op
# Warmup Iteration   2: 10.984 ms/op
# Warmup Iteration   3: 10.923 ms/op
# Warmup Iteration   4: 11.019 ms/op
# Warmup Iteration   5: 10.901 ms/op
Iteration   1: 10.929 ms/op
Iteration   2: 10.921 ms/op
Iteration   3: 10.885 ms/op
Iteration   4: 10.920 ms/op
Iteration   5: 10.900 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  10.911 ±(99.9%) 0.070 ms/op [Average]
  (min, avg, max) = (10.885, 10.911, 10.929), stdev = 0.018
  CI (99.9%): [10.841, 10.981] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 9.78% complete, ETA 15:41:39
# Fork: 1 of 1
# Warmup Iteration   1: 359.142 ms/op
# Warmup Iteration   2: 327.831 ms/op
# Warmup Iteration   3: 330.974 ms/op
# Warmup Iteration   4: 328.247 ms/op
# Warmup Iteration   5: 330.909 ms/op
Iteration   1: 326.511 ms/op
Iteration   2: 330.133 ms/op
Iteration   3: 329.373 ms/op
Iteration   4: 328.903 ms/op
Iteration   5: 332.653 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  329.515 ±(99.9%) 8.534 ms/op [Average]
  (min, avg, max) = (326.511, 329.515, 332.653), stdev = 2.216
  CI (99.9%): [320.980, 338.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 9.86% complete, ETA 15:35:12
# Fork: 1 of 1
# Warmup Iteration   1: 354.758 ms/op
# Warmup Iteration   2: 328.780 ms/op
# Warmup Iteration   3: 324.872 ms/op
# Warmup Iteration   4: 324.136 ms/op
# Warmup Iteration   5: 323.095 ms/op
Iteration   1: 324.998 ms/op
Iteration   2: 330.781 ms/op
Iteration   3: 328.223 ms/op
Iteration   4: 323.092 ms/op
Iteration   5: 328.451 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  327.109 ±(99.9%) 11.730 ms/op [Average]
  (min, avg, max) = (323.092, 327.109, 330.781), stdev = 3.046
  CI (99.9%): [315.379, 338.839] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 9.94% complete, ETA 15:28:49
# Fork: 1 of 1
# Warmup Iteration   1: 58784.949 ms/op
# Warmup Iteration   2: 65891.578 ms/op
# Warmup Iteration   3: 65695.667 ms/op
# Warmup Iteration   4: 65703.240 ms/op
# Warmup Iteration   5: 65568.868 ms/op
Iteration   1: 65662.113 ms/op
Iteration   2: 65052.271 ms/op
Iteration   3: 66070.188 ms/op
Iteration   4: 65480.018 ms/op
Iteration   5: 65337.134 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  65520.345 ±(99.9%) 1462.118 ms/op [Average]
  (min, avg, max) = (65052.271, 65520.345, 66070.188), stdev = 379.707
  CI (99.9%): [64058.226, 66982.463] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 10.02% complete, ETA 16:57:58
# Fork: 1 of 1
# Warmup Iteration   1: 58312.340 ms/op
# Warmup Iteration   2: 66338.592 ms/op
# Warmup Iteration   3: 65890.953 ms/op
# Warmup Iteration   4: 65817.708 ms/op
# Warmup Iteration   5: 65716.228 ms/op
Iteration   1: 65787.752 ms/op
Iteration   2: 65659.116 ms/op
Iteration   3: 65434.077 ms/op
Iteration   4: 65472.770 ms/op
Iteration   5: 65625.472 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  65595.837 ±(99.9%) 554.766 ms/op [Average]
  (min, avg, max) = (65434.077, 65595.837, 65787.752), stdev = 144.071
  CI (99.9%): [65041.072, 66150.603] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 10.10% complete, ETA 18:25:40
# Fork: 1 of 1
# Warmup Iteration   1: 23.847 ms/op
# Warmup Iteration   2: 22.001 ms/op
# Warmup Iteration   3: 22.315 ms/op
# Warmup Iteration   4: 22.066 ms/op
# Warmup Iteration   5: 22.147 ms/op
Iteration   1: 22.061 ms/op
Iteration   2: 21.957 ms/op
Iteration   3: 21.967 ms/op
Iteration   4: 21.958 ms/op
Iteration   5: 21.850 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  21.959 ±(99.9%) 0.288 ms/op [Average]
  (min, avg, max) = (21.850, 21.959, 22.061), stdev = 0.075
  CI (99.9%): [21.671, 22.247] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 10.18% complete, ETA 18:17:32
# Fork: 1 of 1
# Warmup Iteration   1: 24.425 ms/op
# Warmup Iteration   2: 23.111 ms/op
# Warmup Iteration   3: 22.015 ms/op
# Warmup Iteration   4: 22.012 ms/op
# Warmup Iteration   5: 22.125 ms/op
Iteration   1: 21.945 ms/op
Iteration   2: 21.993 ms/op
Iteration   3: 21.897 ms/op
Iteration   4: 22.342 ms/op
Iteration   5: 22.106 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  22.056 ±(99.9%) 0.683 ms/op [Average]
  (min, avg, max) = (21.897, 22.056, 22.342), stdev = 0.177
  CI (99.9%): [21.373, 22.739] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 10.26% complete, ETA 18:09:31
# Fork: 1 of 1
# Warmup Iteration   1: 708.902 ms/op
# Warmup Iteration   2: 664.370 ms/op
# Warmup Iteration   3: 658.703 ms/op
# Warmup Iteration   4: 661.882 ms/op
# Warmup Iteration   5: 667.885 ms/op
Iteration   1: 665.231 ms/op
Iteration   2: 662.170 ms/op
Iteration   3: 667.504 ms/op
Iteration   4: 659.317 ms/op
Iteration   5: 657.795 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  662.403 ±(99.9%) 15.502 ms/op [Average]
  (min, avg, max) = (657.795, 662.403, 667.504), stdev = 4.026
  CI (99.9%): [646.902, 677.905] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 10.34% complete, ETA 18:02:05
# Fork: 1 of 1
# Warmup Iteration   1: 715.145 ms/op
# Warmup Iteration   2: 660.411 ms/op
# Warmup Iteration   3: 659.506 ms/op
# Warmup Iteration   4: 658.324 ms/op
# Warmup Iteration   5: 657.585 ms/op
Iteration   1: 655.197 ms/op
Iteration   2: 658.828 ms/op
Iteration   3: 657.429 ms/op
Iteration   4: 659.755 ms/op
Iteration   5: 663.000 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  658.842 ±(99.9%) 11.128 ms/op [Average]
  (min, avg, max) = (655.197, 658.842, 663.000), stdev = 2.890
  CI (99.9%): [647.714, 669.970] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 10.42% complete, ETA 17:54:46
# Fork: 1 of 1
# Warmup Iteration   1: 128720.791 ms/op
# Warmup Iteration   2: 133603.195 ms/op
# Warmup Iteration   3: 135009.112 ms/op
# Warmup Iteration   4: 150716.144 ms/op
# Warmup Iteration   5: 144958.528 ms/op
Iteration   1: 124405.329 ms/op
Iteration   2: 132040.367 ms/op
Iteration   3: 135929.193 ms/op
Iteration   4: 134394.222 ms/op
Iteration   5: 135513.679 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  132456.558 ±(99.9%) 18280.952 ms/op [Average]
  (min, avg, max) = (124405.329, 132456.558, 135929.193), stdev = 4747.505
  CI (99.9%): [114175.606, 150737.510] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 10.50% complete, ETA 20:58:25
# Fork: 1 of 1
# Warmup Iteration   1: 129863.965 ms/op
# Warmup Iteration   2: 133834.088 ms/op
# Warmup Iteration   3: 133198.647 ms/op
# Warmup Iteration   4: 134537.101 ms/op
# Warmup Iteration   5: 134218.870 ms/op
Iteration   1: 133122.795 ms/op
Iteration   2: 134698.952 ms/op
Iteration   3: 134631.105 ms/op
Iteration   4: 134163.631 ms/op
Iteration   5: 134614.997 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  134246.296 ±(99.9%) 2552.780 ms/op [Average]
  (min, avg, max) = (133122.795, 134246.296, 134698.952), stdev = 662.949
  CI (99.9%): [131693.516, 136799.076] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 10.58% complete, ETA 23:56:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.020 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.019, 0.020, 0.020), stdev = 0.001
  CI (99.9%): [0.019, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 10.66% complete, ETA 23:45:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.019 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.019, 0.019, 0.020), stdev = 0.001
  CI (99.9%): [0.019, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 10.74% complete, ETA 23:35:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.677 ms/op
# Warmup Iteration   2: 0.626 ms/op
# Warmup Iteration   3: 0.631 ms/op
# Warmup Iteration   4: 0.628 ms/op
# Warmup Iteration   5: 0.641 ms/op
Iteration   1: 0.662 ms/op
Iteration   2: 0.674 ms/op
Iteration   3: 0.616 ms/op
Iteration   4: 0.628 ms/op
Iteration   5: 0.633 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.643 ±(99.9%) 0.094 ms/op [Average]
  (min, avg, max) = (0.616, 0.643, 0.674), stdev = 0.024
  CI (99.9%): [0.549, 0.737] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 10.82% complete, ETA 23:24:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.679 ms/op
# Warmup Iteration   2: 0.621 ms/op
# Warmup Iteration   3: 0.628 ms/op
# Warmup Iteration   4: 0.622 ms/op
# Warmup Iteration   5: 0.624 ms/op
Iteration   1: 0.626 ms/op
Iteration   2: 0.630 ms/op
Iteration   3: 0.619 ms/op
Iteration   4: 0.624 ms/op
Iteration   5: 0.622 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.624 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.619, 0.624, 0.630), stdev = 0.004
  CI (99.9%): [0.608, 0.640] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 10.90% complete, ETA 23:14:47
# Fork: 1 of 1
# Warmup Iteration   1: 108.255 ms/op
# Warmup Iteration   2: 98.795 ms/op
# Warmup Iteration   3: 96.153 ms/op
# Warmup Iteration   4: 96.340 ms/op
# Warmup Iteration   5: 97.174 ms/op
Iteration   1: 96.188 ms/op
Iteration   2: 96.785 ms/op
Iteration   3: 94.582 ms/op
Iteration   4: 91.631 ms/op
Iteration   5: 94.124 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  94.662 ±(99.9%) 7.778 ms/op [Average]
  (min, avg, max) = (91.631, 94.662, 96.785), stdev = 2.020
  CI (99.9%): [86.884, 102.440] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 10.98% complete, ETA 23:04:52
# Fork: 1 of 1
# Warmup Iteration   1: 107.509 ms/op
# Warmup Iteration   2: 103.440 ms/op
# Warmup Iteration   3: 101.429 ms/op
# Warmup Iteration   4: 101.802 ms/op
# Warmup Iteration   5: 99.987 ms/op
Iteration   1: 101.514 ms/op
Iteration   2: 100.011 ms/op
Iteration   3: 97.553 ms/op
Iteration   4: 94.324 ms/op
Iteration   5: 95.649 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  97.810 ±(99.9%) 11.463 ms/op [Average]
  (min, avg, max) = (94.324, 97.810, 101.514), stdev = 2.977
  CI (99.9%): [86.347, 109.273] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 11.06% complete, ETA 22:55:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.043 ms/op
# Warmup Iteration   5: 0.043 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.043 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.043 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.043, 0.043, 0.043), stdev = 0.001
  CI (99.9%): [0.042, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 11.14% complete, ETA 22:45:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.042 ms/op
Iteration   1: 0.042 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.042 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.042 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.042, 0.042, 0.042), stdev = 0.001
  CI (99.9%): [0.042, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 11.22% complete, ETA 22:35:45
# Fork: 1 of 1
# Warmup Iteration   1: 1.350 ms/op
# Warmup Iteration   2: 1.233 ms/op
# Warmup Iteration   3: 1.235 ms/op
# Warmup Iteration   4: 1.230 ms/op
# Warmup Iteration   5: 1.237 ms/op
Iteration   1: 1.230 ms/op
Iteration   2: 1.229 ms/op
Iteration   3: 1.232 ms/op
Iteration   4: 1.232 ms/op
Iteration   5: 1.225 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.230 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (1.225, 1.230, 1.232), stdev = 0.003
  CI (99.9%): [1.219, 1.240] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 11.30% complete, ETA 22:26:17
# Fork: 1 of 1
# Warmup Iteration   1: 1.352 ms/op
# Warmup Iteration   2: 1.232 ms/op
# Warmup Iteration   3: 1.234 ms/op
# Warmup Iteration   4: 1.224 ms/op
# Warmup Iteration   5: 1.233 ms/op
Iteration   1: 1.233 ms/op
Iteration   2: 1.234 ms/op
Iteration   3: 1.230 ms/op
Iteration   4: 1.234 ms/op
Iteration   5: 1.248 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.236 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (1.230, 1.236, 1.248), stdev = 0.007
  CI (99.9%): [1.209, 1.263] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 11.38% complete, ETA 22:16:57
# Fork: 1 of 1
# Warmup Iteration   1: 210.112 ms/op
# Warmup Iteration   2: 195.795 ms/op
# Warmup Iteration   3: 186.815 ms/op
# Warmup Iteration   4: 190.350 ms/op
# Warmup Iteration   5: 189.920 ms/op
Iteration   1: 183.227 ms/op
Iteration   2: 184.851 ms/op
Iteration   3: 184.731 ms/op
Iteration   4: 190.586 ms/op
Iteration   5: 188.206 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  186.320 ±(99.9%) 11.554 ms/op [Average]
  (min, avg, max) = (183.227, 186.320, 190.586), stdev = 3.000
  CI (99.9%): [174.766, 197.874] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 11.46% complete, ETA 22:07:56
# Fork: 1 of 1
# Warmup Iteration   1: 207.000 ms/op
# Warmup Iteration   2: 191.060 ms/op
# Warmup Iteration   3: 192.325 ms/op
# Warmup Iteration   4: 194.736 ms/op
# Warmup Iteration   5: 188.807 ms/op
Iteration   1: 190.488 ms/op
Iteration   2: 180.145 ms/op
Iteration   3: 208.127 ms/op
Iteration   4: 228.001 ms/op
Iteration   5: 197.737 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  200.900 ±(99.9%) 70.370 ms/op [Average]
  (min, avg, max) = (180.145, 200.900, 228.001), stdev = 18.275
  CI (99.9%): [130.530, 271.270] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 11.54% complete, ETA 21:59:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.091 ms/op
# Warmup Iteration   2: 0.085 ms/op
# Warmup Iteration   3: 0.085 ms/op
# Warmup Iteration   4: 0.085 ms/op
# Warmup Iteration   5: 0.085 ms/op
Iteration   1: 0.084 ms/op
Iteration   2: 0.085 ms/op
Iteration   3: 0.084 ms/op
Iteration   4: 0.085 ms/op
Iteration   5: 0.085 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.084 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.084, 0.084, 0.085), stdev = 0.001
  CI (99.9%): [0.082, 0.087] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 11.62% complete, ETA 21:50:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.086 ms/op
# Warmup Iteration   3: 0.086 ms/op
# Warmup Iteration   4: 0.087 ms/op
# Warmup Iteration   5: 0.085 ms/op
Iteration   1: 0.087 ms/op
Iteration   2: 0.085 ms/op
Iteration   3: 0.085 ms/op
Iteration   4: 0.085 ms/op
Iteration   5: 0.086 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.086 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.085, 0.086, 0.087), stdev = 0.001
  CI (99.9%): [0.083, 0.088] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 11.70% complete, ETA 21:41:15
# Fork: 1 of 1
# Warmup Iteration   1: 2.669 ms/op
# Warmup Iteration   2: 2.445 ms/op
# Warmup Iteration   3: 2.447 ms/op
# Warmup Iteration   4: 2.463 ms/op
# Warmup Iteration   5: 2.469 ms/op
Iteration   1: 2.470 ms/op
Iteration   2: 2.467 ms/op
Iteration   3: 2.477 ms/op
Iteration   4: 2.492 ms/op
Iteration   5: 2.503 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.482 ±(99.9%) 0.059 ms/op [Average]
  (min, avg, max) = (2.467, 2.482, 2.503), stdev = 0.015
  CI (99.9%): [2.423, 2.541] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 11.78% complete, ETA 21:32:31
# Fork: 1 of 1
# Warmup Iteration   1: 2.673 ms/op
# Warmup Iteration   2: 2.465 ms/op
# Warmup Iteration   3: 2.457 ms/op
# Warmup Iteration   4: 2.451 ms/op
# Warmup Iteration   5: 2.442 ms/op
Iteration   1: 2.471 ms/op
Iteration   2: 2.458 ms/op
Iteration   3: 2.483 ms/op
Iteration   4: 2.497 ms/op
Iteration   5: 2.522 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.486 ±(99.9%) 0.096 ms/op [Average]
  (min, avg, max) = (2.458, 2.486, 2.522), stdev = 0.025
  CI (99.9%): [2.390, 2.582] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 11.86% complete, ETA 21:23:55
# Fork: 1 of 1
# Warmup Iteration   1: 415.625 ms/op
# Warmup Iteration   2: 396.589 ms/op
# Warmup Iteration   3: 382.687 ms/op
# Warmup Iteration   4: 385.354 ms/op
# Warmup Iteration   5: 398.851 ms/op
Iteration   1: 394.337 ms/op
Iteration   2: 393.434 ms/op
Iteration   3: 364.497 ms/op
Iteration   4: 383.853 ms/op
Iteration   5: 371.758 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  381.576 ±(99.9%) 50.821 ms/op [Average]
  (min, avg, max) = (364.497, 381.576, 394.337), stdev = 13.198
  CI (99.9%): [330.755, 432.397] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 11.94% complete, ETA 21:15:39
# Fork: 1 of 1
# Warmup Iteration   1: 415.185 ms/op
# Warmup Iteration   2: 398.689 ms/op
# Warmup Iteration   3: 377.306 ms/op
# Warmup Iteration   4: 383.689 ms/op
# Warmup Iteration   5: 384.101 ms/op
Iteration   1: 383.570 ms/op
Iteration   2: 366.690 ms/op
Iteration   3: 370.115 ms/op
Iteration   4: 368.770 ms/op
Iteration   5: 379.776 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  373.784 ±(99.9%) 28.597 ms/op [Average]
  (min, avg, max) = (366.690, 373.784, 383.570), stdev = 7.427
  CI (99.9%): [345.187, 402.381] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 12.02% complete, ETA 21:07:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.180 ms/op
# Warmup Iteration   2: 0.169 ms/op
# Warmup Iteration   3: 0.169 ms/op
# Warmup Iteration   4: 0.168 ms/op
# Warmup Iteration   5: 0.168 ms/op
Iteration   1: 0.169 ms/op
Iteration   2: 0.168 ms/op
Iteration   3: 0.168 ms/op
Iteration   4: 0.168 ms/op
Iteration   5: 0.169 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.168 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.168, 0.168, 0.169), stdev = 0.001
  CI (99.9%): [0.167, 0.170] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 12.10% complete, ETA 20:59:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.184 ms/op
# Warmup Iteration   2: 0.170 ms/op
# Warmup Iteration   3: 0.169 ms/op
# Warmup Iteration   4: 0.170 ms/op
# Warmup Iteration   5: 0.170 ms/op
Iteration   1: 0.169 ms/op
Iteration   2: 0.170 ms/op
Iteration   3: 0.170 ms/op
Iteration   4: 0.170 ms/op
Iteration   5: 0.170 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.170 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.169, 0.170, 0.170), stdev = 0.001
  CI (99.9%): [0.168, 0.172] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 12.18% complete, ETA 20:51:00
# Fork: 1 of 1
# Warmup Iteration   1: 5.411 ms/op
# Warmup Iteration   2: 4.898 ms/op
# Warmup Iteration   3: 4.902 ms/op
# Warmup Iteration   4: 4.911 ms/op
# Warmup Iteration   5: 4.938 ms/op
Iteration   1: 4.916 ms/op
Iteration   2: 4.899 ms/op
Iteration   3: 4.919 ms/op
Iteration   4: 4.941 ms/op
Iteration   5: 4.905 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  4.916 ±(99.9%) 0.062 ms/op [Average]
  (min, avg, max) = (4.899, 4.916, 4.941), stdev = 0.016
  CI (99.9%): [4.854, 4.978] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 12.26% complete, ETA 20:42:56
# Fork: 1 of 1
# Warmup Iteration   1: 5.359 ms/op
# Warmup Iteration   2: 4.876 ms/op
# Warmup Iteration   3: 4.927 ms/op
# Warmup Iteration   4: 4.935 ms/op
# Warmup Iteration   5: 4.893 ms/op
Iteration   1: 4.903 ms/op
Iteration   2: 4.879 ms/op
Iteration   3: 4.928 ms/op
Iteration   4: 4.906 ms/op
Iteration   5: 4.943 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  4.912 ±(99.9%) 0.094 ms/op [Average]
  (min, avg, max) = (4.879, 4.912, 4.943), stdev = 0.024
  CI (99.9%): [4.818, 5.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 12.34% complete, ETA 20:34:59
# Fork: 1 of 1
# Warmup Iteration   1: 828.564 ms/op
# Warmup Iteration   2: 830.732 ms/op
# Warmup Iteration   3: 915.141 ms/op
# Warmup Iteration   4: 783.042 ms/op
# Warmup Iteration   5: 777.635 ms/op
Iteration   1: 763.137 ms/op
Iteration   2: 739.648 ms/op
Iteration   3: 755.698 ms/op
Iteration   4: 764.090 ms/op
Iteration   5: 758.895 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  756.293 ±(99.9%) 38.111 ms/op [Average]
  (min, avg, max) = (739.648, 756.293, 764.090), stdev = 9.897
  CI (99.9%): [718.183, 794.404] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 12.42% complete, ETA 20:27:49
# Fork: 1 of 1
# Warmup Iteration   1: 816.191 ms/op
# Warmup Iteration   2: 795.466 ms/op
# Warmup Iteration   3: 745.375 ms/op
# Warmup Iteration   4: 719.129 ms/op
# Warmup Iteration   5: 738.002 ms/op
Iteration   1: 739.259 ms/op
Iteration   2: 715.570 ms/op
Iteration   3: 718.076 ms/op
Iteration   4: 713.690 ms/op
Iteration   5: 724.800 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  722.279 ±(99.9%) 39.976 ms/op [Average]
  (min, avg, max) = (713.690, 722.279, 739.259), stdev = 10.382
  CI (99.9%): [682.303, 762.255] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 12.50% complete, ETA 20:20:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.371 ms/op
# Warmup Iteration   2: 0.346 ms/op
# Warmup Iteration   3: 0.346 ms/op
# Warmup Iteration   4: 0.345 ms/op
# Warmup Iteration   5: 0.346 ms/op
Iteration   1: 0.347 ms/op
Iteration   2: 0.344 ms/op
Iteration   3: 0.343 ms/op
Iteration   4: 0.345 ms/op
Iteration   5: 0.345 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.345 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.343, 0.345, 0.347), stdev = 0.001
  CI (99.9%): [0.340, 0.350] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 12.58% complete, ETA 20:12:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.368 ms/op
# Warmup Iteration   2: 0.344 ms/op
# Warmup Iteration   3: 0.346 ms/op
# Warmup Iteration   4: 0.344 ms/op
# Warmup Iteration   5: 0.345 ms/op
Iteration   1: 0.345 ms/op
Iteration   2: 0.345 ms/op
Iteration   3: 0.344 ms/op
Iteration   4: 0.346 ms/op
Iteration   5: 0.343 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.344 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.343, 0.344, 0.346), stdev = 0.001
  CI (99.9%): [0.340, 0.348] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 12.66% complete, ETA 20:05:22
# Fork: 1 of 1
# Warmup Iteration   1: 10.783 ms/op
# Warmup Iteration   2: 9.851 ms/op
# Warmup Iteration   3: 9.850 ms/op
# Warmup Iteration   4: 9.807 ms/op
# Warmup Iteration   5: 9.817 ms/op
Iteration   1: 9.810 ms/op
Iteration   2: 9.790 ms/op
Iteration   3: 9.886 ms/op
Iteration   4: 9.834 ms/op
Iteration   5: 9.938 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  9.852 ±(99.9%) 0.233 ms/op [Average]
  (min, avg, max) = (9.790, 9.852, 9.938), stdev = 0.060
  CI (99.9%): [9.619, 10.084] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 12.74% complete, ETA 19:57:53
# Fork: 1 of 1
# Warmup Iteration   1: 10.608 ms/op
# Warmup Iteration   2: 9.887 ms/op
# Warmup Iteration   3: 9.828 ms/op
# Warmup Iteration   4: 9.830 ms/op
# Warmup Iteration   5: 9.849 ms/op
Iteration   1: 9.974 ms/op
Iteration   2: 10.010 ms/op
Iteration   3: 9.931 ms/op
Iteration   4: 9.975 ms/op
Iteration   5: 9.947 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  9.967 ±(99.9%) 0.117 ms/op [Average]
  (min, avg, max) = (9.931, 9.967, 10.010), stdev = 0.030
  CI (99.9%): [9.851, 10.084] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 12.82% complete, ETA 19:50:30
# Fork: 1 of 1
# Warmup Iteration   1: 1688.047 ms/op
# Warmup Iteration   2: 1600.172 ms/op
# Warmup Iteration   3: 1635.606 ms/op
# Warmup Iteration   4: 1615.188 ms/op
# Warmup Iteration   5: 1603.224 ms/op
Iteration   1: 1529.922 ms/op
Iteration   2: 1533.456 ms/op
Iteration   3: 1586.596 ms/op
Iteration   4: 1572.668 ms/op
Iteration   5: 1570.872 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1558.703 ±(99.9%) 97.924 ms/op [Average]
  (min, avg, max) = (1529.922, 1558.703, 1586.596), stdev = 25.431
  CI (99.9%): [1460.778, 1656.627] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 12.90% complete, ETA 19:43:52
# Fork: 1 of 1
# Warmup Iteration   1: 1618.969 ms/op
# Warmup Iteration   2: 1569.616 ms/op
# Warmup Iteration   3: 1479.966 ms/op
# Warmup Iteration   4: 1519.743 ms/op
# Warmup Iteration   5: 1493.073 ms/op
Iteration   1: 1464.952 ms/op
Iteration   2: 1502.920 ms/op
Iteration   3: 1424.484 ms/op
Iteration   4: 1430.667 ms/op
Iteration   5: 1472.198 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1459.044 ±(99.9%) 123.772 ms/op [Average]
  (min, avg, max) = (1424.484, 1459.044, 1502.920), stdev = 32.143
  CI (99.9%): [1335.272, 1582.816] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 12.98% complete, ETA 19:37:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.731 ms/op
# Warmup Iteration   2: 0.670 ms/op
# Warmup Iteration   3: 0.676 ms/op
# Warmup Iteration   4: 0.674 ms/op
# Warmup Iteration   5: 0.671 ms/op
Iteration   1: 0.672 ms/op
Iteration   2: 0.672 ms/op
Iteration   3: 0.673 ms/op
Iteration   4: 0.670 ms/op
Iteration   5: 0.672 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.672 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.670, 0.672, 0.673), stdev = 0.001
  CI (99.9%): [0.666, 0.677] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 13.06% complete, ETA 19:30:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.737 ms/op
# Warmup Iteration   2: 0.686 ms/op
# Warmup Iteration   3: 0.679 ms/op
# Warmup Iteration   4: 0.682 ms/op
# Warmup Iteration   5: 0.679 ms/op
Iteration   1: 0.682 ms/op
Iteration   2: 0.681 ms/op
Iteration   3: 0.680 ms/op
Iteration   4: 0.682 ms/op
Iteration   5: 0.683 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.682 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.680, 0.682, 0.683), stdev = 0.001
  CI (99.9%): [0.678, 0.685] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 13.14% complete, ETA 19:23:01
# Fork: 1 of 1
# Warmup Iteration   1: 21.357 ms/op
# Warmup Iteration   2: 19.643 ms/op
# Warmup Iteration   3: 19.513 ms/op
# Warmup Iteration   4: 19.376 ms/op
# Warmup Iteration   5: 19.564 ms/op
Iteration   1: 19.433 ms/op
Iteration   2: 19.498 ms/op
Iteration   3: 19.486 ms/op
Iteration   4: 19.619 ms/op
Iteration   5: 19.431 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  19.494 ±(99.9%) 0.295 ms/op [Average]
  (min, avg, max) = (19.431, 19.494, 19.619), stdev = 0.077
  CI (99.9%): [19.199, 19.788] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 13.22% complete, ETA 19:16:04
# Fork: 1 of 1
# Warmup Iteration   1: 21.680 ms/op
# Warmup Iteration   2: 19.970 ms/op
# Warmup Iteration   3: 19.697 ms/op
# Warmup Iteration   4: 19.792 ms/op
# Warmup Iteration   5: 20.010 ms/op
Iteration   1: 19.954 ms/op
Iteration   2: 19.810 ms/op
Iteration   3: 20.003 ms/op
Iteration   4: 19.930 ms/op
Iteration   5: 19.922 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  19.924 ±(99.9%) 0.274 ms/op [Average]
  (min, avg, max) = (19.810, 19.924, 20.003), stdev = 0.071
  CI (99.9%): [19.650, 20.198] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 13.30% complete, ETA 19:09:11
# Fork: 1 of 1
# Warmup Iteration   1: 3220.094 ms/op
# Warmup Iteration   2: 3068.495 ms/op
# Warmup Iteration   3: 3178.384 ms/op
# Warmup Iteration   4: 3105.242 ms/op
# Warmup Iteration   5: 3015.884 ms/op
Iteration   1: 3061.716 ms/op
Iteration   2: 3120.884 ms/op
Iteration   3: 3051.837 ms/op
Iteration   4: 3048.001 ms/op
Iteration   5: 3021.126 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  3060.713 ±(99.9%) 141.862 ms/op [Average]
  (min, avg, max) = (3021.126, 3060.713, 3120.884), stdev = 36.841
  CI (99.9%): [2918.850, 3202.575] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 13.38% complete, ETA 19:04:38
# Fork: 1 of 1
# Warmup Iteration   1: 3139.848 ms/op
# Warmup Iteration   2: 3028.812 ms/op
# Warmup Iteration   3: 3031.323 ms/op
# Warmup Iteration   4: 2945.238 ms/op
# Warmup Iteration   5: 2932.533 ms/op
Iteration   1: 2965.242 ms/op
Iteration   2: 2996.639 ms/op
Iteration   3: 2974.290 ms/op
Iteration   4: 3024.225 ms/op
Iteration   5: 3050.210 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  3002.121 ±(99.9%) 135.674 ms/op [Average]
  (min, avg, max) = (2965.242, 3002.121, 3050.210), stdev = 35.234
  CI (99.9%): [2866.447, 3137.796] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 13.46% complete, ETA 19:00:03
# Fork: 1 of 1
# Warmup Iteration   1: 1.479 ms/op
# Warmup Iteration   2: 1.370 ms/op
# Warmup Iteration   3: 1.370 ms/op
# Warmup Iteration   4: 1.361 ms/op
# Warmup Iteration   5: 1.364 ms/op
Iteration   1: 1.369 ms/op
Iteration   2: 1.370 ms/op
Iteration   3: 1.363 ms/op
Iteration   4: 1.366 ms/op
Iteration   5: 1.381 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.370 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (1.363, 1.370, 1.381), stdev = 0.007
  CI (99.9%): [1.343, 1.396] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 13.54% complete, ETA 18:53:22
# Fork: 1 of 1
# Warmup Iteration   1: 1.468 ms/op
# Warmup Iteration   2: 1.343 ms/op
# Warmup Iteration   3: 1.342 ms/op
# Warmup Iteration   4: 1.337 ms/op
# Warmup Iteration   5: 1.337 ms/op
Iteration   1: 1.337 ms/op
Iteration   2: 1.345 ms/op
Iteration   3: 1.336 ms/op
Iteration   4: 1.337 ms/op
Iteration   5: 1.342 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.339 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (1.336, 1.339, 1.345), stdev = 0.004
  CI (99.9%): [1.323, 1.355] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 13.62% complete, ETA 18:46:46
# Fork: 1 of 1
# Warmup Iteration   1: 43.705 ms/op
# Warmup Iteration   2: 40.087 ms/op
# Warmup Iteration   3: 39.504 ms/op
# Warmup Iteration   4: 39.124 ms/op
# Warmup Iteration   5: 39.611 ms/op
Iteration   1: 39.828 ms/op
Iteration   2: 39.767 ms/op
Iteration   3: 39.547 ms/op
Iteration   4: 39.615 ms/op
Iteration   5: 39.649 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  39.681 ±(99.9%) 0.441 ms/op [Average]
  (min, avg, max) = (39.547, 39.681, 39.828), stdev = 0.115
  CI (99.9%): [39.240, 40.123] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 13.70% complete, ETA 18:40:15
# Fork: 1 of 1
# Warmup Iteration   1: 42.846 ms/op
# Warmup Iteration   2: 39.406 ms/op
# Warmup Iteration   3: 42.066 ms/op
# Warmup Iteration   4: 39.540 ms/op
# Warmup Iteration   5: 39.601 ms/op
Iteration   1: 39.100 ms/op
Iteration   2: 39.420 ms/op
Iteration   3: 39.108 ms/op
Iteration   4: 39.306 ms/op
Iteration   5: 39.335 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  39.254 ±(99.9%) 0.550 ms/op [Average]
  (min, avg, max) = (39.100, 39.254, 39.420), stdev = 0.143
  CI (99.9%): [38.704, 39.804] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 13.78% complete, ETA 18:33:49
# Fork: 1 of 1
# Warmup Iteration   1: 6262.907 ms/op
# Warmup Iteration   2: 5982.121 ms/op
# Warmup Iteration   3: 6091.160 ms/op
# Warmup Iteration   4: 5840.630 ms/op
# Warmup Iteration   5: 6027.679 ms/op
Iteration   1: 5991.999 ms/op
Iteration   2: 5913.242 ms/op
Iteration   3: 6013.976 ms/op
Iteration   4: 5928.381 ms/op
Iteration   5: 5956.611 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  5960.842 ±(99.9%) 162.588 ms/op [Average]
  (min, avg, max) = (5913.242, 5960.842, 6013.976), stdev = 42.224
  CI (99.9%): [5798.254, 6123.430] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 13.86% complete, ETA 18:32:37
# Fork: 1 of 1
# Warmup Iteration   1: 6253.208 ms/op
# Warmup Iteration   2: 6100.393 ms/op
# Warmup Iteration   3: 6136.691 ms/op
# Warmup Iteration   4: 6013.519 ms/op
# Warmup Iteration   5: 6051.584 ms/op
Iteration   1: 6039.287 ms/op
Iteration   2: 6097.488 ms/op
Iteration   3: 6030.328 ms/op
Iteration   4: 6113.198 ms/op
Iteration   5: 6045.104 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  6065.081 ±(99.9%) 144.561 ms/op [Average]
  (min, avg, max) = (6030.328, 6065.081, 6113.198), stdev = 37.542
  CI (99.9%): [5920.519, 6209.642] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 13.94% complete, ETA 18:31:31
# Fork: 1 of 1
# Warmup Iteration   1: 2.954 ms/op
# Warmup Iteration   2: 2.736 ms/op
# Warmup Iteration   3: 2.741 ms/op
# Warmup Iteration   4: 2.740 ms/op
# Warmup Iteration   5: 2.730 ms/op
Iteration   1: 2.747 ms/op
Iteration   2: 2.734 ms/op
Iteration   3: 2.746 ms/op
Iteration   4: 2.732 ms/op
Iteration   5: 2.738 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.739 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (2.732, 2.739, 2.747), stdev = 0.007
  CI (99.9%): [2.712, 2.767] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 14.02% complete, ETA 18:25:12
# Fork: 1 of 1
# Warmup Iteration   1: 2.910 ms/op
# Warmup Iteration   2: 2.689 ms/op
# Warmup Iteration   3: 2.697 ms/op
# Warmup Iteration   4: 2.686 ms/op
# Warmup Iteration   5: 2.694 ms/op
Iteration   1: 2.687 ms/op
Iteration   2: 2.681 ms/op
Iteration   3: 2.704 ms/op
Iteration   4: 2.681 ms/op
Iteration   5: 2.697 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.690 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (2.681, 2.690, 2.704), stdev = 0.010
  CI (99.9%): [2.651, 2.729] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 14.10% complete, ETA 18:18:58
# Fork: 1 of 1
# Warmup Iteration   1: 86.289 ms/op
# Warmup Iteration   2: 79.088 ms/op
# Warmup Iteration   3: 78.682 ms/op
# Warmup Iteration   4: 78.343 ms/op
# Warmup Iteration   5: 78.418 ms/op
Iteration   1: 78.071 ms/op
Iteration   2: 78.334 ms/op
Iteration   3: 78.418 ms/op
Iteration   4: 78.783 ms/op
Iteration   5: 78.530 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  78.427 ±(99.9%) 1.007 ms/op [Average]
  (min, avg, max) = (78.071, 78.427, 78.783), stdev = 0.261
  CI (99.9%): [77.421, 79.434] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 14.18% complete, ETA 18:12:48
# Fork: 1 of 1
# Warmup Iteration   1: 85.399 ms/op
# Warmup Iteration   2: 79.114 ms/op
# Warmup Iteration   3: 78.730 ms/op
# Warmup Iteration   4: 78.450 ms/op
# Warmup Iteration   5: 78.550 ms/op
Iteration   1: 78.630 ms/op
Iteration   2: 78.654 ms/op
Iteration   3: 78.135 ms/op
Iteration   4: 78.257 ms/op
Iteration   5: 78.357 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  78.406 ±(99.9%) 0.882 ms/op [Average]
  (min, avg, max) = (78.135, 78.406, 78.654), stdev = 0.229
  CI (99.9%): [77.524, 79.289] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 14.26% complete, ETA 18:06:42
# Fork: 1 of 1
# Warmup Iteration   1: 12151.341 ms/op
# Warmup Iteration   2: 12313.502 ms/op
# Warmup Iteration   3: 12362.430 ms/op
# Warmup Iteration   4: 12421.154 ms/op
# Warmup Iteration   5: 12409.209 ms/op
Iteration   1: 12436.058 ms/op
Iteration   2: 12444.175 ms/op
Iteration   3: 12426.160 ms/op
Iteration   4: 12463.623 ms/op
Iteration   5: 12397.359 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  12433.475 ±(99.9%) 94.084 ms/op [Average]
  (min, avg, max) = (12397.359, 12433.475, 12463.623), stdev = 24.433
  CI (99.9%): [12339.391, 12527.558] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 14.34% complete, ETA 18:12:01
# Fork: 1 of 1
# Warmup Iteration   1: 12052.357 ms/op
# Warmup Iteration   2: 11535.168 ms/op
# Warmup Iteration   3: 11481.861 ms/op
# Warmup Iteration   4: 11494.430 ms/op
# Warmup Iteration   5: 11550.068 ms/op
Iteration   1: 11523.098 ms/op
Iteration   2: 11457.211 ms/op
Iteration   3: 11640.791 ms/op
Iteration   4: 11597.221 ms/op
Iteration   5: 11562.235 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  11556.111 ±(99.9%) 270.707 ms/op [Average]
  (min, avg, max) = (11457.211, 11556.111, 11640.791), stdev = 70.302
  CI (99.9%): [11285.404, 11826.818] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 14.42% complete, ETA 18:16:27
# Fork: 1 of 1
# Warmup Iteration   1: 5.724 ms/op
# Warmup Iteration   2: 5.412 ms/op
# Warmup Iteration   3: 5.325 ms/op
# Warmup Iteration   4: 5.310 ms/op
# Warmup Iteration   5: 5.284 ms/op
Iteration   1: 5.304 ms/op
Iteration   2: 5.510 ms/op
Iteration   3: 5.504 ms/op
Iteration   4: 5.317 ms/op
Iteration   5: 5.267 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  5.380 ±(99.9%) 0.451 ms/op [Average]
  (min, avg, max) = (5.267, 5.380, 5.510), stdev = 0.117
  CI (99.9%): [4.930, 5.831] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 14.50% complete, ETA 18:10:24
# Fork: 1 of 1
# Warmup Iteration   1: 5.950 ms/op
# Warmup Iteration   2: 5.463 ms/op
# Warmup Iteration   3: 5.451 ms/op
# Warmup Iteration   4: 5.469 ms/op
# Warmup Iteration   5: 5.478 ms/op
Iteration   1: 5.445 ms/op
Iteration   2: 5.468 ms/op
Iteration   3: 5.470 ms/op
Iteration   4: 5.469 ms/op
Iteration   5: 5.482 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  5.467 ±(99.9%) 0.051 ms/op [Average]
  (min, avg, max) = (5.445, 5.467, 5.482), stdev = 0.013
  CI (99.9%): [5.415, 5.518] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 14.58% complete, ETA 18:04:25
# Fork: 1 of 1
# Warmup Iteration   1: 171.533 ms/op
# Warmup Iteration   2: 159.517 ms/op
# Warmup Iteration   3: 158.052 ms/op
# Warmup Iteration   4: 157.108 ms/op
# Warmup Iteration   5: 157.676 ms/op
Iteration   1: 157.151 ms/op
Iteration   2: 156.854 ms/op
Iteration   3: 157.196 ms/op
Iteration   4: 157.231 ms/op
Iteration   5: 157.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  157.087 ±(99.9%) 0.603 ms/op [Average]
  (min, avg, max) = (156.854, 157.087, 157.231), stdev = 0.157
  CI (99.9%): [156.484, 157.690] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 14.66% complete, ETA 17:58:34
# Fork: 1 of 1
# Warmup Iteration   1: 171.385 ms/op
# Warmup Iteration   2: 163.868 ms/op
# Warmup Iteration   3: 164.429 ms/op
# Warmup Iteration   4: 156.152 ms/op
# Warmup Iteration   5: 155.715 ms/op
Iteration   1: 156.270 ms/op
Iteration   2: 156.503 ms/op
Iteration   3: 155.674 ms/op
Iteration   4: 156.283 ms/op
Iteration   5: 155.945 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  156.135 ±(99.9%) 1.254 ms/op [Average]
  (min, avg, max) = (155.674, 156.135, 156.503), stdev = 0.326
  CI (99.9%): [154.881, 157.389] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 14.74% complete, ETA 17:52:48
# Fork: 1 of 1
# Warmup Iteration   1: 24920.098 ms/op
# Warmup Iteration   2: 23899.967 ms/op
# Warmup Iteration   3: 23882.510 ms/op
# Warmup Iteration   4: 24069.732 ms/op
# Warmup Iteration   5: 23978.566 ms/op
Iteration   1: 24077.329 ms/op
Iteration   2: 23919.624 ms/op
Iteration   3: 23937.665 ms/op
Iteration   4: 23879.411 ms/op
Iteration   5: 23948.114 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  23952.428 ±(99.9%) 287.153 ms/op [Average]
  (min, avg, max) = (23879.411, 23952.428, 24077.329), stdev = 74.573
  CI (99.9%): [23665.276, 24239.581] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 14.82% complete, ETA 18:09:05
# Fork: 1 of 1
# Warmup Iteration   1: 24489.309 ms/op
# Warmup Iteration   2: 24057.690 ms/op
# Warmup Iteration   3: 24029.501 ms/op
# Warmup Iteration   4: 24386.920 ms/op
# Warmup Iteration   5: 23942.692 ms/op
Iteration   1: 24049.274 ms/op
Iteration   2: 24227.343 ms/op
Iteration   3: 24201.291 ms/op
Iteration   4: 24192.067 ms/op
Iteration   5: 24140.770 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  24162.149 ±(99.9%) 271.431 ms/op [Average]
  (min, avg, max) = (24049.274, 24162.149, 24227.343), stdev = 70.490
  CI (99.9%): [23890.718, 24433.580] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 14.90% complete, ETA 18:25:16
# Fork: 1 of 1
# Warmup Iteration   1: 11.593 ms/op
# Warmup Iteration   2: 10.702 ms/op
# Warmup Iteration   3: 10.675 ms/op
# Warmup Iteration   4: 10.840 ms/op
# Warmup Iteration   5: 10.732 ms/op
Iteration   1: 10.794 ms/op
Iteration   2: 10.688 ms/op
Iteration   3: 10.762 ms/op
Iteration   4: 10.759 ms/op
Iteration   5: 10.751 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  10.751 ±(99.9%) 0.149 ms/op [Average]
  (min, avg, max) = (10.688, 10.751, 10.794), stdev = 0.039
  CI (99.9%): [10.602, 10.900] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 14.98% complete, ETA 18:19:19
# Fork: 1 of 1
# Warmup Iteration   1: 11.641 ms/op
# Warmup Iteration   2: 10.877 ms/op
# Warmup Iteration   3: 10.807 ms/op
# Warmup Iteration   4: 10.782 ms/op
# Warmup Iteration   5: 10.876 ms/op
Iteration   1: 10.822 ms/op
Iteration   2: 10.848 ms/op
Iteration   3: 10.750 ms/op
Iteration   4: 10.814 ms/op
Iteration   5: 10.805 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  10.808 ±(99.9%) 0.138 ms/op [Average]
  (min, avg, max) = (10.750, 10.808, 10.848), stdev = 0.036
  CI (99.9%): [10.670, 10.946] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 15.06% complete, ETA 18:13:25
# Fork: 1 of 1
# Warmup Iteration   1: 343.329 ms/op
# Warmup Iteration   2: 316.304 ms/op
# Warmup Iteration   3: 314.085 ms/op
# Warmup Iteration   4: 314.874 ms/op
# Warmup Iteration   5: 313.233 ms/op
Iteration   1: 313.774 ms/op
Iteration   2: 313.247 ms/op
Iteration   3: 317.044 ms/op
Iteration   4: 313.575 ms/op
Iteration   5: 316.947 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  314.917 ±(99.9%) 7.342 ms/op [Average]
  (min, avg, max) = (313.247, 314.917, 317.044), stdev = 1.907
  CI (99.9%): [307.575, 322.260] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 15.14% complete, ETA 18:07:47
# Fork: 1 of 1
# Warmup Iteration   1: 345.214 ms/op
# Warmup Iteration   2: 319.729 ms/op
# Warmup Iteration   3: 318.641 ms/op
# Warmup Iteration   4: 317.699 ms/op
# Warmup Iteration   5: 315.760 ms/op
Iteration   1: 317.384 ms/op
Iteration   2: 315.735 ms/op
Iteration   3: 314.600 ms/op
Iteration   4: 313.650 ms/op
Iteration   5: 314.914 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  315.257 ±(99.9%) 5.406 ms/op [Average]
  (min, avg, max) = (313.650, 315.257, 317.384), stdev = 1.404
  CI (99.9%): [309.851, 320.663] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 15.22% complete, ETA 18:02:14
# Fork: 1 of 1
# Warmup Iteration   1: 47567.116 ms/op
# Warmup Iteration   2: 47070.268 ms/op
# Warmup Iteration   3: 46672.331 ms/op
# Warmup Iteration   4: 46674.592 ms/op
# Warmup Iteration   5: 46653.423 ms/op
Iteration   1: 46655.730 ms/op
Iteration   2: 46879.332 ms/op
Iteration   3: 46559.004 ms/op
Iteration   4: 46621.408 ms/op
Iteration   5: 46744.109 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  46691.917 ±(99.9%) 478.608 ms/op [Average]
  (min, avg, max) = (46559.004, 46691.917, 46879.332), stdev = 124.293
  CI (99.9%): [46213.308, 47170.525] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 15.30% complete, ETA 18:38:46
# Fork: 1 of 1
# Warmup Iteration   1: 47564.567 ms/op
# Warmup Iteration   2: 47245.487 ms/op
# Warmup Iteration   3: 47155.156 ms/op
# Warmup Iteration   4: 47070.274 ms/op
# Warmup Iteration   5: 47320.812 ms/op
Iteration   1: 47251.903 ms/op
Iteration   2: 47174.878 ms/op
Iteration   3: 47394.503 ms/op
Iteration   4: 47362.499 ms/op
Iteration   5: 47374.618 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  47311.680 ±(99.9%) 363.735 ms/op [Average]
  (min, avg, max) = (47174.878, 47311.680, 47394.503), stdev = 94.461
  CI (99.9%): [46947.945, 47675.416] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 15.38% complete, ETA 19:15:18
# Fork: 1 of 1
# Warmup Iteration   1: 23.129 ms/op
# Warmup Iteration   2: 21.471 ms/op
# Warmup Iteration   3: 21.362 ms/op
# Warmup Iteration   4: 21.251 ms/op
# Warmup Iteration   5: 21.379 ms/op
Iteration   1: 21.239 ms/op
Iteration   2: 21.271 ms/op
Iteration   3: 21.286 ms/op
Iteration   4: 21.233 ms/op
Iteration   5: 21.347 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  21.275 ±(99.9%) 0.176 ms/op [Average]
  (min, avg, max) = (21.233, 21.275, 21.347), stdev = 0.046
  CI (99.9%): [21.099, 21.452] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 15.46% complete, ETA 19:09:11
# Fork: 1 of 1
# Warmup Iteration   1: 23.425 ms/op
# Warmup Iteration   2: 21.583 ms/op
# Warmup Iteration   3: 21.492 ms/op
# Warmup Iteration   4: 21.524 ms/op
# Warmup Iteration   5: 21.608 ms/op
Iteration   1: 21.433 ms/op
Iteration   2: 21.520 ms/op
Iteration   3: 21.549 ms/op
Iteration   4: 21.510 ms/op
Iteration   5: 21.516 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  21.506 ±(99.9%) 0.166 ms/op [Average]
  (min, avg, max) = (21.433, 21.506, 21.549), stdev = 0.043
  CI (99.9%): [21.340, 21.672] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 15.54% complete, ETA 19:03:08
# Fork: 1 of 1
# Warmup Iteration   1: 669.811 ms/op
# Warmup Iteration   2: 624.432 ms/op
# Warmup Iteration   3: 619.861 ms/op
# Warmup Iteration   4: 623.312 ms/op
# Warmup Iteration   5: 625.612 ms/op
Iteration   1: 617.971 ms/op
Iteration   2: 620.375 ms/op
Iteration   3: 624.632 ms/op
Iteration   4: 622.906 ms/op
Iteration   5: 623.679 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  621.912 ±(99.9%) 10.440 ms/op [Average]
  (min, avg, max) = (617.971, 621.912, 624.632), stdev = 2.711
  CI (99.9%): [611.472, 632.353] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 15.63% complete, ETA 18:57:22
# Fork: 1 of 1
# Warmup Iteration   1: 678.187 ms/op
# Warmup Iteration   2: 635.538 ms/op
# Warmup Iteration   3: 626.590 ms/op
# Warmup Iteration   4: 632.053 ms/op
# Warmup Iteration   5: 625.132 ms/op
Iteration   1: 626.998 ms/op
Iteration   2: 623.914 ms/op
Iteration   3: 627.116 ms/op
Iteration   4: 629.293 ms/op
Iteration   5: 625.473 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  626.559 ±(99.9%) 7.737 ms/op [Average]
  (min, avg, max) = (623.914, 626.559, 629.293), stdev = 2.009
  CI (99.9%): [618.822, 634.296] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 15.71% complete, ETA 18:51:39
# Fork: 1 of 1
# Warmup Iteration   1: 100950.441 ms/op
# Warmup Iteration   2: 95322.306 ms/op
# Warmup Iteration   3: 95439.423 ms/op
# Warmup Iteration   4: 94823.493 ms/op
# Warmup Iteration   5: 94032.877 ms/op
Iteration   1: 94178.992 ms/op
Iteration   2: 94582.981 ms/op
Iteration   3: 95017.650 ms/op
Iteration   4: 95183.267 ms/op
Iteration   5: 95065.748 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  94805.728 ±(99.9%) 1607.927 ms/op [Average]
  (min, avg, max) = (94178.992, 94805.728, 95183.267), stdev = 417.574
  CI (99.9%): [93197.800, 96413.655] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 15.79% complete, ETA 20:09:46
# Fork: 1 of 1
# Warmup Iteration   1: 95004.860 ms/op
# Warmup Iteration   2: 94349.762 ms/op
# Warmup Iteration   3: 94648.377 ms/op
# Warmup Iteration   4: 94247.514 ms/op
# Warmup Iteration   5: 95234.530 ms/op
Iteration   1: 94978.384 ms/op
Iteration   2: 95020.637 ms/op
Iteration   3: 94835.170 ms/op
Iteration   4: 94337.310 ms/op
Iteration   5: 94441.891 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  94722.679 ±(99.9%) 1208.774 ms/op [Average]
  (min, avg, max) = (94337.310, 94722.679, 95020.637), stdev = 313.915
  CI (99.9%): [93513.904, 95931.453] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 15.87% complete, ETA 21:26:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.019 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.019, 0.019, 0.019), stdev = 0.001
  CI (99.9%): [0.019, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 15.95% complete, ETA 21:19:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.019 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.019, 0.019, 0.019), stdev = 0.001
  CI (99.9%): [0.019, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 16.03% complete, ETA 21:12:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.694 ms/op
# Warmup Iteration   2: 0.633 ms/op
# Warmup Iteration   3: 0.635 ms/op
# Warmup Iteration   4: 0.635 ms/op
# Warmup Iteration   5: 0.632 ms/op
Iteration   1: 0.631 ms/op
Iteration   2: 0.638 ms/op
Iteration   3: 0.632 ms/op
Iteration   4: 0.635 ms/op
Iteration   5: 0.630 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.633 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.630, 0.633, 0.638), stdev = 0.003
  CI (99.9%): [0.620, 0.646] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 16.11% complete, ETA 21:06:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.692 ms/op
# Warmup Iteration   2: 0.637 ms/op
# Warmup Iteration   3: 0.638 ms/op
# Warmup Iteration   4: 0.634 ms/op
# Warmup Iteration   5: 0.635 ms/op
Iteration   1: 0.634 ms/op
Iteration   2: 0.631 ms/op
Iteration   3: 0.634 ms/op
Iteration   4: 0.633 ms/op
Iteration   5: 0.636 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.634 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.631, 0.634, 0.636), stdev = 0.002
  CI (99.9%): [0.626, 0.641] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 16.19% complete, ETA 20:59:36
# Fork: 1 of 1
# Warmup Iteration   1: 115.720 ms/op
# Warmup Iteration   2: 113.181 ms/op
# Warmup Iteration   3: 107.103 ms/op
# Warmup Iteration   4: 101.713 ms/op
# Warmup Iteration   5: 101.930 ms/op
Iteration   1: 95.858 ms/op
Iteration   2: 97.474 ms/op
Iteration   3: 101.500 ms/op
Iteration   4: 96.624 ms/op
Iteration   5: 97.136 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  97.718 ±(99.9%) 8.472 ms/op [Average]
  (min, avg, max) = (95.858, 97.718, 101.500), stdev = 2.200
  CI (99.9%): [89.247, 106.190] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 16.27% complete, ETA 20:53:12
# Fork: 1 of 1
# Warmup Iteration   1: 113.170 ms/op
# Warmup Iteration   2: 100.461 ms/op
# Warmup Iteration   3: 105.574 ms/op
# Warmup Iteration   4: 95.802 ms/op
# Warmup Iteration   5: 101.416 ms/op
Iteration   1: 93.418 ms/op
Iteration   2: 97.299 ms/op
Iteration   3: 91.924 ms/op
Iteration   4: 94.792 ms/op
Iteration   5: 94.367 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  94.360 ±(99.9%) 7.616 ms/op [Average]
  (min, avg, max) = (91.924, 94.360, 97.299), stdev = 1.978
  CI (99.9%): [86.745, 101.976] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 16.35% complete, ETA 20:46:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.043 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.043 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.043 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.042, 0.043, 0.043), stdev = 0.001
  CI (99.9%): [0.042, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 16.43% complete, ETA 20:40:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.042 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.042 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.043 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.042, 0.043, 0.043), stdev = 0.001
  CI (99.9%): [0.042, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 16.51% complete, ETA 20:34:08
# Fork: 1 of 1
# Warmup Iteration   1: 1.406 ms/op
# Warmup Iteration   2: 1.298 ms/op
# Warmup Iteration   3: 1.280 ms/op
# Warmup Iteration   4: 1.284 ms/op
# Warmup Iteration   5: 1.280 ms/op
Iteration   1: 1.283 ms/op
Iteration   2: 1.282 ms/op
Iteration   3: 1.281 ms/op
Iteration   4: 1.286 ms/op
Iteration   5: 1.314 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.289 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (1.281, 1.289, 1.314), stdev = 0.014
  CI (99.9%): [1.235, 1.344] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 16.59% complete, ETA 20:27:52
# Fork: 1 of 1
# Warmup Iteration   1: 1.403 ms/op
# Warmup Iteration   2: 1.267 ms/op
# Warmup Iteration   3: 1.271 ms/op
# Warmup Iteration   4: 1.272 ms/op
# Warmup Iteration   5: 1.262 ms/op
Iteration   1: 1.272 ms/op
Iteration   2: 1.284 ms/op
Iteration   3: 1.277 ms/op
Iteration   4: 1.283 ms/op
Iteration   5: 1.283 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.280 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (1.272, 1.280, 1.284), stdev = 0.005
  CI (99.9%): [1.260, 1.300] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 16.67% complete, ETA 20:21:40
# Fork: 1 of 1
# Warmup Iteration   1: 239.465 ms/op
# Warmup Iteration   2: 213.184 ms/op
# Warmup Iteration   3: 196.432 ms/op
# Warmup Iteration   4: 207.891 ms/op
# Warmup Iteration   5: 214.307 ms/op
Iteration   1: 196.449 ms/op
Iteration   2: 188.425 ms/op
Iteration   3: 188.359 ms/op
Iteration   4: 191.781 ms/op
Iteration   5: 193.759 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  191.755 ±(99.9%) 13.433 ms/op [Average]
  (min, avg, max) = (188.359, 191.755, 196.449), stdev = 3.489
  CI (99.9%): [178.322, 205.188] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 16.75% complete, ETA 20:15:42
# Fork: 1 of 1
# Warmup Iteration   1: 234.044 ms/op
# Warmup Iteration   2: 215.756 ms/op
# Warmup Iteration   3: 195.073 ms/op
# Warmup Iteration   4: 193.398 ms/op
# Warmup Iteration   5: 193.905 ms/op
Iteration   1: 194.365 ms/op
Iteration   2: 183.852 ms/op
Iteration   3: 186.528 ms/op
Iteration   4: 192.831 ms/op
Iteration   5: 194.032 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  190.322 ±(99.9%) 18.533 ms/op [Average]
  (min, avg, max) = (183.852, 190.322, 194.365), stdev = 4.813
  CI (99.9%): [171.789, 208.855] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 16.83% complete, ETA 20:09:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.090 ms/op
# Warmup Iteration   2: 0.083 ms/op
# Warmup Iteration   3: 0.083 ms/op
# Warmup Iteration   4: 0.083 ms/op
# Warmup Iteration   5: 0.084 ms/op
Iteration   1: 0.083 ms/op
Iteration   2: 0.084 ms/op
Iteration   3: 0.084 ms/op
Iteration   4: 0.083 ms/op
Iteration   5: 0.084 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.084 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.083, 0.084, 0.084), stdev = 0.001
  CI (99.9%): [0.082, 0.085] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 16.91% complete, ETA 20:03:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.090 ms/op
# Warmup Iteration   2: 0.084 ms/op
# Warmup Iteration   3: 0.085 ms/op
# Warmup Iteration   4: 0.085 ms/op
# Warmup Iteration   5: 0.085 ms/op
Iteration   1: 0.085 ms/op
Iteration   2: 0.084 ms/op
Iteration   3: 0.084 ms/op
Iteration   4: 0.084 ms/op
Iteration   5: 0.084 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.084 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.084, 0.084, 0.085), stdev = 0.001
  CI (99.9%): [0.083, 0.085] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 16.99% complete, ETA 19:57:45
# Fork: 1 of 1
# Warmup Iteration   1: 2.826 ms/op
# Warmup Iteration   2: 2.540 ms/op
# Warmup Iteration   3: 2.538 ms/op
# Warmup Iteration   4: 2.536 ms/op
# Warmup Iteration   5: 2.533 ms/op
Iteration   1: 2.531 ms/op
Iteration   2: 2.556 ms/op
Iteration   3: 2.532 ms/op
Iteration   4: 2.534 ms/op
Iteration   5: 2.522 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.535 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (2.522, 2.535, 2.556), stdev = 0.013
  CI (99.9%): [2.487, 2.583] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 17.07% complete, ETA 19:51:49
# Fork: 1 of 1
# Warmup Iteration   1: 2.793 ms/op
# Warmup Iteration   2: 2.532 ms/op
# Warmup Iteration   3: 2.538 ms/op
# Warmup Iteration   4: 2.530 ms/op
# Warmup Iteration   5: 2.539 ms/op
Iteration   1: 2.540 ms/op
Iteration   2: 2.543 ms/op
Iteration   3: 2.520 ms/op
Iteration   4: 2.544 ms/op
Iteration   5: 2.538 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.537 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (2.520, 2.537, 2.544), stdev = 0.010
  CI (99.9%): [2.500, 2.574] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 17.15% complete, ETA 19:45:57
# Fork: 1 of 1
# Warmup Iteration   1: 454.031 ms/op
# Warmup Iteration   2: 432.631 ms/op
# Warmup Iteration   3: 436.772 ms/op
# Warmup Iteration   4: 413.939 ms/op
# Warmup Iteration   5: 387.047 ms/op
Iteration   1: 410.179 ms/op
Iteration   2: 393.919 ms/op
Iteration   3: 386.819 ms/op
Iteration   4: 382.047 ms/op
Iteration   5: 400.478 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  394.688 ±(99.9%) 42.870 ms/op [Average]
  (min, avg, max) = (382.047, 394.688, 410.179), stdev = 11.133
  CI (99.9%): [351.818, 437.559] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 17.23% complete, ETA 19:40:22
# Fork: 1 of 1
# Warmup Iteration   1: 435.311 ms/op
# Warmup Iteration   2: 410.320 ms/op
# Warmup Iteration   3: 383.344 ms/op
# Warmup Iteration   4: 395.957 ms/op
# Warmup Iteration   5: 387.450 ms/op
Iteration   1: 386.204 ms/op
Iteration   2: 397.519 ms/op
Iteration   3: 352.572 ms/op
Iteration   4: 384.796 ms/op
Iteration   5: 386.031 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  381.424 ±(99.9%) 65.203 ms/op [Average]
  (min, avg, max) = (352.572, 381.424, 397.519), stdev = 16.933
  CI (99.9%): [316.221, 446.628] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 17.31% complete, ETA 19:34:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.183 ms/op
# Warmup Iteration   2: 0.172 ms/op
# Warmup Iteration   3: 0.171 ms/op
# Warmup Iteration   4: 0.169 ms/op
# Warmup Iteration   5: 0.171 ms/op
Iteration   1: 0.170 ms/op
Iteration   2: 0.170 ms/op
Iteration   3: 0.170 ms/op
Iteration   4: 0.169 ms/op
Iteration   5: 0.170 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.170 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.169, 0.170, 0.170), stdev = 0.001
  CI (99.9%): [0.169, 0.171] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 17.39% complete, ETA 19:29:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.180 ms/op
# Warmup Iteration   2: 0.170 ms/op
# Warmup Iteration   3: 0.169 ms/op
# Warmup Iteration   4: 0.169 ms/op
# Warmup Iteration   5: 0.169 ms/op
Iteration   1: 0.169 ms/op
Iteration   2: 0.167 ms/op
Iteration   3: 0.168 ms/op
Iteration   4: 0.169 ms/op
Iteration   5: 0.170 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.169 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.167, 0.169, 0.170), stdev = 0.001
  CI (99.9%): [0.165, 0.172] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 17.47% complete, ETA 19:23:24
# Fork: 1 of 1
# Warmup Iteration   1: 5.617 ms/op
# Warmup Iteration   2: 5.096 ms/op
# Warmup Iteration   3: 5.112 ms/op
# Warmup Iteration   4: 5.085 ms/op
# Warmup Iteration   5: 5.065 ms/op
Iteration   1: 5.104 ms/op
Iteration   2: 5.072 ms/op
Iteration   3: 5.081 ms/op
Iteration   4: 5.066 ms/op
Iteration   5: 5.060 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  5.077 ±(99.9%) 0.066 ms/op [Average]
  (min, avg, max) = (5.060, 5.077, 5.104), stdev = 0.017
  CI (99.9%): [5.011, 5.143] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 17.55% complete, ETA 19:17:47
# Fork: 1 of 1
# Warmup Iteration   1: 5.571 ms/op
# Warmup Iteration   2: 5.101 ms/op
# Warmup Iteration   3: 5.042 ms/op
# Warmup Iteration   4: 5.051 ms/op
# Warmup Iteration   5: 5.058 ms/op
Iteration   1: 5.050 ms/op
Iteration   2: 5.016 ms/op
Iteration   3: 5.044 ms/op
Iteration   4: 5.045 ms/op
Iteration   5: 5.069 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  5.045 ±(99.9%) 0.074 ms/op [Average]
  (min, avg, max) = (5.016, 5.045, 5.069), stdev = 0.019
  CI (99.9%): [4.971, 5.118] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 17.63% complete, ETA 19:12:13
# Fork: 1 of 1
# Warmup Iteration   1: 859.740 ms/op
# Warmup Iteration   2: 837.252 ms/op
# Warmup Iteration   3: 745.362 ms/op
# Warmup Iteration   4: 763.919 ms/op
# Warmup Iteration   5: 795.605 ms/op
Iteration   1: 735.953 ms/op
Iteration   2: 724.969 ms/op
Iteration   3: 735.182 ms/op
Iteration   4: 729.756 ms/op
Iteration   5: 740.890 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  733.350 ±(99.9%) 23.591 ms/op [Average]
  (min, avg, max) = (724.969, 733.350, 740.890), stdev = 6.126
  CI (99.9%): [709.759, 756.941] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 17.71% complete, ETA 19:07:09
# Fork: 1 of 1
# Warmup Iteration   1: 856.794 ms/op
# Warmup Iteration   2: 821.864 ms/op
# Warmup Iteration   3: 804.048 ms/op
# Warmup Iteration   4: 775.444 ms/op
# Warmup Iteration   5: 764.619 ms/op
Iteration   1: 803.681 ms/op
Iteration   2: 744.816 ms/op
Iteration   3: 775.483 ms/op
Iteration   4: 777.284 ms/op
Iteration   5: 774.017 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  775.056 ±(99.9%) 80.313 ms/op [Average]
  (min, avg, max) = (744.816, 775.056, 803.681), stdev = 20.857
  CI (99.9%): [694.743, 855.369] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 17.79% complete, ETA 19:02:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.364 ms/op
# Warmup Iteration   2: 0.340 ms/op
# Warmup Iteration   3: 0.340 ms/op
# Warmup Iteration   4: 0.342 ms/op
# Warmup Iteration   5: 0.341 ms/op
Iteration   1: 0.340 ms/op
Iteration   2: 0.337 ms/op
Iteration   3: 0.338 ms/op
Iteration   4: 0.337 ms/op
Iteration   5: 0.338 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.338 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.337, 0.338, 0.340), stdev = 0.001
  CI (99.9%): [0.333, 0.343] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 17.87% complete, ETA 18:56:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.366 ms/op
# Warmup Iteration   2: 0.335 ms/op
# Warmup Iteration   3: 0.338 ms/op
# Warmup Iteration   4: 0.339 ms/op
# Warmup Iteration   5: 0.337 ms/op
Iteration   1: 0.336 ms/op
Iteration   2: 0.338 ms/op
Iteration   3: 0.335 ms/op
Iteration   4: 0.340 ms/op
Iteration   5: 0.337 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.337 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.335, 0.337, 0.340), stdev = 0.002
  CI (99.9%): [0.330, 0.345] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 17.95% complete, ETA 18:51:22
# Fork: 1 of 1
# Warmup Iteration   1: 11.081 ms/op
# Warmup Iteration   2: 10.135 ms/op
# Warmup Iteration   3: 10.148 ms/op
# Warmup Iteration   4: 10.100 ms/op
# Warmup Iteration   5: 10.120 ms/op
Iteration   1: 10.080 ms/op
Iteration   2: 10.078 ms/op
Iteration   3: 10.137 ms/op
Iteration   4: 10.074 ms/op
Iteration   5: 10.105 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  10.095 ±(99.9%) 0.102 ms/op [Average]
  (min, avg, max) = (10.074, 10.095, 10.137), stdev = 0.026
  CI (99.9%): [9.993, 10.196] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 18.03% complete, ETA 18:46:02
# Fork: 1 of 1
# Warmup Iteration   1: 11.355 ms/op
# Warmup Iteration   2: 10.261 ms/op
# Warmup Iteration   3: 10.190 ms/op
# Warmup Iteration   4: 10.189 ms/op
# Warmup Iteration   5: 10.197 ms/op
Iteration   1: 10.263 ms/op
Iteration   2: 10.158 ms/op
Iteration   3: 10.234 ms/op
Iteration   4: 10.217 ms/op
Iteration   5: 10.229 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  10.220 ±(99.9%) 0.150 ms/op [Average]
  (min, avg, max) = (10.158, 10.220, 10.263), stdev = 0.039
  CI (99.9%): [10.071, 10.370] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 18.11% complete, ETA 18:40:44
# Fork: 1 of 1
# Warmup Iteration   1: 1750.006 ms/op
# Warmup Iteration   2: 1590.033 ms/op
# Warmup Iteration   3: 1647.146 ms/op
# Warmup Iteration   4: 1553.131 ms/op
# Warmup Iteration   5: 1609.197 ms/op
Iteration   1: 1611.259 ms/op
Iteration   2: 1510.234 ms/op
Iteration   3: 1693.759 ms/op
Iteration   4: 1480.741 ms/op
Iteration   5: 1870.682 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1633.335 ±(99.9%) 605.515 ms/op [Average]
  (min, avg, max) = (1480.741, 1633.335, 1870.682), stdev = 157.250
  CI (99.9%): [1027.820, 2238.850] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 18.19% complete, ETA 18:36:02
# Fork: 1 of 1
# Warmup Iteration   1: 1786.780 ms/op
# Warmup Iteration   2: 1646.096 ms/op
# Warmup Iteration   3: 1495.134 ms/op
# Warmup Iteration   4: 1539.454 ms/op
# Warmup Iteration   5: 1621.657 ms/op
Iteration   1: 1531.539 ms/op
Iteration   2: 1487.525 ms/op
Iteration   3: 1517.566 ms/op
Iteration   4: 1490.861 ms/op
Iteration   5: 1507.647 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1507.027 ±(99.9%) 70.846 ms/op [Average]
  (min, avg, max) = (1487.525, 1507.027, 1531.539), stdev = 18.398
  CI (99.9%): [1436.182, 1577.873] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 18.27% complete, ETA 18:31:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.728 ms/op
# Warmup Iteration   2: 0.681 ms/op
# Warmup Iteration   3: 0.681 ms/op
# Warmup Iteration   4: 0.675 ms/op
# Warmup Iteration   5: 0.679 ms/op
Iteration   1: 0.681 ms/op
Iteration   2: 0.678 ms/op
Iteration   3: 0.681 ms/op
Iteration   4: 0.677 ms/op
Iteration   5: 0.677 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.679 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.677, 0.679, 0.681), stdev = 0.002
  CI (99.9%): [0.672, 0.686] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 18.35% complete, ETA 18:26:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.729 ms/op
# Warmup Iteration   2: 0.678 ms/op
# Warmup Iteration   3: 0.679 ms/op
# Warmup Iteration   4: 0.674 ms/op
# Warmup Iteration   5: 0.673 ms/op
Iteration   1: 0.675 ms/op
Iteration   2: 0.676 ms/op
Iteration   3: 0.672 ms/op
Iteration   4: 0.677 ms/op
Iteration   5: 0.672 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.675 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.672, 0.675, 0.677), stdev = 0.002
  CI (99.9%): [0.666, 0.683] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 18.43% complete, ETA 18:21:01
# Fork: 1 of 1
# Warmup Iteration   1: 22.312 ms/op
# Warmup Iteration   2: 20.469 ms/op
# Warmup Iteration   3: 20.480 ms/op
# Warmup Iteration   4: 20.295 ms/op
# Warmup Iteration   5: 20.269 ms/op
Iteration   1: 20.202 ms/op
Iteration   2: 20.350 ms/op
Iteration   3: 20.310 ms/op
Iteration   4: 20.279 ms/op
Iteration   5: 20.226 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  20.273 ±(99.9%) 0.232 ms/op [Average]
  (min, avg, max) = (20.202, 20.273, 20.350), stdev = 0.060
  CI (99.9%): [20.041, 20.505] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 18.51% complete, ETA 18:15:57
# Fork: 1 of 1
# Warmup Iteration   1: 22.153 ms/op
# Warmup Iteration   2: 20.501 ms/op
# Warmup Iteration   3: 20.309 ms/op
# Warmup Iteration   4: 20.106 ms/op
# Warmup Iteration   5: 20.104 ms/op
Iteration   1: 20.361 ms/op
Iteration   2: 20.187 ms/op
Iteration   3: 20.211 ms/op
Iteration   4: 20.043 ms/op
Iteration   5: 20.333 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  20.227 ±(99.9%) 0.490 ms/op [Average]
  (min, avg, max) = (20.043, 20.227, 20.361), stdev = 0.127
  CI (99.9%): [19.737, 20.717] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 18.59% complete, ETA 18:10:55
# Fork: 1 of 1
# Warmup Iteration   1: 3238.244 ms/op
# Warmup Iteration   2: 3139.157 ms/op
# Warmup Iteration   3: 3036.029 ms/op
# Warmup Iteration   4: 2997.814 ms/op
# Warmup Iteration   5: 2976.609 ms/op
Iteration   1: 2991.220 ms/op
Iteration   2: 3795.677 ms/op
Iteration   3: 4050.386 ms/op
Iteration   4: 3960.344 ms/op
Iteration   5: 4132.242 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  3785.974 ±(99.9%) 1777.092 ms/op [Average]
  (min, avg, max) = (2991.220, 3785.974, 4132.242), stdev = 461.505
  CI (99.9%): [2008.882, 5563.065] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 18.67% complete, ETA 18:07:45
# Fork: 1 of 1
# Warmup Iteration   1: 3494.176 ms/op
# Warmup Iteration   2: 3006.427 ms/op
# Warmup Iteration   3: 3199.160 ms/op
# Warmup Iteration   4: 2983.061 ms/op
# Warmup Iteration   5: 3018.758 ms/op
Iteration   1: 2944.379 ms/op
Iteration   2: 3477.204 ms/op
Iteration   3: 4130.378 ms/op
Iteration   4: 4142.942 ms/op
Iteration   5: 4199.302 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  3778.841 ±(99.9%) 2126.803 ms/op [Average]
  (min, avg, max) = (2944.379, 3778.841, 4199.302), stdev = 552.324
  CI (99.9%): [1652.038, 5905.644] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 18.75% complete, ETA 18:04:38
# Fork: 1 of 1
# Warmup Iteration   1: 1.463 ms/op
# Warmup Iteration   2: 1.366 ms/op
# Warmup Iteration   3: 1.343 ms/op
# Warmup Iteration   4: 1.342 ms/op
# Warmup Iteration   5: 1.342 ms/op
Iteration   1: 1.334 ms/op
Iteration   2: 1.335 ms/op
Iteration   3: 1.334 ms/op
Iteration   4: 1.346 ms/op
Iteration   5: 1.336 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.337 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (1.334, 1.337, 1.346), stdev = 0.005
  CI (99.9%): [1.317, 1.356] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 18.83% complete, ETA 17:59:42
# Fork: 1 of 1
# Warmup Iteration   1: 1.475 ms/op
# Warmup Iteration   2: 1.359 ms/op
# Warmup Iteration   3: 1.356 ms/op
# Warmup Iteration   4: 1.368 ms/op
# Warmup Iteration   5: 1.361 ms/op
Iteration   1: 1.362 ms/op
Iteration   2: 1.358 ms/op
Iteration   3: 1.362 ms/op
Iteration   4: 1.349 ms/op
Iteration   5: 1.354 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.357 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (1.349, 1.357, 1.362), stdev = 0.005
  CI (99.9%): [1.336, 1.378] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 18.91% complete, ETA 17:54:49
# Fork: 1 of 1
# Warmup Iteration   1: 44.666 ms/op
# Warmup Iteration   2: 40.555 ms/op
# Warmup Iteration   3: 40.573 ms/op
# Warmup Iteration   4: 40.118 ms/op
# Warmup Iteration   5: 40.273 ms/op
Iteration   1: 40.597 ms/op
Iteration   2: 40.525 ms/op
Iteration   3: 40.431 ms/op
Iteration   4: 40.381 ms/op
Iteration   5: 40.749 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  40.537 ±(99.9%) 0.558 ms/op [Average]
  (min, avg, max) = (40.381, 40.537, 40.749), stdev = 0.145
  CI (99.9%): [39.978, 41.095] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 18.99% complete, ETA 17:49:59
# Fork: 1 of 1
# Warmup Iteration   1: 44.862 ms/op
# Warmup Iteration   2: 40.946 ms/op
# Warmup Iteration   3: 40.970 ms/op
# Warmup Iteration   4: 40.857 ms/op
# Warmup Iteration   5: 40.841 ms/op
Iteration   1: 40.329 ms/op
Iteration   2: 40.738 ms/op
Iteration   3: 40.739 ms/op
Iteration   4: 40.482 ms/op
Iteration   5: 40.284 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  40.515 ±(99.9%) 0.837 ms/op [Average]
  (min, avg, max) = (40.284, 40.515, 40.739), stdev = 0.217
  CI (99.9%): [39.677, 41.352] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 19.07% complete, ETA 17:45:11
# Fork: 1 of 1
# Warmup Iteration   1: 6636.226 ms/op
# Warmup Iteration   2: 6121.386 ms/op
# Warmup Iteration   3: 7145.769 ms/op
# Warmup Iteration   4: 7954.328 ms/op
# Warmup Iteration   5: 9092.906 ms/op
Iteration   1: 8875.981 ms/op
Iteration   2: 8546.850 ms/op
Iteration   3: 8896.500 ms/op
Iteration   4: 9167.167 ms/op
Iteration   5: 8918.893 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  8881.078 ±(99.9%) 850.742 ms/op [Average]
  (min, avg, max) = (8546.850, 8881.078, 9167.167), stdev = 220.935
  CI (99.9%): [8030.336, 9731.820] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 19.15% complete, ETA 17:45:29
# Fork: 1 of 1
# Warmup Iteration   1: 6455.867 ms/op
# Warmup Iteration   2: 6153.229 ms/op
# Warmup Iteration   3: 6991.403 ms/op
# Warmup Iteration   4: 9003.995 ms/op
# Warmup Iteration   5: 9235.979 ms/op
Iteration   1: 9002.833 ms/op
Iteration   2: 8771.016 ms/op
Iteration   3: 8908.320 ms/op
Iteration   4: 8777.243 ms/op
Iteration   5: 8838.357 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  8859.554 ±(99.9%) 375.168 ms/op [Average]
  (min, avg, max) = (8771.016, 8859.554, 9002.833), stdev = 97.430
  CI (99.9%): [8484.386, 9234.722] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 19.23% complete, ETA 17:45:49
# Fork: 1 of 1
# Warmup Iteration   1: 2.974 ms/op
# Warmup Iteration   2: 2.764 ms/op
# Warmup Iteration   3: 2.781 ms/op
# Warmup Iteration   4: 2.757 ms/op
# Warmup Iteration   5: 2.735 ms/op
Iteration   1: 2.743 ms/op
Iteration   2: 2.762 ms/op
Iteration   3: 2.746 ms/op
Iteration   4: 2.735 ms/op
Iteration   5: 2.746 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.746 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (2.735, 2.746, 2.762), stdev = 0.010
  CI (99.9%): [2.709, 2.784] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 19.31% complete, ETA 17:41:05
# Fork: 1 of 1
# Warmup Iteration   1: 2.898 ms/op
# Warmup Iteration   2: 2.693 ms/op
# Warmup Iteration   3: 2.679 ms/op
# Warmup Iteration   4: 2.688 ms/op
# Warmup Iteration   5: 2.702 ms/op
Iteration   1: 2.714 ms/op
Iteration   2: 2.675 ms/op
Iteration   3: 2.695 ms/op
Iteration   4: 2.682 ms/op
Iteration   5: 2.685 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.690 ±(99.9%) 0.058 ms/op [Average]
  (min, avg, max) = (2.675, 2.690, 2.714), stdev = 0.015
  CI (99.9%): [2.632, 2.748] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 19.39% complete, ETA 17:36:22
# Fork: 1 of 1
# Warmup Iteration   1: 90.317 ms/op
# Warmup Iteration   2: 82.317 ms/op
# Warmup Iteration   3: 83.174 ms/op
# Warmup Iteration   4: 82.850 ms/op
# Warmup Iteration   5: 82.015 ms/op
Iteration   1: 82.325 ms/op
Iteration   2: 82.630 ms/op
Iteration   3: 82.152 ms/op
Iteration   4: 81.292 ms/op
Iteration   5: 82.902 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  82.260 ±(99.9%) 2.360 ms/op [Average]
  (min, avg, max) = (81.292, 82.260, 82.902), stdev = 0.613
  CI (99.9%): [79.900, 84.620] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 19.47% complete, ETA 17:31:44
# Fork: 1 of 1
# Warmup Iteration   1: 89.811 ms/op
# Warmup Iteration   2: 81.964 ms/op
# Warmup Iteration   3: 82.025 ms/op
# Warmup Iteration   4: 81.922 ms/op
# Warmup Iteration   5: 81.826 ms/op
Iteration   1: 82.958 ms/op
Iteration   2: 80.958 ms/op
Iteration   3: 95.666 ms/op
Iteration   4: 97.948 ms/op
Iteration   5: 81.700 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  87.846 ±(99.9%) 31.770 ms/op [Average]
  (min, avg, max) = (80.958, 87.846, 97.948), stdev = 8.251
  CI (99.9%): [56.076, 119.616] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 19.55% complete, ETA 17:27:09
# Fork: 1 of 1
# Warmup Iteration   1: 12742.710 ms/op
# Warmup Iteration   2: 15225.506 ms/op
# Warmup Iteration   3: 19283.996 ms/op
# Warmup Iteration   4: 17968.158 ms/op
# Warmup Iteration   5: 17628.667 ms/op
Iteration   1: 17327.453 ms/op
Iteration   2: 17806.911 ms/op
Iteration   3: 17586.091 ms/op
Iteration   4: 16944.401 ms/op
Iteration   5: 17733.013 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  17479.574 ±(99.9%) 1350.854 ms/op [Average]
  (min, avg, max) = (16944.401, 17479.574, 17806.911), stdev = 350.812
  CI (99.9%): [16128.720, 18830.427] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 19.63% complete, ETA 17:33:32
# Fork: 1 of 1
# Warmup Iteration   1: 12664.388 ms/op
# Warmup Iteration   2: 14056.143 ms/op
# Warmup Iteration   3: 16909.363 ms/op
# Warmup Iteration   4: 16725.977 ms/op
# Warmup Iteration   5: 16133.601 ms/op
Iteration   1: 16434.845 ms/op
Iteration   2: 16487.145 ms/op
Iteration   3: 16660.614 ms/op
Iteration   4: 16616.307 ms/op
Iteration   5: 16227.283 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  16485.239 ±(99.9%) 658.617 ms/op [Average]
  (min, avg, max) = (16227.283, 16485.239, 16660.614), stdev = 171.041
  CI (99.9%): [15826.622, 17143.855] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 19.71% complete, ETA 17:39:05
# Fork: 1 of 1
# Warmup Iteration   1: 5.944 ms/op
# Warmup Iteration   2: 5.530 ms/op
# Warmup Iteration   3: 5.480 ms/op
# Warmup Iteration   4: 5.487 ms/op
# Warmup Iteration   5: 5.471 ms/op
Iteration   1: 5.487 ms/op
Iteration   2: 5.482 ms/op
Iteration   3: 5.497 ms/op
Iteration   4: 5.454 ms/op
Iteration   5: 5.487 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  5.481 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (5.454, 5.481, 5.497), stdev = 0.016
  CI (99.9%): [5.419, 5.544] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 19.79% complete, ETA 17:34:27
# Fork: 1 of 1
# Warmup Iteration   1: 5.895 ms/op
# Warmup Iteration   2: 5.491 ms/op
# Warmup Iteration   3: 5.470 ms/op
# Warmup Iteration   4: 5.493 ms/op
# Warmup Iteration   5: 5.480 ms/op
Iteration   1: 5.508 ms/op
Iteration   2: 5.552 ms/op
Iteration   3: 5.600 ms/op
Iteration   4: 5.599 ms/op
Iteration   5: 5.604 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  5.573 ±(99.9%) 0.162 ms/op [Average]
  (min, avg, max) = (5.508, 5.573, 5.604), stdev = 0.042
  CI (99.9%): [5.411, 5.735] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 19.87% complete, ETA 17:29:51
# Fork: 1 of 1
# Warmup Iteration   1: 178.673 ms/op
# Warmup Iteration   2: 165.461 ms/op
# Warmup Iteration   3: 165.061 ms/op
# Warmup Iteration   4: 166.614 ms/op
# Warmup Iteration   5: 166.083 ms/op
Iteration   1: 166.043 ms/op
Iteration   2: 166.795 ms/op
Iteration   3: 166.838 ms/op
Iteration   4: 173.904 ms/op
Iteration   5: 183.075 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  171.331 ±(99.9%) 28.117 ms/op [Average]
  (min, avg, max) = (166.043, 171.331, 183.075), stdev = 7.302
  CI (99.9%): [143.214, 199.448] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 19.95% complete, ETA 17:25:23
# Fork: 1 of 1
# Warmup Iteration   1: 178.017 ms/op
# Warmup Iteration   2: 163.324 ms/op
# Warmup Iteration   3: 162.614 ms/op
# Warmup Iteration   4: 163.692 ms/op
# Warmup Iteration   5: 163.219 ms/op
Iteration   1: 162.899 ms/op
Iteration   2: 163.483 ms/op
Iteration   3: 161.854 ms/op
Iteration   4: 163.977 ms/op
Iteration   5: 164.452 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  163.333 ±(99.9%) 3.882 ms/op [Average]
  (min, avg, max) = (161.854, 163.333, 164.452), stdev = 1.008
  CI (99.9%): [159.451, 167.215] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 20.03% complete, ETA 17:20:56
# Fork: 1 of 1
# Warmup Iteration   1: 28417.255 ms/op
# Warmup Iteration   2: 34336.266 ms/op
# Warmup Iteration   3: 33958.724 ms/op
# Warmup Iteration   4: 33681.411 ms/op
# Warmup Iteration   5: 33707.371 ms/op
Iteration   1: 33878.541 ms/op
Iteration   2: 33791.592 ms/op
Iteration   3: 34301.499 ms/op
Iteration   4: 34341.575 ms/op
Iteration   5: 33020.444 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  33866.730 ±(99.9%) 2052.512 ms/op [Average]
  (min, avg, max) = (33020.444, 33866.730, 34341.575), stdev = 533.031
  CI (99.9%): [31814.218, 35919.242] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 20.11% complete, ETA 17:37:54
# Fork: 1 of 1
# Warmup Iteration   1: 26876.996 ms/op
# Warmup Iteration   2: 32937.687 ms/op
# Warmup Iteration   3: 32561.957 ms/op
# Warmup Iteration   4: 32161.948 ms/op
# Warmup Iteration   5: 32694.123 ms/op
Iteration   1: 32550.244 ms/op
Iteration   2: 32716.569 ms/op
Iteration   3: 32111.652 ms/op
Iteration   4: 32805.666 ms/op
Iteration   5: 32221.180 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  32481.062 ±(99.9%) 1170.525 ms/op [Average]
  (min, avg, max) = (32111.652, 32481.062, 32805.666), stdev = 303.982
  CI (99.9%): [31310.537, 33651.587] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 20.19% complete, ETA 17:53:48
# Fork: 1 of 1
# Warmup Iteration   1: 11.823 ms/op
# Warmup Iteration   2: 11.046 ms/op
# Warmup Iteration   3: 11.015 ms/op
# Warmup Iteration   4: 11.029 ms/op
# Warmup Iteration   5: 11.010 ms/op
Iteration   1: 10.994 ms/op
Iteration   2: 11.066 ms/op
Iteration   3: 11.034 ms/op
Iteration   4: 10.945 ms/op
Iteration   5: 10.956 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  10.999 ±(99.9%) 0.197 ms/op [Average]
  (min, avg, max) = (10.945, 10.999, 11.066), stdev = 0.051
  CI (99.9%): [10.802, 11.196] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 20.27% complete, ETA 17:49:10
# Fork: 1 of 1
# Warmup Iteration   1: 11.939 ms/op
# Warmup Iteration   2: 11.088 ms/op
# Warmup Iteration   3: 11.052 ms/op
# Warmup Iteration   4: 11.091 ms/op
# Warmup Iteration   5: 10.984 ms/op
Iteration   1: 11.015 ms/op
Iteration   2: 10.966 ms/op
Iteration   3: 11.009 ms/op
Iteration   4: 10.968 ms/op
Iteration   5: 11.087 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  11.009 ±(99.9%) 0.189 ms/op [Average]
  (min, avg, max) = (10.966, 11.009, 11.087), stdev = 0.049
  CI (99.9%): [10.820, 11.198] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 20.35% complete, ETA 17:44:34
# Fork: 1 of 1
# Warmup Iteration   1: 357.452 ms/op
# Warmup Iteration   2: 337.297 ms/op
# Warmup Iteration   3: 336.287 ms/op
# Warmup Iteration   4: 333.326 ms/op
# Warmup Iteration   5: 327.969 ms/op
Iteration   1: 324.559 ms/op
Iteration   2: 330.898 ms/op
Iteration   3: 330.275 ms/op
Iteration   4: 330.089 ms/op
Iteration   5: 325.063 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  328.177 ±(99.9%) 11.907 ms/op [Average]
  (min, avg, max) = (324.559, 328.177, 330.898), stdev = 3.092
  CI (99.9%): [316.270, 340.084] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 20.43% complete, ETA 17:40:10
# Fork: 1 of 1
# Warmup Iteration   1: 356.967 ms/op
# Warmup Iteration   2: 327.027 ms/op
# Warmup Iteration   3: 326.346 ms/op
# Warmup Iteration   4: 326.408 ms/op
# Warmup Iteration   5: 328.699 ms/op
Iteration   1: 328.836 ms/op
Iteration   2: 328.849 ms/op
Iteration   3: 331.024 ms/op
Iteration   4: 328.443 ms/op
Iteration   5: 326.453 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  328.721 ±(99.9%) 6.256 ms/op [Average]
  (min, avg, max) = (326.453, 328.721, 331.024), stdev = 1.625
  CI (99.9%): [322.465, 334.977] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 20.51% complete, ETA 17:35:49
# Fork: 1 of 1
# Warmup Iteration   1: 60593.196 ms/op
# Warmup Iteration   2: 68286.960 ms/op
# Warmup Iteration   3: 68095.773 ms/op
# Warmup Iteration   4: 67992.661 ms/op
# Warmup Iteration   5: 67125.428 ms/op
Iteration   1: 67688.071 ms/op
Iteration   2: 67558.352 ms/op
Iteration   3: 67941.397 ms/op
Iteration   4: 67698.395 ms/op
Iteration   5: 67565.703 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  67690.383 ±(99.9%) 596.709 ms/op [Average]
  (min, avg, max) = (67558.352, 67690.383, 67941.397), stdev = 154.964
  CI (99.9%): [67093.674, 68287.093] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 20.59% complete, ETA 18:13:50
# Fork: 1 of 1
# Warmup Iteration   1: 63593.138 ms/op
# Warmup Iteration   2: 69346.214 ms/op
# Warmup Iteration   3: 70980.696 ms/op
# Warmup Iteration   4: 69669.141 ms/op
# Warmup Iteration   5: 69941.003 ms/op
Iteration   1: 69590.626 ms/op
Iteration   2: 70687.539 ms/op
Iteration   3: 70507.156 ms/op
Iteration   4: 69620.566 ms/op
Iteration   5: 69827.722 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  70046.722 ±(99.9%) 1982.464 ms/op [Average]
  (min, avg, max) = (69590.626, 70046.722, 70687.539), stdev = 514.840
  CI (99.9%): [68064.258, 72029.186] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 20.67% complete, ETA 18:52:57
# Fork: 1 of 1
# Warmup Iteration   1: 23.757 ms/op
# Warmup Iteration   2: 22.039 ms/op
# Warmup Iteration   3: 22.008 ms/op
# Warmup Iteration   4: 21.951 ms/op
# Warmup Iteration   5: 22.002 ms/op
Iteration   1: 21.913 ms/op
Iteration   2: 21.759 ms/op
Iteration   3: 21.876 ms/op
Iteration   4: 21.916 ms/op
Iteration   5: 21.899 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  21.872 ±(99.9%) 0.252 ms/op [Average]
  (min, avg, max) = (21.759, 21.872, 21.916), stdev = 0.066
  CI (99.9%): [21.620, 22.125] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 20.75% complete, ETA 18:48:07
# Fork: 1 of 1
# Warmup Iteration   1: 24.036 ms/op
# Warmup Iteration   2: 21.987 ms/op
# Warmup Iteration   3: 22.136 ms/op
# Warmup Iteration   4: 22.062 ms/op
# Warmup Iteration   5: 22.069 ms/op
Iteration   1: 22.138 ms/op
Iteration   2: 22.188 ms/op
Iteration   3: 21.951 ms/op
Iteration   4: 22.183 ms/op
Iteration   5: 22.376 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  22.167 ±(99.9%) 0.583 ms/op [Average]
  (min, avg, max) = (21.951, 22.167, 22.376), stdev = 0.151
  CI (99.9%): [21.584, 22.750] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 20.83% complete, ETA 18:43:19
# Fork: 1 of 1
# Warmup Iteration   1: 702.531 ms/op
# Warmup Iteration   2: 674.671 ms/op
# Warmup Iteration   3: 661.802 ms/op
# Warmup Iteration   4: 665.368 ms/op
# Warmup Iteration   5: 656.549 ms/op
Iteration   1: 658.379 ms/op
Iteration   2: 662.428 ms/op
Iteration   3: 651.901 ms/op
Iteration   4: 655.640 ms/op
Iteration   5: 663.762 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  658.422 ±(99.9%) 18.748 ms/op [Average]
  (min, avg, max) = (651.901, 658.422, 663.762), stdev = 4.869
  CI (99.9%): [639.674, 677.170] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 20.91% complete, ETA 18:38:44
# Fork: 1 of 1
# Warmup Iteration   1: 707.844 ms/op
# Warmup Iteration   2: 664.477 ms/op
# Warmup Iteration   3: 662.465 ms/op
# Warmup Iteration   4: 702.680 ms/op
# Warmup Iteration   5: 655.695 ms/op
Iteration   1: 658.975 ms/op
Iteration   2: 664.462 ms/op
Iteration   3: 661.361 ms/op
Iteration   4: 657.119 ms/op
Iteration   5: 659.253 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  660.234 ±(99.9%) 10.789 ms/op [Average]
  (min, avg, max) = (657.119, 660.234, 664.462), stdev = 2.802
  CI (99.9%): [649.445, 671.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 20.99% complete, ETA 18:34:12
# Fork: 1 of 1
# Warmup Iteration   1: 133621.601 ms/op
# Warmup Iteration   2: 137215.055 ms/op
# Warmup Iteration   3: 151174.621 ms/op
# Warmup Iteration   4: 198221.610 ms/op
# Warmup Iteration   5: 184100.028 ms/op
Iteration   1: 209760.032 ms/op
Iteration   2: 243913.123 ms/op
Iteration   3: 225068.381 ms/op
Iteration   4: 232162.800 ms/op
Iteration   5: 226756.468 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  227532.161 ±(99.9%) 47641.477 ms/op [Average]
  (min, avg, max) = (209760.032, 227532.161, 243913.123), stdev = 12372.340
  CI (99.9%): [179890.684, 275173.637] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 21.07% complete, ETA 20:30:11
# Fork: 1 of 1
# Warmup Iteration   1: 222678.062 ms/op
# Warmup Iteration   2: 254458.746 ms/op
# Warmup Iteration   3: 235415.804 ms/op
# Warmup Iteration   4: 249994.166 ms/op
# Warmup Iteration   5: 232593.128 ms/op
Iteration   1: 252379.030 ms/op
Iteration   2: 244983.311 ms/op
Iteration   3: 248817.635 ms/op
Iteration   4: 224387.177 ms/op
Iteration   5: 257669.831 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  245647.397 ±(99.9%) 49174.630 ms/op [Average]
  (min, avg, max) = (224387.177, 245647.397, 257669.831), stdev = 12770.495
  CI (99.9%): [196472.767, 294822.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 21.15% complete, ETA 22:54:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 21.23% complete, ETA 22:49:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 21.31% complete, ETA 22:43:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 21.39% complete, ETA 22:37:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 21.47% complete, ETA 22:31:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 21.55% complete, ETA 22:25:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 21.63% complete, ETA 22:20:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.003, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 21.71% complete, ETA 22:14:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 21.79% complete, ETA 22:08:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 21.88% complete, ETA 22:03:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.006 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.002, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 21.96% complete, ETA 21:57:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 22.04% complete, ETA 21:52:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 22.12% complete, ETA 21:46:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.011 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.014), stdev = 0.003
  CI (99.9%): [0.001, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 22.20% complete, ETA 21:41:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.001
  CI (99.9%): [0.002, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 22.28% complete, ETA 21:35:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.010 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.006, 0.010, 0.015), stdev = 0.003
  CI (99.9%): [? 0, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 22.36% complete, ETA 21:30:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.011 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.016), stdev = 0.003
  CI (99.9%): [? 0, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 22.44% complete, ETA 21:25:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.011 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.013), stdev = 0.002
  CI (99.9%): [0.002, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 22.52% complete, ETA 21:20:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.011 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.015), stdev = 0.003
  CI (99.9%): [? 0, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 22.60% complete, ETA 21:14:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.024 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.019, 0.024, 0.030), stdev = 0.005
  CI (99.9%): [0.005, 0.042] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 22.68% complete, ETA 21:09:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.016 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.014, 0.016, 0.019), stdev = 0.002
  CI (99.9%): [0.007, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 22.76% complete, ETA 21:04:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.016 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.014, 0.016, 0.019), stdev = 0.002
  CI (99.9%): [0.007, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 22.84% complete, ETA 20:59:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.017 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.014, 0.017, 0.021), stdev = 0.003
  CI (99.9%): [0.006, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 22.92% complete, ETA 20:54:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.015 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.013, 0.015, 0.021), stdev = 0.003
  CI (99.9%): [0.003, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 23.00% complete, ETA 20:49:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.015 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.013, 0.015, 0.017), stdev = 0.002
  CI (99.9%): [0.009, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 23.08% complete, ETA 20:44:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.029 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.024, 0.029, 0.033), stdev = 0.003
  CI (99.9%): [0.016, 0.042] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 23.16% complete, ETA 20:39:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.032 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.029 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.026, 0.029, 0.032), stdev = 0.002
  CI (99.9%): [0.021, 0.038] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 23.24% complete, ETA 20:34:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.037 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.031 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.025, 0.031, 0.035), stdev = 0.004
  CI (99.9%): [0.016, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 23.32% complete, ETA 20:29:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.035 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.031 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.027, 0.031, 0.035), stdev = 0.003
  CI (99.9%): [0.018, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 23.40% complete, ETA 20:24:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.032 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.028, 0.032, 0.037), stdev = 0.004
  CI (99.9%): [0.017, 0.046] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 23.48% complete, ETA 20:19:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.034 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.028, 0.034, 0.050), stdev = 0.009
  CI (99.9%): [? 0, 0.069] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 23.56% complete, ETA 20:14:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.075 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.064 ms/op
# Warmup Iteration   4: 0.064 ms/op
# Warmup Iteration   5: 0.059 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.058 ms/op
Iteration   3: 0.073 ms/op
Iteration   4: 0.071 ms/op
Iteration   5: 0.056 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.063 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.056, 0.063, 0.073), stdev = 0.008
  CI (99.9%): [0.032, 0.094] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 23.64% complete, ETA 20:09:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.090 ms/op
# Warmup Iteration   2: 0.079 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.054 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.076 ms/op
Iteration   4: 0.066 ms/op
Iteration   5: 0.063 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.063 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.054, 0.063, 0.076), stdev = 0.009
  CI (99.9%): [0.027, 0.099] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 23.72% complete, ETA 20:04:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.075 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.055 ms/op
# Warmup Iteration   5: 0.052 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.062 ms/op
Iteration   4: 0.057 ms/op
Iteration   5: 0.060 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.057 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.050, 0.057, 0.062), stdev = 0.005
  CI (99.9%): [0.038, 0.076] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 23.80% complete, ETA 20:00:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.072 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.051 ms/op
# Warmup Iteration   5: 0.050 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.056 ms/op
Iteration   3: 0.060 ms/op
Iteration   4: 0.067 ms/op
Iteration   5: 0.054 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.057 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.050, 0.057, 0.067), stdev = 0.006
  CI (99.9%): [0.033, 0.082] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 23.88% complete, ETA 19:55:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.066 ms/op
# Warmup Iteration   2: 0.054 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.055 ms/op
# Warmup Iteration   5: 0.053 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.056 ms/op
Iteration   3: 0.084 ms/op
Iteration   4: 0.134 ms/op
Iteration   5: 0.102 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.085 ±(99.9%) 0.132 ms/op [Average]
  (min, avg, max) = (0.051, 0.085, 0.134), stdev = 0.034
  CI (99.9%): [? 0, 0.217] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 23.96% complete, ETA 19:50:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.062 ms/op
# Warmup Iteration   3: 0.056 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.054 ms/op
Iteration   1: 0.056 ms/op
Iteration   2: 0.055 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.065 ms/op
Iteration   5: 0.062 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.062 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.055, 0.062, 0.074), stdev = 0.008
  CI (99.9%): [0.032, 0.092] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 24.04% complete, ETA 19:46:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.135 ms/op
# Warmup Iteration   2: 0.117 ms/op
# Warmup Iteration   3: 0.107 ms/op
# Warmup Iteration   4: 0.114 ms/op
# Warmup Iteration   5: 0.119 ms/op
Iteration   1: 0.118 ms/op
Iteration   2: 0.113 ms/op
Iteration   3: 0.153 ms/op
Iteration   4: 0.139 ms/op
Iteration   5: 0.115 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.127 ±(99.9%) 0.067 ms/op [Average]
  (min, avg, max) = (0.113, 0.127, 0.153), stdev = 0.017
  CI (99.9%): [0.061, 0.194] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 24.12% complete, ETA 19:41:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.139 ms/op
# Warmup Iteration   2: 0.124 ms/op
# Warmup Iteration   3: 0.119 ms/op
# Warmup Iteration   4: 0.118 ms/op
# Warmup Iteration   5: 0.111 ms/op
Iteration   1: 0.111 ms/op
Iteration   2: 0.123 ms/op
Iteration   3: 0.150 ms/op
Iteration   4: 0.158 ms/op
Iteration   5: 0.129 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.134 ±(99.9%) 0.075 ms/op [Average]
  (min, avg, max) = (0.111, 0.134, 0.158), stdev = 0.019
  CI (99.9%): [0.060, 0.209] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 24.20% complete, ETA 19:36:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.149 ms/op
# Warmup Iteration   2: 0.126 ms/op
# Warmup Iteration   3: 0.124 ms/op
# Warmup Iteration   4: 0.124 ms/op
# Warmup Iteration   5: 0.116 ms/op
Iteration   1: 0.116 ms/op
Iteration   2: 0.118 ms/op
Iteration   3: 0.155 ms/op
Iteration   4: 0.160 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.135 ±(99.9%) 0.081 ms/op [Average]
  (min, avg, max) = (0.116, 0.135, 0.160), stdev = 0.021
  CI (99.9%): [0.054, 0.216] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 24.28% complete, ETA 19:32:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.145 ms/op
# Warmup Iteration   2: 0.126 ms/op
# Warmup Iteration   3: 0.142 ms/op
# Warmup Iteration   4: 0.127 ms/op
# Warmup Iteration   5: 0.130 ms/op
Iteration   1: 0.123 ms/op
Iteration   2: 0.122 ms/op
Iteration   3: 0.180 ms/op
Iteration   4: 0.186 ms/op
Iteration   5: 0.150 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.152 ±(99.9%) 0.117 ms/op [Average]
  (min, avg, max) = (0.122, 0.152, 0.186), stdev = 0.030
  CI (99.9%): [0.036, 0.269] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 24.36% complete, ETA 19:27:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.149 ms/op
# Warmup Iteration   2: 0.140 ms/op
# Warmup Iteration   3: 0.129 ms/op
# Warmup Iteration   4: 0.130 ms/op
# Warmup Iteration   5: 0.132 ms/op
Iteration   1: 0.110 ms/op
Iteration   2: 0.109 ms/op
Iteration   3: 0.174 ms/op
Iteration   4: 0.121 ms/op
Iteration   5: 0.118 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.126 ±(99.9%) 0.105 ms/op [Average]
  (min, avg, max) = (0.109, 0.126, 0.174), stdev = 0.027
  CI (99.9%): [0.021, 0.231] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 24.44% complete, ETA 19:23:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.141 ms/op
# Warmup Iteration   2: 0.116 ms/op
# Warmup Iteration   3: 0.114 ms/op
# Warmup Iteration   4: 0.121 ms/op
# Warmup Iteration   5: 0.115 ms/op
Iteration   1: 0.111 ms/op
Iteration   2: 0.109 ms/op
Iteration   3: 0.160 ms/op
Iteration   4: 0.129 ms/op
Iteration   5: 0.109 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.124 ±(99.9%) 0.086 ms/op [Average]
  (min, avg, max) = (0.109, 0.124, 0.160), stdev = 0.022
  CI (99.9%): [0.038, 0.209] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 24.52% complete, ETA 19:18:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.277 ms/op
# Warmup Iteration   2: 0.212 ms/op
# Warmup Iteration   3: 0.215 ms/op
# Warmup Iteration   4: 0.215 ms/op
# Warmup Iteration   5: 0.203 ms/op
Iteration   1: 0.226 ms/op
Iteration   2: 0.278 ms/op
Iteration   3: 0.277 ms/op
Iteration   4: 0.249 ms/op
Iteration   5: 0.230 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.252 ±(99.9%) 0.096 ms/op [Average]
  (min, avg, max) = (0.226, 0.252, 0.278), stdev = 0.025
  CI (99.9%): [0.156, 0.348] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 24.60% complete, ETA 19:14:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.264 ms/op
# Warmup Iteration   2: 0.206 ms/op
# Warmup Iteration   3: 0.204 ms/op
# Warmup Iteration   4: 0.197 ms/op
# Warmup Iteration   5: 0.183 ms/op
Iteration   1: 0.190 ms/op
Iteration   2: 0.199 ms/op
Iteration   3: 0.205 ms/op
Iteration   4: 0.238 ms/op
Iteration   5: 0.212 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.209 ±(99.9%) 0.070 ms/op [Average]
  (min, avg, max) = (0.190, 0.209, 0.238), stdev = 0.018
  CI (99.9%): [0.139, 0.278] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 24.68% complete, ETA 19:09:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.267 ms/op
# Warmup Iteration   2: 0.224 ms/op
# Warmup Iteration   3: 0.201 ms/op
# Warmup Iteration   4: 0.207 ms/op
# Warmup Iteration   5: 0.196 ms/op
Iteration   1: 0.193 ms/op
Iteration   2: 0.206 ms/op
Iteration   3: 0.198 ms/op
Iteration   4: 0.228 ms/op
Iteration   5: 0.228 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.211 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.193, 0.211, 0.228), stdev = 0.016
  CI (99.9%): [0.148, 0.273] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 24.76% complete, ETA 19:05:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.267 ms/op
# Warmup Iteration   2: 0.209 ms/op
# Warmup Iteration   3: 0.189 ms/op
# Warmup Iteration   4: 0.194 ms/op
# Warmup Iteration   5: 0.187 ms/op
Iteration   1: 0.190 ms/op
Iteration   2: 0.208 ms/op
Iteration   3: 0.223 ms/op
Iteration   4: 0.238 ms/op
Iteration   5: 0.215 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.215 ±(99.9%) 0.069 ms/op [Average]
  (min, avg, max) = (0.190, 0.215, 0.238), stdev = 0.018
  CI (99.9%): [0.146, 0.283] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 24.84% complete, ETA 19:01:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.264 ms/op
# Warmup Iteration   2: 0.209 ms/op
# Warmup Iteration   3: 0.220 ms/op
# Warmup Iteration   4: 0.226 ms/op
# Warmup Iteration   5: 0.203 ms/op
Iteration   1: 0.203 ms/op
Iteration   2: 0.227 ms/op
Iteration   3: 0.288 ms/op
Iteration   4: 0.243 ms/op
Iteration   5: 0.242 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.241 ±(99.9%) 0.119 ms/op [Average]
  (min, avg, max) = (0.203, 0.241, 0.288), stdev = 0.031
  CI (99.9%): [0.122, 0.360] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 24.92% complete, ETA 18:56:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.267 ms/op
# Warmup Iteration   2: 0.205 ms/op
# Warmup Iteration   3: 0.208 ms/op
# Warmup Iteration   4: 0.220 ms/op
# Warmup Iteration   5: 0.202 ms/op
Iteration   1: 0.208 ms/op
Iteration   2: 0.234 ms/op
Iteration   3: 0.283 ms/op
Iteration   4: 0.233 ms/op
Iteration   5: 0.217 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.235 ±(99.9%) 0.112 ms/op [Average]
  (min, avg, max) = (0.208, 0.235, 0.283), stdev = 0.029
  CI (99.9%): [0.123, 0.346] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 25.00% complete, ETA 18:52:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.533 ms/op
# Warmup Iteration   2: 0.437 ms/op
# Warmup Iteration   3: 0.428 ms/op
# Warmup Iteration   4: 0.444 ms/op
# Warmup Iteration   5: 0.409 ms/op
Iteration   1: 0.435 ms/op
Iteration   2: 0.452 ms/op
Iteration   3: 0.490 ms/op
Iteration   4: 0.542 ms/op
Iteration   5: 0.454 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.475 ±(99.9%) 0.165 ms/op [Average]
  (min, avg, max) = (0.435, 0.475, 0.542), stdev = 0.043
  CI (99.9%): [0.310, 0.640] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 25.08% complete, ETA 18:48:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.549 ms/op
# Warmup Iteration   2: 0.476 ms/op
# Warmup Iteration   3: 0.506 ms/op
# Warmup Iteration   4: 0.458 ms/op
# Warmup Iteration   5: 0.465 ms/op
Iteration   1: 0.449 ms/op
Iteration   2: 0.443 ms/op
Iteration   3: 0.603 ms/op
Iteration   4: 0.546 ms/op
Iteration   5: 0.448 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.498 ±(99.9%) 0.281 ms/op [Average]
  (min, avg, max) = (0.443, 0.498, 0.603), stdev = 0.073
  CI (99.9%): [0.217, 0.779] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 25.16% complete, ETA 18:44:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.527 ms/op
# Warmup Iteration   2: 0.463 ms/op
# Warmup Iteration   3: 0.457 ms/op
# Warmup Iteration   4: 0.461 ms/op
# Warmup Iteration   5: 0.456 ms/op
Iteration   1: 0.438 ms/op
Iteration   2: 0.476 ms/op
Iteration   3: 0.552 ms/op
Iteration   4: 0.576 ms/op
Iteration   5: 0.492 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.507 ±(99.9%) 0.218 ms/op [Average]
  (min, avg, max) = (0.438, 0.507, 0.576), stdev = 0.057
  CI (99.9%): [0.289, 0.725] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 25.24% complete, ETA 18:39:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.598 ms/op
# Warmup Iteration   2: 0.504 ms/op
# Warmup Iteration   3: 0.506 ms/op
# Warmup Iteration   4: 0.509 ms/op
# Warmup Iteration   5: 0.461 ms/op
Iteration   1: 0.467 ms/op
Iteration   2: 0.464 ms/op
Iteration   3: 0.631 ms/op
Iteration   4: 0.699 ms/op
Iteration   5: 0.552 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.563 ±(99.9%) 0.396 ms/op [Average]
  (min, avg, max) = (0.464, 0.563, 0.699), stdev = 0.103
  CI (99.9%): [0.167, 0.958] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 25.32% complete, ETA 18:35:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.591 ms/op
# Warmup Iteration   2: 0.551 ms/op
# Warmup Iteration   3: 0.521 ms/op
# Warmup Iteration   4: 0.487 ms/op
# Warmup Iteration   5: 0.542 ms/op
Iteration   1: 0.496 ms/op
Iteration   2: 0.473 ms/op
Iteration   3: 0.660 ms/op
Iteration   4: 0.673 ms/op
Iteration   5: 0.567 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.574 ±(99.9%) 0.353 ms/op [Average]
  (min, avg, max) = (0.473, 0.574, 0.673), stdev = 0.092
  CI (99.9%): [0.221, 0.926] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 25.40% complete, ETA 18:31:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.559 ms/op
# Warmup Iteration   2: 0.512 ms/op
# Warmup Iteration   3: 0.465 ms/op
# Warmup Iteration   4: 0.471 ms/op
# Warmup Iteration   5: 0.449 ms/op
Iteration   1: 0.441 ms/op
Iteration   2: 0.448 ms/op
Iteration   3: 0.720 ms/op
Iteration   4: 0.524 ms/op
Iteration   5: 0.461 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.519 ±(99.9%) 0.451 ms/op [Average]
  (min, avg, max) = (0.441, 0.519, 0.720), stdev = 0.117
  CI (99.9%): [0.068, 0.970] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 25.48% complete, ETA 18:27:14
# Fork: 1 of 1
# Warmup Iteration   1: 1.080 ms/op
# Warmup Iteration   2: 0.999 ms/op
# Warmup Iteration   3: 0.876 ms/op
# Warmup Iteration   4: 0.934 ms/op
# Warmup Iteration   5: 0.824 ms/op
Iteration   1: 0.840 ms/op
Iteration   2: 0.862 ms/op
Iteration   3: 0.918 ms/op
Iteration   4: 0.975 ms/op
Iteration   5: 0.915 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.902 ±(99.9%) 0.204 ms/op [Average]
  (min, avg, max) = (0.840, 0.902, 0.975), stdev = 0.053
  CI (99.9%): [0.698, 1.106] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 25.56% complete, ETA 18:23:05
# Fork: 1 of 1
# Warmup Iteration   1: 1.053 ms/op
# Warmup Iteration   2: 0.873 ms/op
# Warmup Iteration   3: 0.764 ms/op
# Warmup Iteration   4: 0.787 ms/op
# Warmup Iteration   5: 0.792 ms/op
Iteration   1: 0.768 ms/op
Iteration   2: 0.843 ms/op
Iteration   3: 0.884 ms/op
Iteration   4: 0.908 ms/op
Iteration   5: 0.845 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.849 ±(99.9%) 0.205 ms/op [Average]
  (min, avg, max) = (0.768, 0.849, 0.908), stdev = 0.053
  CI (99.9%): [0.645, 1.054] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 25.64% complete, ETA 18:18:58
# Fork: 1 of 1
# Warmup Iteration   1: 1.052 ms/op
# Warmup Iteration   2: 0.849 ms/op
# Warmup Iteration   3: 0.858 ms/op
# Warmup Iteration   4: 0.781 ms/op
# Warmup Iteration   5: 0.713 ms/op
Iteration   1: 0.779 ms/op
Iteration   2: 0.788 ms/op
Iteration   3: 0.836 ms/op
Iteration   4: 0.938 ms/op
Iteration   5: 0.961 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.861 ±(99.9%) 0.326 ms/op [Average]
  (min, avg, max) = (0.779, 0.861, 0.961), stdev = 0.085
  CI (99.9%): [0.534, 1.187] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 25.72% complete, ETA 18:14:53
# Fork: 1 of 1
# Warmup Iteration   1: 1.117 ms/op
# Warmup Iteration   2: 0.892 ms/op
# Warmup Iteration   3: 0.804 ms/op
# Warmup Iteration   4: 0.814 ms/op
# Warmup Iteration   5: 0.783 ms/op
Iteration   1: 0.773 ms/op
Iteration   2: 0.823 ms/op
Iteration   3: 0.927 ms/op
Iteration   4: 0.977 ms/op
Iteration   5: 0.921 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.884 ±(99.9%) 0.321 ms/op [Average]
  (min, avg, max) = (0.773, 0.884, 0.977), stdev = 0.083
  CI (99.9%): [0.563, 1.205] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 25.80% complete, ETA 18:10:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.980 ms/op
# Warmup Iteration   2: 0.867 ms/op
# Warmup Iteration   3: 0.784 ms/op
# Warmup Iteration   4: 0.837 ms/op
# Warmup Iteration   5: 0.786 ms/op
Iteration   1: 0.751 ms/op
Iteration   2: 0.861 ms/op
Iteration   3: 1.067 ms/op
Iteration   4: 0.912 ms/op
Iteration   5: 0.872 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.893 ±(99.9%) 0.440 ms/op [Average]
  (min, avg, max) = (0.751, 0.893, 1.067), stdev = 0.114
  CI (99.9%): [0.452, 1.333] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 25.88% complete, ETA 18:06:47
# Fork: 1 of 1
# Warmup Iteration   1: 1.036 ms/op
# Warmup Iteration   2: 0.816 ms/op
# Warmup Iteration   3: 0.870 ms/op
# Warmup Iteration   4: 0.932 ms/op
# Warmup Iteration   5: 0.795 ms/op
Iteration   1: 0.833 ms/op
Iteration   2: 0.865 ms/op
Iteration   3: 1.036 ms/op
Iteration   4: 0.880 ms/op
Iteration   5: 0.944 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.912 ±(99.9%) 0.309 ms/op [Average]
  (min, avg, max) = (0.833, 0.912, 1.036), stdev = 0.080
  CI (99.9%): [0.602, 1.221] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 25.96% complete, ETA 18:02:47
# Fork: 1 of 1
# Warmup Iteration   1: 2.140 ms/op
# Warmup Iteration   2: 1.774 ms/op
# Warmup Iteration   3: 1.766 ms/op
# Warmup Iteration   4: 1.704 ms/op
# Warmup Iteration   5: 1.737 ms/op
Iteration   1: 1.664 ms/op
Iteration   2: 1.853 ms/op
Iteration   3: 1.930 ms/op
Iteration   4: 2.213 ms/op
Iteration   5: 1.855 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.903 ±(99.9%) 0.766 ms/op [Average]
  (min, avg, max) = (1.664, 1.903, 2.213), stdev = 0.199
  CI (99.9%): [1.137, 2.669] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 26.04% complete, ETA 17:58:47
# Fork: 1 of 1
# Warmup Iteration   1: 2.249 ms/op
# Warmup Iteration   2: 1.775 ms/op
# Warmup Iteration   3: 1.865 ms/op
# Warmup Iteration   4: 1.783 ms/op
# Warmup Iteration   5: 1.742 ms/op
Iteration   1: 1.808 ms/op
Iteration   2: 1.930 ms/op
Iteration   3: 2.396 ms/op
Iteration   4: 2.151 ms/op
Iteration   5: 1.913 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.040 ±(99.9%) 0.905 ms/op [Average]
  (min, avg, max) = (1.808, 2.040, 2.396), stdev = 0.235
  CI (99.9%): [1.134, 2.945] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 26.12% complete, ETA 17:54:49
# Fork: 1 of 1
# Warmup Iteration   1: 2.114 ms/op
# Warmup Iteration   2: 1.825 ms/op
# Warmup Iteration   3: 1.861 ms/op
# Warmup Iteration   4: 1.819 ms/op
# Warmup Iteration   5: 1.711 ms/op
Iteration   1: 1.691 ms/op
Iteration   2: 1.777 ms/op
Iteration   3: 2.031 ms/op
Iteration   4: 2.155 ms/op
Iteration   5: 1.941 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.919 ±(99.9%) 0.722 ms/op [Average]
  (min, avg, max) = (1.691, 1.919, 2.155), stdev = 0.188
  CI (99.9%): [1.197, 2.642] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 26.20% complete, ETA 17:50:52
# Fork: 1 of 1
# Warmup Iteration   1: 2.438 ms/op
# Warmup Iteration   2: 1.929 ms/op
# Warmup Iteration   3: 1.970 ms/op
# Warmup Iteration   4: 1.993 ms/op
# Warmup Iteration   5: 1.888 ms/op
Iteration   1: 1.764 ms/op
Iteration   2: 1.890 ms/op
Iteration   3: 2.579 ms/op
Iteration   4: 2.408 ms/op
Iteration   5: 1.911 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.110 ±(99.9%) 1.384 ms/op [Average]
  (min, avg, max) = (1.764, 2.110, 2.579), stdev = 0.359
  CI (99.9%): [0.726, 3.494] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 26.28% complete, ETA 17:46:57
# Fork: 1 of 1
# Warmup Iteration   1: 2.276 ms/op
# Warmup Iteration   2: 1.985 ms/op
# Warmup Iteration   3: 1.978 ms/op
# Warmup Iteration   4: 2.153 ms/op
# Warmup Iteration   5: 2.041 ms/op
Iteration   1: 2.021 ms/op
Iteration   2: 2.018 ms/op
Iteration   3: 2.556 ms/op
Iteration   4: 2.958 ms/op
Iteration   5: 1.992 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.309 ±(99.9%) 1.668 ms/op [Average]
  (min, avg, max) = (1.992, 2.309, 2.958), stdev = 0.433
  CI (99.9%): [0.641, 3.977] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 26.36% complete, ETA 17:43:04
# Fork: 1 of 1
# Warmup Iteration   1: 2.500 ms/op
# Warmup Iteration   2: 2.142 ms/op
# Warmup Iteration   3: 2.167 ms/op
# Warmup Iteration   4: 1.979 ms/op
# Warmup Iteration   5: 2.209 ms/op
Iteration   1: 1.990 ms/op
Iteration   2: 1.775 ms/op
Iteration   3: 2.370 ms/op
Iteration   4: 2.351 ms/op
Iteration   5: 1.888 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.075 ±(99.9%) 1.046 ms/op [Average]
  (min, avg, max) = (1.775, 2.075, 2.370), stdev = 0.272
  CI (99.9%): [1.029, 3.120] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 26.44% complete, ETA 17:39:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 26.52% complete, ETA 17:35:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 26.60% complete, ETA 17:31:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 26.68% complete, ETA 17:27:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 26.76% complete, ETA 17:23:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 26.84% complete, ETA 17:20:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 26.92% complete, ETA 17:16:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 27.00% complete, ETA 17:12:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [0.002, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 27.08% complete, ETA 17:09:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 27.16% complete, ETA 17:05:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 27.24% complete, ETA 17:01:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.005 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 27.32% complete, ETA 16:58:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.005 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 27.40% complete, ETA 16:54:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.009), stdev = 0.001
  CI (99.9%): [0.005, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 27.48% complete, ETA 16:50:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.008), stdev = 0.001
  CI (99.9%): [0.006, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 27.56% complete, ETA 16:47:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.008), stdev = 0.001
  CI (99.9%): [0.006, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 27.64% complete, ETA 16:43:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.008), stdev = 0.001
  CI (99.9%): [0.004, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 27.72% complete, ETA 16:40:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.008), stdev = 0.001
  CI (99.9%): [0.005, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 27.80% complete, ETA 16:36:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [0.003, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 27.88% complete, ETA 16:33:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.018 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.016, 0.018, 0.023), stdev = 0.003
  CI (99.9%): [0.006, 0.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 27.96% complete, ETA 16:29:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.023 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.015, 0.023, 0.035), stdev = 0.009
  CI (99.9%): [? 0, 0.057] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 28.04% complete, ETA 16:26:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.020 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.016, 0.020, 0.023), stdev = 0.003
  CI (99.9%): [0.010, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 28.13% complete, ETA 16:22:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.026 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.020, 0.026, 0.034), stdev = 0.007
  CI (99.9%): [? 0, 0.053] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 28.21% complete, ETA 16:19:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.024 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.020, 0.024, 0.026), stdev = 0.002
  CI (99.9%): [0.014, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 28.29% complete, ETA 16:16:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.038 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.021 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.017, 0.021, 0.024), stdev = 0.003
  CI (99.9%): [0.011, 0.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 28.37% complete, ETA 16:12:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.033 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.040 ms/op
Iteration   4: 0.054 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.041 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.034, 0.041, 0.054), stdev = 0.007
  CI (99.9%): [0.012, 0.069] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 28.45% complete, ETA 16:09:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.040 ms/op
# Warmup Iteration   3: 0.042 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.033 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.054 ms/op
Iteration   5: 0.054 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.043 ±(99.9%) 0.042 ms/op [Average]
  (min, avg, max) = (0.032, 0.043, 0.054), stdev = 0.011
  CI (99.9%): [0.002, 0.085] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 28.53% complete, ETA 16:05:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.034 ms/op
# Warmup Iteration   4: 0.034 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.042 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.041 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.034, 0.041, 0.047), stdev = 0.006
  CI (99.9%): [0.018, 0.064] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 28.61% complete, ETA 16:02:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.035 ms/op
# Warmup Iteration   3: 0.032 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.039 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.037 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.031, 0.037, 0.047), stdev = 0.007
  CI (99.9%): [0.011, 0.062] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 28.69% complete, ETA 15:59:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.028 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.024, 0.028, 0.032), stdev = 0.003
  CI (99.9%): [0.017, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 28.77% complete, ETA 15:56:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.030 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.026, 0.030, 0.036), stdev = 0.004
  CI (99.9%): [0.015, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 28.85% complete, ETA 15:52:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.072 ms/op
# Warmup Iteration   2: 0.054 ms/op
# Warmup Iteration   3: 0.054 ms/op
# Warmup Iteration   4: 0.054 ms/op
# Warmup Iteration   5: 0.051 ms/op
Iteration   1: 0.054 ms/op
Iteration   2: 0.053 ms/op
Iteration   3: 0.063 ms/op
Iteration   4: 0.068 ms/op
Iteration   5: 0.068 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.061 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.053, 0.061, 0.068), stdev = 0.007
  CI (99.9%): [0.033, 0.090] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 28.93% complete, ETA 15:49:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
# Warmup Iteration   2: 0.058 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.057 ms/op
# Warmup Iteration   5: 0.052 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.060 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.088 ms/op
Iteration   5: 0.073 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.068 ±(99.9%) 0.052 ms/op [Average]
  (min, avg, max) = (0.053, 0.068, 0.088), stdev = 0.014
  CI (99.9%): [0.016, 0.120] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 29.01% complete, ETA 15:46:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ms/op
# Warmup Iteration   2: 0.073 ms/op
# Warmup Iteration   3: 0.061 ms/op
# Warmup Iteration   4: 0.067 ms/op
# Warmup Iteration   5: 0.064 ms/op
Iteration   1: 0.073 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.086 ms/op
Iteration   4: 0.122 ms/op
Iteration   5: 0.093 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.087 ±(99.9%) 0.085 ms/op [Average]
  (min, avg, max) = (0.064, 0.087, 0.122), stdev = 0.022
  CI (99.9%): [0.002, 0.173] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 29.09% complete, ETA 15:42:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.087 ms/op
# Warmup Iteration   2: 0.079 ms/op
# Warmup Iteration   3: 0.072 ms/op
# Warmup Iteration   4: 0.066 ms/op
# Warmup Iteration   5: 0.062 ms/op
Iteration   1: 0.060 ms/op
Iteration   2: 0.060 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.093 ms/op
Iteration   5: 0.070 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.071 ±(99.9%) 0.053 ms/op [Average]
  (min, avg, max) = (0.060, 0.071, 0.093), stdev = 0.014
  CI (99.9%): [0.018, 0.124] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 29.17% complete, ETA 15:39:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.056 ms/op
# Warmup Iteration   3: 0.063 ms/op
# Warmup Iteration   4: 0.061 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.060 ms/op
Iteration   2: 0.070 ms/op
Iteration   3: 0.097 ms/op
Iteration   4: 0.078 ms/op
Iteration   5: 0.069 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.075 ±(99.9%) 0.053 ms/op [Average]
  (min, avg, max) = (0.060, 0.075, 0.097), stdev = 0.014
  CI (99.9%): [0.022, 0.128] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 29.25% complete, ETA 15:36:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.084 ms/op
# Warmup Iteration   2: 0.058 ms/op
# Warmup Iteration   3: 0.064 ms/op
# Warmup Iteration   4: 0.071 ms/op
# Warmup Iteration   5: 0.064 ms/op
Iteration   1: 0.060 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.105 ms/op
Iteration   4: 0.087 ms/op
Iteration   5: 0.073 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.080 ±(99.9%) 0.066 ms/op [Average]
  (min, avg, max) = (0.060, 0.080, 0.105), stdev = 0.017
  CI (99.9%): [0.013, 0.146] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 29.33% complete, ETA 15:33:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.158 ms/op
# Warmup Iteration   2: 0.145 ms/op
# Warmup Iteration   3: 0.143 ms/op
# Warmup Iteration   4: 0.130 ms/op
# Warmup Iteration   5: 0.140 ms/op
Iteration   1: 0.130 ms/op
Iteration   2: 0.116 ms/op
Iteration   3: 0.137 ms/op
Iteration   4: 0.194 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.141 ±(99.9%) 0.118 ms/op [Average]
  (min, avg, max) = (0.116, 0.141, 0.194), stdev = 0.031
  CI (99.9%): [0.023, 0.258] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 29.41% complete, ETA 15:30:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.154 ms/op
# Warmup Iteration   2: 0.119 ms/op
# Warmup Iteration   3: 0.128 ms/op
# Warmup Iteration   4: 0.126 ms/op
# Warmup Iteration   5: 0.116 ms/op
Iteration   1: 0.121 ms/op
Iteration   2: 0.115 ms/op
Iteration   3: 0.154 ms/op
Iteration   4: 0.170 ms/op
Iteration   5: 0.135 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.139 ±(99.9%) 0.089 ms/op [Average]
  (min, avg, max) = (0.115, 0.139, 0.170), stdev = 0.023
  CI (99.9%): [0.050, 0.228] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 29.49% complete, ETA 15:27:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.148 ms/op
# Warmup Iteration   2: 0.129 ms/op
# Warmup Iteration   3: 0.133 ms/op
# Warmup Iteration   4: 0.122 ms/op
# Warmup Iteration   5: 0.120 ms/op
Iteration   1: 0.112 ms/op
Iteration   2: 0.120 ms/op
Iteration   3: 0.169 ms/op
Iteration   4: 0.144 ms/op
Iteration   5: 0.139 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.137 ±(99.9%) 0.086 ms/op [Average]
  (min, avg, max) = (0.112, 0.137, 0.169), stdev = 0.022
  CI (99.9%): [0.051, 0.223] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 29.57% complete, ETA 15:23:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.149 ms/op
# Warmup Iteration   2: 0.122 ms/op
# Warmup Iteration   3: 0.144 ms/op
# Warmup Iteration   4: 0.129 ms/op
# Warmup Iteration   5: 0.126 ms/op
Iteration   1: 0.121 ms/op
Iteration   2: 0.120 ms/op
Iteration   3: 0.153 ms/op
Iteration   4: 0.209 ms/op
Iteration   5: 0.143 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.149 ±(99.9%) 0.140 ms/op [Average]
  (min, avg, max) = (0.120, 0.149, 0.209), stdev = 0.036
  CI (99.9%): [0.009, 0.289] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 29.65% complete, ETA 15:20:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.199 ms/op
# Warmup Iteration   2: 0.110 ms/op
# Warmup Iteration   3: 0.125 ms/op
# Warmup Iteration   4: 0.122 ms/op
# Warmup Iteration   5: 0.112 ms/op
Iteration   1: 0.122 ms/op
Iteration   2: 0.140 ms/op
Iteration   3: 0.181 ms/op
Iteration   4: 0.178 ms/op
Iteration   5: 0.142 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.153 ±(99.9%) 0.098 ms/op [Average]
  (min, avg, max) = (0.122, 0.153, 0.181), stdev = 0.026
  CI (99.9%): [0.054, 0.251] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 29.73% complete, ETA 15:17:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.218 ms/op
# Warmup Iteration   2: 0.111 ms/op
# Warmup Iteration   3: 0.127 ms/op
# Warmup Iteration   4: 0.123 ms/op
# Warmup Iteration   5: 0.133 ms/op
Iteration   1: 0.118 ms/op
Iteration   2: 0.157 ms/op
Iteration   3: 0.185 ms/op
Iteration   4: 0.166 ms/op
Iteration   5: 0.136 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.152 ±(99.9%) 0.100 ms/op [Average]
  (min, avg, max) = (0.118, 0.152, 0.185), stdev = 0.026
  CI (99.9%): [0.052, 0.252] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 29.81% complete, ETA 15:14:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.299 ms/op
# Warmup Iteration   2: 0.262 ms/op
# Warmup Iteration   3: 0.266 ms/op
# Warmup Iteration   4: 0.235 ms/op
# Warmup Iteration   5: 0.254 ms/op
Iteration   1: 0.236 ms/op
Iteration   2: 0.228 ms/op
Iteration   3: 0.321 ms/op
Iteration   4: 0.327 ms/op
Iteration   5: 0.284 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.279 ±(99.9%) 0.178 ms/op [Average]
  (min, avg, max) = (0.228, 0.279, 0.327), stdev = 0.046
  CI (99.9%): [0.101, 0.457] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 29.89% complete, ETA 15:11:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.334 ms/op
# Warmup Iteration   2: 0.218 ms/op
# Warmup Iteration   3: 0.277 ms/op
# Warmup Iteration   4: 0.256 ms/op
# Warmup Iteration   5: 0.247 ms/op
Iteration   1: 0.234 ms/op
Iteration   2: 0.256 ms/op
Iteration   3: 0.345 ms/op
Iteration   4: 0.356 ms/op
Iteration   5: 0.277 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.294 ±(99.9%) 0.209 ms/op [Average]
  (min, avg, max) = (0.234, 0.294, 0.356), stdev = 0.054
  CI (99.9%): [0.085, 0.503] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 29.97% complete, ETA 15:08:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.335 ms/op
# Warmup Iteration   2: 0.255 ms/op
# Warmup Iteration   3: 0.266 ms/op
# Warmup Iteration   4: 0.255 ms/op
# Warmup Iteration   5: 0.265 ms/op
Iteration   1: 0.234 ms/op
Iteration   2: 0.228 ms/op
Iteration   3: 0.314 ms/op
Iteration   4: 0.309 ms/op
Iteration   5: 0.285 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.274 ±(99.9%) 0.157 ms/op [Average]
  (min, avg, max) = (0.228, 0.274, 0.314), stdev = 0.041
  CI (99.9%): [0.117, 0.431] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 30.05% complete, ETA 15:05:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.286 ms/op
# Warmup Iteration   2: 0.246 ms/op
# Warmup Iteration   3: 0.236 ms/op
# Warmup Iteration   4: 0.237 ms/op
# Warmup Iteration   5: 0.221 ms/op
Iteration   1: 0.239 ms/op
Iteration   2: 0.214 ms/op
Iteration   3: 0.319 ms/op
Iteration   4: 0.347 ms/op
Iteration   5: 0.270 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.278 ±(99.9%) 0.212 ms/op [Average]
  (min, avg, max) = (0.214, 0.278, 0.347), stdev = 0.055
  CI (99.9%): [0.066, 0.490] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 30.13% complete, ETA 15:02:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.329 ms/op
# Warmup Iteration   2: 0.235 ms/op
# Warmup Iteration   3: 0.225 ms/op
# Warmup Iteration   4: 0.265 ms/op
# Warmup Iteration   5: 0.209 ms/op
Iteration   1: 0.208 ms/op
Iteration   2: 0.250 ms/op
Iteration   3: 0.363 ms/op
Iteration   4: 0.249 ms/op
Iteration   5: 0.242 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.263 ±(99.9%) 0.226 ms/op [Average]
  (min, avg, max) = (0.208, 0.263, 0.363), stdev = 0.059
  CI (99.9%): [0.037, 0.488] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 30.21% complete, ETA 14:59:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.273 ms/op
# Warmup Iteration   2: 0.214 ms/op
# Warmup Iteration   3: 0.224 ms/op
# Warmup Iteration   4: 0.231 ms/op
# Warmup Iteration   5: 0.225 ms/op
Iteration   1: 0.224 ms/op
Iteration   2: 0.242 ms/op
Iteration   3: 0.393 ms/op
Iteration   4: 0.298 ms/op
Iteration   5: 0.261 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.284 ±(99.9%) 0.257 ms/op [Average]
  (min, avg, max) = (0.224, 0.284, 0.393), stdev = 0.067
  CI (99.9%): [0.027, 0.541] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 30.29% complete, ETA 14:56:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.694 ms/op
# Warmup Iteration   2: 0.507 ms/op
# Warmup Iteration   3: 0.512 ms/op
# Warmup Iteration   4: 0.521 ms/op
# Warmup Iteration   5: 0.509 ms/op
Iteration   1: 0.485 ms/op
Iteration   2: 0.495 ms/op
Iteration   3: 0.787 ms/op
Iteration   4: 1.260 ms/op
Iteration   5: 0.892 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.784 ±(99.9%) 1.236 ms/op [Average]
  (min, avg, max) = (0.485, 0.784, 1.260), stdev = 0.321
  CI (99.9%): [? 0, 2.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 30.37% complete, ETA 14:53:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.769 ms/op
# Warmup Iteration   2: 0.511 ms/op
# Warmup Iteration   3: 0.512 ms/op
# Warmup Iteration   4: 0.513 ms/op
# Warmup Iteration   5: 0.501 ms/op
Iteration   1: 0.522 ms/op
Iteration   2: 0.515 ms/op
Iteration   3: 0.664 ms/op
Iteration   4: 0.612 ms/op
Iteration   5: 0.532 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.569 ±(99.9%) 0.254 ms/op [Average]
  (min, avg, max) = (0.515, 0.569, 0.664), stdev = 0.066
  CI (99.9%): [0.315, 0.823] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 30.45% complete, ETA 14:50:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.732 ms/op
# Warmup Iteration   2: 0.533 ms/op
# Warmup Iteration   3: 0.620 ms/op
# Warmup Iteration   4: 0.622 ms/op
# Warmup Iteration   5: 0.631 ms/op
Iteration   1: 0.488 ms/op
Iteration   2: 0.500 ms/op
Iteration   3: 0.595 ms/op
Iteration   4: 0.820 ms/op
Iteration   5: 0.531 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.587 ±(99.9%) 0.527 ms/op [Average]
  (min, avg, max) = (0.488, 0.587, 0.820), stdev = 0.137
  CI (99.9%): [0.060, 1.114] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 30.53% complete, ETA 14:47:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.762 ms/op
# Warmup Iteration   2: 0.517 ms/op
# Warmup Iteration   3: 0.508 ms/op
# Warmup Iteration   4: 0.529 ms/op
# Warmup Iteration   5: 0.508 ms/op
Iteration   1: 0.481 ms/op
Iteration   2: 0.539 ms/op
Iteration   3: 0.639 ms/op
Iteration   4: 0.969 ms/op
Iteration   5: 0.661 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.658 ±(99.9%) 0.727 ms/op [Average]
  (min, avg, max) = (0.481, 0.658, 0.969), stdev = 0.189
  CI (99.9%): [? 0, 1.385] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 30.61% complete, ETA 14:44:43
# Fork: 1 of 1
# Warmup Iteration   1: 1.065 ms/op
# Warmup Iteration   2: 0.656 ms/op
# Warmup Iteration   3: 0.612 ms/op
# Warmup Iteration   4: 0.638 ms/op
# Warmup Iteration   5: 0.655 ms/op
Iteration   1: 0.593 ms/op
Iteration   2: 0.825 ms/op
Iteration   3: 0.743 ms/op
Iteration   4: 0.594 ms/op
Iteration   5: 0.587 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.668 ±(99.9%) 0.421 ms/op [Average]
  (min, avg, max) = (0.587, 0.668, 0.825), stdev = 0.109
  CI (99.9%): [0.247, 1.089] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 30.69% complete, ETA 14:41:50
# Fork: 1 of 1
# Warmup Iteration   1: 1.037 ms/op
# Warmup Iteration   2: 0.670 ms/op
# Warmup Iteration   3: 0.770 ms/op
# Warmup Iteration   4: 0.608 ms/op
# Warmup Iteration   5: 0.589 ms/op
Iteration   1: 0.589 ms/op
Iteration   2: 0.672 ms/op
Iteration   3: 0.931 ms/op
Iteration   4: 0.628 ms/op
Iteration   5: 0.539 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.672 ±(99.9%) 0.588 ms/op [Average]
  (min, avg, max) = (0.539, 0.672, 0.931), stdev = 0.153
  CI (99.9%): [0.084, 1.260] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 30.77% complete, ETA 14:38:58
# Fork: 1 of 1
# Warmup Iteration   1: 1.214 ms/op
# Warmup Iteration   2: 0.946 ms/op
# Warmup Iteration   3: 0.965 ms/op
# Warmup Iteration   4: 0.990 ms/op
# Warmup Iteration   5: 0.850 ms/op
Iteration   1: 0.861 ms/op
Iteration   2: 0.904 ms/op
Iteration   3: 1.184 ms/op
Iteration   4: 1.103 ms/op
Iteration   5: 0.906 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.991 ±(99.9%) 0.549 ms/op [Average]
  (min, avg, max) = (0.861, 0.991, 1.184), stdev = 0.143
  CI (99.9%): [0.442, 1.541] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 30.85% complete, ETA 14:36:04
# Fork: 1 of 1
# Warmup Iteration   1: 1.219 ms/op
# Warmup Iteration   2: 0.860 ms/op
# Warmup Iteration   3: 0.929 ms/op
# Warmup Iteration   4: 0.912 ms/op
# Warmup Iteration   5: 0.866 ms/op
Iteration   1: 0.840 ms/op
Iteration   2: 0.883 ms/op
Iteration   3: 0.959 ms/op
Iteration   4: 0.994 ms/op
Iteration   5: 0.978 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.931 ±(99.9%) 0.255 ms/op [Average]
  (min, avg, max) = (0.840, 0.931, 0.994), stdev = 0.066
  CI (99.9%): [0.676, 1.186] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 30.93% complete, ETA 14:33:11
# Fork: 1 of 1
# Warmup Iteration   1: 1.130 ms/op
# Warmup Iteration   2: 0.953 ms/op
# Warmup Iteration   3: 0.799 ms/op
# Warmup Iteration   4: 0.863 ms/op
# Warmup Iteration   5: 0.832 ms/op
Iteration   1: 0.774 ms/op
Iteration   2: 0.867 ms/op
Iteration   3: 0.905 ms/op
Iteration   4: 1.086 ms/op
Iteration   5: 1.140 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.954 ±(99.9%) 0.590 ms/op [Average]
  (min, avg, max) = (0.774, 0.954, 1.140), stdev = 0.153
  CI (99.9%): [0.364, 1.545] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 31.01% complete, ETA 14:30:19
# Fork: 1 of 1
# Warmup Iteration   1: 1.246 ms/op
# Warmup Iteration   2: 0.982 ms/op
# Warmup Iteration   3: 0.999 ms/op
# Warmup Iteration   4: 0.875 ms/op
# Warmup Iteration   5: 0.946 ms/op
Iteration   1: 0.990 ms/op
Iteration   2: 0.965 ms/op
Iteration   3: 1.279 ms/op
Iteration   4: 1.522 ms/op
Iteration   5: 1.301 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.212 ±(99.9%) 0.900 ms/op [Average]
  (min, avg, max) = (0.965, 1.212, 1.522), stdev = 0.234
  CI (99.9%): [0.312, 2.111] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 31.09% complete, ETA 14:27:28
# Fork: 1 of 1
# Warmup Iteration   1: 1.392 ms/op
# Warmup Iteration   2: 0.969 ms/op
# Warmup Iteration   3: 0.986 ms/op
# Warmup Iteration   4: 1.081 ms/op
# Warmup Iteration   5: 1.057 ms/op
Iteration   1: 0.864 ms/op
Iteration   2: 1.032 ms/op
Iteration   3: 1.353 ms/op
Iteration   4: 1.290 ms/op
Iteration   5: 1.076 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.123 ±(99.9%) 0.766 ms/op [Average]
  (min, avg, max) = (0.864, 1.123, 1.353), stdev = 0.199
  CI (99.9%): [0.357, 1.890] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 31.17% complete, ETA 14:24:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.979 ms/op
# Warmup Iteration   2: 0.774 ms/op
# Warmup Iteration   3: 0.787 ms/op
# Warmup Iteration   4: 0.833 ms/op
# Warmup Iteration   5: 0.832 ms/op
Iteration   1: 0.784 ms/op
Iteration   2: 0.932 ms/op
Iteration   3: 1.192 ms/op
Iteration   4: 0.953 ms/op
Iteration   5: 0.901 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.953 ±(99.9%) 0.574 ms/op [Average]
  (min, avg, max) = (0.784, 0.953, 1.192), stdev = 0.149
  CI (99.9%): [0.378, 1.527] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 31.25% complete, ETA 14:21:51
# Fork: 1 of 1
# Warmup Iteration   1: 2.973 ms/op
# Warmup Iteration   2: 1.952 ms/op
# Warmup Iteration   3: 2.097 ms/op
# Warmup Iteration   4: 1.997 ms/op
# Warmup Iteration   5: 1.958 ms/op
Iteration   1: 2.011 ms/op
Iteration   2: 1.854 ms/op
Iteration   3: 2.565 ms/op
Iteration   4: 2.777 ms/op
Iteration   5: 2.283 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.298 ±(99.9%) 1.467 ms/op [Average]
  (min, avg, max) = (1.854, 2.298, 2.777), stdev = 0.381
  CI (99.9%): [0.831, 3.764] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 31.33% complete, ETA 14:19:02
# Fork: 1 of 1
# Warmup Iteration   1: 2.668 ms/op
# Warmup Iteration   2: 2.484 ms/op
# Warmup Iteration   3: 2.210 ms/op
# Warmup Iteration   4: 2.311 ms/op
# Warmup Iteration   5: 2.287 ms/op
Iteration   1: 2.547 ms/op
Iteration   2: 2.238 ms/op
Iteration   3: 2.823 ms/op
Iteration   4: 4.181 ms/op
Iteration   5: 4.277 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  3.213 ±(99.9%) 3.661 ms/op [Average]
  (min, avg, max) = (2.238, 3.213, 4.277), stdev = 0.951
  CI (99.9%): [? 0, 6.874] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 31.41% complete, ETA 14:16:15
# Fork: 1 of 1
# Warmup Iteration   1: 3.281 ms/op
# Warmup Iteration   2: 2.800 ms/op
# Warmup Iteration   3: 2.678 ms/op
# Warmup Iteration   4: 2.413 ms/op
# Warmup Iteration   5: 2.462 ms/op
Iteration   1: 2.526 ms/op
Iteration   2: 2.638 ms/op
Iteration   3: 3.476 ms/op
Iteration   4: 3.688 ms/op
Iteration   5: 3.867 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  3.239 ±(99.9%) 2.375 ms/op [Average]
  (min, avg, max) = (2.526, 3.239, 3.867), stdev = 0.617
  CI (99.9%): [0.864, 5.614] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 31.49% complete, ETA 14:13:27
# Fork: 1 of 1
# Warmup Iteration   1: 3.772 ms/op
# Warmup Iteration   2: 2.878 ms/op
# Warmup Iteration   3: 2.980 ms/op
# Warmup Iteration   4: 2.418 ms/op
# Warmup Iteration   5: 2.453 ms/op
Iteration   1: 2.697 ms/op
Iteration   2: 1.980 ms/op
Iteration   3: 2.550 ms/op
Iteration   4: 3.051 ms/op
Iteration   5: 2.276 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.511 ±(99.9%) 1.569 ms/op [Average]
  (min, avg, max) = (1.980, 2.511, 3.051), stdev = 0.408
  CI (99.9%): [0.941, 4.080] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 31.57% complete, ETA 14:10:41
# Fork: 1 of 1
# Warmup Iteration   1: 2.626 ms/op
# Warmup Iteration   2: 1.654 ms/op
# Warmup Iteration   3: 1.691 ms/op
# Warmup Iteration   4: 1.723 ms/op
# Warmup Iteration   5: 1.697 ms/op
Iteration   1: 1.626 ms/op
Iteration   2: 2.024 ms/op
Iteration   3: 2.329 ms/op
Iteration   4: 1.863 ms/op
Iteration   5: 1.845 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.938 ±(99.9%) 1.004 ms/op [Average]
  (min, avg, max) = (1.626, 1.938, 2.329), stdev = 0.261
  CI (99.9%): [0.933, 2.942] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 31.65% complete, ETA 14:07:57
# Fork: 1 of 1
# Warmup Iteration   1: 1.945 ms/op
# Warmup Iteration   2: 1.672 ms/op
# Warmup Iteration   3: 1.752 ms/op
# Warmup Iteration   4: 1.831 ms/op
# Warmup Iteration   5: 1.725 ms/op
Iteration   1: 1.701 ms/op
Iteration   2: 1.881 ms/op
Iteration   3: 2.744 ms/op
Iteration   4: 2.022 ms/op
Iteration   5: 1.973 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.064 ±(99.9%) 1.537 ms/op [Average]
  (min, avg, max) = (1.701, 2.064, 2.744), stdev = 0.399
  CI (99.9%): [0.527, 3.601] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 31.73% complete, ETA 14:05:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 31.81% complete, ETA 14:02:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 31.89% complete, ETA 13:59:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 31.97% complete, ETA 13:57:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 32.05% complete, ETA 13:54:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 32.13% complete, ETA 13:51:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 32.21% complete, ETA 13:48:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 32.29% complete, ETA 13:46:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 10??, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 32.37% complete, ETA 13:43:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 32.45% complete, ETA 13:41:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 32.53% complete, ETA 13:38:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 32.61% complete, ETA 13:35:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 32.69% complete, ETA 13:33:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.001
  CI (99.9%): [0.001, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 32.77% complete, ETA 13:30:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.002, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 32.85% complete, ETA 13:28:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.007 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 32.93% complete, ETA 13:25:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.007 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.008), stdev = 0.001
  CI (99.9%): [0.005, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 33.01% complete, ETA 13:22:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.008 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.011), stdev = 0.002
  CI (99.9%): [? 0, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 33.09% complete, ETA 13:20:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.002, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 33.17% complete, ETA 13:17:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.014 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.010, 0.014, 0.020), stdev = 0.004
  CI (99.9%): [? 0, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 33.25% complete, ETA 13:15:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.013 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.009, 0.013, 0.017), stdev = 0.003
  CI (99.9%): [? 0, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 33.33% complete, ETA 13:12:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.013 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.016), stdev = 0.003
  CI (99.9%): [0.001, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 33.41% complete, ETA 13:10:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.013 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.009, 0.013, 0.017), stdev = 0.003
  CI (99.9%): [? 0, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 33.49% complete, ETA 13:07:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.012 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.010, 0.012, 0.015), stdev = 0.002
  CI (99.9%): [0.003, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 33.57% complete, ETA 13:05:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.014 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.010, 0.014, 0.018), stdev = 0.004
  CI (99.9%): [? 10?³, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 33.65% complete, ETA 13:02:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.024 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.019, 0.024, 0.028), stdev = 0.004
  CI (99.9%): [0.006, 0.041] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 33.73% complete, ETA 13:00:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.024 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.019, 0.024, 0.028), stdev = 0.004
  CI (99.9%): [0.008, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 33.81% complete, ETA 12:57:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.024 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.019, 0.024, 0.028), stdev = 0.004
  CI (99.9%): [0.007, 0.041] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 33.89% complete, ETA 12:55:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.032 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.025 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.021, 0.025, 0.032), stdev = 0.004
  CI (99.9%): [0.008, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 33.97% complete, ETA 12:53:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.032 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.025, 0.032, 0.041), stdev = 0.007
  CI (99.9%): [0.005, 0.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 34.05% complete, ETA 12:50:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.028 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.021, 0.028, 0.034), stdev = 0.006
  CI (99.9%): [0.004, 0.052] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 34.13% complete, ETA 12:48:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.060 ms/op
# Warmup Iteration   2: 0.053 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.038 ms/op
# Warmup Iteration   5: 0.040 ms/op
Iteration   1: 0.040 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.061 ms/op
Iteration   5: 0.056 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.049 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.040, 0.049, 0.061), stdev = 0.010
  CI (99.9%): [0.012, 0.086] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 34.21% complete, ETA 12:45:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.035 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.037 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.057 ms/op
Iteration   5: 0.056 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.046 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.037, 0.046, 0.057), stdev = 0.010
  CI (99.9%): [0.007, 0.085] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 34.29% complete, ETA 12:43:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.038 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.046 ms/op
Iteration   2: 0.049 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.061 ms/op
Iteration   5: 0.063 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.054 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.046, 0.054, 0.063), stdev = 0.008
  CI (99.9%): [0.023, 0.084] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 34.38% complete, ETA 12:41:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
# Warmup Iteration   2: 0.042 ms/op
# Warmup Iteration   3: 0.040 ms/op
# Warmup Iteration   4: 0.039 ms/op
# Warmup Iteration   5: 0.040 ms/op
Iteration   1: 0.039 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.060 ms/op
Iteration   5: 0.064 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.049 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (0.039, 0.049, 0.064), stdev = 0.012
  CI (99.9%): [0.005, 0.094] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 34.46% complete, ETA 12:38:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.039 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.039 ms/op
# Warmup Iteration   5: 0.042 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.041 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.068 ms/op
Iteration   5: 0.067 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.054 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (0.041, 0.054, 0.068), stdev = 0.013
  CI (99.9%): [0.006, 0.103] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 34.54% complete, ETA 12:36:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.055 ms/op
# Warmup Iteration   2: 0.039 ms/op
# Warmup Iteration   3: 0.041 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.037 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.057 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.046 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.035, 0.046, 0.057), stdev = 0.010
  CI (99.9%): [0.009, 0.082] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 34.62% complete, ETA 12:34:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.096 ms/op
# Warmup Iteration   2: 0.092 ms/op
# Warmup Iteration   3: 0.079 ms/op
# Warmup Iteration   4: 0.078 ms/op
# Warmup Iteration   5: 0.085 ms/op
Iteration   1: 0.090 ms/op
Iteration   2: 0.079 ms/op
Iteration   3: 0.098 ms/op
Iteration   4: 0.128 ms/op
Iteration   5: 0.123 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.103 ±(99.9%) 0.082 ms/op [Average]
  (min, avg, max) = (0.079, 0.103, 0.128), stdev = 0.021
  CI (99.9%): [0.021, 0.186] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 34.70% complete, ETA 12:31:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.100 ms/op
# Warmup Iteration   2: 0.078 ms/op
# Warmup Iteration   3: 0.084 ms/op
# Warmup Iteration   4: 0.100 ms/op
# Warmup Iteration   5: 0.081 ms/op
Iteration   1: 0.092 ms/op
Iteration   2: 0.091 ms/op
Iteration   3: 0.084 ms/op
Iteration   4: 0.118 ms/op
Iteration   5: 0.112 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.099 ±(99.9%) 0.058 ms/op [Average]
  (min, avg, max) = (0.084, 0.099, 0.118), stdev = 0.015
  CI (99.9%): [0.042, 0.157] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 34.78% complete, ETA 12:29:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.101 ms/op
# Warmup Iteration   2: 0.078 ms/op
# Warmup Iteration   3: 0.084 ms/op
# Warmup Iteration   4: 0.087 ms/op
# Warmup Iteration   5: 0.084 ms/op
Iteration   1: 0.088 ms/op
Iteration   2: 0.080 ms/op
Iteration   3: 0.095 ms/op
Iteration   4: 0.116 ms/op
Iteration   5: 0.129 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.102 ±(99.9%) 0.078 ms/op [Average]
  (min, avg, max) = (0.080, 0.102, 0.129), stdev = 0.020
  CI (99.9%): [0.023, 0.180] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 34.86% complete, ETA 12:27:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.103 ms/op
# Warmup Iteration   2: 0.081 ms/op
# Warmup Iteration   3: 0.089 ms/op
# Warmup Iteration   4: 0.087 ms/op
# Warmup Iteration   5: 0.083 ms/op
Iteration   1: 0.084 ms/op
Iteration   2: 0.083 ms/op
Iteration   3: 0.104 ms/op
Iteration   4: 0.143 ms/op
Iteration   5: 0.152 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.113 ±(99.9%) 0.126 ms/op [Average]
  (min, avg, max) = (0.083, 0.113, 0.152), stdev = 0.033
  CI (99.9%): [? 0, 0.239] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 34.94% complete, ETA 12:24:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.116 ms/op
# Warmup Iteration   2: 0.088 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.095 ms/op
# Warmup Iteration   5: 0.100 ms/op
Iteration   1: 0.086 ms/op
Iteration   2: 0.082 ms/op
Iteration   3: 0.122 ms/op
Iteration   4: 0.134 ms/op
Iteration   5: 0.131 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.111 ±(99.9%) 0.095 ms/op [Average]
  (min, avg, max) = (0.082, 0.111, 0.134), stdev = 0.025
  CI (99.9%): [0.016, 0.207] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 35.02% complete, ETA 12:22:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.106 ms/op
# Warmup Iteration   2: 0.082 ms/op
# Warmup Iteration   3: 0.097 ms/op
# Warmup Iteration   4: 0.087 ms/op
# Warmup Iteration   5: 0.084 ms/op
Iteration   1: 0.081 ms/op
Iteration   2: 0.080 ms/op
Iteration   3: 0.123 ms/op
Iteration   4: 0.112 ms/op
Iteration   5: 0.104 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.100 ±(99.9%) 0.074 ms/op [Average]
  (min, avg, max) = (0.080, 0.100, 0.123), stdev = 0.019
  CI (99.9%): [0.026, 0.174] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 35.10% complete, ETA 12:20:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.194 ms/op
# Warmup Iteration   2: 0.163 ms/op
# Warmup Iteration   3: 0.161 ms/op
# Warmup Iteration   4: 0.167 ms/op
# Warmup Iteration   5: 0.151 ms/op
Iteration   1: 0.155 ms/op
Iteration   2: 0.164 ms/op
Iteration   3: 0.210 ms/op
Iteration   4: 0.262 ms/op
Iteration   5: 0.286 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.215 ±(99.9%) 0.223 ms/op [Average]
  (min, avg, max) = (0.155, 0.215, 0.286), stdev = 0.058
  CI (99.9%): [? 0, 0.439] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 35.18% complete, ETA 12:17:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.227 ms/op
# Warmup Iteration   2: 0.192 ms/op
# Warmup Iteration   3: 0.182 ms/op
# Warmup Iteration   4: 0.186 ms/op
# Warmup Iteration   5: 0.184 ms/op
Iteration   1: 0.195 ms/op
Iteration   2: 0.199 ms/op
Iteration   3: 0.242 ms/op
Iteration   4: 0.308 ms/op
Iteration   5: 0.270 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.243 ±(99.9%) 0.184 ms/op [Average]
  (min, avg, max) = (0.195, 0.243, 0.308), stdev = 0.048
  CI (99.9%): [0.058, 0.427] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 35.26% complete, ETA 12:15:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.200 ms/op
# Warmup Iteration   2: 0.186 ms/op
# Warmup Iteration   3: 0.198 ms/op
# Warmup Iteration   4: 0.186 ms/op
# Warmup Iteration   5: 0.210 ms/op
Iteration   1: 0.202 ms/op
Iteration   2: 0.202 ms/op
Iteration   3: 0.292 ms/op
Iteration   4: 0.385 ms/op
Iteration   5: 0.438 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.304 ±(99.9%) 0.410 ms/op [Average]
  (min, avg, max) = (0.202, 0.304, 0.438), stdev = 0.107
  CI (99.9%): [? 0, 0.714] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 35.34% complete, ETA 12:13:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.289 ms/op
# Warmup Iteration   2: 0.211 ms/op
# Warmup Iteration   3: 0.217 ms/op
# Warmup Iteration   4: 0.217 ms/op
# Warmup Iteration   5: 0.227 ms/op
Iteration   1: 0.232 ms/op
Iteration   2: 0.231 ms/op
Iteration   3: 0.323 ms/op
Iteration   4: 0.395 ms/op
Iteration   5: 0.351 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.306 ±(99.9%) 0.283 ms/op [Average]
  (min, avg, max) = (0.231, 0.306, 0.395), stdev = 0.073
  CI (99.9%): [0.024, 0.589] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 35.42% complete, ETA 12:11:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.339 ms/op
# Warmup Iteration   2: 0.212 ms/op
# Warmup Iteration   3: 0.177 ms/op
# Warmup Iteration   4: 0.194 ms/op
# Warmup Iteration   5: 0.197 ms/op
Iteration   1: 0.193 ms/op
Iteration   2: 0.187 ms/op
Iteration   3: 0.313 ms/op
Iteration   4: 0.321 ms/op
Iteration   5: 0.260 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.255 ±(99.9%) 0.246 ms/op [Average]
  (min, avg, max) = (0.187, 0.255, 0.321), stdev = 0.064
  CI (99.9%): [0.009, 0.501] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 35.50% complete, ETA 12:08:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.245 ms/op
# Warmup Iteration   2: 0.182 ms/op
# Warmup Iteration   3: 0.153 ms/op
# Warmup Iteration   4: 0.158 ms/op
# Warmup Iteration   5: 0.152 ms/op
Iteration   1: 0.152 ms/op
Iteration   2: 0.151 ms/op
Iteration   3: 0.199 ms/op
Iteration   4: 0.226 ms/op
Iteration   5: 0.228 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.191 ±(99.9%) 0.146 ms/op [Average]
  (min, avg, max) = (0.151, 0.191, 0.228), stdev = 0.038
  CI (99.9%): [0.045, 0.337] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 35.58% complete, ETA 12:06:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.367 ms/op
# Warmup Iteration   2: 0.298 ms/op
# Warmup Iteration   3: 0.333 ms/op
# Warmup Iteration   4: 0.396 ms/op
# Warmup Iteration   5: 0.363 ms/op
Iteration   1: 0.408 ms/op
Iteration   2: 0.382 ms/op
Iteration   3: 0.451 ms/op
Iteration   4: 0.535 ms/op
Iteration   5: 0.537 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.463 ±(99.9%) 0.275 ms/op [Average]
  (min, avg, max) = (0.382, 0.463, 0.537), stdev = 0.071
  CI (99.9%): [0.188, 0.737] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 35.66% complete, ETA 12:04:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.447 ms/op
# Warmup Iteration   2: 0.322 ms/op
# Warmup Iteration   3: 0.316 ms/op
# Warmup Iteration   4: 0.326 ms/op
# Warmup Iteration   5: 0.378 ms/op
Iteration   1: 0.349 ms/op
Iteration   2: 0.332 ms/op
Iteration   3: 0.444 ms/op
Iteration   4: 0.625 ms/op
Iteration   5: 0.598 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.470 ±(99.9%) 0.526 ms/op [Average]
  (min, avg, max) = (0.332, 0.470, 0.625), stdev = 0.137
  CI (99.9%): [? 0, 0.996] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 35.74% complete, ETA 12:02:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.418 ms/op
# Warmup Iteration   2: 0.339 ms/op
# Warmup Iteration   3: 0.349 ms/op
# Warmup Iteration   4: 0.351 ms/op
# Warmup Iteration   5: 0.334 ms/op
Iteration   1: 0.382 ms/op
Iteration   2: 0.367 ms/op
Iteration   3: 0.492 ms/op
Iteration   4: 0.635 ms/op
Iteration   5: 0.579 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.491 ±(99.9%) 0.454 ms/op [Average]
  (min, avg, max) = (0.367, 0.491, 0.635), stdev = 0.118
  CI (99.9%): [0.037, 0.945] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 35.82% complete, ETA 12:00:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.481 ms/op
# Warmup Iteration   2: 0.338 ms/op
# Warmup Iteration   3: 0.349 ms/op
# Warmup Iteration   4: 0.367 ms/op
# Warmup Iteration   5: 0.403 ms/op
Iteration   1: 0.413 ms/op
Iteration   2: 0.390 ms/op
Iteration   3: 0.471 ms/op
Iteration   4: 0.724 ms/op
Iteration   5: 0.560 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.512 ±(99.9%) 0.522 ms/op [Average]
  (min, avg, max) = (0.390, 0.512, 0.724), stdev = 0.136
  CI (99.9%): [? 0, 1.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 35.90% complete, ETA 11:57:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.476 ms/op
# Warmup Iteration   2: 0.378 ms/op
# Warmup Iteration   3: 0.363 ms/op
# Warmup Iteration   4: 0.395 ms/op
# Warmup Iteration   5: 0.429 ms/op
Iteration   1: 0.435 ms/op
Iteration   2: 0.384 ms/op
Iteration   3: 0.531 ms/op
Iteration   4: 0.616 ms/op
Iteration   5: 0.484 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.490 ±(99.9%) 0.344 ms/op [Average]
  (min, avg, max) = (0.384, 0.490, 0.616), stdev = 0.089
  CI (99.9%): [0.146, 0.834] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 35.98% complete, ETA 11:55:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.483 ms/op
# Warmup Iteration   2: 0.342 ms/op
# Warmup Iteration   3: 0.353 ms/op
# Warmup Iteration   4: 0.360 ms/op
# Warmup Iteration   5: 0.342 ms/op
Iteration   1: 0.342 ms/op
Iteration   2: 0.339 ms/op
Iteration   3: 0.536 ms/op
Iteration   4: 0.930 ms/op
Iteration   5: 0.752 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.580 ±(99.9%) 0.997 ms/op [Average]
  (min, avg, max) = (0.339, 0.580, 0.930), stdev = 0.259
  CI (99.9%): [? 0, 1.577] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 36.06% complete, ETA 11:53:35
# Fork: 1 of 1
# Warmup Iteration   1: 1.218 ms/op
# Warmup Iteration   2: 0.951 ms/op
# Warmup Iteration   3: 0.878 ms/op
# Warmup Iteration   4: 0.830 ms/op
# Warmup Iteration   5: 0.810 ms/op
Iteration   1: 0.780 ms/op
Iteration   2: 0.796 ms/op
Iteration   3: 1.064 ms/op
Iteration   4: 1.359 ms/op
Iteration   5: 1.236 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.047 ±(99.9%) 0.996 ms/op [Average]
  (min, avg, max) = (0.780, 1.047, 1.359), stdev = 0.259
  CI (99.9%): [0.051, 2.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 36.14% complete, ETA 11:51:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.896 ms/op
# Warmup Iteration   2: 0.831 ms/op
# Warmup Iteration   3: 0.770 ms/op
# Warmup Iteration   4: 0.726 ms/op
# Warmup Iteration   5: 0.729 ms/op
Iteration   1: 0.693 ms/op
Iteration   2: 0.698 ms/op
Iteration   3: 0.824 ms/op
Iteration   4: 1.089 ms/op
Iteration   5: 1.064 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.874 ±(99.9%) 0.742 ms/op [Average]
  (min, avg, max) = (0.693, 0.874, 1.089), stdev = 0.193
  CI (99.9%): [0.132, 1.615] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 36.22% complete, ETA 11:49:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.828 ms/op
# Warmup Iteration   2: 0.702 ms/op
# Warmup Iteration   3: 0.685 ms/op
# Warmup Iteration   4: 0.640 ms/op
# Warmup Iteration   5: 0.609 ms/op
Iteration   1: 0.604 ms/op
Iteration   2: 0.597 ms/op
Iteration   3: 0.732 ms/op
Iteration   4: 0.867 ms/op
Iteration   5: 0.900 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.740 ±(99.9%) 0.548 ms/op [Average]
  (min, avg, max) = (0.597, 0.740, 0.900), stdev = 0.142
  CI (99.9%): [0.192, 1.288] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 36.30% complete, ETA 11:47:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.746 ms/op
# Warmup Iteration   2: 0.624 ms/op
# Warmup Iteration   3: 0.673 ms/op
# Warmup Iteration   4: 0.686 ms/op
# Warmup Iteration   5: 0.686 ms/op
Iteration   1: 0.784 ms/op
Iteration   2: 0.738 ms/op
Iteration   3: 0.756 ms/op
Iteration   4: 1.165 ms/op
Iteration   5: 1.072 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.903 ±(99.9%) 0.771 ms/op [Average]
  (min, avg, max) = (0.738, 0.903, 1.165), stdev = 0.200
  CI (99.9%): [0.132, 1.674] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 36.38% complete, ETA 11:44:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.905 ms/op
# Warmup Iteration   2: 0.776 ms/op
# Warmup Iteration   3: 0.757 ms/op
# Warmup Iteration   4: 0.746 ms/op
# Warmup Iteration   5: 0.695 ms/op
Iteration   1: 0.670 ms/op
Iteration   2: 0.625 ms/op
Iteration   3: 0.843 ms/op
Iteration   4: 0.976 ms/op
Iteration   5: 1.028 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.828 ±(99.9%) 0.688 ms/op [Average]
  (min, avg, max) = (0.625, 0.828, 1.028), stdev = 0.179
  CI (99.9%): [0.140, 1.517] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 36.46% complete, ETA 11:42:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.796 ms/op
# Warmup Iteration   2: 0.562 ms/op
# Warmup Iteration   3: 0.552 ms/op
# Warmup Iteration   4: 0.561 ms/op
# Warmup Iteration   5: 0.617 ms/op
Iteration   1: 0.584 ms/op
Iteration   2: 0.678 ms/op
Iteration   3: 0.860 ms/op
Iteration   4: 0.897 ms/op
Iteration   5: 1.019 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.808 ±(99.9%) 0.672 ms/op [Average]
  (min, avg, max) = (0.584, 0.808, 1.019), stdev = 0.174
  CI (99.9%): [0.136, 1.479] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 36.54% complete, ETA 11:40:45
# Fork: 1 of 1
# Warmup Iteration   1: 1.745 ms/op
# Warmup Iteration   2: 1.339 ms/op
# Warmup Iteration   3: 1.398 ms/op
# Warmup Iteration   4: 1.431 ms/op
# Warmup Iteration   5: 1.389 ms/op
Iteration   1: 1.294 ms/op
Iteration   2: 1.218 ms/op
Iteration   3: 1.617 ms/op
Iteration   4: 2.043 ms/op
Iteration   5: 2.042 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.643 ±(99.9%) 1.518 ms/op [Average]
  (min, avg, max) = (1.218, 1.643, 2.043), stdev = 0.394
  CI (99.9%): [0.125, 3.161] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 36.62% complete, ETA 11:38:38
# Fork: 1 of 1
# Warmup Iteration   1: 1.852 ms/op
# Warmup Iteration   2: 1.590 ms/op
# Warmup Iteration   3: 1.385 ms/op
# Warmup Iteration   4: 1.468 ms/op
# Warmup Iteration   5: 1.500 ms/op
Iteration   1: 1.568 ms/op
Iteration   2: 1.387 ms/op
Iteration   3: 2.049 ms/op
Iteration   4: 2.142 ms/op
Iteration   5: 2.050 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.839 ±(99.9%) 1.303 ms/op [Average]
  (min, avg, max) = (1.387, 1.839, 2.142), stdev = 0.338
  CI (99.9%): [0.536, 3.142] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 36.70% complete, ETA 11:36:32
# Fork: 1 of 1
# Warmup Iteration   1: 1.773 ms/op
# Warmup Iteration   2: 1.409 ms/op
# Warmup Iteration   3: 1.348 ms/op
# Warmup Iteration   4: 1.523 ms/op
# Warmup Iteration   5: 1.591 ms/op
Iteration   1: 1.534 ms/op
Iteration   2: 1.311 ms/op
Iteration   3: 1.739 ms/op
Iteration   4: 2.483 ms/op
Iteration   5: 1.976 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.809 ±(99.9%) 1.734 ms/op [Average]
  (min, avg, max) = (1.311, 1.809, 2.483), stdev = 0.450
  CI (99.9%): [0.075, 3.542] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 36.78% complete, ETA 11:34:26
# Fork: 1 of 1
# Warmup Iteration   1: 1.566 ms/op
# Warmup Iteration   2: 1.385 ms/op
# Warmup Iteration   3: 1.470 ms/op
# Warmup Iteration   4: 1.342 ms/op
# Warmup Iteration   5: 1.342 ms/op
Iteration   1: 1.357 ms/op
Iteration   2: 1.449 ms/op
Iteration   3: 2.194 ms/op
Iteration   4: 2.231 ms/op
Iteration   5: 2.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.848 ±(99.9%) 1.601 ms/op [Average]
  (min, avg, max) = (1.357, 1.848, 2.231), stdev = 0.416
  CI (99.9%): [0.247, 3.449] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 36.86% complete, ETA 11:32:21
# Fork: 1 of 1
# Warmup Iteration   1: 1.660 ms/op
# Warmup Iteration   2: 1.277 ms/op
# Warmup Iteration   3: 1.299 ms/op
# Warmup Iteration   4: 1.284 ms/op
# Warmup Iteration   5: 1.299 ms/op
Iteration   1: 1.271 ms/op
Iteration   2: 1.273 ms/op
Iteration   3: 1.838 ms/op
Iteration   4: 2.034 ms/op
Iteration   5: 1.964 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.676 ±(99.9%) 1.445 ms/op [Average]
  (min, avg, max) = (1.271, 1.676, 2.034), stdev = 0.375
  CI (99.9%): [0.231, 3.121] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 36.94% complete, ETA 11:30:17
# Fork: 1 of 1
# Warmup Iteration   1: 1.683 ms/op
# Warmup Iteration   2: 1.275 ms/op
# Warmup Iteration   3: 1.246 ms/op
# Warmup Iteration   4: 1.516 ms/op
# Warmup Iteration   5: 1.751 ms/op
Iteration   1: 1.906 ms/op
Iteration   2: 1.434 ms/op
Iteration   3: 1.989 ms/op
Iteration   4: 1.891 ms/op
Iteration   5: 2.127 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.870 ±(99.9%) 1.005 ms/op [Average]
  (min, avg, max) = (1.434, 1.870, 2.127), stdev = 0.261
  CI (99.9%): [0.865, 2.874] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 37.02% complete, ETA 11:28:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 37.10% complete, ETA 11:26:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 37.18% complete, ETA 11:24:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 37.26% complete, ETA 11:22:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 37.34% complete, ETA 11:20:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 37.42% complete, ETA 11:18:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 37.50% complete, ETA 11:16:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 37.58% complete, ETA 11:14:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 37.66% complete, ETA 11:11:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 37.74% complete, ETA 11:09:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 37.82% complete, ETA 11:08:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 37.90% complete, ETA 11:06:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 37.98% complete, ETA 11:04:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.006, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 38.06% complete, ETA 11:02:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.005, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 38.14% complete, ETA 11:00:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.004, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 38.22% complete, ETA 10:58:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.004, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 38.30% complete, ETA 10:56:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.002, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 38.38% complete, ETA 10:54:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 38.46% complete, ETA 10:52:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.010 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.010, 0.010, 0.011), stdev = 0.001
  CI (99.9%): [0.010, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 38.54% complete, ETA 10:50:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.010 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.010, 0.010, 0.010), stdev = 0.001
  CI (99.9%): [0.010, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 38.62% complete, ETA 10:48:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.010 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.010, 0.010, 0.010), stdev = 0.001
  CI (99.9%): [0.010, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 38.70% complete, ETA 10:46:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.010 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.010, 0.010, 0.010), stdev = 0.001
  CI (99.9%): [0.010, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 38.78% complete, ETA 10:44:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.011 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.011, 0.011, 0.011), stdev = 0.001
  CI (99.9%): [0.010, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 38.86% complete, ETA 10:42:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.011 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.011, 0.011, 0.011), stdev = 0.001
  CI (99.9%): [0.010, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 38.94% complete, ETA 10:41:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.028 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.023 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.023, 0.023, 0.023), stdev = 0.001
  CI (99.9%): [0.023, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 39.02% complete, ETA 10:39:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.024 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.023, 0.024, 0.025), stdev = 0.001
  CI (99.9%): [0.020, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 39.10% complete, ETA 10:37:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.024 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.023, 0.024, 0.024), stdev = 0.001
  CI (99.9%): [0.023, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 39.18% complete, ETA 10:35:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.021 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.021, 0.021, 0.021), stdev = 0.001
  CI (99.9%): [0.021, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 39.26% complete, ETA 10:33:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.020 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.019, 0.020, 0.021), stdev = 0.001
  CI (99.9%): [0.017, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 39.34% complete, ETA 10:31:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.022 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.020, 0.022, 0.024), stdev = 0.002
  CI (99.9%): [0.016, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 39.42% complete, ETA 10:29:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.040 ms/op
# Warmup Iteration   3: 0.041 ms/op
# Warmup Iteration   4: 0.041 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.040 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.041 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.041 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.039, 0.041, 0.043), stdev = 0.002
  CI (99.9%): [0.034, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 39.50% complete, ETA 10:28:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.049 ms/op
# Warmup Iteration   4: 0.051 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.042 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.045 ms/op
Iteration   4: 0.040 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.042 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.040, 0.042, 0.045), stdev = 0.002
  CI (99.9%): [0.036, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 39.58% complete, ETA 10:26:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
# Warmup Iteration   2: 0.039 ms/op
# Warmup Iteration   3: 0.041 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.039 ms/op
Iteration   1: 0.041 ms/op
Iteration   2: 0.041 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.040 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.038, 0.040, 0.043), stdev = 0.002
  CI (99.9%): [0.033, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 39.66% complete, ETA 10:24:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.056 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.041 ms/op
# Warmup Iteration   4: 0.041 ms/op
# Warmup Iteration   5: 0.050 ms/op
Iteration   1: 0.042 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.040 ms/op
Iteration   5: 0.041 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.041 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.040, 0.041, 0.043), stdev = 0.001
  CI (99.9%): [0.037, 0.046] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 39.74% complete, ETA 10:22:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.060 ms/op
# Warmup Iteration   2: 0.042 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.039 ms/op
# Warmup Iteration   5: 0.042 ms/op
Iteration   1: 0.042 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: 0.042 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.041 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.039, 0.041, 0.043), stdev = 0.002
  CI (99.9%): [0.036, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 39.82% complete, ETA 10:20:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.082 ms/op
# Warmup Iteration   2: 0.042 ms/op
# Warmup Iteration   3: 0.042 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.040 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: 0.041 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.041 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.042 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.040, 0.042, 0.045), stdev = 0.002
  CI (99.9%): [0.035, 0.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 39.90% complete, ETA 10:19:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.116 ms/op
# Warmup Iteration   2: 0.087 ms/op
# Warmup Iteration   3: 0.083 ms/op
# Warmup Iteration   4: 0.085 ms/op
# Warmup Iteration   5: 0.086 ms/op
Iteration   1: 0.079 ms/op
Iteration   2: 0.087 ms/op
Iteration   3: 0.084 ms/op
Iteration   4: 0.082 ms/op
Iteration   5: 0.089 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.084 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.079, 0.084, 0.089), stdev = 0.004
  CI (99.9%): [0.070, 0.098] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 39.98% complete, ETA 10:17:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.108 ms/op
# Warmup Iteration   2: 0.079 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.080 ms/op
# Warmup Iteration   5: 0.083 ms/op
Iteration   1: 0.086 ms/op
Iteration   2: 0.083 ms/op
Iteration   3: 0.082 ms/op
Iteration   4: 0.090 ms/op
Iteration   5: 0.080 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.084 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.080, 0.084, 0.090), stdev = 0.004
  CI (99.9%): [0.069, 0.100] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 40.06% complete, ETA 10:15:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.105 ms/op
# Warmup Iteration   2: 0.086 ms/op
# Warmup Iteration   3: 0.078 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.087 ms/op
Iteration   1: 0.082 ms/op
Iteration   2: 0.086 ms/op
Iteration   3: 0.090 ms/op
Iteration   4: 0.081 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.086 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.081, 0.086, 0.091), stdev = 0.004
  CI (99.9%): [0.069, 0.103] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 40.14% complete, ETA 10:13:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.111 ms/op
# Warmup Iteration   2: 0.089 ms/op
# Warmup Iteration   3: 0.092 ms/op
# Warmup Iteration   4: 0.087 ms/op
# Warmup Iteration   5: 0.085 ms/op
Iteration   1: 0.095 ms/op
Iteration   2: 0.085 ms/op
Iteration   3: 0.092 ms/op
Iteration   4: 0.095 ms/op
Iteration   5: 0.090 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.091 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.085, 0.091, 0.095), stdev = 0.004
  CI (99.9%): [0.075, 0.108] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 40.22% complete, ETA 10:11:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.194 ms/op
# Warmup Iteration   2: 0.084 ms/op
# Warmup Iteration   3: 0.087 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.080 ms/op
Iteration   1: 0.092 ms/op
Iteration   2: 0.085 ms/op
Iteration   3: 0.083 ms/op
Iteration   4: 0.088 ms/op
Iteration   5: 0.092 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.088 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.083, 0.088, 0.092), stdev = 0.004
  CI (99.9%): [0.073, 0.103] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 40.30% complete, ETA 10:10:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.308 ms/op
# Warmup Iteration   2: 0.113 ms/op
# Warmup Iteration   3: 0.107 ms/op
# Warmup Iteration   4: 0.091 ms/op
# Warmup Iteration   5: 0.087 ms/op
Iteration   1: 0.087 ms/op
Iteration   2: 0.085 ms/op
Iteration   3: 0.086 ms/op
Iteration   4: 0.086 ms/op
Iteration   5: 0.086 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.086 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.085, 0.086, 0.087), stdev = 0.001
  CI (99.9%): [0.083, 0.089] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 40.38% complete, ETA 10:08:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.233 ms/op
# Warmup Iteration   2: 0.168 ms/op
# Warmup Iteration   3: 0.174 ms/op
# Warmup Iteration   4: 0.180 ms/op
# Warmup Iteration   5: 0.180 ms/op
Iteration   1: 0.187 ms/op
Iteration   2: 0.199 ms/op
Iteration   3: 0.228 ms/op
Iteration   4: 0.189 ms/op
Iteration   5: 0.192 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.199 ±(99.9%) 0.065 ms/op [Average]
  (min, avg, max) = (0.187, 0.199, 0.228), stdev = 0.017
  CI (99.9%): [0.134, 0.264] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 40.46% complete, ETA 10:06:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.232 ms/op
# Warmup Iteration   2: 0.179 ms/op
# Warmup Iteration   3: 0.199 ms/op
# Warmup Iteration   4: 0.190 ms/op
# Warmup Iteration   5: 0.189 ms/op
Iteration   1: 0.209 ms/op
Iteration   2: 0.191 ms/op
Iteration   3: 0.179 ms/op
Iteration   4: 0.172 ms/op
Iteration   5: 0.170 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.184 ±(99.9%) 0.062 ms/op [Average]
  (min, avg, max) = (0.170, 0.184, 0.209), stdev = 0.016
  CI (99.9%): [0.122, 0.246] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 40.54% complete, ETA 10:04:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.225 ms/op
# Warmup Iteration   2: 0.170 ms/op
# Warmup Iteration   3: 0.169 ms/op
# Warmup Iteration   4: 0.173 ms/op
# Warmup Iteration   5: 0.173 ms/op
Iteration   1: 0.175 ms/op
Iteration   2: 0.171 ms/op
Iteration   3: 0.172 ms/op
Iteration   4: 0.172 ms/op
Iteration   5: 0.171 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.172 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.171, 0.172, 0.175), stdev = 0.002
  CI (99.9%): [0.166, 0.179] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 40.63% complete, ETA 10:03:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.229 ms/op
# Warmup Iteration   2: 0.174 ms/op
# Warmup Iteration   3: 0.166 ms/op
# Warmup Iteration   4: 0.167 ms/op
# Warmup Iteration   5: 0.166 ms/op
Iteration   1: 0.167 ms/op
Iteration   2: 0.174 ms/op
Iteration   3: 0.168 ms/op
Iteration   4: 0.166 ms/op
Iteration   5: 0.167 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.168 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.166, 0.168, 0.174), stdev = 0.003
  CI (99.9%): [0.156, 0.181] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 40.71% complete, ETA 10:01:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.315 ms/op
# Warmup Iteration   2: 0.164 ms/op
# Warmup Iteration   3: 0.162 ms/op
# Warmup Iteration   4: 0.164 ms/op
# Warmup Iteration   5: 0.164 ms/op
Iteration   1: 0.162 ms/op
Iteration   2: 0.164 ms/op
Iteration   3: 0.163 ms/op
Iteration   4: 0.161 ms/op
Iteration   5: 0.163 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.163 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.161, 0.163, 0.164), stdev = 0.001
  CI (99.9%): [0.158, 0.167] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 40.79% complete, ETA 09:59:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.289 ms/op
# Warmup Iteration   2: 0.161 ms/op
# Warmup Iteration   3: 0.163 ms/op
# Warmup Iteration   4: 0.161 ms/op
# Warmup Iteration   5: 0.163 ms/op
Iteration   1: 0.160 ms/op
Iteration   2: 0.163 ms/op
Iteration   3: 0.161 ms/op
Iteration   4: 0.160 ms/op
Iteration   5: 0.159 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.160 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.159, 0.160, 0.163), stdev = 0.001
  CI (99.9%): [0.155, 0.166] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 40.87% complete, ETA 09:57:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.438 ms/op
# Warmup Iteration   2: 0.330 ms/op
# Warmup Iteration   3: 0.330 ms/op
# Warmup Iteration   4: 0.337 ms/op
# Warmup Iteration   5: 0.337 ms/op
Iteration   1: 0.337 ms/op
Iteration   2: 0.335 ms/op
Iteration   3: 0.334 ms/op
Iteration   4: 0.335 ms/op
Iteration   5: 0.337 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.336 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.334, 0.336, 0.337), stdev = 0.001
  CI (99.9%): [0.330, 0.341] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 40.95% complete, ETA 09:56:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.377 ms/op
# Warmup Iteration   2: 0.323 ms/op
# Warmup Iteration   3: 0.324 ms/op
# Warmup Iteration   4: 0.330 ms/op
# Warmup Iteration   5: 0.328 ms/op
Iteration   1: 0.333 ms/op
Iteration   2: 0.341 ms/op
Iteration   3: 0.329 ms/op
Iteration   4: 0.331 ms/op
Iteration   5: 0.329 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.332 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.329, 0.332, 0.341), stdev = 0.005
  CI (99.9%): [0.314, 0.351] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 41.03% complete, ETA 09:54:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.419 ms/op
# Warmup Iteration   2: 0.343 ms/op
# Warmup Iteration   3: 0.327 ms/op
# Warmup Iteration   4: 0.347 ms/op
# Warmup Iteration   5: 0.363 ms/op
Iteration   1: 0.398 ms/op
Iteration   2: 0.338 ms/op
Iteration   3: 0.378 ms/op
Iteration   4: 0.316 ms/op
Iteration   5: 0.321 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.350 ±(99.9%) 0.141 ms/op [Average]
  (min, avg, max) = (0.316, 0.350, 0.398), stdev = 0.036
  CI (99.9%): [0.210, 0.491] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 41.11% complete, ETA 09:52:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.394 ms/op
# Warmup Iteration   2: 0.316 ms/op
# Warmup Iteration   3: 0.314 ms/op
# Warmup Iteration   4: 0.316 ms/op
# Warmup Iteration   5: 0.315 ms/op
Iteration   1: 0.322 ms/op
Iteration   2: 0.311 ms/op
Iteration   3: 0.314 ms/op
Iteration   4: 0.309 ms/op
Iteration   5: 0.313 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.314 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.309, 0.314, 0.322), stdev = 0.005
  CI (99.9%): [0.294, 0.333] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 41.19% complete, ETA 09:51:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.574 ms/op
# Warmup Iteration   2: 0.314 ms/op
# Warmup Iteration   3: 0.309 ms/op
# Warmup Iteration   4: 0.315 ms/op
# Warmup Iteration   5: 0.311 ms/op
Iteration   1: 0.310 ms/op
Iteration   2: 0.316 ms/op
Iteration   3: 0.312 ms/op
Iteration   4: 0.311 ms/op
Iteration   5: 0.312 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.312 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.310, 0.312, 0.316), stdev = 0.002
  CI (99.9%): [0.303, 0.322] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 41.27% complete, ETA 09:49:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.576 ms/op
# Warmup Iteration   2: 0.294 ms/op
# Warmup Iteration   3: 0.294 ms/op
# Warmup Iteration   4: 0.295 ms/op
# Warmup Iteration   5: 0.292 ms/op
Iteration   1: 0.293 ms/op
Iteration   2: 0.293 ms/op
Iteration   3: 0.291 ms/op
Iteration   4: 0.292 ms/op
Iteration   5: 0.291 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.292 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.291, 0.292, 0.293), stdev = 0.001
  CI (99.9%): [0.288, 0.296] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 41.35% complete, ETA 09:47:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.823 ms/op
# Warmup Iteration   2: 0.639 ms/op
# Warmup Iteration   3: 0.620 ms/op
# Warmup Iteration   4: 0.619 ms/op
# Warmup Iteration   5: 0.625 ms/op
Iteration   1: 0.623 ms/op
Iteration   2: 0.626 ms/op
Iteration   3: 0.628 ms/op
Iteration   4: 0.636 ms/op
Iteration   5: 0.640 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.631 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.623, 0.631, 0.640), stdev = 0.007
  CI (99.9%): [0.603, 0.659] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 41.43% complete, ETA 09:46:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.832 ms/op
# Warmup Iteration   2: 0.642 ms/op
# Warmup Iteration   3: 0.642 ms/op
# Warmup Iteration   4: 0.641 ms/op
# Warmup Iteration   5: 0.650 ms/op
Iteration   1: 0.645 ms/op
Iteration   2: 0.644 ms/op
Iteration   3: 0.641 ms/op
Iteration   4: 0.645 ms/op
Iteration   5: 0.649 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.645 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.641, 0.645, 0.649), stdev = 0.003
  CI (99.9%): [0.635, 0.655] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 41.51% complete, ETA 09:44:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.793 ms/op
# Warmup Iteration   2: 0.626 ms/op
# Warmup Iteration   3: 0.641 ms/op
# Warmup Iteration   4: 0.645 ms/op
# Warmup Iteration   5: 0.717 ms/op
Iteration   1: 0.683 ms/op
Iteration   2: 0.783 ms/op
Iteration   3: 0.752 ms/op
Iteration   4: 0.669 ms/op
Iteration   5: 0.653 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.708 ±(99.9%) 0.217 ms/op [Average]
  (min, avg, max) = (0.653, 0.708, 0.783), stdev = 0.056
  CI (99.9%): [0.491, 0.925] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 41.59% complete, ETA 09:42:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.856 ms/op
# Warmup Iteration   2: 0.651 ms/op
# Warmup Iteration   3: 0.647 ms/op
# Warmup Iteration   4: 0.653 ms/op
# Warmup Iteration   5: 0.660 ms/op
Iteration   1: 0.661 ms/op
Iteration   2: 0.663 ms/op
Iteration   3: 0.679 ms/op
Iteration   4: 0.691 ms/op
Iteration   5: 0.684 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.676 ±(99.9%) 0.051 ms/op [Average]
  (min, avg, max) = (0.661, 0.676, 0.691), stdev = 0.013
  CI (99.9%): [0.624, 0.727] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 41.67% complete, ETA 09:41:01
# Fork: 1 of 1
# Warmup Iteration   1: 1.870 ms/op
# Warmup Iteration   2: 0.696 ms/op
# Warmup Iteration   3: 0.723 ms/op
# Warmup Iteration   4: 0.691 ms/op
# Warmup Iteration   5: 0.701 ms/op
Iteration   1: 0.705 ms/op
Iteration   2: 0.690 ms/op
Iteration   3: 0.680 ms/op
Iteration   4: 0.678 ms/op
Iteration   5: 0.679 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.686 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (0.678, 0.686, 0.705), stdev = 0.012
  CI (99.9%): [0.642, 0.731] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 41.75% complete, ETA 09:39:22
# Fork: 1 of 1
# Warmup Iteration   1: 1.152 ms/op
# Warmup Iteration   2: 0.605 ms/op
# Warmup Iteration   3: 0.607 ms/op
# Warmup Iteration   4: 0.613 ms/op
# Warmup Iteration   5: 0.603 ms/op
Iteration   1: 0.605 ms/op
Iteration   2: 0.602 ms/op
Iteration   3: 0.602 ms/op
Iteration   4: 0.604 ms/op
Iteration   5: 0.607 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.604 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.602, 0.604, 0.607), stdev = 0.002
  CI (99.9%): [0.596, 0.612] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 41.83% complete, ETA 09:37:44
# Fork: 1 of 1
# Warmup Iteration   1: 1.623 ms/op
# Warmup Iteration   2: 1.229 ms/op
# Warmup Iteration   3: 1.230 ms/op
# Warmup Iteration   4: 1.218 ms/op
# Warmup Iteration   5: 1.216 ms/op
Iteration   1: 1.197 ms/op
Iteration   2: 1.203 ms/op
Iteration   3: 1.201 ms/op
Iteration   4: 1.192 ms/op
Iteration   5: 1.195 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.198 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (1.192, 1.198, 1.203), stdev = 0.005
  CI (99.9%): [1.180, 1.215] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 41.91% complete, ETA 09:36:04
# Fork: 1 of 1
# Warmup Iteration   1: 1.515 ms/op
# Warmup Iteration   2: 1.454 ms/op
# Warmup Iteration   3: 1.297 ms/op
# Warmup Iteration   4: 1.305 ms/op
# Warmup Iteration   5: 1.272 ms/op
Iteration   1: 1.272 ms/op
Iteration   2: 1.274 ms/op
Iteration   3: 1.271 ms/op
Iteration   4: 1.254 ms/op
Iteration   5: 1.262 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.267 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (1.254, 1.267, 1.274), stdev = 0.008
  CI (99.9%): [1.235, 1.299] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 41.99% complete, ETA 09:34:25
# Fork: 1 of 1
# Warmup Iteration   1: 1.510 ms/op
# Warmup Iteration   2: 1.232 ms/op
# Warmup Iteration   3: 1.183 ms/op
# Warmup Iteration   4: 1.188 ms/op
# Warmup Iteration   5: 1.181 ms/op
Iteration   1: 1.182 ms/op
Iteration   2: 1.187 ms/op
Iteration   3: 1.219 ms/op
Iteration   4: 1.198 ms/op
Iteration   5: 1.191 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.195 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (1.182, 1.195, 1.219), stdev = 0.014
  CI (99.9%): [1.140, 1.250] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 42.07% complete, ETA 09:32:47
# Fork: 1 of 1
# Warmup Iteration   1: 1.566 ms/op
# Warmup Iteration   2: 1.278 ms/op
# Warmup Iteration   3: 1.246 ms/op
# Warmup Iteration   4: 1.231 ms/op
# Warmup Iteration   5: 1.517 ms/op
Iteration   1: 1.655 ms/op
Iteration   2: 1.343 ms/op
Iteration   3: 1.256 ms/op
Iteration   4: 1.403 ms/op
Iteration   5: 1.302 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.392 ±(99.9%) 0.603 ms/op [Average]
  (min, avg, max) = (1.256, 1.392, 1.655), stdev = 0.157
  CI (99.9%): [0.789, 1.994] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 42.15% complete, ETA 09:31:08
# Fork: 1 of 1
# Warmup Iteration   1: 2.518 ms/op
# Warmup Iteration   2: 1.300 ms/op
# Warmup Iteration   3: 1.260 ms/op
# Warmup Iteration   4: 1.378 ms/op
# Warmup Iteration   5: 1.249 ms/op
Iteration   1: 1.304 ms/op
Iteration   2: 1.349 ms/op
Iteration   3: 1.295 ms/op
Iteration   4: 1.270 ms/op
Iteration   5: 1.386 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.321 ±(99.9%) 0.179 ms/op [Average]
  (min, avg, max) = (1.270, 1.321, 1.386), stdev = 0.046
  CI (99.9%): [1.142, 1.499] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 42.23% complete, ETA 09:29:32
# Fork: 1 of 1
# Warmup Iteration   1: 2.243 ms/op
# Warmup Iteration   2: 1.277 ms/op
# Warmup Iteration   3: 1.175 ms/op
# Warmup Iteration   4: 1.273 ms/op
# Warmup Iteration   5: 1.268 ms/op
Iteration   1: 1.193 ms/op
Iteration   2: 1.259 ms/op
Iteration   3: 1.290 ms/op
Iteration   4: 1.181 ms/op
Iteration   5: 1.318 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.248 ±(99.9%) 0.231 ms/op [Average]
  (min, avg, max) = (1.181, 1.248, 1.318), stdev = 0.060
  CI (99.9%): [1.018, 1.479] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 42.31% complete, ETA 09:27:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 42.39% complete, ETA 09:26:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 42.47% complete, ETA 09:24:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 42.55% complete, ETA 09:23:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 42.63% complete, ETA 09:21:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 42.71% complete, ETA 09:19:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 42.79% complete, ETA 09:18:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 42.87% complete, ETA 09:16:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 42.95% complete, ETA 09:15:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 43.03% complete, ETA 09:13:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 43.11% complete, ETA 09:12:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 43.19% complete, ETA 09:10:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 43.27% complete, ETA 09:08:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 43.35% complete, ETA 09:07:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 43.43% complete, ETA 09:05:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 43.51% complete, ETA 09:04:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 43.59% complete, ETA 09:02:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 43.67% complete, ETA 09:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 43.75% complete, ETA 08:59:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.008 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [0.001, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 43.83% complete, ETA 08:58:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.008 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.009), stdev = 0.001
  CI (99.9%): [0.002, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 43.91% complete, ETA 08:56:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.015 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.013, 0.015, 0.019), stdev = 0.003
  CI (99.9%): [0.003, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 43.99% complete, ETA 08:55:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.015 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.013, 0.015, 0.019), stdev = 0.002
  CI (99.9%): [0.006, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 44.07% complete, ETA 08:53:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.034 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.040 ms/op
Iteration   4: 0.027 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.031 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.027, 0.031, 0.040), stdev = 0.006
  CI (99.9%): [0.009, 0.052] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 44.15% complete, ETA 08:52:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.028 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.024, 0.028, 0.035), stdev = 0.005
  CI (99.9%): [0.009, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 44.23% complete, ETA 08:50:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
# Warmup Iteration   2: 0.063 ms/op
# Warmup Iteration   3: 0.055 ms/op
# Warmup Iteration   4: 0.049 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.065 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.080 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.058 ±(99.9%) 0.057 ms/op [Average]
  (min, avg, max) = (0.048, 0.058, 0.080), stdev = 0.015
  CI (99.9%): [0.001, 0.114] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 44.31% complete, ETA 08:49:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.060 ms/op
# Warmup Iteration   2: 0.061 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.055 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.061 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.053 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.048, 0.053, 0.061), stdev = 0.006
  CI (99.9%): [0.029, 0.078] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 44.39% complete, ETA 08:47:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.118 ms/op
# Warmup Iteration   2: 0.124 ms/op
# Warmup Iteration   3: 0.106 ms/op
# Warmup Iteration   4: 0.096 ms/op
# Warmup Iteration   5: 0.114 ms/op
Iteration   1: 0.095 ms/op
Iteration   2: 0.130 ms/op
Iteration   3: 0.095 ms/op
Iteration   4: 0.096 ms/op
Iteration   5: 0.146 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.113 ±(99.9%) 0.093 ms/op [Average]
  (min, avg, max) = (0.095, 0.113, 0.146), stdev = 0.024
  CI (99.9%): [0.019, 0.206] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 44.47% complete, ETA 08:46:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.118 ms/op
# Warmup Iteration   2: 0.123 ms/op
# Warmup Iteration   3: 0.106 ms/op
# Warmup Iteration   4: 0.095 ms/op
# Warmup Iteration   5: 0.113 ms/op
Iteration   1: 0.095 ms/op
Iteration   2: 0.129 ms/op
Iteration   3: 0.095 ms/op
Iteration   4: 0.095 ms/op
Iteration   5: 0.138 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.110 ±(99.9%) 0.082 ms/op [Average]
  (min, avg, max) = (0.095, 0.110, 0.138), stdev = 0.021
  CI (99.9%): [0.029, 0.192] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 44.55% complete, ETA 08:44:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.250 ms/op
# Warmup Iteration   2: 0.243 ms/op
# Warmup Iteration   3: 0.217 ms/op
# Warmup Iteration   4: 0.194 ms/op
# Warmup Iteration   5: 0.265 ms/op
Iteration   1: 0.200 ms/op
Iteration   2: 0.319 ms/op
Iteration   3: 0.234 ms/op
Iteration   4: 0.194 ms/op
Iteration   5: 0.290 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.247 ±(99.9%) 0.213 ms/op [Average]
  (min, avg, max) = (0.194, 0.247, 0.319), stdev = 0.055
  CI (99.9%): [0.035, 0.460] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 44.63% complete, ETA 08:43:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.275 ms/op
# Warmup Iteration   2: 0.303 ms/op
# Warmup Iteration   3: 0.251 ms/op
# Warmup Iteration   4: 0.248 ms/op
# Warmup Iteration   5: 0.247 ms/op
Iteration   1: 0.233 ms/op
Iteration   2: 0.210 ms/op
Iteration   3: 0.317 ms/op
Iteration   4: 0.217 ms/op
Iteration   5: 0.207 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.237 ±(99.9%) 0.177 ms/op [Average]
  (min, avg, max) = (0.207, 0.237, 0.317), stdev = 0.046
  CI (99.9%): [0.060, 0.414] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 44.71% complete, ETA 08:41:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 44.79% complete, ETA 08:40:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 44.87% complete, ETA 08:38:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 44.95% complete, ETA 08:37:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 45.03% complete, ETA 08:35:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 45.11% complete, ETA 08:34:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 45.19% complete, ETA 08:33:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 45.27% complete, ETA 08:31:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 45.35% complete, ETA 08:30:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 45.43% complete, ETA 08:28:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 45.51% complete, ETA 08:27:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 45.59% complete, ETA 08:25:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 45.67% complete, ETA 08:24:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 45.75% complete, ETA 08:23:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 45.83% complete, ETA 08:21:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 45.91% complete, ETA 08:20:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 45.99% complete, ETA 08:18:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 46.07% complete, ETA 08:17:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 46.15% complete, ETA 08:16:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.008 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.009), stdev = 0.001
  CI (99.9%): [0.002, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 46.23% complete, ETA 08:14:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.007 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.010), stdev = 0.002
  CI (99.9%): [0.002, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 46.31% complete, ETA 08:13:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.015 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.013, 0.015, 0.018), stdev = 0.002
  CI (99.9%): [0.006, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 46.39% complete, ETA 08:11:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.015 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.013, 0.015, 0.018), stdev = 0.003
  CI (99.9%): [0.005, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 46.47% complete, ETA 08:10:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.029 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.025, 0.029, 0.039), stdev = 0.006
  CI (99.9%): [0.006, 0.052] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 46.55% complete, ETA 08:09:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.029 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.025, 0.029, 0.036), stdev = 0.005
  CI (99.9%): [0.010, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 46.63% complete, ETA 08:07:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.061 ms/op
# Warmup Iteration   3: 0.055 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.066 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.052 ms/op
Iteration   5: 0.075 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.060 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.052, 0.060, 0.075), stdev = 0.010
  CI (99.9%): [0.020, 0.099] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 46.71% complete, ETA 08:06:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
# Warmup Iteration   2: 0.061 ms/op
# Warmup Iteration   3: 0.055 ms/op
# Warmup Iteration   4: 0.055 ms/op
# Warmup Iteration   5: 0.061 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.051 ms/op
Iteration   5: 0.076 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.058 ±(99.9%) 0.043 ms/op [Average]
  (min, avg, max) = (0.051, 0.058, 0.076), stdev = 0.011
  CI (99.9%): [0.016, 0.101] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 46.79% complete, ETA 08:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.133 ms/op
# Warmup Iteration   2: 0.123 ms/op
# Warmup Iteration   3: 0.111 ms/op
# Warmup Iteration   4: 0.115 ms/op
# Warmup Iteration   5: 0.120 ms/op
Iteration   1: 0.103 ms/op
Iteration   2: 0.131 ms/op
Iteration   3: 0.103 ms/op
Iteration   4: 0.107 ms/op
Iteration   5: 0.136 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.116 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.103, 0.116, 0.136), stdev = 0.016
  CI (99.9%): [0.053, 0.179] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 46.88% complete, ETA 08:03:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.121 ms/op
# Warmup Iteration   2: 0.125 ms/op
# Warmup Iteration   3: 0.107 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.128 ms/op
Iteration   1: 0.103 ms/op
Iteration   2: 0.136 ms/op
Iteration   3: 0.111 ms/op
Iteration   4: 0.101 ms/op
Iteration   5: 0.147 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.120 ±(99.9%) 0.080 ms/op [Average]
  (min, avg, max) = (0.101, 0.120, 0.147), stdev = 0.021
  CI (99.9%): [0.039, 0.200] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 46.96% complete, ETA 08:02:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.262 ms/op
# Warmup Iteration   2: 0.254 ms/op
# Warmup Iteration   3: 0.214 ms/op
# Warmup Iteration   4: 0.238 ms/op
# Warmup Iteration   5: 0.239 ms/op
Iteration   1: 0.193 ms/op
Iteration   2: 0.247 ms/op
Iteration   3: 0.202 ms/op
Iteration   4: 0.216 ms/op
Iteration   5: 0.298 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.231 ±(99.9%) 0.164 ms/op [Average]
  (min, avg, max) = (0.193, 0.231, 0.298), stdev = 0.043
  CI (99.9%): [0.067, 0.395] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 47.04% complete, ETA 08:00:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.252 ms/op
# Warmup Iteration   2: 0.261 ms/op
# Warmup Iteration   3: 0.235 ms/op
# Warmup Iteration   4: 0.237 ms/op
# Warmup Iteration   5: 0.261 ms/op
Iteration   1: 0.220 ms/op
Iteration   2: 0.255 ms/op
Iteration   3: 0.209 ms/op
Iteration   4: 0.204 ms/op
Iteration   5: 0.267 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.231 ±(99.9%) 0.110 ms/op [Average]
  (min, avg, max) = (0.204, 0.231, 0.267), stdev = 0.028
  CI (99.9%): [0.121, 0.341] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 47.12% complete, ETA 07:59:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:97)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 47.20% complete, ETA 07:58:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:97)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 47.28% complete, ETA 07:57:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 47.36% complete, ETA 07:55:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 47.44% complete, ETA 07:54:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 47.52% complete, ETA 07:53:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 47.60% complete, ETA 07:51:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 47.68% complete, ETA 07:50:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 47.76% complete, ETA 07:49:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 47.84% complete, ETA 07:47:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 47.92% complete, ETA 07:46:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 48.00% complete, ETA 07:45:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 48.08% complete, ETA 07:43:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 48.16% complete, ETA 07:42:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 48.24% complete, ETA 07:41:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 48.32% complete, ETA 07:40:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 48.40% complete, ETA 07:38:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.002, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 48.48% complete, ETA 07:37:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 48.56% complete, ETA 07:36:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.008 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.001
  CI (99.9%): [0.002, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 48.64% complete, ETA 07:35:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.008 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [0.002, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 48.72% complete, ETA 07:33:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.015 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.013, 0.015, 0.018), stdev = 0.002
  CI (99.9%): [0.007, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 48.80% complete, ETA 07:32:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.014 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.013, 0.014, 0.016), stdev = 0.001
  CI (99.9%): [0.009, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 48.88% complete, ETA 07:31:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.027 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.028 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.026, 0.028, 0.030), stdev = 0.002
  CI (99.9%): [0.021, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 48.96% complete, ETA 07:29:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.035 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.035 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.027, 0.035, 0.049), stdev = 0.009
  CI (99.9%): [0.002, 0.068] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 49.04% complete, ETA 07:28:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.085 ms/op
# Warmup Iteration   2: 0.067 ms/op
# Warmup Iteration   3: 0.066 ms/op
# Warmup Iteration   4: 0.103 ms/op
# Warmup Iteration   5: 0.084 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.052 ms/op
Iteration   3: 0.063 ms/op
Iteration   4: 0.052 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.055 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.052, 0.055, 0.063), stdev = 0.005
  CI (99.9%): [0.037, 0.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 49.12% complete, ETA 07:27:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.059 ms/op
# Warmup Iteration   2: 0.064 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.054 ms/op
# Warmup Iteration   5: 0.063 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.054 ms/op
Iteration   5: 0.072 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.059 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.053, 0.059, 0.072), stdev = 0.008
  CI (99.9%): [0.026, 0.092] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 49.20% complete, ETA 07:26:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.130 ms/op
# Warmup Iteration   2: 0.112 ms/op
# Warmup Iteration   3: 0.136 ms/op
# Warmup Iteration   4: 0.157 ms/op
# Warmup Iteration   5: 0.117 ms/op
Iteration   1: 0.111 ms/op
Iteration   2: 0.141 ms/op
Iteration   3: 0.118 ms/op
Iteration   4: 0.105 ms/op
Iteration   5: 0.104 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.116 ±(99.9%) 0.058 ms/op [Average]
  (min, avg, max) = (0.104, 0.116, 0.141), stdev = 0.015
  CI (99.9%): [0.058, 0.174] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 49.28% complete, ETA 07:25:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.117 ms/op
# Warmup Iteration   2: 0.138 ms/op
# Warmup Iteration   3: 0.124 ms/op
# Warmup Iteration   4: 0.132 ms/op
# Warmup Iteration   5: 0.143 ms/op
Iteration   1: 0.132 ms/op
Iteration   2: 0.109 ms/op
Iteration   3: 0.127 ms/op
Iteration   4: 0.110 ms/op
Iteration   5: 0.108 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.117 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (0.108, 0.117, 0.132), stdev = 0.011
  CI (99.9%): [0.073, 0.161] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 49.36% complete, ETA 07:23:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.290 ms/op
# Warmup Iteration   2: 0.254 ms/op
# Warmup Iteration   3: 0.250 ms/op
# Warmup Iteration   4: 0.257 ms/op
# Warmup Iteration   5: 0.249 ms/op
Iteration   1: 0.215 ms/op
Iteration   2: 0.269 ms/op
Iteration   3: 0.222 ms/op
Iteration   4: 0.217 ms/op
Iteration   5: 0.220 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.228 ±(99.9%) 0.088 ms/op [Average]
  (min, avg, max) = (0.215, 0.228, 0.269), stdev = 0.023
  CI (99.9%): [0.140, 0.316] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 49.44% complete, ETA 07:22:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.264 ms/op
# Warmup Iteration   2: 0.224 ms/op
# Warmup Iteration   3: 0.273 ms/op
# Warmup Iteration   4: 0.244 ms/op
# Warmup Iteration   5: 0.250 ms/op
Iteration   1: 0.223 ms/op
Iteration   2: 0.242 ms/op
Iteration   3: 0.194 ms/op
Iteration   4: 0.190 ms/op
Iteration   5: 0.245 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.219 ±(99.9%) 0.100 ms/op [Average]
  (min, avg, max) = (0.190, 0.219, 0.245), stdev = 0.026
  CI (99.9%): [0.119, 0.319] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 49.52% complete, ETA 07:21:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 49.60% complete, ETA 07:20:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 49.68% complete, ETA 07:18:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 49.76% complete, ETA 07:17:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 49.84% complete, ETA 07:16:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 49.92% complete, ETA 07:15:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 50.00% complete, ETA 07:14:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 50.08% complete, ETA 07:12:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 50.16% complete, ETA 07:11:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 50.24% complete, ETA 07:10:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 50.32% complete, ETA 07:09:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 50.40% complete, ETA 07:08:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 50.48% complete, ETA 07:06:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 50.56% complete, ETA 07:05:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 50.64% complete, ETA 07:04:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 50.72% complete, ETA 07:03:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 50.80% complete, ETA 07:02:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 50.88% complete, ETA 07:00:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.002, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 50.96% complete, ETA 06:59:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.007 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.009), stdev = 0.001
  CI (99.9%): [0.002, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 51.04% complete, ETA 06:58:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.007 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.009), stdev = 0.001
  CI (99.9%): [0.002, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 51.12% complete, ETA 06:57:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.014 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.012, 0.014, 0.017), stdev = 0.002
  CI (99.9%): [0.006, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 51.20% complete, ETA 06:56:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.014 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.012, 0.014, 0.018), stdev = 0.003
  CI (99.9%): [0.004, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 51.28% complete, ETA 06:55:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.026 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.024, 0.026, 0.030), stdev = 0.003
  CI (99.9%): [0.016, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 51.36% complete, ETA 06:53:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.027 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.024, 0.027, 0.031), stdev = 0.003
  CI (99.9%): [0.014, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 51.44% complete, ETA 06:52:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.056 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.055 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.060 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.051 ms/op
Iteration   5: 0.078 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.057 ±(99.9%) 0.050 ms/op [Average]
  (min, avg, max) = (0.048, 0.057, 0.078), stdev = 0.013
  CI (99.9%): [0.007, 0.107] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 51.52% complete, ETA 06:51:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.071 ms/op
# Warmup Iteration   2: 0.063 ms/op
# Warmup Iteration   3: 0.055 ms/op
# Warmup Iteration   4: 0.059 ms/op
# Warmup Iteration   5: 0.059 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.060 ms/op
Iteration   3: 0.049 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.068 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.055 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.049, 0.055, 0.068), stdev = 0.009
  CI (99.9%): [0.021, 0.089] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 51.60% complete, ETA 06:50:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.128 ms/op
# Warmup Iteration   2: 0.115 ms/op
# Warmup Iteration   3: 0.115 ms/op
# Warmup Iteration   4: 0.095 ms/op
# Warmup Iteration   5: 0.109 ms/op
Iteration   1: 0.097 ms/op
Iteration   2: 0.120 ms/op
Iteration   3: 0.096 ms/op
Iteration   4: 0.096 ms/op
Iteration   5: 0.137 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.109 ±(99.9%) 0.072 ms/op [Average]
  (min, avg, max) = (0.096, 0.109, 0.137), stdev = 0.019
  CI (99.9%): [0.037, 0.181] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 51.68% complete, ETA 06:49:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.128 ms/op
# Warmup Iteration   2: 0.118 ms/op
# Warmup Iteration   3: 0.113 ms/op
# Warmup Iteration   4: 0.098 ms/op
# Warmup Iteration   5: 0.122 ms/op
Iteration   1: 0.096 ms/op
Iteration   2: 0.126 ms/op
Iteration   3: 0.097 ms/op
Iteration   4: 0.097 ms/op
Iteration   5: 0.176 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.118 ±(99.9%) 0.133 ms/op [Average]
  (min, avg, max) = (0.096, 0.118, 0.176), stdev = 0.035
  CI (99.9%): [? 0, 0.252] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 51.76% complete, ETA 06:48:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.240 ms/op
# Warmup Iteration   2: 0.233 ms/op
# Warmup Iteration   3: 0.226 ms/op
# Warmup Iteration   4: 0.193 ms/op
# Warmup Iteration   5: 0.228 ms/op
Iteration   1: 0.194 ms/op
Iteration   2: 0.254 ms/op
Iteration   3: 0.192 ms/op
Iteration   4: 0.192 ms/op
Iteration   5: 0.298 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.226 ±(99.9%) 0.186 ms/op [Average]
  (min, avg, max) = (0.192, 0.226, 0.298), stdev = 0.048
  CI (99.9%): [0.040, 0.412] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 51.84% complete, ETA 06:46:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.240 ms/op
# Warmup Iteration   2: 0.232 ms/op
# Warmup Iteration   3: 0.217 ms/op
# Warmup Iteration   4: 0.193 ms/op
# Warmup Iteration   5: 0.223 ms/op
Iteration   1: 0.191 ms/op
Iteration   2: 0.247 ms/op
Iteration   3: 0.194 ms/op
Iteration   4: 0.192 ms/op
Iteration   5: 0.280 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.221 ±(99.9%) 0.157 ms/op [Average]
  (min, avg, max) = (0.191, 0.221, 0.280), stdev = 0.041
  CI (99.9%): [0.064, 0.378] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 51.92% complete, ETA 06:45:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 52.00% complete, ETA 06:44:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 52.08% complete, ETA 06:43:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 52.16% complete, ETA 06:42:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 52.24% complete, ETA 06:41:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 52.32% complete, ETA 06:40:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 52.40% complete, ETA 06:39:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 52.48% complete, ETA 06:38:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 52.56% complete, ETA 06:36:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 52.64% complete, ETA 06:35:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 52.72% complete, ETA 06:34:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 52.80% complete, ETA 06:33:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 52.88% complete, ETA 06:32:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 52.96% complete, ETA 06:31:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 53.04% complete, ETA 06:30:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 53.13% complete, ETA 06:29:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 53.21% complete, ETA 06:28:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 53.29% complete, ETA 06:27:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 53.37% complete, ETA 06:25:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.007 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.008), stdev = 0.001
  CI (99.9%): [0.004, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 53.45% complete, ETA 06:24:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.007 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.009), stdev = 0.001
  CI (99.9%): [0.002, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 53.53% complete, ETA 06:23:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.014 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.012, 0.014, 0.018), stdev = 0.003
  CI (99.9%): [0.004, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 53.61% complete, ETA 06:22:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.016 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.014, 0.016, 0.018), stdev = 0.002
  CI (99.9%): [0.008, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 53.69% complete, ETA 06:21:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.039 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.029 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.025, 0.029, 0.033), stdev = 0.003
  CI (99.9%): [0.016, 0.041] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 53.77% complete, ETA 06:20:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.036 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.029 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.025, 0.029, 0.035), stdev = 0.004
  CI (99.9%): [0.013, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 53.85% complete, ETA 06:19:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.064 ms/op
# Warmup Iteration   5: 0.074 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.096 ms/op
Iteration   4: 0.056 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.065 ±(99.9%) 0.069 ms/op [Average]
  (min, avg, max) = (0.052, 0.065, 0.096), stdev = 0.018
  CI (99.9%): [? 0, 0.133] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 53.93% complete, ETA 06:18:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.075 ms/op
# Warmup Iteration   3: 0.062 ms/op
# Warmup Iteration   4: 0.065 ms/op
# Warmup Iteration   5: 0.065 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.065 ms/op
Iteration   4: 0.051 ms/op
Iteration   5: 0.055 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.057 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.051, 0.057, 0.065), stdev = 0.005
  CI (99.9%): [0.037, 0.077] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 54.01% complete, ETA 06:17:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.130 ms/op
# Warmup Iteration   2: 0.116 ms/op
# Warmup Iteration   3: 0.116 ms/op
# Warmup Iteration   4: 0.100 ms/op
# Warmup Iteration   5: 0.124 ms/op
Iteration   1: 0.097 ms/op
Iteration   2: 0.124 ms/op
Iteration   3: 0.098 ms/op
Iteration   4: 0.098 ms/op
Iteration   5: 0.145 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.112 ±(99.9%) 0.082 ms/op [Average]
  (min, avg, max) = (0.097, 0.112, 0.145), stdev = 0.021
  CI (99.9%): [0.030, 0.195] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 54.09% complete, ETA 06:16:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.127 ms/op
# Warmup Iteration   2: 0.117 ms/op
# Warmup Iteration   3: 0.106 ms/op
# Warmup Iteration   4: 0.101 ms/op
# Warmup Iteration   5: 0.113 ms/op
Iteration   1: 0.100 ms/op
Iteration   2: 0.118 ms/op
Iteration   3: 0.097 ms/op
Iteration   4: 0.099 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.108 ±(99.9%) 0.052 ms/op [Average]
  (min, avg, max) = (0.097, 0.108, 0.127), stdev = 0.013
  CI (99.9%): [0.056, 0.160] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 54.17% complete, ETA 06:15:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.250 ms/op
# Warmup Iteration   2: 0.239 ms/op
# Warmup Iteration   3: 0.227 ms/op
# Warmup Iteration   4: 0.213 ms/op
# Warmup Iteration   5: 0.248 ms/op
Iteration   1: 0.207 ms/op
Iteration   2: 0.252 ms/op
Iteration   3: 0.193 ms/op
Iteration   4: 0.193 ms/op
Iteration   5: 0.302 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.229 ±(99.9%) 0.182 ms/op [Average]
  (min, avg, max) = (0.193, 0.229, 0.302), stdev = 0.047
  CI (99.9%): [0.048, 0.411] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 54.25% complete, ETA 06:14:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.251 ms/op
# Warmup Iteration   2: 0.235 ms/op
# Warmup Iteration   3: 0.211 ms/op
# Warmup Iteration   4: 0.195 ms/op
# Warmup Iteration   5: 0.218 ms/op
Iteration   1: 0.193 ms/op
Iteration   2: 0.232 ms/op
Iteration   3: 0.194 ms/op
Iteration   4: 0.242 ms/op
Iteration   5: 0.194 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.211 ±(99.9%) 0.092 ms/op [Average]
  (min, avg, max) = (0.193, 0.211, 0.242), stdev = 0.024
  CI (99.9%): [0.119, 0.303] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 54.33% complete, ETA 06:13:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:97)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 54.41% complete, ETA 06:11:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:97)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 54.49% complete, ETA 06:10:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:97)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 54.57% complete, ETA 06:09:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:97)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 54.65% complete, ETA 06:08:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:97)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 54.73% complete, ETA 06:07:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:97)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 54.81% complete, ETA 06:06:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 54.89% complete, ETA 06:05:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 54.97% complete, ETA 06:04:41
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 55.05% complete, ETA 06:03:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 55.13% complete, ETA 06:02:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 55.21% complete, ETA 06:01:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 55.29% complete, ETA 06:00:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 55.37% complete, ETA 05:59:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 55.45% complete, ETA 05:58:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 55.53% complete, ETA 05:57:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 55.61% complete, ETA 05:56:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 55.69% complete, ETA 05:55:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 55.77% complete, ETA 05:54:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.008 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.001
  CI (99.9%): [0.002, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 55.85% complete, ETA 05:53:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.008 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.001
  CI (99.9%): [0.002, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 55.93% complete, ETA 05:52:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.015 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.013, 0.015, 0.018), stdev = 0.002
  CI (99.9%): [0.006, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 56.01% complete, ETA 05:51:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.015 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.013, 0.015, 0.018), stdev = 0.002
  CI (99.9%): [0.006, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 56.09% complete, ETA 05:50:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.027 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.024, 0.027, 0.034), stdev = 0.005
  CI (99.9%): [0.010, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 56.17% complete, ETA 05:49:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.027 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.024, 0.027, 0.033), stdev = 0.004
  CI (99.9%): [0.011, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 56.25% complete, ETA 05:48:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.062 ms/op
# Warmup Iteration   5: 0.063 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.065 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.051 ms/op
Iteration   5: 0.072 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.059 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.051, 0.059, 0.072), stdev = 0.009
  CI (99.9%): [0.023, 0.095] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 56.33% complete, ETA 05:47:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.070 ms/op
# Warmup Iteration   3: 0.069 ms/op
# Warmup Iteration   4: 0.071 ms/op
# Warmup Iteration   5: 0.065 ms/op
Iteration   1: 0.077 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.084 ms/op
Iteration   4: 0.064 ms/op
Iteration   5: 0.064 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.071 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.064, 0.071, 0.084), stdev = 0.009
  CI (99.9%): [0.034, 0.107] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 56.41% complete, ETA 05:46:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.109 ms/op
# Warmup Iteration   2: 0.112 ms/op
# Warmup Iteration   3: 0.111 ms/op
# Warmup Iteration   4: 0.101 ms/op
# Warmup Iteration   5: 0.115 ms/op
Iteration   1: 0.100 ms/op
Iteration   2: 0.127 ms/op
Iteration   3: 0.102 ms/op
Iteration   4: 0.110 ms/op
Iteration   5: 0.168 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.121 ±(99.9%) 0.108 ms/op [Average]
  (min, avg, max) = (0.100, 0.121, 0.168), stdev = 0.028
  CI (99.9%): [0.014, 0.229] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 56.49% complete, ETA 05:45:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.110 ms/op
# Warmup Iteration   2: 0.147 ms/op
# Warmup Iteration   3: 0.214 ms/op
# Warmup Iteration   4: 0.147 ms/op
# Warmup Iteration   5: 0.109 ms/op
Iteration   1: 0.140 ms/op
Iteration   2: 0.110 ms/op
Iteration   3: 0.132 ms/op
Iteration   4: 0.110 ms/op
Iteration   5: 0.109 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.120 ±(99.9%) 0.057 ms/op [Average]
  (min, avg, max) = (0.109, 0.120, 0.140), stdev = 0.015
  CI (99.9%): [0.063, 0.177] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 56.57% complete, ETA 05:44:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.373 ms/op
# Warmup Iteration   2: 0.259 ms/op
# Warmup Iteration   3: 0.283 ms/op
# Warmup Iteration   4: 0.290 ms/op
# Warmup Iteration   5: 0.248 ms/op
Iteration   1: 0.323 ms/op
Iteration   2: 0.229 ms/op
Iteration   3: 0.272 ms/op
Iteration   4: 0.239 ms/op
Iteration   5: 0.227 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.258 ±(99.9%) 0.157 ms/op [Average]
  (min, avg, max) = (0.227, 0.258, 0.323), stdev = 0.041
  CI (99.9%): [0.101, 0.415] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 56.65% complete, ETA 05:43:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.303 ms/op
# Warmup Iteration   2: 0.319 ms/op
# Warmup Iteration   3: 0.403 ms/op
# Warmup Iteration   4: 0.345 ms/op
# Warmup Iteration   5: 0.279 ms/op
Iteration   1: 0.259 ms/op
Iteration   2: 0.217 ms/op
Iteration   3: 0.259 ms/op
Iteration   4: 0.220 ms/op
Iteration   5: 0.221 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.235 ±(99.9%) 0.083 ms/op [Average]
  (min, avg, max) = (0.217, 0.235, 0.259), stdev = 0.022
  CI (99.9%): [0.152, 0.318] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 56.73% complete, ETA 05:42:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 56.81% complete, ETA 05:41:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 56.89% complete, ETA 05:40:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 56.97% complete, ETA 05:39:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 57.05% complete, ETA 05:38:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 57.13% complete, ETA 05:37:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 57.21% complete, ETA 05:36:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 57.29% complete, ETA 05:35:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 57.37% complete, ETA 05:34:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 57.45% complete, ETA 05:33:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 57.53% complete, ETA 05:32:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 57.61% complete, ETA 05:32:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 57.69% complete, ETA 05:31:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 57.77% complete, ETA 05:30:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 57.85% complete, ETA 05:29:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 57.93% complete, ETA 05:28:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 58.01% complete, ETA 05:27:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 58.09% complete, ETA 05:26:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 58.17% complete, ETA 05:25:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.006, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 58.25% complete, ETA 05:24:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.005, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 58.33% complete, ETA 05:23:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.013 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.012, 0.013, 0.013), stdev = 0.001
  CI (99.9%): [0.012, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 58.41% complete, ETA 05:22:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.012 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.012, 0.012, 0.012), stdev = 0.001
  CI (99.9%): [0.012, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 58.49% complete, ETA 05:21:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.026 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.025, 0.026, 0.027), stdev = 0.001
  CI (99.9%): [0.023, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 58.57% complete, ETA 05:20:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.025 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.024, 0.025, 0.026), stdev = 0.001
  CI (99.9%): [0.022, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 58.65% complete, ETA 05:19:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
# Warmup Iteration   2: 0.051 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.049 ms/op
# Warmup Iteration   5: 0.050 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.049 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.048 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.048, 0.048, 0.049), stdev = 0.001
  CI (99.9%): [0.047, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 58.73% complete, ETA 05:18:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
# Warmup Iteration   2: 0.047 ms/op
# Warmup Iteration   3: 0.048 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.046 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.048 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.046, 0.048, 0.051), stdev = 0.002
  CI (99.9%): [0.041, 0.055] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 58.81% complete, ETA 05:17:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.102 ms/op
# Warmup Iteration   2: 0.103 ms/op
# Warmup Iteration   3: 0.103 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.104 ms/op
Iteration   1: 0.101 ms/op
Iteration   2: 0.098 ms/op
Iteration   3: 0.107 ms/op
Iteration   4: 0.100 ms/op
Iteration   5: 0.102 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.101 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.098, 0.101, 0.107), stdev = 0.003
  CI (99.9%): [0.089, 0.114] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 58.89% complete, ETA 05:16:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.104 ms/op
# Warmup Iteration   2: 0.103 ms/op
# Warmup Iteration   3: 0.100 ms/op
# Warmup Iteration   4: 0.100 ms/op
# Warmup Iteration   5: 0.101 ms/op
Iteration   1: 0.099 ms/op
Iteration   2: 0.101 ms/op
Iteration   3: 0.101 ms/op
Iteration   4: 0.104 ms/op
Iteration   5: 0.100 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.101 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.099, 0.101, 0.104), stdev = 0.002
  CI (99.9%): [0.094, 0.108] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 58.97% complete, ETA 05:15:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.205 ms/op
# Warmup Iteration   2: 0.201 ms/op
# Warmup Iteration   3: 0.198 ms/op
# Warmup Iteration   4: 0.198 ms/op
# Warmup Iteration   5: 0.201 ms/op
Iteration   1: 0.200 ms/op
Iteration   2: 0.197 ms/op
Iteration   3: 0.188 ms/op
Iteration   4: 0.212 ms/op
Iteration   5: 0.209 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.201 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.188, 0.201, 0.212), stdev = 0.010
  CI (99.9%): [0.164, 0.238] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 59.05% complete, ETA 05:15:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.209 ms/op
# Warmup Iteration   2: 0.200 ms/op
# Warmup Iteration   3: 0.201 ms/op
# Warmup Iteration   4: 0.208 ms/op
# Warmup Iteration   5: 0.200 ms/op
Iteration   1: 0.205 ms/op
Iteration   2: 0.208 ms/op
Iteration   3: 0.200 ms/op
Iteration   4: 0.207 ms/op
Iteration   5: 0.203 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.204 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.200, 0.204, 0.208), stdev = 0.003
  CI (99.9%): [0.193, 0.216] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 59.13% complete, ETA 05:14:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 59.21% complete, ETA 05:13:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 59.29% complete, ETA 05:12:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 59.38% complete, ETA 05:11:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 59.46% complete, ETA 05:10:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 59.54% complete, ETA 05:09:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 59.62% complete, ETA 05:08:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 59.70% complete, ETA 05:07:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 59.78% complete, ETA 05:06:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 59.86% complete, ETA 05:05:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 59.94% complete, ETA 05:05:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 60.02% complete, ETA 05:04:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 60.10% complete, ETA 05:03:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 60.18% complete, ETA 05:02:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 60.26% complete, ETA 05:01:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 60.34% complete, ETA 05:00:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 60.42% complete, ETA 04:59:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 60.50% complete, ETA 04:58:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 60.58% complete, ETA 04:57:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.005, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 60.66% complete, ETA 04:57:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.005, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 60.74% complete, ETA 04:56:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.012 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.012, 0.012, 0.013), stdev = 0.001
  CI (99.9%): [0.011, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 60.82% complete, ETA 04:55:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.012 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.012, 0.012, 0.013), stdev = 0.001
  CI (99.9%): [0.012, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 60.90% complete, ETA 04:54:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.025 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.025, 0.025, 0.026), stdev = 0.001
  CI (99.9%): [0.024, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 60.98% complete, ETA 04:53:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.025 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.025, 0.025, 0.026), stdev = 0.001
  CI (99.9%): [0.023, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 61.06% complete, ETA 04:52:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
# Warmup Iteration   2: 0.050 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.050 ms/op
# Warmup Iteration   5: 0.052 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.050 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.050, 0.050, 0.051), stdev = 0.001
  CI (99.9%): [0.048, 0.052] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 61.14% complete, ETA 04:51:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.050 ms/op
# Warmup Iteration   3: 0.050 ms/op
# Warmup Iteration   4: 0.050 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.052 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.052 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.052 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.050, 0.052, 0.053), stdev = 0.001
  CI (99.9%): [0.047, 0.056] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 61.22% complete, ETA 04:50:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.099 ms/op
# Warmup Iteration   2: 0.102 ms/op
# Warmup Iteration   3: 0.105 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.106 ms/op
Iteration   1: 0.108 ms/op
Iteration   2: 0.099 ms/op
Iteration   3: 0.092 ms/op
Iteration   4: 0.101 ms/op
Iteration   5: 0.095 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.099 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.092, 0.099, 0.108), stdev = 0.006
  CI (99.9%): [0.076, 0.122] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 61.30% complete, ETA 04:49:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.107 ms/op
# Warmup Iteration   2: 0.103 ms/op
# Warmup Iteration   3: 0.103 ms/op
# Warmup Iteration   4: 0.102 ms/op
# Warmup Iteration   5: 0.103 ms/op
Iteration   1: 0.101 ms/op
Iteration   2: 0.102 ms/op
Iteration   3: 0.101 ms/op
Iteration   4: 0.099 ms/op
Iteration   5: 0.102 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.101 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.099, 0.101, 0.102), stdev = 0.001
  CI (99.9%): [0.097, 0.106] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 61.38% complete, ETA 04:49:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.204 ms/op
# Warmup Iteration   2: 0.202 ms/op
# Warmup Iteration   3: 0.207 ms/op
# Warmup Iteration   4: 0.201 ms/op
# Warmup Iteration   5: 0.203 ms/op
Iteration   1: 0.206 ms/op
Iteration   2: 0.205 ms/op
Iteration   3: 0.212 ms/op
Iteration   4: 0.207 ms/op
Iteration   5: 0.203 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.207 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.203, 0.207, 0.212), stdev = 0.003
  CI (99.9%): [0.193, 0.220] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 61.46% complete, ETA 04:48:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.201 ms/op
# Warmup Iteration   2: 0.202 ms/op
# Warmup Iteration   3: 0.202 ms/op
# Warmup Iteration   4: 0.205 ms/op
# Warmup Iteration   5: 0.201 ms/op
Iteration   1: 0.208 ms/op
Iteration   2: 0.206 ms/op
Iteration   3: 0.197 ms/op
Iteration   4: 0.189 ms/op
Iteration   5: 0.190 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.198 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.189, 0.198, 0.208), stdev = 0.009
  CI (99.9%): [0.163, 0.233] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 61.54% complete, ETA 04:47:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 61.62% complete, ETA 04:46:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 61.70% complete, ETA 04:45:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 61.78% complete, ETA 04:44:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 61.86% complete, ETA 04:43:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 61.94% complete, ETA 04:43:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 62.02% complete, ETA 04:42:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 62.10% complete, ETA 04:41:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 62.18% complete, ETA 04:40:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 62.26% complete, ETA 04:39:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 62.34% complete, ETA 04:38:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 62.42% complete, ETA 04:38:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 62.50% complete, ETA 04:37:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 62.58% complete, ETA 04:36:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 62.66% complete, ETA 04:35:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 62.74% complete, ETA 04:34:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 62.82% complete, ETA 04:33:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 62.90% complete, ETA 04:33:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 62.98% complete, ETA 04:32:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.005, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 63.06% complete, ETA 04:31:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.005, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 63.14% complete, ETA 04:30:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.012 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.012, 0.012, 0.013), stdev = 0.001
  CI (99.9%): [0.010, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 63.22% complete, ETA 04:29:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.013 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.012, 0.013, 0.013), stdev = 0.001
  CI (99.9%): [0.012, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 63.30% complete, ETA 04:28:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.025 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.025, 0.025, 0.025), stdev = 0.001
  CI (99.9%): [0.025, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 63.38% complete, ETA 04:28:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.025 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.025, 0.025, 0.025), stdev = 0.001
  CI (99.9%): [0.024, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 63.46% complete, ETA 04:27:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.051 ms/op
# Warmup Iteration   3: 0.050 ms/op
# Warmup Iteration   4: 0.050 ms/op
# Warmup Iteration   5: 0.050 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.050 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.050, 0.050, 0.051), stdev = 0.001
  CI (99.9%): [0.048, 0.052] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 63.54% complete, ETA 04:26:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
# Warmup Iteration   2: 0.050 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.050 ms/op
# Warmup Iteration   5: 0.050 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.049 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.050 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.048, 0.050, 0.051), stdev = 0.001
  CI (99.9%): [0.045, 0.055] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 63.62% complete, ETA 04:25:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.103 ms/op
# Warmup Iteration   2: 0.101 ms/op
# Warmup Iteration   3: 0.101 ms/op
# Warmup Iteration   4: 0.103 ms/op
# Warmup Iteration   5: 0.102 ms/op
Iteration   1: 0.105 ms/op
Iteration   2: 0.101 ms/op
Iteration   3: 0.097 ms/op
Iteration   4: 0.119 ms/op
Iteration   5: 0.139 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.112 ±(99.9%) 0.066 ms/op [Average]
  (min, avg, max) = (0.097, 0.112, 0.139), stdev = 0.017
  CI (99.9%): [0.046, 0.178] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 63.70% complete, ETA 04:24:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.103 ms/op
# Warmup Iteration   2: 0.102 ms/op
# Warmup Iteration   3: 0.099 ms/op
# Warmup Iteration   4: 0.100 ms/op
# Warmup Iteration   5: 0.101 ms/op
Iteration   1: 0.096 ms/op
Iteration   2: 0.099 ms/op
Iteration   3: 0.128 ms/op
Iteration   4: 0.150 ms/op
Iteration   5: 0.148 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.124 ±(99.9%) 0.100 ms/op [Average]
  (min, avg, max) = (0.096, 0.124, 0.150), stdev = 0.026
  CI (99.9%): [0.024, 0.225] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 63.78% complete, ETA 04:23:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.188 ms/op
# Warmup Iteration   2: 0.187 ms/op
# Warmup Iteration   3: 0.194 ms/op
# Warmup Iteration   4: 0.207 ms/op
# Warmup Iteration   5: 0.210 ms/op
Iteration   1: 0.211 ms/op
Iteration   2: 0.208 ms/op
Iteration   3: 0.266 ms/op
Iteration   4: 0.310 ms/op
Iteration   5: 0.277 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.254 ±(99.9%) 0.170 ms/op [Average]
  (min, avg, max) = (0.208, 0.254, 0.310), stdev = 0.044
  CI (99.9%): [0.084, 0.424] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 63.86% complete, ETA 04:23:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.185 ms/op
# Warmup Iteration   2: 0.182 ms/op
# Warmup Iteration   3: 0.183 ms/op
# Warmup Iteration   4: 0.182 ms/op
# Warmup Iteration   5: 0.187 ms/op
Iteration   1: 0.199 ms/op
Iteration   2: 0.200 ms/op
Iteration   3: 0.252 ms/op
Iteration   4: 0.288 ms/op
Iteration   5: 0.290 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.246 ±(99.9%) 0.173 ms/op [Average]
  (min, avg, max) = (0.199, 0.246, 0.290), stdev = 0.045
  CI (99.9%): [0.072, 0.419] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 63.94% complete, ETA 04:22:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 64.02% complete, ETA 04:21:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 64.10% complete, ETA 04:20:41
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 64.18% complete, ETA 04:19:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 64.26% complete, ETA 04:19:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 64.34% complete, ETA 04:18:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 64.42% complete, ETA 04:17:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 64.50% complete, ETA 04:16:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 64.58% complete, ETA 04:15:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 64.66% complete, ETA 04:15:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 64.74% complete, ETA 04:14:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 64.82% complete, ETA 04:13:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 64.90% complete, ETA 04:12:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 64.98% complete, ETA 04:11:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 65.06% complete, ETA 04:11:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 65.14% complete, ETA 04:10:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 65.22% complete, ETA 04:09:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 10?³, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 65.30% complete, ETA 04:08:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 10?³, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 65.38% complete, ETA 04:07:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.008 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [0.001, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 65.46% complete, ETA 04:07:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.008 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [0.001, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 65.54% complete, ETA 04:06:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.016 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.013, 0.016, 0.022), stdev = 0.004
  CI (99.9%): [0.001, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 65.63% complete, ETA 04:05:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.016 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.013, 0.016, 0.021), stdev = 0.004
  CI (99.9%): [0.001, 0.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 65.71% complete, ETA 04:04:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.032 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.026, 0.032, 0.043), stdev = 0.008
  CI (99.9%): [0.003, 0.061] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 65.79% complete, ETA 04:04:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.030 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.025, 0.030, 0.039), stdev = 0.006
  CI (99.9%): [0.007, 0.054] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 65.87% complete, ETA 04:03:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.051 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.052 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.047 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.049 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.047, 0.049, 0.053), stdev = 0.003
  CI (99.9%): [0.038, 0.061] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 65.95% complete, ETA 04:02:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.048 ms/op
# Warmup Iteration   3: 0.049 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.054 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.047 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.048 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.047, 0.048, 0.051), stdev = 0.002
  CI (99.9%): [0.041, 0.054] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 66.03% complete, ETA 04:01:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.096 ms/op
# Warmup Iteration   2: 0.094 ms/op
# Warmup Iteration   3: 0.094 ms/op
# Warmup Iteration   4: 0.095 ms/op
# Warmup Iteration   5: 0.094 ms/op
Iteration   1: 0.094 ms/op
Iteration   2: 0.094 ms/op
Iteration   3: 0.093 ms/op
Iteration   4: 0.094 ms/op
Iteration   5: 0.094 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.094 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.093, 0.094, 0.094), stdev = 0.001
  CI (99.9%): [0.093, 0.095] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 66.11% complete, ETA 04:00:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.094 ms/op
# Warmup Iteration   2: 0.093 ms/op
# Warmup Iteration   3: 0.093 ms/op
# Warmup Iteration   4: 0.094 ms/op
# Warmup Iteration   5: 0.094 ms/op
Iteration   1: 0.094 ms/op
Iteration   2: 0.093 ms/op
Iteration   3: 0.095 ms/op
Iteration   4: 0.096 ms/op
Iteration   5: 0.098 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.095 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.093, 0.095, 0.098), stdev = 0.002
  CI (99.9%): [0.087, 0.103] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 66.19% complete, ETA 04:00:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.219 ms/op
# Warmup Iteration   2: 0.211 ms/op
# Warmup Iteration   3: 0.205 ms/op
# Warmup Iteration   4: 0.208 ms/op
# Warmup Iteration   5: 0.194 ms/op
Iteration   1: 0.195 ms/op
Iteration   2: 0.201 ms/op
Iteration   3: 0.216 ms/op
Iteration   4: 0.206 ms/op
Iteration   5: 0.207 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.205 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.195, 0.205, 0.216), stdev = 0.008
  CI (99.9%): [0.175, 0.235] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 66.27% complete, ETA 03:59:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.207 ms/op
# Warmup Iteration   2: 0.203 ms/op
# Warmup Iteration   3: 0.202 ms/op
# Warmup Iteration   4: 0.202 ms/op
# Warmup Iteration   5: 0.204 ms/op
Iteration   1: 0.204 ms/op
Iteration   2: 0.192 ms/op
Iteration   3: 0.211 ms/op
Iteration   4: 0.211 ms/op
Iteration   5: 0.217 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.207 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.192, 0.207, 0.217), stdev = 0.010
  CI (99.9%): [0.170, 0.245] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 66.35% complete, ETA 03:58:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 66.43% complete, ETA 03:57:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 66.51% complete, ETA 03:57:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 66.59% complete, ETA 03:56:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 66.67% complete, ETA 03:55:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 66.75% complete, ETA 03:54:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 66.83% complete, ETA 03:54:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 66.91% complete, ETA 03:53:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 66.99% complete, ETA 03:52:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 67.07% complete, ETA 03:51:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 67.15% complete, ETA 03:51:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 67.23% complete, ETA 03:50:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 67.31% complete, ETA 03:49:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 67.39% complete, ETA 03:48:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 67.47% complete, ETA 03:48:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 67.55% complete, ETA 03:47:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 67.63% complete, ETA 03:46:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 67.71% complete, ETA 03:45:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 67.79% complete, ETA 03:45:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.006, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 67.87% complete, ETA 03:44:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 67.95% complete, ETA 03:43:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.013 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.013, 0.013, 0.013), stdev = 0.001
  CI (99.9%): [0.012, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 68.03% complete, ETA 03:42:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.013 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.013, 0.013, 0.013), stdev = 0.001
  CI (99.9%): [0.012, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 68.11% complete, ETA 03:42:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.027 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.026, 0.027, 0.028), stdev = 0.001
  CI (99.9%): [0.023, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 68.19% complete, ETA 03:41:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.024 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.024, 0.024, 0.026), stdev = 0.001
  CI (99.9%): [0.021, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 68.27% complete, ETA 03:40:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.050 ms/op
# Warmup Iteration   3: 0.050 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.051 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.049 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.047, 0.049, 0.051), stdev = 0.002
  CI (99.9%): [0.042, 0.056] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 68.35% complete, ETA 03:39:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
# Warmup Iteration   2: 0.048 ms/op
# Warmup Iteration   3: 0.048 ms/op
# Warmup Iteration   4: 0.049 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.049 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.051 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.050 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.048, 0.050, 0.052), stdev = 0.002
  CI (99.9%): [0.043, 0.057] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 68.43% complete, ETA 03:39:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.114 ms/op
# Warmup Iteration   2: 0.122 ms/op
# Warmup Iteration   3: 0.115 ms/op
# Warmup Iteration   4: 0.107 ms/op
# Warmup Iteration   5: 0.107 ms/op
Iteration   1: 0.111 ms/op
Iteration   2: 0.101 ms/op
Iteration   3: 0.096 ms/op
Iteration   4: 0.102 ms/op
Iteration   5: 0.092 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.100 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.092, 0.100, 0.111), stdev = 0.007
  CI (99.9%): [0.074, 0.127] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 68.51% complete, ETA 03:38:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.093 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.091 ms/op
# Warmup Iteration   5: 0.090 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.090 ms/op
Iteration   3: 0.091 ms/op
Iteration   4: 0.095 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.092 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.090, 0.092, 0.095), stdev = 0.002
  CI (99.9%): [0.084, 0.100] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 68.59% complete, ETA 03:37:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.188 ms/op
# Warmup Iteration   2: 0.184 ms/op
# Warmup Iteration   3: 0.181 ms/op
# Warmup Iteration   4: 0.181 ms/op
# Warmup Iteration   5: 0.183 ms/op
Iteration   1: 0.184 ms/op
Iteration   2: 0.181 ms/op
Iteration   3: 0.180 ms/op
Iteration   4: 0.190 ms/op
Iteration   5: 0.180 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.183 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.180, 0.183, 0.190), stdev = 0.004
  CI (99.9%): [0.167, 0.199] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 68.67% complete, ETA 03:36:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.183 ms/op
# Warmup Iteration   2: 0.187 ms/op
# Warmup Iteration   3: 0.181 ms/op
# Warmup Iteration   4: 0.187 ms/op
# Warmup Iteration   5: 0.183 ms/op
Iteration   1: 0.181 ms/op
Iteration   2: 0.182 ms/op
Iteration   3: 0.187 ms/op
Iteration   4: 0.183 ms/op
Iteration   5: 0.203 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.187 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.181, 0.187, 0.203), stdev = 0.009
  CI (99.9%): [0.152, 0.223] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 68.75% complete, ETA 03:36:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 68.83% complete, ETA 03:35:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 68.91% complete, ETA 03:34:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 68.99% complete, ETA 03:34:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 69.07% complete, ETA 03:33:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 69.15% complete, ETA 03:32:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 69.23% complete, ETA 03:31:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 69.31% complete, ETA 03:31:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 69.39% complete, ETA 03:30:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 69.47% complete, ETA 03:29:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 69.55% complete, ETA 03:29:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 69.63% complete, ETA 03:28:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 69.71% complete, ETA 03:27:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 69.79% complete, ETA 03:26:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 69.87% complete, ETA 03:26:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 69.95% complete, ETA 03:25:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 70.03% complete, ETA 03:24:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 70.11% complete, ETA 03:24:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 70.19% complete, ETA 03:23:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.006, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 70.27% complete, ETA 03:22:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.005, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 70.35% complete, ETA 03:22:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.012 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.012, 0.012, 0.013), stdev = 0.001
  CI (99.9%): [0.011, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 70.43% complete, ETA 03:21:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.013 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.012, 0.013, 0.013), stdev = 0.001
  CI (99.9%): [0.011, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 70.51% complete, ETA 03:20:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.026 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.025, 0.026, 0.027), stdev = 0.001
  CI (99.9%): [0.023, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 70.59% complete, ETA 03:19:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.025 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.024, 0.025, 0.025), stdev = 0.001
  CI (99.9%): [0.024, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 70.67% complete, ETA 03:19:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
# Warmup Iteration   2: 0.050 ms/op
# Warmup Iteration   3: 0.050 ms/op
# Warmup Iteration   4: 0.049 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.049 ms/op
Iteration   3: 0.049 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.049 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.049, 0.049, 0.050), stdev = 0.001
  CI (99.9%): [0.048, 0.051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 70.75% complete, ETA 03:18:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.049 ms/op
# Warmup Iteration   3: 0.049 ms/op
# Warmup Iteration   4: 0.049 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.049 ms/op
Iteration   3: 0.049 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.049 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.049 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.049, 0.049, 0.049), stdev = 0.001
  CI (99.9%): [0.048, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 70.83% complete, ETA 03:17:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.101 ms/op
# Warmup Iteration   2: 0.099 ms/op
# Warmup Iteration   3: 0.099 ms/op
# Warmup Iteration   4: 0.099 ms/op
# Warmup Iteration   5: 0.099 ms/op
Iteration   1: 0.099 ms/op
Iteration   2: 0.098 ms/op
Iteration   3: 0.100 ms/op
Iteration   4: 0.098 ms/op
Iteration   5: 0.102 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.099 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.098, 0.099, 0.102), stdev = 0.002
  CI (99.9%): [0.093, 0.106] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 70.91% complete, ETA 03:17:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.102 ms/op
# Warmup Iteration   2: 0.096 ms/op
# Warmup Iteration   3: 0.097 ms/op
# Warmup Iteration   4: 0.099 ms/op
# Warmup Iteration   5: 0.097 ms/op
Iteration   1: 0.097 ms/op
Iteration   2: 0.098 ms/op
Iteration   3: 0.098 ms/op
Iteration   4: 0.097 ms/op
Iteration   5: 0.098 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.098 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.097, 0.098, 0.098), stdev = 0.001
  CI (99.9%): [0.095, 0.100] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 70.99% complete, ETA 03:16:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.202 ms/op
# Warmup Iteration   2: 0.195 ms/op
# Warmup Iteration   3: 0.200 ms/op
# Warmup Iteration   4: 0.197 ms/op
# Warmup Iteration   5: 0.198 ms/op
Iteration   1: 0.196 ms/op
Iteration   2: 0.198 ms/op
Iteration   3: 0.195 ms/op
Iteration   4: 0.197 ms/op
Iteration   5: 0.193 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.196 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.193, 0.196, 0.198), stdev = 0.002
  CI (99.9%): [0.189, 0.203] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 71.07% complete, ETA 03:15:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.202 ms/op
# Warmup Iteration   2: 0.201 ms/op
# Warmup Iteration   3: 0.199 ms/op
# Warmup Iteration   4: 0.201 ms/op
# Warmup Iteration   5: 0.200 ms/op
Iteration   1: 0.198 ms/op
Iteration   2: 0.199 ms/op
Iteration   3: 0.200 ms/op
Iteration   4: 0.198 ms/op
Iteration   5: 0.199 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.199 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.198, 0.199, 0.200), stdev = 0.001
  CI (99.9%): [0.196, 0.202] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 71.15% complete, ETA 03:15:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 71.23% complete, ETA 03:14:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 71.31% complete, ETA 03:13:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 71.39% complete, ETA 03:13:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 71.47% complete, ETA 03:12:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 71.55% complete, ETA 03:11:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 71.63% complete, ETA 03:11:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 71.71% complete, ETA 03:10:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 71.79% complete, ETA 03:09:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 71.88% complete, ETA 03:09:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 71.96% complete, ETA 03:08:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 72.04% complete, ETA 03:07:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 72.12% complete, ETA 03:07:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 72.20% complete, ETA 03:06:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 10?³, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 72.28% complete, ETA 03:05:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.007 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.001
  CI (99.9%): [0.001, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 72.36% complete, ETA 03:04:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.007 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 72.44% complete, ETA 03:04:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.013 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.018), stdev = 0.004
  CI (99.9%): [? 0, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 72.52% complete, ETA 03:03:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.013 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.016), stdev = 0.002
  CI (99.9%): [0.005, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 72.60% complete, ETA 03:02:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.028 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.022, 0.028, 0.039), stdev = 0.007
  CI (99.9%): [0.002, 0.055] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 72.68% complete, ETA 03:02:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.039 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.033 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.026, 0.033, 0.042), stdev = 0.008
  CI (99.9%): [0.004, 0.062] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 72.76% complete, ETA 03:01:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.059 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.062 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.060 ms/op
Iteration   2: 0.063 ms/op
Iteration   3: 0.060 ms/op
Iteration   4: 0.046 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.053 ±(99.9%) 0.042 ms/op [Average]
  (min, avg, max) = (0.038, 0.053, 0.063), stdev = 0.011
  CI (99.9%): [0.012, 0.095] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 72.84% complete, ETA 03:00:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.043 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.074 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.051 ±(99.9%) 0.056 ms/op [Average]
  (min, avg, max) = (0.035, 0.051, 0.074), stdev = 0.014
  CI (99.9%): [? 0, 0.107] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 72.92% complete, ETA 03:00:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.094 ms/op
# Warmup Iteration   2: 0.092 ms/op
# Warmup Iteration   3: 0.081 ms/op
# Warmup Iteration   4: 0.082 ms/op
# Warmup Iteration   5: 0.075 ms/op
Iteration   1: 0.152 ms/op
Iteration   2: 0.083 ms/op
Iteration   3: 0.071 ms/op
Iteration   4: 0.105 ms/op
Iteration   5: 0.084 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.099 ±(99.9%) 0.123 ms/op [Average]
  (min, avg, max) = (0.071, 0.099, 0.152), stdev = 0.032
  CI (99.9%): [? 0, 0.222] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 73.00% complete, ETA 02:59:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.087 ms/op
# Warmup Iteration   2: 0.078 ms/op
# Warmup Iteration   3: 0.074 ms/op
# Warmup Iteration   4: 0.073 ms/op
# Warmup Iteration   5: 0.101 ms/op
Iteration   1: 0.114 ms/op
Iteration   2: 0.076 ms/op
Iteration   3: 0.070 ms/op
Iteration   4: 0.101 ms/op
Iteration   5: 0.074 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.087 ±(99.9%) 0.075 ms/op [Average]
  (min, avg, max) = (0.070, 0.087, 0.114), stdev = 0.020
  CI (99.9%): [0.012, 0.162] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 73.08% complete, ETA 02:58:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.174 ms/op
# Warmup Iteration   2: 0.152 ms/op
# Warmup Iteration   3: 0.148 ms/op
# Warmup Iteration   4: 0.152 ms/op
# Warmup Iteration   5: 0.182 ms/op
Iteration   1: 0.173 ms/op
Iteration   2: 0.126 ms/op
Iteration   3: 0.132 ms/op
Iteration   4: 0.128 ms/op
Iteration   5: 0.367 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.185 ±(99.9%) 0.398 ms/op [Average]
  (min, avg, max) = (0.126, 0.185, 0.367), stdev = 0.103
  CI (99.9%): [? 0, 0.583] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 73.16% complete, ETA 02:58:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.141 ms/op
# Warmup Iteration   2: 0.154 ms/op
# Warmup Iteration   3: 0.144 ms/op
# Warmup Iteration   4: 0.144 ms/op
# Warmup Iteration   5: 0.199 ms/op
Iteration   1: 0.137 ms/op
Iteration   2: 0.127 ms/op
Iteration   3: 0.163 ms/op
Iteration   4: 0.185 ms/op
Iteration   5: 0.129 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.148 ±(99.9%) 0.097 ms/op [Average]
  (min, avg, max) = (0.127, 0.148, 0.185), stdev = 0.025
  CI (99.9%): [0.051, 0.245] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 73.24% complete, ETA 02:57:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.301 ms/op
# Warmup Iteration   2: 0.314 ms/op
# Warmup Iteration   3: 0.288 ms/op
# Warmup Iteration   4: 0.306 ms/op
# Warmup Iteration   5: 0.395 ms/op
Iteration   1: 0.328 ms/op
Iteration   2: 0.263 ms/op
Iteration   3: 0.331 ms/op
Iteration   4: 0.297 ms/op
Iteration   5: 0.431 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.330 ±(99.9%) 0.242 ms/op [Average]
  (min, avg, max) = (0.263, 0.330, 0.431), stdev = 0.063
  CI (99.9%): [0.088, 0.572] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 73.32% complete, ETA 02:57:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.283 ms/op
# Warmup Iteration   2: 0.300 ms/op
# Warmup Iteration   3: 0.291 ms/op
# Warmup Iteration   4: 0.285 ms/op
# Warmup Iteration   5: 0.414 ms/op
Iteration   1: 0.357 ms/op
Iteration   2: 0.326 ms/op
Iteration   3: 0.403 ms/op
Iteration   4: 0.468 ms/op
Iteration   5: 0.290 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.369 ±(99.9%) 0.266 ms/op [Average]
  (min, avg, max) = (0.290, 0.369, 0.468), stdev = 0.069
  CI (99.9%): [0.103, 0.635] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 73.40% complete, ETA 02:56:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.697 ms/op
# Warmup Iteration   2: 0.649 ms/op
# Warmup Iteration   3: 0.604 ms/op
# Warmup Iteration   4: 0.641 ms/op
# Warmup Iteration   5: 0.723 ms/op
Iteration   1: 0.927 ms/op
Iteration   2: 0.594 ms/op
Iteration   3: 0.599 ms/op
Iteration   4: 0.920 ms/op
Iteration   5: 0.639 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.736 ±(99.9%) 0.663 ms/op [Average]
  (min, avg, max) = (0.594, 0.736, 0.927), stdev = 0.172
  CI (99.9%): [0.073, 1.398] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 73.48% complete, ETA 02:55:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.743 ms/op
# Warmup Iteration   2: 0.693 ms/op
# Warmup Iteration   3: 0.780 ms/op
# Warmup Iteration   4: 0.665 ms/op
# Warmup Iteration   5: 0.689 ms/op
Iteration   1: 1.036 ms/op
Iteration   2: 0.744 ms/op
Iteration   3: 0.559 ms/op
Iteration   4: 0.550 ms/op
Iteration   5: 1.106 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.799 ±(99.9%) 1.005 ms/op [Average]
  (min, avg, max) = (0.550, 0.799, 1.106), stdev = 0.261
  CI (99.9%): [? 0, 1.804] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 73.56% complete, ETA 02:55:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 73.64% complete, ETA 02:54:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.005 ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.005), stdev = 0.002
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 73.72% complete, ETA 02:53:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 73.80% complete, ETA 02:53:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 73.88% complete, ETA 02:52:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 73.96% complete, ETA 02:51:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 74.04% complete, ETA 02:51:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 74.12% complete, ETA 02:50:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 74.20% complete, ETA 02:49:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 74.28% complete, ETA 02:49:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 74.36% complete, ETA 02:48:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 74.44% complete, ETA 02:47:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 74.52% complete, ETA 02:47:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 74.60% complete, ETA 02:46:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 74.68% complete, ETA 02:46:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [0.001, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 74.76% complete, ETA 02:45:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 74.84% complete, ETA 02:44:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.013 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.018), stdev = 0.004
  CI (99.9%): [? 0, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 74.92% complete, ETA 02:44:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.014 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.017), stdev = 0.003
  CI (99.9%): [0.004, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 75.00% complete, ETA 02:43:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.024 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.018, 0.024, 0.036), stdev = 0.007
  CI (99.9%): [? 0, 0.051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 75.08% complete, ETA 02:42:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.033 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.026 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.022, 0.026, 0.033), stdev = 0.005
  CI (99.9%): [0.007, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 75.16% complete, ETA 02:42:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.043 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.056 ms/op
Iteration   2: 0.041 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.062 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.047 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (0.037, 0.047, 0.062), stdev = 0.011
  CI (99.9%): [0.003, 0.091] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 75.24% complete, ETA 02:41:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.054 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.052 ms/op
Iteration   3: 0.040 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.058 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.050 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.040, 0.050, 0.058), stdev = 0.008
  CI (99.9%): [0.018, 0.083] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 75.32% complete, ETA 02:40:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.094 ms/op
# Warmup Iteration   2: 0.092 ms/op
# Warmup Iteration   3: 0.095 ms/op
# Warmup Iteration   4: 0.085 ms/op
# Warmup Iteration   5: 0.087 ms/op
Iteration   1: 0.133 ms/op
Iteration   2: 0.107 ms/op
Iteration   3: 0.078 ms/op
Iteration   4: 0.112 ms/op
Iteration   5: 0.103 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.107 ±(99.9%) 0.075 ms/op [Average]
  (min, avg, max) = (0.078, 0.107, 0.133), stdev = 0.019
  CI (99.9%): [0.032, 0.182] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 75.40% complete, ETA 02:40:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.086 ms/op
# Warmup Iteration   2: 0.091 ms/op
# Warmup Iteration   3: 0.101 ms/op
# Warmup Iteration   4: 0.094 ms/op
# Warmup Iteration   5: 0.107 ms/op
Iteration   1: 0.126 ms/op
Iteration   2: 0.118 ms/op
Iteration   3: 0.084 ms/op
Iteration   4: 0.095 ms/op
Iteration   5: 0.107 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.106 ±(99.9%) 0.065 ms/op [Average]
  (min, avg, max) = (0.084, 0.106, 0.126), stdev = 0.017
  CI (99.9%): [0.041, 0.171] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 75.48% complete, ETA 02:39:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.166 ms/op
# Warmup Iteration   2: 0.179 ms/op
# Warmup Iteration   3: 0.176 ms/op
# Warmup Iteration   4: 0.165 ms/op
# Warmup Iteration   5: 0.158 ms/op
Iteration   1: 0.283 ms/op
Iteration   2: 0.141 ms/op
Iteration   3: 0.144 ms/op
Iteration   4: 0.141 ms/op
Iteration   5: 0.218 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.185 ±(99.9%) 0.245 ms/op [Average]
  (min, avg, max) = (0.141, 0.185, 0.283), stdev = 0.064
  CI (99.9%): [? 0, 0.431] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 75.56% complete, ETA 02:39:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.165 ms/op
# Warmup Iteration   2: 0.168 ms/op
# Warmup Iteration   3: 0.160 ms/op
# Warmup Iteration   4: 0.149 ms/op
# Warmup Iteration   5: 0.199 ms/op
Iteration   1: 0.151 ms/op
Iteration   2: 0.151 ms/op
Iteration   3: 0.162 ms/op
Iteration   4: 0.145 ms/op
Iteration   5: 0.258 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.173 ±(99.9%) 0.184 ms/op [Average]
  (min, avg, max) = (0.145, 0.173, 0.258), stdev = 0.048
  CI (99.9%): [? 0, 0.357] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 75.64% complete, ETA 02:38:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.324 ms/op
# Warmup Iteration   2: 0.319 ms/op
# Warmup Iteration   3: 0.308 ms/op
# Warmup Iteration   4: 0.294 ms/op
# Warmup Iteration   5: 0.400 ms/op
Iteration   1: 0.312 ms/op
Iteration   2: 0.305 ms/op
Iteration   3: 0.361 ms/op
Iteration   4: 0.271 ms/op
Iteration   5: 0.481 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.346 ±(99.9%) 0.316 ms/op [Average]
  (min, avg, max) = (0.271, 0.346, 0.481), stdev = 0.082
  CI (99.9%): [0.030, 0.662] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 75.72% complete, ETA 02:37:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.333 ms/op
# Warmup Iteration   2: 0.341 ms/op
# Warmup Iteration   3: 0.336 ms/op
# Warmup Iteration   4: 0.309 ms/op
# Warmup Iteration   5: 0.371 ms/op
Iteration   1: 0.385 ms/op
Iteration   2: 0.305 ms/op
Iteration   3: 0.314 ms/op
Iteration   4: 0.359 ms/op
Iteration   5: 0.307 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.334 ±(99.9%) 0.139 ms/op [Average]
  (min, avg, max) = (0.305, 0.334, 0.385), stdev = 0.036
  CI (99.9%): [0.195, 0.473] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 75.80% complete, ETA 02:37:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.640 ms/op
# Warmup Iteration   2: 0.658 ms/op
# Warmup Iteration   3: 0.634 ms/op
# Warmup Iteration   4: 0.656 ms/op
# Warmup Iteration   5: 0.748 ms/op
Iteration   1: 0.790 ms/op
Iteration   2: 0.579 ms/op
Iteration   3: 0.650 ms/op
Iteration   4: 0.988 ms/op
Iteration   5: 0.568 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.715 ±(99.9%) 0.679 ms/op [Average]
  (min, avg, max) = (0.568, 0.715, 0.988), stdev = 0.176
  CI (99.9%): [0.036, 1.394] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 75.88% complete, ETA 02:36:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.682 ms/op
# Warmup Iteration   2: 0.724 ms/op
# Warmup Iteration   3: 0.844 ms/op
# Warmup Iteration   4: 0.744 ms/op
# Warmup Iteration   5: 0.720 ms/op
Iteration   1: 0.973 ms/op
Iteration   2: 0.813 ms/op
Iteration   3: 0.621 ms/op
Iteration   4: 0.693 ms/op
Iteration   5: 0.839 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.788 ±(99.9%) 0.525 ms/op [Average]
  (min, avg, max) = (0.621, 0.788, 0.973), stdev = 0.136
  CI (99.9%): [0.263, 1.312] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 75.96% complete, ETA 02:35:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 76.04% complete, ETA 02:35:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 76.12% complete, ETA 02:34:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 76.20% complete, ETA 02:34:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 76.28% complete, ETA 02:33:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 76.36% complete, ETA 02:32:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 76.44% complete, ETA 02:32:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 76.52% complete, ETA 02:31:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 76.60% complete, ETA 02:30:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 76.68% complete, ETA 02:30:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 76.76% complete, ETA 02:29:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 76.84% complete, ETA 02:29:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 76.92% complete, ETA 02:28:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 77.00% complete, ETA 02:27:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 77.08% complete, ETA 02:27:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.002, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 77.16% complete, ETA 02:26:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.007 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [0.001, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 77.24% complete, ETA 02:26:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.013 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.016), stdev = 0.002
  CI (99.9%): [0.005, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 77.32% complete, ETA 02:25:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.016 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.019), stdev = 0.003
  CI (99.9%): [0.003, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 77.40% complete, ETA 02:24:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.051 ms/op
# Warmup Iteration   5: 0.050 ms/op
Iteration   1: 0.039 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.029 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.026, 0.029, 0.039), stdev = 0.006
  CI (99.9%): [0.008, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 77.48% complete, ETA 02:24:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.021 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.018, 0.021, 0.025), stdev = 0.003
  CI (99.9%): [0.009, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 77.56% complete, ETA 02:23:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.042 ms/op
# Warmup Iteration   2: 0.049 ms/op
# Warmup Iteration   3: 0.048 ms/op
# Warmup Iteration   4: 0.054 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.049 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.064 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.056 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.045, 0.056, 0.064), stdev = 0.009
  CI (99.9%): [0.023, 0.089] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 77.64% complete, ETA 02:23:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.042 ms/op
# Warmup Iteration   2: 0.041 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.039 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.044 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.036, 0.044, 0.051), stdev = 0.007
  CI (99.9%): [0.017, 0.070] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 77.72% complete, ETA 02:22:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.086 ms/op
# Warmup Iteration   2: 0.084 ms/op
# Warmup Iteration   3: 0.088 ms/op
# Warmup Iteration   4: 0.077 ms/op
# Warmup Iteration   5: 0.086 ms/op
Iteration   1: 0.087 ms/op
Iteration   2: 0.123 ms/op
Iteration   3: 0.082 ms/op
Iteration   4: 0.076 ms/op
Iteration   5: 0.093 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.092 ±(99.9%) 0.070 ms/op [Average]
  (min, avg, max) = (0.076, 0.092, 0.123), stdev = 0.018
  CI (99.9%): [0.022, 0.162] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 77.80% complete, ETA 02:21:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.113 ms/op
# Warmup Iteration   2: 0.085 ms/op
# Warmup Iteration   3: 0.099 ms/op
# Warmup Iteration   4: 0.095 ms/op
# Warmup Iteration   5: 0.105 ms/op
Iteration   1: 0.129 ms/op
Iteration   2: 0.124 ms/op
Iteration   3: 0.090 ms/op
Iteration   4: 0.077 ms/op
Iteration   5: 0.108 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.106 ±(99.9%) 0.086 ms/op [Average]
  (min, avg, max) = (0.077, 0.106, 0.129), stdev = 0.022
  CI (99.9%): [0.020, 0.191] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 77.88% complete, ETA 02:21:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.189 ms/op
# Warmup Iteration   2: 0.167 ms/op
# Warmup Iteration   3: 0.193 ms/op
# Warmup Iteration   4: 0.192 ms/op
# Warmup Iteration   5: 0.168 ms/op
Iteration   1: 0.282 ms/op
Iteration   2: 0.176 ms/op
Iteration   3: 0.193 ms/op
Iteration   4: 0.270 ms/op
Iteration   5: 0.178 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.220 ±(99.9%) 0.199 ms/op [Average]
  (min, avg, max) = (0.176, 0.220, 0.282), stdev = 0.052
  CI (99.9%): [0.021, 0.419] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 77.96% complete, ETA 02:20:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.216 ms/op
# Warmup Iteration   2: 0.204 ms/op
# Warmup Iteration   3: 0.184 ms/op
# Warmup Iteration   4: 0.288 ms/op
# Warmup Iteration   5: 0.205 ms/op
Iteration   1: 0.261 ms/op
Iteration   2: 0.278 ms/op
Iteration   3: 0.275 ms/op
Iteration   4: 0.192 ms/op
Iteration   5: 0.178 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.237 ±(99.9%) 0.184 ms/op [Average]
  (min, avg, max) = (0.178, 0.237, 0.278), stdev = 0.048
  CI (99.9%): [0.053, 0.421] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 78.04% complete, ETA 02:19:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.340 ms/op
# Warmup Iteration   2: 0.306 ms/op
# Warmup Iteration   3: 0.388 ms/op
# Warmup Iteration   4: 0.358 ms/op
# Warmup Iteration   5: 0.427 ms/op
Iteration   1: 0.402 ms/op
Iteration   2: 0.328 ms/op
Iteration   3: 0.352 ms/op
Iteration   4: 0.296 ms/op
Iteration   5: 0.301 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.336 ±(99.9%) 0.168 ms/op [Average]
  (min, avg, max) = (0.296, 0.336, 0.402), stdev = 0.044
  CI (99.9%): [0.168, 0.504] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 78.13% complete, ETA 02:19:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.334 ms/op
# Warmup Iteration   2: 0.307 ms/op
# Warmup Iteration   3: 0.387 ms/op
# Warmup Iteration   4: 0.314 ms/op
# Warmup Iteration   5: 0.417 ms/op
Iteration   1: 0.402 ms/op
Iteration   2: 0.442 ms/op
Iteration   3: 0.380 ms/op
Iteration   4: 0.327 ms/op
Iteration   5: 0.368 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.384 ±(99.9%) 0.164 ms/op [Average]
  (min, avg, max) = (0.327, 0.384, 0.442), stdev = 0.043
  CI (99.9%): [0.220, 0.548] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 78.21% complete, ETA 02:18:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.899 ms/op
# Warmup Iteration   2: 1.040 ms/op
# Warmup Iteration   3: 0.827 ms/op
# Warmup Iteration   4: 1.015 ms/op
# Warmup Iteration   5: 0.834 ms/op
Iteration   1: 1.017 ms/op
Iteration   2: 1.101 ms/op
Iteration   3: 0.959 ms/op
Iteration   4: 1.061 ms/op
Iteration   5: 0.908 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  1.009 ±(99.9%) 0.298 ms/op [Average]
  (min, avg, max) = (0.908, 1.009, 1.101), stdev = 0.077
  CI (99.9%): [0.712, 1.307] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 78.29% complete, ETA 02:18:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.679 ms/op
# Warmup Iteration   2: 0.682 ms/op
# Warmup Iteration   3: 0.745 ms/op
# Warmup Iteration   4: 0.616 ms/op
# Warmup Iteration   5: 0.645 ms/op
Iteration   1: 1.096 ms/op
Iteration   2: 0.730 ms/op
Iteration   3: 0.531 ms/op
Iteration   4: 0.759 ms/op
Iteration   5: 0.677 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.759 ±(99.9%) 0.801 ms/op [Average]
  (min, avg, max) = (0.531, 0.759, 1.096), stdev = 0.208
  CI (99.9%): [? 0, 1.560] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 78.37% complete, ETA 02:17:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.002 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 78.45% complete, ETA 02:17:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.003 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.003), stdev = 0.002
  CI (99.9%): [? 0, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 78.53% complete, ETA 02:16:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.001 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 78.61% complete, ETA 02:15:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 78.69% complete, ETA 02:15:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 78.77% complete, ETA 02:14:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 78.85% complete, ETA 02:14:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 78.93% complete, ETA 02:13:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 79.01% complete, ETA 02:12:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 79.09% complete, ETA 02:12:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 79.17% complete, ETA 02:11:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 79.25% complete, ETA 02:11:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 79.33% complete, ETA 02:10:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 79.41% complete, ETA 02:09:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 79.49% complete, ETA 02:09:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 79.57% complete, ETA 02:08:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.007 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.001
  CI (99.9%): [0.002, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 79.65% complete, ETA 02:08:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.013 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.017), stdev = 0.003
  CI (99.9%): [0.003, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 79.73% complete, ETA 02:07:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.011 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.009, 0.011, 0.013), stdev = 0.002
  CI (99.9%): [0.004, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 79.81% complete, ETA 02:07:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.021 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.018, 0.021, 0.025), stdev = 0.003
  CI (99.9%): [0.009, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 79.89% complete, ETA 02:06:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.022 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.017, 0.022, 0.030), stdev = 0.006
  CI (99.9%): [? 10?³, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 79.97% complete, ETA 02:05:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.041 ms/op
# Warmup Iteration   2: 0.040 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.037 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.040 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.059 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.043 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.036, 0.043, 0.059), stdev = 0.009
  CI (99.9%): [0.007, 0.078] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 80.05% complete, ETA 02:05:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.040 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.042 ms/op
# Warmup Iteration   5: 0.043 ms/op
Iteration   1: 0.075 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.048 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.037, 0.048, 0.075), stdev = 0.016
  CI (99.9%): [? 0, 0.109] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 80.13% complete, ETA 02:04:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.084 ms/op
# Warmup Iteration   2: 0.081 ms/op
# Warmup Iteration   3: 0.080 ms/op
# Warmup Iteration   4: 0.085 ms/op
# Warmup Iteration   5: 0.087 ms/op
Iteration   1: 0.144 ms/op
Iteration   2: 0.082 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.111 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.100 ±(99.9%) 0.108 ms/op [Average]
  (min, avg, max) = (0.074, 0.100, 0.144), stdev = 0.028
  CI (99.9%): [? 0, 0.208] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 80.21% complete, ETA 02:04:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.101 ms/op
# Warmup Iteration   2: 0.087 ms/op
# Warmup Iteration   3: 0.096 ms/op
# Warmup Iteration   4: 0.084 ms/op
# Warmup Iteration   5: 0.091 ms/op
Iteration   1: 0.133 ms/op
Iteration   2: 0.118 ms/op
Iteration   3: 0.082 ms/op
Iteration   4: 0.081 ms/op
Iteration   5: 0.076 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.098 ±(99.9%) 0.099 ms/op [Average]
  (min, avg, max) = (0.076, 0.098, 0.133), stdev = 0.026
  CI (99.9%): [? 0, 0.197] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 80.29% complete, ETA 02:03:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.146 ms/op
# Warmup Iteration   2: 0.179 ms/op
# Warmup Iteration   3: 0.179 ms/op
# Warmup Iteration   4: 0.194 ms/op
# Warmup Iteration   5: 0.167 ms/op
Iteration   1: 0.317 ms/op
Iteration   2: 0.209 ms/op
Iteration   3: 0.139 ms/op
Iteration   4: 0.171 ms/op
Iteration   5: 0.176 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.202 ±(99.9%) 0.265 ms/op [Average]
  (min, avg, max) = (0.139, 0.202, 0.317), stdev = 0.069
  CI (99.9%): [? 0, 0.467] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 80.37% complete, ETA 02:02:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.193 ms/op
# Warmup Iteration   2: 0.169 ms/op
# Warmup Iteration   3: 0.173 ms/op
# Warmup Iteration   4: 0.172 ms/op
# Warmup Iteration   5: 0.174 ms/op
Iteration   1: 0.317 ms/op
Iteration   2: 0.164 ms/op
Iteration   3: 0.167 ms/op
Iteration   4: 0.177 ms/op
Iteration   5: 0.132 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.191 ±(99.9%) 0.278 ms/op [Average]
  (min, avg, max) = (0.132, 0.191, 0.317), stdev = 0.072
  CI (99.9%): [? 0, 0.469] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 80.45% complete, ETA 02:02:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.314 ms/op
# Warmup Iteration   2: 0.347 ms/op
# Warmup Iteration   3: 0.337 ms/op
# Warmup Iteration   4: 0.389 ms/op
# Warmup Iteration   5: 0.304 ms/op
Iteration   1: 0.565 ms/op
Iteration   2: 0.352 ms/op
Iteration   3: 0.301 ms/op
Iteration   4: 0.448 ms/op
Iteration   5: 0.509 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.435 ±(99.9%) 0.419 ms/op [Average]
  (min, avg, max) = (0.301, 0.435, 0.565), stdev = 0.109
  CI (99.9%): [0.016, 0.854] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 80.53% complete, ETA 02:01:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.418 ms/op
# Warmup Iteration   2: 0.336 ms/op
# Warmup Iteration   3: 0.383 ms/op
# Warmup Iteration   4: 0.345 ms/op
# Warmup Iteration   5: 0.526 ms/op
Iteration   1: 0.368 ms/op
Iteration   2: 0.386 ms/op
Iteration   3: 0.347 ms/op
Iteration   4: 0.296 ms/op
Iteration   5: 0.267 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.333 ±(99.9%) 0.192 ms/op [Average]
  (min, avg, max) = (0.267, 0.333, 0.386), stdev = 0.050
  CI (99.9%): [0.141, 0.524] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 80.61% complete, ETA 02:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.809 ms/op
# Warmup Iteration   2: 0.734 ms/op
# Warmup Iteration   3: 0.760 ms/op
# Warmup Iteration   4: 0.734 ms/op
# Warmup Iteration   5: 0.728 ms/op
Iteration   1: 1.132 ms/op
Iteration   2: 0.894 ms/op
Iteration   3: 0.677 ms/op
Iteration   4: 0.673 ms/op
Iteration   5: 0.981 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.871 ±(99.9%) 0.765 ms/op [Average]
  (min, avg, max) = (0.673, 0.871, 1.132), stdev = 0.199
  CI (99.9%): [0.107, 1.636] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 80.69% complete, ETA 02:00:36
# Fork: 1 of 1
# Warmup Iteration   1: 1.001 ms/op
# Warmup Iteration   2: 0.813 ms/op
# Warmup Iteration   3: 0.731 ms/op
# Warmup Iteration   4: 1.168 ms/op
# Warmup Iteration   5: 0.717 ms/op
Iteration   1: 0.924 ms/op
Iteration   2: 0.862 ms/op
Iteration   3: 0.776 ms/op
Iteration   4: 0.982 ms/op
Iteration   5: 0.693 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.847 ±(99.9%) 0.444 ms/op [Average]
  (min, avg, max) = (0.693, 0.847, 0.982), stdev = 0.115
  CI (99.9%): [0.403, 1.292] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 80.77% complete, ETA 02:00:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 80.85% complete, ETA 01:59:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.017 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.177 ms/op [Average]
  (min, avg, max) = (? 10??, 0.006, 0.017), stdev = 0.010
  CI (99.9%): [? 0, 0.183] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 80.93% complete, ETA 01:58:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.001 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 81.01% complete, ETA 01:58:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 81.09% complete, ETA 01:57:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 81.17% complete, ETA 01:57:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: 0.001 ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 81.25% complete, ETA 01:56:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 81.33% complete, ETA 01:56:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 81.41% complete, ETA 01:55:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 81.49% complete, ETA 01:54:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 81.57% complete, ETA 01:54:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 81.65% complete, ETA 01:53:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 81.73% complete, ETA 01:53:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10?³, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 81.81% complete, ETA 01:52:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 81.89% complete, ETA 01:52:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.002, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 81.97% complete, ETA 01:51:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.009 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.008, 0.009, 0.011), stdev = 0.001
  CI (99.9%): [0.004, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 82.05% complete, ETA 01:50:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.013 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.018), stdev = 0.003
  CI (99.9%): [0.001, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 82.13% complete, ETA 01:50:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.012 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.010, 0.012, 0.014), stdev = 0.002
  CI (99.9%): [0.005, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 82.21% complete, ETA 01:49:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.028 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.021, 0.028, 0.036), stdev = 0.006
  CI (99.9%): [0.004, 0.053] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 82.29% complete, ETA 01:49:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.027 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.022, 0.027, 0.029), stdev = 0.003
  CI (99.9%): [0.015, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 82.37% complete, ETA 01:48:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.051 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.060 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.057 ms/op
Iteration   5: 0.040 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.053 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.040, 0.053, 0.059), stdev = 0.007
  CI (99.9%): [0.024, 0.081] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 82.45% complete, ETA 01:48:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.040 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.052 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.049 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.044 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.037, 0.044, 0.052), stdev = 0.007
  CI (99.9%): [0.018, 0.070] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 82.53% complete, ETA 01:47:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.087 ms/op
# Warmup Iteration   2: 0.086 ms/op
# Warmup Iteration   3: 0.089 ms/op
# Warmup Iteration   4: 0.087 ms/op
# Warmup Iteration   5: 0.075 ms/op
Iteration   1: 0.133 ms/op
Iteration   2: 0.081 ms/op
Iteration   3: 0.080 ms/op
Iteration   4: 0.113 ms/op
Iteration   5: 0.073 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.096 ±(99.9%) 0.100 ms/op [Average]
  (min, avg, max) = (0.073, 0.096, 0.133), stdev = 0.026
  CI (99.9%): [? 0, 0.196] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 82.61% complete, ETA 01:47:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.080 ms/op
# Warmup Iteration   2: 0.077 ms/op
# Warmup Iteration   3: 0.078 ms/op
# Warmup Iteration   4: 0.072 ms/op
# Warmup Iteration   5: 0.095 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.076 ms/op
Iteration   3: 0.075 ms/op
Iteration   4: 0.069 ms/op
Iteration   5: 0.105 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.079 ±(99.9%) 0.057 ms/op [Average]
  (min, avg, max) = (0.069, 0.079, 0.105), stdev = 0.015
  CI (99.9%): [0.022, 0.136] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 82.69% complete, ETA 01:46:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.156 ms/op
# Warmup Iteration   2: 0.164 ms/op
# Warmup Iteration   3: 0.163 ms/op
# Warmup Iteration   4: 0.170 ms/op
# Warmup Iteration   5: 0.182 ms/op
Iteration   1: 0.211 ms/op
Iteration   2: 0.149 ms/op
Iteration   3: 0.156 ms/op
Iteration   4: 0.218 ms/op
Iteration   5: 0.145 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.176 ±(99.9%) 0.137 ms/op [Average]
  (min, avg, max) = (0.145, 0.176, 0.218), stdev = 0.036
  CI (99.9%): [0.039, 0.313] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 82.77% complete, ETA 01:45:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.163 ms/op
# Warmup Iteration   2: 0.177 ms/op
# Warmup Iteration   3: 0.168 ms/op
# Warmup Iteration   4: 0.193 ms/op
# Warmup Iteration   5: 0.166 ms/op
Iteration   1: 0.291 ms/op
Iteration   2: 0.190 ms/op
Iteration   3: 0.149 ms/op
Iteration   4: 0.197 ms/op
Iteration   5: 0.202 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.206 ±(99.9%) 0.200 ms/op [Average]
  (min, avg, max) = (0.149, 0.206, 0.291), stdev = 0.052
  CI (99.9%): [0.006, 0.406] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 82.85% complete, ETA 01:45:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.319 ms/op
# Warmup Iteration   2: 0.347 ms/op
# Warmup Iteration   3: 0.306 ms/op
# Warmup Iteration   4: 0.319 ms/op
# Warmup Iteration   5: 0.368 ms/op
Iteration   1: 0.428 ms/op
Iteration   2: 0.339 ms/op
Iteration   3: 0.339 ms/op
Iteration   4: 0.458 ms/op
Iteration   5: 0.360 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.385 ±(99.9%) 0.211 ms/op [Average]
  (min, avg, max) = (0.339, 0.385, 0.458), stdev = 0.055
  CI (99.9%): [0.173, 0.596] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 82.93% complete, ETA 01:44:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.332 ms/op
# Warmup Iteration   2: 0.351 ms/op
# Warmup Iteration   3: 0.391 ms/op
# Warmup Iteration   4: 0.395 ms/op
# Warmup Iteration   5: 0.405 ms/op
Iteration   1: 0.541 ms/op
Iteration   2: 0.454 ms/op
Iteration   3: 0.359 ms/op
Iteration   4: 0.374 ms/op
Iteration   5: 0.528 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.451 ±(99.9%) 0.325 ms/op [Average]
  (min, avg, max) = (0.359, 0.451, 0.541), stdev = 0.084
  CI (99.9%): [0.126, 0.777] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 83.01% complete, ETA 01:44:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.962 ms/op
# Warmup Iteration   2: 0.839 ms/op
# Warmup Iteration   3: 0.745 ms/op
# Warmup Iteration   4: 1.144 ms/op
# Warmup Iteration   5: 0.765 ms/op
Iteration   1: 0.996 ms/op
Iteration   2: 1.060 ms/op
Iteration   3: 0.859 ms/op
Iteration   4: 1.023 ms/op
Iteration   5: 0.694 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.927 ±(99.9%) 0.581 ms/op [Average]
  (min, avg, max) = (0.694, 0.927, 1.060), stdev = 0.151
  CI (99.9%): [0.346, 1.507] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 83.09% complete, ETA 01:43:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.864 ms/op
# Warmup Iteration   2: 0.815 ms/op
# Warmup Iteration   3: 0.728 ms/op
# Warmup Iteration   4: 0.717 ms/op
# Warmup Iteration   5: 0.726 ms/op
Iteration   1: 1.064 ms/op
Iteration   2: 1.081 ms/op
Iteration   3: 0.683 ms/op
Iteration   4: 0.645 ms/op
Iteration   5: 0.698 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.834 ±(99.9%) 0.842 ms/op [Average]
  (min, avg, max) = (0.645, 0.834, 1.081), stdev = 0.219
  CI (99.9%): [? 0, 1.676] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 83.17% complete, ETA 01:43:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (? 10??, 0.003, 0.010), stdev = 0.004
  CI (99.9%): [? 0, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 83.25% complete, ETA 01:42:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: 0.017 ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (? 10??, 0.006, 0.017), stdev = 0.008
  CI (99.9%): [? 0, 0.035] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 83.33% complete, ETA 01:42:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 83.41% complete, ETA 01:41:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 83.49% complete, ETA 01:40:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 83.57% complete, ETA 01:40:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 83.65% complete, ETA 01:39:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 83.73% complete, ETA 01:39:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 83.81% complete, ETA 01:38:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 83.89% complete, ETA 01:38:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 83.97% complete, ETA 01:37:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 84.05% complete, ETA 01:37:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 84.13% complete, ETA 01:36:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 84.21% complete, ETA 01:36:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 84.29% complete, ETA 01:35:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.002, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 84.38% complete, ETA 01:35:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.008 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.001
  CI (99.9%): [0.002, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 84.46% complete, ETA 01:34:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.016 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.025), stdev = 0.005
  CI (99.9%): [? 0, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 84.54% complete, ETA 01:33:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.016 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.011, 0.016, 0.026), stdev = 0.006
  CI (99.9%): [? 0, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 84.62% complete, ETA 01:33:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.038 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.042 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.035 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.026, 0.035, 0.042), stdev = 0.006
  CI (99.9%): [0.012, 0.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 84.70% complete, ETA 01:32:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.040 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.042 ms/op
# Warmup Iteration   4: 0.034 ms/op
# Warmup Iteration   5: 0.035 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.046 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.033 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.024, 0.033, 0.046), stdev = 0.008
  CI (99.9%): [0.001, 0.065] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 84.78% complete, ETA 01:32:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.054 ms/op
# Warmup Iteration   3: 0.056 ms/op
# Warmup Iteration   4: 0.049 ms/op
# Warmup Iteration   5: 0.054 ms/op
Iteration   1: 0.069 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.067 ms/op
Iteration   5: 0.062 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.062 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.047, 0.062, 0.069), stdev = 0.009
  CI (99.9%): [0.028, 0.096] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 84.86% complete, ETA 01:31:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.051 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.068 ms/op
Iteration   1: 0.061 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.058 ms/op
Iteration   5: 0.060 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.054 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.044, 0.054, 0.061), stdev = 0.009
  CI (99.9%): [0.021, 0.087] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 84.94% complete, ETA 01:31:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.099 ms/op
# Warmup Iteration   2: 0.105 ms/op
# Warmup Iteration   3: 0.098 ms/op
# Warmup Iteration   4: 0.084 ms/op
# Warmup Iteration   5: 0.111 ms/op
Iteration   1: 0.109 ms/op
Iteration   2: 0.092 ms/op
Iteration   3: 0.091 ms/op
Iteration   4: 0.117 ms/op
Iteration   5: 0.094 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.100 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (0.091, 0.100, 0.117), stdev = 0.012
  CI (99.9%): [0.055, 0.146] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 85.02% complete, ETA 01:30:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.079 ms/op
# Warmup Iteration   2: 0.075 ms/op
# Warmup Iteration   3: 0.116 ms/op
# Warmup Iteration   4: 0.090 ms/op
# Warmup Iteration   5: 0.070 ms/op
Iteration   1: 0.137 ms/op
Iteration   2: 0.092 ms/op
Iteration   3: 0.070 ms/op
Iteration   4: 0.077 ms/op
Iteration   5: 0.096 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.094 ±(99.9%) 0.100 ms/op [Average]
  (min, avg, max) = (0.070, 0.094, 0.137), stdev = 0.026
  CI (99.9%): [? 0, 0.195] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 85.10% complete, ETA 01:30:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.170 ms/op
# Warmup Iteration   2: 0.176 ms/op
# Warmup Iteration   3: 0.172 ms/op
# Warmup Iteration   4: 0.176 ms/op
# Warmup Iteration   5: 0.156 ms/op
Iteration   1: 0.196 ms/op
Iteration   2: 0.163 ms/op
Iteration   3: 0.195 ms/op
Iteration   4: 0.142 ms/op
Iteration   5: 0.152 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.170 ±(99.9%) 0.096 ms/op [Average]
  (min, avg, max) = (0.142, 0.170, 0.196), stdev = 0.025
  CI (99.9%): [0.074, 0.265] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 85.18% complete, ETA 01:29:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.182 ms/op
# Warmup Iteration   2: 0.182 ms/op
# Warmup Iteration   3: 0.193 ms/op
# Warmup Iteration   4: 0.178 ms/op
# Warmup Iteration   5: 0.233 ms/op
Iteration   1: 0.221 ms/op
Iteration   2: 0.191 ms/op
Iteration   3: 0.184 ms/op
Iteration   4: 0.225 ms/op
Iteration   5: 0.187 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.202 ±(99.9%) 0.076 ms/op [Average]
  (min, avg, max) = (0.184, 0.202, 0.225), stdev = 0.020
  CI (99.9%): [0.126, 0.277] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 85.26% complete, ETA 01:29:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.322 ms/op
# Warmup Iteration   2: 0.333 ms/op
# Warmup Iteration   3: 0.312 ms/op
# Warmup Iteration   4: 0.346 ms/op
# Warmup Iteration   5: 0.401 ms/op
Iteration   1: 0.472 ms/op
Iteration   2: 0.376 ms/op
Iteration   3: 0.301 ms/op
Iteration   4: 0.286 ms/op
Iteration   5: 0.334 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.354 ±(99.9%) 0.287 ms/op [Average]
  (min, avg, max) = (0.286, 0.354, 0.472), stdev = 0.074
  CI (99.9%): [0.067, 0.640] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 85.34% complete, ETA 01:28:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.368 ms/op
# Warmup Iteration   2: 0.362 ms/op
# Warmup Iteration   3: 0.402 ms/op
# Warmup Iteration   4: 0.418 ms/op
# Warmup Iteration   5: 0.321 ms/op
Iteration   1: 0.536 ms/op
Iteration   2: 0.467 ms/op
Iteration   3: 0.330 ms/op
Iteration   4: 0.345 ms/op
Iteration   5: 0.336 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.403 ±(99.9%) 0.359 ms/op [Average]
  (min, avg, max) = (0.330, 0.403, 0.536), stdev = 0.093
  CI (99.9%): [0.044, 0.762] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 85.42% complete, ETA 01:28:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.868 ms/op
# Warmup Iteration   2: 0.964 ms/op
# Warmup Iteration   3: 0.961 ms/op
# Warmup Iteration   4: 0.809 ms/op
# Warmup Iteration   5: 0.882 ms/op
Iteration   1: 1.086 ms/op
Iteration   2: 0.936 ms/op
Iteration   3: 0.843 ms/op
Iteration   4: 0.866 ms/op
Iteration   5: 1.294 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  1.005 ±(99.9%) 0.722 ms/op [Average]
  (min, avg, max) = (0.843, 1.005, 1.294), stdev = 0.187
  CI (99.9%): [0.283, 1.727] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 85.50% complete, ETA 01:27:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.952 ms/op
# Warmup Iteration   2: 0.901 ms/op
# Warmup Iteration   3: 0.966 ms/op
# Warmup Iteration   4: 0.793 ms/op
# Warmup Iteration   5: 0.833 ms/op
Iteration   1: 0.951 ms/op
Iteration   2: 0.883 ms/op
Iteration   3: 0.643 ms/op
Iteration   4: 0.994 ms/op
Iteration   5: 1.142 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.922 ±(99.9%) 0.704 ms/op [Average]
  (min, avg, max) = (0.643, 0.922, 1.142), stdev = 0.183
  CI (99.9%): [0.218, 1.627] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 85.58% complete, ETA 01:26:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 85.66% complete, ETA 01:26:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 85.74% complete, ETA 01:25:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 85.82% complete, ETA 01:25:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 85.90% complete, ETA 01:24:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 85.98% complete, ETA 01:24:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 86.06% complete, ETA 01:23:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 86.14% complete, ETA 01:23:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 86.22% complete, ETA 01:22:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 86.30% complete, ETA 01:22:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 86.38% complete, ETA 01:21:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 86.46% complete, ETA 01:21:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 86.54% complete, ETA 01:20:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 86.62% complete, ETA 01:20:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 86.70% complete, ETA 01:19:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 86.78% complete, ETA 01:19:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.003, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 86.86% complete, ETA 01:18:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.006, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 86.94% complete, ETA 01:17:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.007 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.008), stdev = 0.001
  CI (99.9%): [0.005, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 87.02% complete, ETA 01:17:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.012 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.012, 0.012, 0.013), stdev = 0.001
  CI (99.9%): [0.011, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 87.10% complete, ETA 01:16:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.018 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.017, 0.018, 0.019), stdev = 0.001
  CI (99.9%): [0.013, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 87.18% complete, ETA 01:16:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.024 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.024, 0.024, 0.024), stdev = 0.001
  CI (99.9%): [0.023, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 87.26% complete, ETA 01:15:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.026 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.026, 0.026, 0.026), stdev = 0.001
  CI (99.9%): [0.026, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 87.34% complete, ETA 01:15:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.047 ms/op
# Warmup Iteration   3: 0.047 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.048 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.048 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.047, 0.048, 0.049), stdev = 0.001
  CI (99.9%): [0.045, 0.051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 87.42% complete, ETA 01:14:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.048 ms/op
# Warmup Iteration   3: 0.047 ms/op
# Warmup Iteration   4: 0.049 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.058 ms/op
Iteration   3: 0.059 ms/op
Iteration   4: 0.059 ms/op
Iteration   5: 0.058 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.057 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.050, 0.057, 0.059), stdev = 0.004
  CI (99.9%): [0.042, 0.072] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 87.50% complete, ETA 01:14:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.096 ms/op
# Warmup Iteration   2: 0.094 ms/op
# Warmup Iteration   3: 0.094 ms/op
# Warmup Iteration   4: 0.094 ms/op
# Warmup Iteration   5: 0.094 ms/op
Iteration   1: 0.094 ms/op
Iteration   2: 0.095 ms/op
Iteration   3: 0.094 ms/op
Iteration   4: 0.095 ms/op
Iteration   5: 0.095 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.095 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.094, 0.095, 0.095), stdev = 0.001
  CI (99.9%): [0.092, 0.097] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 87.58% complete, ETA 01:13:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.096 ms/op
# Warmup Iteration   2: 0.094 ms/op
# Warmup Iteration   3: 0.094 ms/op
# Warmup Iteration   4: 0.094 ms/op
# Warmup Iteration   5: 0.094 ms/op
Iteration   1: 0.095 ms/op
Iteration   2: 0.094 ms/op
Iteration   3: 0.095 ms/op
Iteration   4: 0.094 ms/op
Iteration   5: 0.095 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.095 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.094, 0.095, 0.095), stdev = 0.001
  CI (99.9%): [0.093, 0.096] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 87.66% complete, ETA 01:13:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.192 ms/op
# Warmup Iteration   2: 0.189 ms/op
# Warmup Iteration   3: 0.189 ms/op
# Warmup Iteration   4: 0.188 ms/op
# Warmup Iteration   5: 0.188 ms/op
Iteration   1: 0.188 ms/op
Iteration   2: 0.188 ms/op
Iteration   3: 0.188 ms/op
Iteration   4: 0.189 ms/op
Iteration   5: 0.189 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.188 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.188, 0.188, 0.189), stdev = 0.001
  CI (99.9%): [0.186, 0.190] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 87.74% complete, ETA 01:12:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.191 ms/op
# Warmup Iteration   2: 0.187 ms/op
# Warmup Iteration   3: 0.189 ms/op
# Warmup Iteration   4: 0.188 ms/op
# Warmup Iteration   5: 0.189 ms/op
Iteration   1: 0.188 ms/op
Iteration   2: 0.189 ms/op
Iteration   3: 0.192 ms/op
Iteration   4: 0.188 ms/op
Iteration   5: 0.188 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.189 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.188, 0.189, 0.192), stdev = 0.002
  CI (99.9%): [0.181, 0.197] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 87.82% complete, ETA 01:12:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.381 ms/op
# Warmup Iteration   2: 0.382 ms/op
# Warmup Iteration   3: 0.377 ms/op
# Warmup Iteration   4: 0.378 ms/op
# Warmup Iteration   5: 0.377 ms/op
Iteration   1: 0.376 ms/op
Iteration   2: 0.377 ms/op
Iteration   3: 0.377 ms/op
Iteration   4: 0.375 ms/op
Iteration   5: 0.377 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.377 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.375, 0.377, 0.377), stdev = 0.001
  CI (99.9%): [0.373, 0.380] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 87.90% complete, ETA 01:11:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.381 ms/op
# Warmup Iteration   2: 0.381 ms/op
# Warmup Iteration   3: 0.375 ms/op
# Warmup Iteration   4: 0.378 ms/op
# Warmup Iteration   5: 0.376 ms/op
Iteration   1: 0.379 ms/op
Iteration   2: 0.376 ms/op
Iteration   3: 0.376 ms/op
Iteration   4: 0.379 ms/op
Iteration   5: 0.375 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.377 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.375, 0.377, 0.379), stdev = 0.002
  CI (99.9%): [0.370, 0.384] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 87.98% complete, ETA 01:11:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 88.06% complete, ETA 01:10:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 88.14% complete, ETA 01:10:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 88.22% complete, ETA 01:09:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 88.30% complete, ETA 01:09:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 88.38% complete, ETA 01:08:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 88.46% complete, ETA 01:08:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 88.54% complete, ETA 01:07:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 88.62% complete, ETA 01:07:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 88.70% complete, ETA 01:06:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 88.78% complete, ETA 01:06:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 88.86% complete, ETA 01:05:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 88.94% complete, ETA 01:05:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 89.02% complete, ETA 01:04:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 89.10% complete, ETA 01:04:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 89.18% complete, ETA 01:03:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 89.26% complete, ETA 01:03:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.008 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.001
  CI (99.9%): [0.003, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 89.34% complete, ETA 01:02:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.008 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [0.002, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 89.42% complete, ETA 01:02:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.018 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.014, 0.018, 0.023), stdev = 0.004
  CI (99.9%): [0.003, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 89.50% complete, ETA 01:01:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.016 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.013, 0.016, 0.022), stdev = 0.004
  CI (99.9%): [0.001, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 89.58% complete, ETA 01:01:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.034 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.027, 0.034, 0.044), stdev = 0.007
  CI (99.9%): [0.007, 0.061] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 89.66% complete, ETA 01:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.030 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.025, 0.030, 0.037), stdev = 0.005
  CI (99.9%): [0.010, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 89.74% complete, ETA 01:00:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.049 ms/op
# Warmup Iteration   3: 0.048 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.052 ms/op
Iteration   3: 0.055 ms/op
Iteration   4: 0.068 ms/op
Iteration   5: 0.079 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.061 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (0.050, 0.061, 0.079), stdev = 0.013
  CI (99.9%): [0.012, 0.110] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 89.82% complete, ETA 00:59:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.047 ms/op
# Warmup Iteration   3: 0.048 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.063 ms/op
Iteration   5: 0.064 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.055 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.048, 0.055, 0.064), stdev = 0.008
  CI (99.9%): [0.026, 0.084] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 89.90% complete, ETA 00:59:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.097 ms/op
# Warmup Iteration   2: 0.095 ms/op
# Warmup Iteration   3: 0.094 ms/op
# Warmup Iteration   4: 0.095 ms/op
# Warmup Iteration   5: 0.094 ms/op
Iteration   1: 0.095 ms/op
Iteration   2: 0.094 ms/op
Iteration   3: 0.104 ms/op
Iteration   4: 0.137 ms/op
Iteration   5: 0.131 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.112 ±(99.9%) 0.079 ms/op [Average]
  (min, avg, max) = (0.094, 0.112, 0.137), stdev = 0.020
  CI (99.9%): [0.034, 0.191] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 89.98% complete, ETA 00:58:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.117 ms/op
# Warmup Iteration   2: 0.115 ms/op
# Warmup Iteration   3: 0.114 ms/op
# Warmup Iteration   4: 0.114 ms/op
# Warmup Iteration   5: 0.115 ms/op
Iteration   1: 0.114 ms/op
Iteration   2: 0.114 ms/op
Iteration   3: 0.131 ms/op
Iteration   4: 0.165 ms/op
Iteration   5: 0.163 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.137 ±(99.9%) 0.097 ms/op [Average]
  (min, avg, max) = (0.114, 0.137, 0.165), stdev = 0.025
  CI (99.9%): [0.040, 0.234] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 90.06% complete, ETA 00:58:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.194 ms/op
# Warmup Iteration   2: 0.190 ms/op
# Warmup Iteration   3: 0.188 ms/op
# Warmup Iteration   4: 0.189 ms/op
# Warmup Iteration   5: 0.189 ms/op
Iteration   1: 0.188 ms/op
Iteration   2: 0.189 ms/op
Iteration   3: 0.204 ms/op
Iteration   4: 0.243 ms/op
Iteration   5: 0.256 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.216 ±(99.9%) 0.122 ms/op [Average]
  (min, avg, max) = (0.188, 0.216, 0.256), stdev = 0.032
  CI (99.9%): [0.094, 0.337] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 90.14% complete, ETA 00:57:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.193 ms/op
# Warmup Iteration   2: 0.189 ms/op
# Warmup Iteration   3: 0.187 ms/op
# Warmup Iteration   4: 0.188 ms/op
# Warmup Iteration   5: 0.188 ms/op
Iteration   1: 0.189 ms/op
Iteration   2: 0.188 ms/op
Iteration   3: 0.211 ms/op
Iteration   4: 0.282 ms/op
Iteration   5: 0.258 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.225 ±(99.9%) 0.163 ms/op [Average]
  (min, avg, max) = (0.188, 0.225, 0.282), stdev = 0.042
  CI (99.9%): [0.063, 0.388] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 90.22% complete, ETA 00:57:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.386 ms/op
# Warmup Iteration   2: 0.379 ms/op
# Warmup Iteration   3: 0.375 ms/op
# Warmup Iteration   4: 0.385 ms/op
# Warmup Iteration   5: 0.379 ms/op
Iteration   1: 0.376 ms/op
Iteration   2: 0.379 ms/op
Iteration   3: 0.421 ms/op
Iteration   4: 0.547 ms/op
Iteration   5: 0.540 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.452 ±(99.9%) 0.327 ms/op [Average]
  (min, avg, max) = (0.376, 0.452, 0.547), stdev = 0.085
  CI (99.9%): [0.126, 0.779] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 90.30% complete, ETA 00:56:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.384 ms/op
# Warmup Iteration   2: 0.378 ms/op
# Warmup Iteration   3: 0.384 ms/op
# Warmup Iteration   4: 0.376 ms/op
# Warmup Iteration   5: 0.381 ms/op
Iteration   1: 0.379 ms/op
Iteration   2: 0.375 ms/op
Iteration   3: 0.409 ms/op
Iteration   4: 0.580 ms/op
Iteration   5: 0.581 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.465 ±(99.9%) 0.410 ms/op [Average]
  (min, avg, max) = (0.375, 0.465, 0.581), stdev = 0.107
  CI (99.9%): [0.054, 0.875] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 90.38% complete, ETA 00:56:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 90.46% complete, ETA 00:55:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 90.54% complete, ETA 00:55:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 90.63% complete, ETA 00:54:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 90.71% complete, ETA 00:54:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 90.79% complete, ETA 00:53:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 90.87% complete, ETA 00:53:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 90.95% complete, ETA 00:52:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 91.03% complete, ETA 00:52:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 91.11% complete, ETA 00:51:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 91.19% complete, ETA 00:51:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 91.27% complete, ETA 00:50:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 91.35% complete, ETA 00:50:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 91.43% complete, ETA 00:49:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 91.51% complete, ETA 00:49:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 91.59% complete, ETA 00:48:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 91.67% complete, ETA 00:48:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.011 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.015), stdev = 0.003
  CI (99.9%): [? 0, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 91.75% complete, ETA 00:47:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.011 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.015), stdev = 0.003
  CI (99.9%): [? 0, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 91.83% complete, ETA 00:47:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.016 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.013, 0.016, 0.017), stdev = 0.002
  CI (99.9%): [0.007, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 91.91% complete, ETA 00:46:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.032 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.024 ±(99.9%) 0.026 ms/op [Average]
  (min, avg, max) = (0.017, 0.024, 0.032), stdev = 0.007
  CI (99.9%): [? 0, 0.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 91.99% complete, ETA 00:46:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.035 ms/op
Iteration   4: 0.046 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.036 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.027, 0.036, 0.046), stdev = 0.009
  CI (99.9%): [? 10??, 0.072] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 92.07% complete, ETA 00:45:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.028 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.032 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.026, 0.032, 0.038), stdev = 0.006
  CI (99.9%): [0.009, 0.054] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 92.15% complete, ETA 00:45:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 ms/op
# Warmup Iteration   2: 0.062 ms/op
# Warmup Iteration   3: 0.062 ms/op
# Warmup Iteration   4: 0.062 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.061 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.088 ms/op
Iteration   5: 0.090 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.074 ±(99.9%) 0.056 ms/op [Average]
  (min, avg, max) = (0.059, 0.074, 0.090), stdev = 0.015
  CI (99.9%): [0.018, 0.131] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 92.23% complete, ETA 00:44:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 ms/op
# Warmup Iteration   2: 0.063 ms/op
# Warmup Iteration   3: 0.063 ms/op
# Warmup Iteration   4: 0.063 ms/op
# Warmup Iteration   5: 0.063 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.098 ms/op
Iteration   4: 0.114 ms/op
Iteration   5: 0.122 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.092 ±(99.9%) 0.107 ms/op [Average]
  (min, avg, max) = (0.063, 0.092, 0.122), stdev = 0.028
  CI (99.9%): [? 0, 0.199] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 92.31% complete, ETA 00:44:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.100 ms/op
# Warmup Iteration   2: 0.096 ms/op
# Warmup Iteration   3: 0.097 ms/op
# Warmup Iteration   4: 0.096 ms/op
# Warmup Iteration   5: 0.097 ms/op
Iteration   1: 0.097 ms/op
Iteration   2: 0.098 ms/op
Iteration   3: 0.108 ms/op
Iteration   4: 0.123 ms/op
Iteration   5: 0.111 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.107 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.097, 0.107, 0.123), stdev = 0.011
  CI (99.9%): [0.066, 0.148] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 92.39% complete, ETA 00:43:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.122 ms/op
# Warmup Iteration   2: 0.119 ms/op
# Warmup Iteration   3: 0.119 ms/op
# Warmup Iteration   4: 0.118 ms/op
# Warmup Iteration   5: 0.129 ms/op
Iteration   1: 0.127 ms/op
Iteration   2: 0.120 ms/op
Iteration   3: 0.133 ms/op
Iteration   4: 0.170 ms/op
Iteration   5: 0.156 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.141 ±(99.9%) 0.081 ms/op [Average]
  (min, avg, max) = (0.120, 0.141, 0.170), stdev = 0.021
  CI (99.9%): [0.060, 0.222] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 92.47% complete, ETA 00:43:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.243 ms/op
# Warmup Iteration   2: 0.245 ms/op
# Warmup Iteration   3: 0.237 ms/op
# Warmup Iteration   4: 0.260 ms/op
# Warmup Iteration   5: 0.278 ms/op
Iteration   1: 0.245 ms/op
Iteration   2: 0.258 ms/op
Iteration   3: 0.305 ms/op
Iteration   4: 0.344 ms/op
Iteration   5: 0.345 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.299 ±(99.9%) 0.180 ms/op [Average]
  (min, avg, max) = (0.245, 0.299, 0.345), stdev = 0.047
  CI (99.9%): [0.120, 0.479] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 92.55% complete, ETA 00:42:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.212 ms/op
# Warmup Iteration   2: 0.216 ms/op
# Warmup Iteration   3: 0.197 ms/op
# Warmup Iteration   4: 0.215 ms/op
# Warmup Iteration   5: 0.198 ms/op
Iteration   1: 0.197 ms/op
Iteration   2: 0.214 ms/op
Iteration   3: 0.313 ms/op
Iteration   4: 0.315 ms/op
Iteration   5: 0.293 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.266 ±(99.9%) 0.217 ms/op [Average]
  (min, avg, max) = (0.197, 0.266, 0.315), stdev = 0.056
  CI (99.9%): [0.050, 0.483] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 92.63% complete, ETA 00:42:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.891 ms/op
# Warmup Iteration   2: 0.700 ms/op
# Warmup Iteration   3: 0.532 ms/op
# Warmup Iteration   4: 0.525 ms/op
# Warmup Iteration   5: 0.536 ms/op
Iteration   1: 0.551 ms/op
Iteration   2: 0.560 ms/op
Iteration   3: 0.753 ms/op
Iteration   4: 0.701 ms/op
Iteration   5: 0.770 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.667 ±(99.9%) 0.404 ms/op [Average]
  (min, avg, max) = (0.551, 0.667, 0.770), stdev = 0.105
  CI (99.9%): [0.263, 1.071] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 92.71% complete, ETA 00:41:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.420 ms/op
# Warmup Iteration   2: 0.408 ms/op
# Warmup Iteration   3: 0.411 ms/op
# Warmup Iteration   4: 0.389 ms/op
# Warmup Iteration   5: 0.392 ms/op
Iteration   1: 0.398 ms/op
Iteration   2: 0.387 ms/op
Iteration   3: 0.428 ms/op
Iteration   4: 0.455 ms/op
Iteration   5: 0.533 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.440 ±(99.9%) 0.224 ms/op [Average]
  (min, avg, max) = (0.387, 0.440, 0.533), stdev = 0.058
  CI (99.9%): [0.216, 0.665] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 92.79% complete, ETA 00:41:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 92.87% complete, ETA 00:40:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 92.95% complete, ETA 00:40:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 93.03% complete, ETA 00:39:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 93.11% complete, ETA 00:39:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 93.19% complete, ETA 00:38:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 93.27% complete, ETA 00:38:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 93.35% complete, ETA 00:37:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 93.43% complete, ETA 00:37:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 93.51% complete, ETA 00:37:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 93.59% complete, ETA 00:36:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 93.67% complete, ETA 00:36:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 93.75% complete, ETA 00:35:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 93.83% complete, ETA 00:35:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 93.91% complete, ETA 00:34:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 93.99% complete, ETA 00:34:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 94.07% complete, ETA 00:33:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.010 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 94.15% complete, ETA 00:33:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.012 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.017), stdev = 0.004
  CI (99.9%): [? 0, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 94.23% complete, ETA 00:32:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.019 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.014, 0.019, 0.028), stdev = 0.006
  CI (99.9%): [? 0, 0.042] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 94.31% complete, ETA 00:32:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.019 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.014, 0.019, 0.026), stdev = 0.006
  CI (99.9%): [? 0, 0.042] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 94.39% complete, ETA 00:31:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.038 ±(99.9%) 0.042 ms/op [Average]
  (min, avg, max) = (0.028, 0.038, 0.052), stdev = 0.011
  CI (99.9%): [? 0, 0.080] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 94.47% complete, ETA 00:31:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.038 ±(99.9%) 0.043 ms/op [Average]
  (min, avg, max) = (0.028, 0.038, 0.052), stdev = 0.011
  CI (99.9%): [? 0, 0.081] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 94.55% complete, ETA 00:30:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.053 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.052 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.052 ms/op
Iteration   1: 0.052 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.071 ms/op
Iteration   4: 0.098 ms/op
Iteration   5: 0.093 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.074 ±(99.9%) 0.080 ms/op [Average]
  (min, avg, max) = (0.052, 0.074, 0.098), stdev = 0.021
  CI (99.9%): [? 0, 0.154] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 94.63% complete, ETA 00:30:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.053 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.052 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.052 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.058 ms/op
Iteration   3: 0.070 ms/op
Iteration   4: 0.101 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.074 ±(99.9%) 0.080 ms/op [Average]
  (min, avg, max) = (0.053, 0.074, 0.101), stdev = 0.021
  CI (99.9%): [? 0, 0.154] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 94.71% complete, ETA 00:29:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.108 ms/op
# Warmup Iteration   2: 0.103 ms/op
# Warmup Iteration   3: 0.105 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.103 ms/op
Iteration   1: 0.104 ms/op
Iteration   2: 0.104 ms/op
Iteration   3: 0.124 ms/op
Iteration   4: 0.182 ms/op
Iteration   5: 0.196 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.142 ±(99.9%) 0.170 ms/op [Average]
  (min, avg, max) = (0.104, 0.142, 0.196), stdev = 0.044
  CI (99.9%): [? 0, 0.312] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 94.79% complete, ETA 00:29:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.108 ms/op
# Warmup Iteration   2: 0.105 ms/op
# Warmup Iteration   3: 0.103 ms/op
# Warmup Iteration   4: 0.103 ms/op
# Warmup Iteration   5: 0.105 ms/op
Iteration   1: 0.104 ms/op
Iteration   2: 0.105 ms/op
Iteration   3: 0.119 ms/op
Iteration   4: 0.167 ms/op
Iteration   5: 0.164 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.132 ±(99.9%) 0.121 ms/op [Average]
  (min, avg, max) = (0.104, 0.132, 0.167), stdev = 0.031
  CI (99.9%): [0.011, 0.252] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 94.87% complete, ETA 00:28:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.215 ms/op
# Warmup Iteration   2: 0.209 ms/op
# Warmup Iteration   3: 0.207 ms/op
# Warmup Iteration   4: 0.206 ms/op
# Warmup Iteration   5: 0.210 ms/op
Iteration   1: 0.207 ms/op
Iteration   2: 0.209 ms/op
Iteration   3: 0.250 ms/op
Iteration   4: 0.409 ms/op
Iteration   5: 0.388 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.293 ±(99.9%) 0.379 ms/op [Average]
  (min, avg, max) = (0.207, 0.293, 0.409), stdev = 0.098
  CI (99.9%): [? 0, 0.672] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 94.95% complete, ETA 00:28:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.214 ms/op
# Warmup Iteration   2: 0.210 ms/op
# Warmup Iteration   3: 0.208 ms/op
# Warmup Iteration   4: 0.210 ms/op
# Warmup Iteration   5: 0.208 ms/op
Iteration   1: 0.208 ms/op
Iteration   2: 0.209 ms/op
Iteration   3: 0.257 ms/op
Iteration   4: 0.348 ms/op
Iteration   5: 0.366 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.277 ±(99.9%) 0.291 ms/op [Average]
  (min, avg, max) = (0.208, 0.277, 0.366), stdev = 0.076
  CI (99.9%): [? 0, 0.568] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 95.03% complete, ETA 00:28:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.425 ms/op
# Warmup Iteration   2: 0.416 ms/op
# Warmup Iteration   3: 0.416 ms/op
# Warmup Iteration   4: 0.419 ms/op
# Warmup Iteration   5: 0.438 ms/op
Iteration   1: 0.428 ms/op
Iteration   2: 0.417 ms/op
Iteration   3: 0.484 ms/op
Iteration   4: 0.721 ms/op
Iteration   5: 0.730 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.556 ±(99.9%) 0.603 ms/op [Average]
  (min, avg, max) = (0.417, 0.556, 0.730), stdev = 0.157
  CI (99.9%): [? 0, 1.159] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 95.11% complete, ETA 00:27:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.426 ms/op
# Warmup Iteration   2: 0.414 ms/op
# Warmup Iteration   3: 0.421 ms/op
# Warmup Iteration   4: 0.414 ms/op
# Warmup Iteration   5: 0.417 ms/op
Iteration   1: 0.417 ms/op
Iteration   2: 0.421 ms/op
Iteration   3: 0.507 ms/op
Iteration   4: 0.757 ms/op
Iteration   5: 0.664 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.553 ±(99.9%) 0.584 ms/op [Average]
  (min, avg, max) = (0.417, 0.553, 0.757), stdev = 0.152
  CI (99.9%): [? 0, 1.138] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 95.19% complete, ETA 00:27:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 95.27% complete, ETA 00:26:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 95.35% complete, ETA 00:26:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 95.43% complete, ETA 00:25:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 95.51% complete, ETA 00:25:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 95.59% complete, ETA 00:24:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 95.67% complete, ETA 00:24:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 95.75% complete, ETA 00:23:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 95.83% complete, ETA 00:23:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 95.91% complete, ETA 00:22:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 95.99% complete, ETA 00:22:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 96.07% complete, ETA 00:22:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 96.15% complete, ETA 00:21:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 96.23% complete, ETA 00:21:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 96.31% complete, ETA 00:20:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 10?³, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 96.39% complete, ETA 00:20:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 96.47% complete, ETA 00:19:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.008 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.011), stdev = 0.002
  CI (99.9%): [0.002, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 96.55% complete, ETA 00:19:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.009 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.011), stdev = 0.002
  CI (99.9%): [0.002, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 96.63% complete, ETA 00:18:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.016 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.014, 0.016, 0.019), stdev = 0.003
  CI (99.9%): [0.006, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 96.71% complete, ETA 00:18:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.019 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.015, 0.019, 0.025), stdev = 0.004
  CI (99.9%): [0.002, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 96.79% complete, ETA 00:17:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.033 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.027, 0.033, 0.043), stdev = 0.006
  CI (99.9%): [0.010, 0.057] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 96.88% complete, ETA 00:17:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.035 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.036 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.028, 0.036, 0.049), stdev = 0.008
  CI (99.9%): [0.004, 0.068] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 96.96% complete, ETA 00:16:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
# Warmup Iteration   2: 0.055 ms/op
# Warmup Iteration   3: 0.052 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.055 ms/op
Iteration   1: 0.054 ms/op
Iteration   2: 0.056 ms/op
Iteration   3: 0.070 ms/op
Iteration   4: 0.081 ms/op
Iteration   5: 0.089 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.070 ±(99.9%) 0.058 ms/op [Average]
  (min, avg, max) = (0.054, 0.070, 0.089), stdev = 0.015
  CI (99.9%): [0.012, 0.128] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 97.04% complete, ETA 00:16:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
# Warmup Iteration   2: 0.051 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.051 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.060 ms/op
Iteration   4: 0.077 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.066 ±(99.9%) 0.066 ms/op [Average]
  (min, avg, max) = (0.050, 0.066, 0.091), stdev = 0.017
  CI (99.9%): [? 10?³, 0.132] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 97.12% complete, ETA 00:16:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.111 ms/op
# Warmup Iteration   2: 0.105 ms/op
# Warmup Iteration   3: 0.105 ms/op
# Warmup Iteration   4: 0.099 ms/op
# Warmup Iteration   5: 0.098 ms/op
Iteration   1: 0.097 ms/op
Iteration   2: 0.097 ms/op
Iteration   3: 0.122 ms/op
Iteration   4: 0.159 ms/op
Iteration   5: 0.130 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.121 ±(99.9%) 0.100 ms/op [Average]
  (min, avg, max) = (0.097, 0.121, 0.159), stdev = 0.026
  CI (99.9%): [0.021, 0.221] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 97.20% complete, ETA 00:15:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.099 ms/op
# Warmup Iteration   2: 0.096 ms/op
# Warmup Iteration   3: 0.096 ms/op
# Warmup Iteration   4: 0.095 ms/op
# Warmup Iteration   5: 0.096 ms/op
Iteration   1: 0.109 ms/op
Iteration   2: 0.113 ms/op
Iteration   3: 0.128 ms/op
Iteration   4: 0.161 ms/op
Iteration   5: 0.153 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.133 ±(99.9%) 0.090 ms/op [Average]
  (min, avg, max) = (0.109, 0.133, 0.161), stdev = 0.023
  CI (99.9%): [0.043, 0.223] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 97.28% complete, ETA 00:15:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.223 ms/op
# Warmup Iteration   2: 0.218 ms/op
# Warmup Iteration   3: 0.214 ms/op
# Warmup Iteration   4: 0.221 ms/op
# Warmup Iteration   5: 0.221 ms/op
Iteration   1: 0.215 ms/op
Iteration   2: 0.213 ms/op
Iteration   3: 0.247 ms/op
Iteration   4: 0.319 ms/op
Iteration   5: 0.326 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.264 ±(99.9%) 0.212 ms/op [Average]
  (min, avg, max) = (0.213, 0.264, 0.326), stdev = 0.055
  CI (99.9%): [0.052, 0.476] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 97.36% complete, ETA 00:14:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.219 ms/op
# Warmup Iteration   2: 0.217 ms/op
# Warmup Iteration   3: 0.215 ms/op
# Warmup Iteration   4: 0.216 ms/op
# Warmup Iteration   5: 0.219 ms/op
Iteration   1: 0.214 ms/op
Iteration   2: 0.217 ms/op
Iteration   3: 0.258 ms/op
Iteration   4: 0.327 ms/op
Iteration   5: 0.306 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.264 ±(99.9%) 0.196 ms/op [Average]
  (min, avg, max) = (0.214, 0.264, 0.327), stdev = 0.051
  CI (99.9%): [0.068, 0.461] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 97.44% complete, ETA 00:14:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.416 ms/op
# Warmup Iteration   2: 0.440 ms/op
# Warmup Iteration   3: 0.440 ms/op
# Warmup Iteration   4: 0.435 ms/op
# Warmup Iteration   5: 0.400 ms/op
Iteration   1: 0.411 ms/op
Iteration   2: 0.427 ms/op
Iteration   3: 0.536 ms/op
Iteration   4: 0.636 ms/op
Iteration   5: 0.563 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.514 ±(99.9%) 0.365 ms/op [Average]
  (min, avg, max) = (0.411, 0.514, 0.636), stdev = 0.095
  CI (99.9%): [0.150, 0.879] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 97.52% complete, ETA 00:13:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.430 ms/op
# Warmup Iteration   2: 0.432 ms/op
# Warmup Iteration   3: 0.433 ms/op
# Warmup Iteration   4: 0.416 ms/op
# Warmup Iteration   5: 0.417 ms/op
Iteration   1: 0.427 ms/op
Iteration   2: 0.429 ms/op
Iteration   3: 0.520 ms/op
Iteration   4: 0.635 ms/op
Iteration   5: 0.639 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.530 ±(99.9%) 0.403 ms/op [Average]
  (min, avg, max) = (0.427, 0.530, 0.639), stdev = 0.105
  CI (99.9%): [0.127, 0.933] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 97.60% complete, ETA 00:13:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 97.68% complete, ETA 00:12:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 97.76% complete, ETA 00:12:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 97.84% complete, ETA 00:12:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 97.92% complete, ETA 00:11:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 98.00% complete, ETA 00:11:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 98.08% complete, ETA 00:10:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 98.16% complete, ETA 00:10:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 98.24% complete, ETA 00:09:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 98.32% complete, ETA 00:09:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 98.40% complete, ETA 00:08:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 98.48% complete, ETA 00:08:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 98.56% complete, ETA 00:07:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 98.64% complete, ETA 00:07:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10?³, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 98.72% complete, ETA 00:07:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 10?³, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 98.80% complete, ETA 00:06:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.005 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.002, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 98.88% complete, ETA 00:06:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.010 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.013), stdev = 0.002
  CI (99.9%): [0.001, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 98.96% complete, ETA 00:05:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.010 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.011), stdev = 0.001
  CI (99.9%): [0.004, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 99.04% complete, ETA 00:05:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.019 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.014, 0.019, 0.024), stdev = 0.005
  CI (99.9%): [0.001, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 99.12% complete, ETA 00:04:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.020 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.014, 0.020, 0.024), stdev = 0.005
  CI (99.9%): [0.002, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 99.20% complete, ETA 00:04:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.033 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.037 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: 0.055 ms/op
Iteration   4: 0.053 ms/op
Iteration   5: 0.053 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.048 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.037, 0.048, 0.055), stdev = 0.009
  CI (99.9%): [0.014, 0.081] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 99.28% complete, ETA 00:03:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.041 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.031, 0.041, 0.050), stdev = 0.008
  CI (99.9%): [0.010, 0.072] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 99.36% complete, ETA 00:03:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.057 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.054 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.053 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.066 ms/op
Iteration   3: 0.091 ms/op
Iteration   4: 0.098 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.080 ±(99.9%) 0.071 ms/op [Average]
  (min, avg, max) = (0.055, 0.080, 0.098), stdev = 0.018
  CI (99.9%): [0.009, 0.151] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 99.44% complete, ETA 00:03:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.056 ms/op
# Warmup Iteration   2: 0.055 ms/op
# Warmup Iteration   3: 0.054 ms/op
# Warmup Iteration   4: 0.053 ms/op
# Warmup Iteration   5: 0.053 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.067 ms/op
Iteration   3: 0.087 ms/op
Iteration   4: 0.085 ms/op
Iteration   5: 0.092 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.077 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.053, 0.077, 0.092), stdev = 0.016
  CI (99.9%): [0.014, 0.140] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 99.52% complete, ETA 00:02:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.115 ms/op
# Warmup Iteration   2: 0.109 ms/op
# Warmup Iteration   3: 0.112 ms/op
# Warmup Iteration   4: 0.111 ms/op
# Warmup Iteration   5: 0.109 ms/op
Iteration   1: 0.106 ms/op
Iteration   2: 0.114 ms/op
Iteration   3: 0.172 ms/op
Iteration   4: 0.158 ms/op
Iteration   5: 0.154 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.141 ±(99.9%) 0.111 ms/op [Average]
  (min, avg, max) = (0.106, 0.141, 0.172), stdev = 0.029
  CI (99.9%): [0.029, 0.252] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 99.60% complete, ETA 00:02:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.129 ms/op
# Warmup Iteration   2: 0.126 ms/op
# Warmup Iteration   3: 0.125 ms/op
# Warmup Iteration   4: 0.126 ms/op
# Warmup Iteration   5: 0.126 ms/op
Iteration   1: 0.126 ms/op
Iteration   2: 0.136 ms/op
Iteration   3: 0.185 ms/op
Iteration   4: 0.202 ms/op
Iteration   5: 0.201 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.170 ±(99.9%) 0.141 ms/op [Average]
  (min, avg, max) = (0.126, 0.170, 0.202), stdev = 0.037
  CI (99.9%): [0.030, 0.311] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 99.68% complete, ETA 00:01:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.201 ms/op
# Warmup Iteration   2: 0.195 ms/op
# Warmup Iteration   3: 0.202 ms/op
# Warmup Iteration   4: 0.215 ms/op
# Warmup Iteration   5: 0.202 ms/op
Iteration   1: 0.208 ms/op
Iteration   2: 0.232 ms/op
Iteration   3: 0.325 ms/op
Iteration   4: 0.263 ms/op
Iteration   5: 0.281 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.262 ±(99.9%) 0.173 ms/op [Average]
  (min, avg, max) = (0.208, 0.262, 0.325), stdev = 0.045
  CI (99.9%): [0.089, 0.435] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 99.76% complete, ETA 00:01:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.230 ms/op
# Warmup Iteration   2: 0.222 ms/op
# Warmup Iteration   3: 0.224 ms/op
# Warmup Iteration   4: 0.226 ms/op
# Warmup Iteration   5: 0.228 ms/op
Iteration   1: 0.219 ms/op
Iteration   2: 0.231 ms/op
Iteration   3: 0.328 ms/op
Iteration   4: 0.342 ms/op
Iteration   5: 0.318 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.288 ±(99.9%) 0.223 ms/op [Average]
  (min, avg, max) = (0.219, 0.288, 0.342), stdev = 0.058
  CI (99.9%): [0.064, 0.511] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 99.84% complete, ETA 00:00:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.562 ms/op
# Warmup Iteration   2: 0.534 ms/op
# Warmup Iteration   3: 0.525 ms/op
# Warmup Iteration   4: 0.556 ms/op
# Warmup Iteration   5: 0.553 ms/op
Iteration   1: 0.580 ms/op
Iteration   2: 0.576 ms/op
Iteration   3: 0.854 ms/op
Iteration   4: 0.946 ms/op
Iteration   5: 0.726 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.736 ±(99.9%) 0.633 ms/op [Average]
  (min, avg, max) = (0.576, 0.736, 0.946), stdev = 0.164
  CI (99.9%): [0.104, 1.369] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 99.92% complete, ETA 00:00:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.427 ms/op
# Warmup Iteration   2: 0.407 ms/op
# Warmup Iteration   3: 0.406 ms/op
# Warmup Iteration   4: 0.409 ms/op
# Warmup Iteration   5: 0.406 ms/op
Iteration   1: 0.432 ms/op
Iteration   2: 0.456 ms/op
Iteration   3: 0.674 ms/op
Iteration   4: 0.576 ms/op
Iteration   5: 0.623 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.552 ±(99.9%) 0.404 ms/op [Average]
  (min, avg, max) = (0.432, 0.552, 0.674), stdev = 0.105
  CI (99.9%): [0.148, 0.956] (assumes normal distribution)


# Run complete. Total time: 09:07:59

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         (nCommit)  (nGetDiffCursor)  (nKeys)  (nRestore)  (nValues)  Mode  Cnt       Score       Error  Units
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                16       32         N/A          2  avgt    5       0.019 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                16       32         N/A          3  avgt    5       0.019 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                16     1000         N/A          2  avgt    5       0.612 ±     0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                16     1000         N/A          3  avgt    5       0.612 ±     0.008  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                16   100000         N/A          2  avgt    5      95.237 ±     8.137  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                16   100000         N/A          3  avgt    5      93.162 ±     7.712  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                32       32         N/A          2  avgt    5       0.042 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                32       32         N/A          3  avgt    5       0.043 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                32     1000         N/A          2  avgt    5       1.224 ±     0.024  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                32     1000         N/A          3  avgt    5       1.217 ±     0.010  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                32   100000         N/A          2  avgt    5     193.252 ±     6.878  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                32   100000         N/A          3  avgt    5     188.722 ±    16.721  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                64       32         N/A          2  avgt    5       0.084 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                64       32         N/A          3  avgt    5       0.085 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                64     1000         N/A          2  avgt    5       2.449 ±     0.048  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                64     1000         N/A          3  avgt    5       2.441 ±     0.022  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                64   100000         N/A          2  avgt    5     388.321 ±    60.077  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                64   100000         N/A          3  avgt    5     377.351 ±    14.477  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               128       32         N/A          2  avgt    5       0.170 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               128       32         N/A          3  avgt    5       0.168 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               128     1000         N/A          2  avgt    5       4.878 ±     0.030  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               128     1000         N/A          3  avgt    5       4.860 ±     0.063  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               128   100000         N/A          2  avgt    5     754.410 ±    48.096  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               128   100000         N/A          3  avgt    5     746.333 ±    19.010  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               256       32         N/A          2  avgt    5       0.336 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               256       32         N/A          3  avgt    5       0.347 ±     0.036  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               256     1000         N/A          2  avgt    5       9.780 ±     0.173  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               256     1000         N/A          3  avgt    5       9.805 ±     0.182  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               256   100000         N/A          2  avgt    5    1500.384 ±    85.793  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               256   100000         N/A          3  avgt    5    1483.422 ±   166.680  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               512       32         N/A          2  avgt    5       0.683 ±     0.016  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               512       32         N/A          3  avgt    5       0.677 ±     0.010  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               512     1000         N/A          2  avgt    5      19.537 ±     0.210  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               512     1000         N/A          3  avgt    5      19.551 ±     0.104  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               512   100000         N/A          2  avgt    5    3070.014 ±    93.031  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               512   100000         N/A          3  avgt    5    2934.226 ±    59.279  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              1024       32         N/A          2  avgt    5       1.364 ±     0.022  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              1024       32         N/A          3  avgt    5       1.338 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              1024     1000         N/A          2  avgt    5      39.244 ±     0.949  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              1024     1000         N/A          3  avgt    5      39.048 ±     0.305  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              1024   100000         N/A          2  avgt    5    6017.328 ±   125.170  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              1024   100000         N/A          3  avgt    5    5925.735 ±   197.723  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              2048       32         N/A          2  avgt    5       2.682 ±     0.040  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              2048       32         N/A          3  avgt    5       2.699 ±     0.050  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              2048     1000         N/A          2  avgt    5      78.501 ±     1.543  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              2048     1000         N/A          3  avgt    5      78.577 ±     2.617  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              2048   100000         N/A          2  avgt    5   12420.738 ±   250.213  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              2048   100000         N/A          3  avgt    5   11840.736 ±   733.563  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              4096       32         N/A          2  avgt    5       5.417 ±     0.044  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              4096       32         N/A          3  avgt    5       5.479 ±     0.067  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              4096     1000         N/A          2  avgt    5     157.197 ±     2.904  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              4096     1000         N/A          3  avgt    5     156.341 ±     0.916  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              4096   100000         N/A          2  avgt    5   24306.376 ±   681.605  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              4096   100000         N/A          3  avgt    5   23456.141 ±   389.054  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              8192       32         N/A          2  avgt    5      10.927 ±     0.080  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              8192       32         N/A          3  avgt    5      10.967 ±     0.135  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              8192     1000         N/A          2  avgt    5     314.329 ±     2.046  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              8192     1000         N/A          3  avgt    5     312.737 ±     2.296  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              8192   100000         N/A          2  avgt    5   47604.322 ±   780.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              8192   100000         N/A          3  avgt    5   47388.488 ±   177.711  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10             16384       32         N/A          2  avgt    5      21.691 ±     0.091  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10             16384       32         N/A          3  avgt    5      21.771 ±     0.260  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10             16384     1000         N/A          2  avgt    5     625.528 ±     9.117  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10             16384     1000         N/A          3  avgt    5     623.479 ±     6.113  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10             16384   100000         N/A          2  avgt    5   95512.084 ±  4401.376  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10             16384   100000         N/A          3  avgt    5   95086.310 ±   908.903  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                16       32         N/A          2  avgt    5       0.019 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                16       32         N/A          3  avgt    5       0.019 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                16     1000         N/A          2  avgt    5       0.632 ±     0.008  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                16     1000         N/A          3  avgt    5       0.633 ±     0.021  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                16   100000         N/A          2  avgt    5      96.938 ±    14.297  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                16   100000         N/A          3  avgt    5      95.451 ±     6.662  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                32       32         N/A          2  avgt    5       0.042 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                32       32         N/A          3  avgt    5       0.045 ±     0.015  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                32     1000         N/A          2  avgt    5       1.279 ±     0.023  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                32     1000         N/A          3  avgt    5       1.267 ±     0.008  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                32   100000         N/A          2  avgt    5     198.718 ±    15.982  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                32   100000         N/A          3  avgt    5     212.938 ±    79.399  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                64       32         N/A          2  avgt    5       0.085 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                64       32         N/A          3  avgt    5       0.085 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                64     1000         N/A          2  avgt    5       2.540 ±     0.034  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                64     1000         N/A          3  avgt    5       2.532 ±     0.011  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                64   100000         N/A          2  avgt    5     396.867 ±    16.389  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                64   100000         N/A          3  avgt    5     387.412 ±    23.272  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               128       32         N/A          2  avgt    5       0.171 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               128       32         N/A          3  avgt    5       0.169 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               128     1000         N/A          2  avgt    5       5.048 ±     0.034  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               128     1000         N/A          3  avgt    5       5.083 ±     0.075  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               128   100000         N/A          2  avgt    5     809.704 ±   185.650  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               128   100000         N/A          3  avgt    5     778.081 ±   115.823  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               256       32         N/A          2  avgt    5       0.339 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               256       32         N/A          3  avgt    5       0.335 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               256     1000         N/A          2  avgt    5      10.065 ±     0.136  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               256     1000         N/A          3  avgt    5      10.055 ±     0.229  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               256   100000         N/A          2  avgt    5    1523.550 ±    98.578  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               256   100000         N/A          3  avgt    5    1457.347 ±    92.095  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               512       32         N/A          2  avgt    5       0.679 ±     0.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               512       32         N/A          3  avgt    5       0.675 ±     0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               512     1000         N/A          2  avgt    5      20.265 ±     0.128  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               512     1000         N/A          3  avgt    5      20.190 ±     0.238  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               512   100000         N/A          2  avgt    5    4343.817 ±  1594.054  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               512   100000         N/A          3  avgt    5    3428.142 ±  2360.217  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              1024       32         N/A          2  avgt    5       1.360 ±     0.015  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              1024       32         N/A          3  avgt    5       1.363 ±     0.011  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              1024     1000         N/A          2  avgt    5      40.696 ±     0.984  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              1024     1000         N/A          3  avgt    5      40.786 ±     0.740  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              1024   100000         N/A          2  avgt    5    9050.471 ±   661.312  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              1024   100000         N/A          3  avgt    5    8536.501 ±  1413.611  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              2048       32         N/A          2  avgt    5       2.759 ±     0.040  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              2048       32         N/A          3  avgt    5       2.719 ±     0.034  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              2048     1000         N/A          2  avgt    5      81.818 ±     2.689  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              2048     1000         N/A          3  avgt    5      81.846 ±     2.198  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              2048   100000         N/A          2  avgt    5   16917.608 ±  1144.220  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              2048   100000         N/A          3  avgt    5   16880.678 ±   663.175  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              4096       32         N/A          2  avgt    5       5.522 ±     0.061  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              4096       32         N/A          3  avgt    5       5.430 ±     0.090  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              4096     1000         N/A          2  avgt    5     163.938 ±     5.799  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              4096     1000         N/A          3  avgt    5     165.377 ±     5.269  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              4096   100000         N/A          2  avgt    5   32313.643 ±  3046.406  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              4096   100000         N/A          3  avgt    5   32165.023 ±   862.633  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              8192       32         N/A          2  avgt    5      10.864 ±     0.210  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              8192       32         N/A          3  avgt    5      10.911 ±     0.070  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              8192     1000         N/A          2  avgt    5     329.515 ±     8.534  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              8192     1000         N/A          3  avgt    5     327.109 ±    11.730  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              8192   100000         N/A          2  avgt    5   65520.345 ±  1462.118  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              8192   100000         N/A          3  avgt    5   65595.837 ±   554.766  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100             16384       32         N/A          2  avgt    5      21.959 ±     0.288  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100             16384       32         N/A          3  avgt    5      22.056 ±     0.683  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100             16384     1000         N/A          2  avgt    5     662.403 ±    15.502  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100             16384     1000         N/A          3  avgt    5     658.842 ±    11.128  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100             16384   100000         N/A          2  avgt    5  132456.558 ± 18280.952  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100             16384   100000         N/A          3  avgt    5  134246.296 ±  2552.780  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                16       32         N/A          2  avgt    5       0.020 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                16       32         N/A          3  avgt    5       0.019 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                16     1000         N/A          2  avgt    5       0.643 ±     0.094  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                16     1000         N/A          3  avgt    5       0.624 ±     0.016  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                16   100000         N/A          2  avgt    5      94.662 ±     7.778  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                16   100000         N/A          3  avgt    5      97.810 ±    11.463  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                32       32         N/A          2  avgt    5       0.043 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                32       32         N/A          3  avgt    5       0.042 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                32     1000         N/A          2  avgt    5       1.230 ±     0.010  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                32     1000         N/A          3  avgt    5       1.236 ±     0.027  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                32   100000         N/A          2  avgt    5     186.320 ±    11.554  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                32   100000         N/A          3  avgt    5     200.900 ±    70.370  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                64       32         N/A          2  avgt    5       0.084 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                64       32         N/A          3  avgt    5       0.086 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                64     1000         N/A          2  avgt    5       2.482 ±     0.059  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                64     1000         N/A          3  avgt    5       2.486 ±     0.096  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                64   100000         N/A          2  avgt    5     381.576 ±    50.821  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                64   100000         N/A          3  avgt    5     373.784 ±    28.597  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               128       32         N/A          2  avgt    5       0.168 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               128       32         N/A          3  avgt    5       0.170 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               128     1000         N/A          2  avgt    5       4.916 ±     0.062  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               128     1000         N/A          3  avgt    5       4.912 ±     0.094  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               128   100000         N/A          2  avgt    5     756.293 ±    38.111  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               128   100000         N/A          3  avgt    5     722.279 ±    39.976  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               256       32         N/A          2  avgt    5       0.345 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               256       32         N/A          3  avgt    5       0.344 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               256     1000         N/A          2  avgt    5       9.852 ±     0.233  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               256     1000         N/A          3  avgt    5       9.967 ±     0.117  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               256   100000         N/A          2  avgt    5    1558.703 ±    97.924  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               256   100000         N/A          3  avgt    5    1459.044 ±   123.772  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               512       32         N/A          2  avgt    5       0.672 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               512       32         N/A          3  avgt    5       0.682 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               512     1000         N/A          2  avgt    5      19.494 ±     0.295  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               512     1000         N/A          3  avgt    5      19.924 ±     0.274  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               512   100000         N/A          2  avgt    5    3060.713 ±   141.862  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               512   100000         N/A          3  avgt    5    3002.121 ±   135.674  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              1024       32         N/A          2  avgt    5       1.370 ±     0.026  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              1024       32         N/A          3  avgt    5       1.339 ±     0.016  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              1024     1000         N/A          2  avgt    5      39.681 ±     0.441  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              1024     1000         N/A          3  avgt    5      39.254 ±     0.550  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              1024   100000         N/A          2  avgt    5    5960.842 ±   162.588  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              1024   100000         N/A          3  avgt    5    6065.081 ±   144.561  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              2048       32         N/A          2  avgt    5       2.739 ±     0.027  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              2048       32         N/A          3  avgt    5       2.690 ±     0.039  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              2048     1000         N/A          2  avgt    5      78.427 ±     1.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              2048     1000         N/A          3  avgt    5      78.406 ±     0.882  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              2048   100000         N/A          2  avgt    5   12433.475 ±    94.084  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              2048   100000         N/A          3  avgt    5   11556.111 ±   270.707  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              4096       32         N/A          2  avgt    5       5.380 ±     0.451  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              4096       32         N/A          3  avgt    5       5.467 ±     0.051  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              4096     1000         N/A          2  avgt    5     157.087 ±     0.603  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              4096     1000         N/A          3  avgt    5     156.135 ±     1.254  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              4096   100000         N/A          2  avgt    5   23952.428 ±   287.153  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              4096   100000         N/A          3  avgt    5   24162.149 ±   271.431  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              8192       32         N/A          2  avgt    5      10.751 ±     0.149  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              8192       32         N/A          3  avgt    5      10.808 ±     0.138  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              8192     1000         N/A          2  avgt    5     314.917 ±     7.342  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              8192     1000         N/A          3  avgt    5     315.257 ±     5.406  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              8192   100000         N/A          2  avgt    5   46691.917 ±   478.608  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              8192   100000         N/A          3  avgt    5   47311.680 ±   363.735  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10             16384       32         N/A          2  avgt    5      21.275 ±     0.176  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10             16384       32         N/A          3  avgt    5      21.506 ±     0.166  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10             16384     1000         N/A          2  avgt    5     621.912 ±    10.440  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10             16384     1000         N/A          3  avgt    5     626.559 ±     7.737  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10             16384   100000         N/A          2  avgt    5   94805.728 ±  1607.927  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10             16384   100000         N/A          3  avgt    5   94722.679 ±  1208.774  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                16       32         N/A          2  avgt    5       0.019 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                16       32         N/A          3  avgt    5       0.019 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                16     1000         N/A          2  avgt    5       0.633 ±     0.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                16     1000         N/A          3  avgt    5       0.634 ±     0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                16   100000         N/A          2  avgt    5      97.718 ±     8.472  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                16   100000         N/A          3  avgt    5      94.360 ±     7.616  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                32       32         N/A          2  avgt    5       0.043 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                32       32         N/A          3  avgt    5       0.043 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                32     1000         N/A          2  avgt    5       1.289 ±     0.055  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                32     1000         N/A          3  avgt    5       1.280 ±     0.020  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                32   100000         N/A          2  avgt    5     191.755 ±    13.433  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                32   100000         N/A          3  avgt    5     190.322 ±    18.533  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                64       32         N/A          2  avgt    5       0.084 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                64       32         N/A          3  avgt    5       0.084 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                64     1000         N/A          2  avgt    5       2.535 ±     0.048  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                64     1000         N/A          3  avgt    5       2.537 ±     0.037  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                64   100000         N/A          2  avgt    5     394.688 ±    42.870  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                64   100000         N/A          3  avgt    5     381.424 ±    65.203  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               128       32         N/A          2  avgt    5       0.170 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               128       32         N/A          3  avgt    5       0.169 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               128     1000         N/A          2  avgt    5       5.077 ±     0.066  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               128     1000         N/A          3  avgt    5       5.045 ±     0.074  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               128   100000         N/A          2  avgt    5     733.350 ±    23.591  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               128   100000         N/A          3  avgt    5     775.056 ±    80.313  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               256       32         N/A          2  avgt    5       0.338 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               256       32         N/A          3  avgt    5       0.337 ±     0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               256     1000         N/A          2  avgt    5      10.095 ±     0.102  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               256     1000         N/A          3  avgt    5      10.220 ±     0.150  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               256   100000         N/A          2  avgt    5    1633.335 ±   605.515  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               256   100000         N/A          3  avgt    5    1507.027 ±    70.846  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               512       32         N/A          2  avgt    5       0.679 ±     0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               512       32         N/A          3  avgt    5       0.675 ±     0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               512     1000         N/A          2  avgt    5      20.273 ±     0.232  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               512     1000         N/A          3  avgt    5      20.227 ±     0.490  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               512   100000         N/A          2  avgt    5    3785.974 ±  1777.092  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               512   100000         N/A          3  avgt    5    3778.841 ±  2126.803  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              1024       32         N/A          2  avgt    5       1.337 ±     0.019  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              1024       32         N/A          3  avgt    5       1.357 ±     0.021  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              1024     1000         N/A          2  avgt    5      40.537 ±     0.558  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              1024     1000         N/A          3  avgt    5      40.515 ±     0.837  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              1024   100000         N/A          2  avgt    5    8881.078 ±   850.742  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              1024   100000         N/A          3  avgt    5    8859.554 ±   375.168  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              2048       32         N/A          2  avgt    5       2.746 ±     0.037  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              2048       32         N/A          3  avgt    5       2.690 ±     0.058  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              2048     1000         N/A          2  avgt    5      82.260 ±     2.360  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              2048     1000         N/A          3  avgt    5      87.846 ±    31.770  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              2048   100000         N/A          2  avgt    5   17479.574 ±  1350.854  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              2048   100000         N/A          3  avgt    5   16485.239 ±   658.617  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              4096       32         N/A          2  avgt    5       5.481 ±     0.063  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              4096       32         N/A          3  avgt    5       5.573 ±     0.162  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              4096     1000         N/A          2  avgt    5     171.331 ±    28.117  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              4096     1000         N/A          3  avgt    5     163.333 ±     3.882  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              4096   100000         N/A          2  avgt    5   33866.730 ±  2052.512  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              4096   100000         N/A          3  avgt    5   32481.062 ±  1170.525  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              8192       32         N/A          2  avgt    5      10.999 ±     0.197  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              8192       32         N/A          3  avgt    5      11.009 ±     0.189  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              8192     1000         N/A          2  avgt    5     328.177 ±    11.907  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              8192     1000         N/A          3  avgt    5     328.721 ±     6.256  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              8192   100000         N/A          2  avgt    5   67690.383 ±   596.709  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              8192   100000         N/A          3  avgt    5   70046.722 ±  1982.464  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100             16384       32         N/A          2  avgt    5      21.872 ±     0.252  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100             16384       32         N/A          3  avgt    5      22.167 ±     0.583  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100             16384     1000         N/A          2  avgt    5     658.422 ±    18.748  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100             16384     1000         N/A          3  avgt    5     660.234 ±    10.789  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100             16384   100000         N/A          2  avgt    5  227532.161 ± 47641.477  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100             16384   100000         N/A          3  avgt    5  245647.397 ± 49174.630  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                16       32         N/A          2  avgt    5       0.003 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                16       32         N/A          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                16     1000         N/A          2  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                16     1000         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                16   100000         N/A          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                16   100000         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                32       32         N/A          2  avgt    5       0.004 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                32       32         N/A          3  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                32     1000         N/A          2  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                32     1000         N/A          3  avgt    5       0.006 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                32   100000         N/A          2  avgt    5       0.006 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                32   100000         N/A          3  avgt    5       0.007 ±     0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                64       32         N/A          2  avgt    5       0.011 ±     0.010  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                64       32         N/A          3  avgt    5       0.008 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                64     1000         N/A          2  avgt    5       0.010 ±     0.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                64     1000         N/A          3  avgt    5       0.011 ±     0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                64   100000         N/A          2  avgt    5       0.011 ±     0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                64   100000         N/A          3  avgt    5       0.011 ±     0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               128       32         N/A          2  avgt    5       0.024 ±     0.019  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               128       32         N/A          3  avgt    5       0.016 ±     0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               128     1000         N/A          2  avgt    5       0.016 ±     0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               128     1000         N/A          3  avgt    5       0.017 ±     0.011  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               128   100000         N/A          2  avgt    5       0.015 ±     0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               128   100000         N/A          3  avgt    5       0.015 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               256       32         N/A          2  avgt    5       0.029 ±     0.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               256       32         N/A          3  avgt    5       0.029 ±     0.008  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               256     1000         N/A          2  avgt    5       0.031 ±     0.014  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               256     1000         N/A          3  avgt    5       0.031 ±     0.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               256   100000         N/A          2  avgt    5       0.032 ±     0.015  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               256   100000         N/A          3  avgt    5       0.034 ±     0.035  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               512       32         N/A          2  avgt    5       0.063 ±     0.031  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               512       32         N/A          3  avgt    5       0.063 ±     0.036  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               512     1000         N/A          2  avgt    5       0.057 ±     0.019  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               512     1000         N/A          3  avgt    5       0.057 ±     0.025  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               512   100000         N/A          2  avgt    5       0.085 ±     0.132  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               512   100000         N/A          3  avgt    5       0.062 ±     0.030  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              1024       32         N/A          2  avgt    5       0.127 ±     0.067  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              1024       32         N/A          3  avgt    5       0.134 ±     0.075  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              1024     1000         N/A          2  avgt    5       0.135 ±     0.081  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              1024     1000         N/A          3  avgt    5       0.152 ±     0.117  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              1024   100000         N/A          2  avgt    5       0.126 ±     0.105  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              1024   100000         N/A          3  avgt    5       0.124 ±     0.086  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              2048       32         N/A          2  avgt    5       0.252 ±     0.096  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              2048       32         N/A          3  avgt    5       0.209 ±     0.070  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              2048     1000         N/A          2  avgt    5       0.211 ±     0.063  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              2048     1000         N/A          3  avgt    5       0.215 ±     0.069  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              2048   100000         N/A          2  avgt    5       0.241 ±     0.119  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              2048   100000         N/A          3  avgt    5       0.235 ±     0.112  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              4096       32         N/A          2  avgt    5       0.475 ±     0.165  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              4096       32         N/A          3  avgt    5       0.498 ±     0.281  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              4096     1000         N/A          2  avgt    5       0.507 ±     0.218  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              4096     1000         N/A          3  avgt    5       0.563 ±     0.396  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              4096   100000         N/A          2  avgt    5       0.574 ±     0.353  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              4096   100000         N/A          3  avgt    5       0.519 ±     0.451  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              8192       32         N/A          2  avgt    5       0.902 ±     0.204  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              8192       32         N/A          3  avgt    5       0.849 ±     0.205  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              8192     1000         N/A          2  avgt    5       0.861 ±     0.326  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              8192     1000         N/A          3  avgt    5       0.884 ±     0.321  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              8192   100000         N/A          2  avgt    5       0.893 ±     0.440  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              8192   100000         N/A          3  avgt    5       0.912 ±     0.309  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10             16384       32         N/A          2  avgt    5       1.903 ±     0.766  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10             16384       32         N/A          3  avgt    5       2.040 ±     0.905  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10             16384     1000         N/A          2  avgt    5       1.919 ±     0.722  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10             16384     1000         N/A          3  avgt    5       2.110 ±     1.384  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10             16384   100000         N/A          2  avgt    5       2.309 ±     1.668  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10             16384   100000         N/A          3  avgt    5       2.075 ±     1.046  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                16       32         N/A          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                16       32         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                16     1000         N/A          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                16     1000         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                16   100000         N/A          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                16   100000         N/A          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                32       32         N/A          2  avgt    5       0.004 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                32       32         N/A          3  avgt    5       0.005 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                32     1000         N/A          2  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                32     1000         N/A          3  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                32   100000         N/A          2  avgt    5       0.005 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                32   100000         N/A          3  avgt    5       0.005 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                64       32         N/A          2  avgt    5       0.008 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                64       32         N/A          3  avgt    5       0.007 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                64     1000         N/A          2  avgt    5       0.007 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                64     1000         N/A          3  avgt    5       0.007 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                64   100000         N/A          2  avgt    5       0.007 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                64   100000         N/A          3  avgt    5       0.008 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               128       32         N/A          2  avgt    5       0.018 ±     0.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               128       32         N/A          3  avgt    5       0.023 ±     0.034  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               128     1000         N/A          2  avgt    5       0.020 ±     0.010  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               128     1000         N/A          3  avgt    5       0.026 ±     0.027  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               128   100000         N/A          2  avgt    5       0.024 ±     0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               128   100000         N/A          3  avgt    5       0.021 ±     0.010  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               256       32         N/A          2  avgt    5       0.041 ±     0.029  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               256       32         N/A          3  avgt    5       0.043 ±     0.042  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               256     1000         N/A          2  avgt    5       0.041 ±     0.023  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               256     1000         N/A          3  avgt    5       0.037 ±     0.026  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               256   100000         N/A          2  avgt    5       0.028 ±     0.011  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               256   100000         N/A          3  avgt    5       0.030 ±     0.015  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               512       32         N/A          2  avgt    5       0.061 ±     0.028  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               512       32         N/A          3  avgt    5       0.068 ±     0.052  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               512     1000         N/A          2  avgt    5       0.087 ±     0.085  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               512     1000         N/A          3  avgt    5       0.071 ±     0.053  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               512   100000         N/A          2  avgt    5       0.075 ±     0.053  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               512   100000         N/A          3  avgt    5       0.080 ±     0.066  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              1024       32         N/A          2  avgt    5       0.141 ±     0.118  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              1024       32         N/A          3  avgt    5       0.139 ±     0.089  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              1024     1000         N/A          2  avgt    5       0.137 ±     0.086  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              1024     1000         N/A          3  avgt    5       0.149 ±     0.140  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              1024   100000         N/A          2  avgt    5       0.153 ±     0.098  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              1024   100000         N/A          3  avgt    5       0.152 ±     0.100  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              2048       32         N/A          2  avgt    5       0.279 ±     0.178  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              2048       32         N/A          3  avgt    5       0.294 ±     0.209  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              2048     1000         N/A          2  avgt    5       0.274 ±     0.157  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              2048     1000         N/A          3  avgt    5       0.278 ±     0.212  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              2048   100000         N/A          2  avgt    5       0.263 ±     0.226  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              2048   100000         N/A          3  avgt    5       0.284 ±     0.257  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              4096       32         N/A          2  avgt    5       0.784 ±     1.236  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              4096       32         N/A          3  avgt    5       0.569 ±     0.254  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              4096     1000         N/A          2  avgt    5       0.587 ±     0.527  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              4096     1000         N/A          3  avgt    5       0.658 ±     0.727  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              4096   100000         N/A          2  avgt    5       0.668 ±     0.421  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              4096   100000         N/A          3  avgt    5       0.672 ±     0.588  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              8192       32         N/A          2  avgt    5       0.991 ±     0.549  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              8192       32         N/A          3  avgt    5       0.931 ±     0.255  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              8192     1000         N/A          2  avgt    5       0.954 ±     0.590  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              8192     1000         N/A          3  avgt    5       1.212 ±     0.900  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              8192   100000         N/A          2  avgt    5       1.123 ±     0.766  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              8192   100000         N/A          3  avgt    5       0.953 ±     0.574  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100             16384       32         N/A          2  avgt    5       2.298 ±     1.467  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100             16384       32         N/A          3  avgt    5       3.213 ±     3.661  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100             16384     1000         N/A          2  avgt    5       3.239 ±     2.375  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100             16384     1000         N/A          3  avgt    5       2.511 ±     1.569  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100             16384   100000         N/A          2  avgt    5       1.938 ±     1.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100             16384   100000         N/A          3  avgt    5       2.064 ±     1.537  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                16       32         N/A          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                16       32         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                16     1000         N/A          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                16     1000         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                16   100000         N/A          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                16   100000         N/A          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                32       32         N/A          2  avgt    5       0.004 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                32       32         N/A          3  avgt    5       0.004 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                32     1000         N/A          2  avgt    5       0.003 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                32     1000         N/A          3  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                32   100000         N/A          2  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                32   100000         N/A          3  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                64       32         N/A          2  avgt    5       0.006 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                64       32         N/A          3  avgt    5       0.006 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                64     1000         N/A          2  avgt    5       0.007 ±     0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                64     1000         N/A          3  avgt    5       0.007 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                64   100000         N/A          2  avgt    5       0.008 ±     0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                64   100000         N/A          3  avgt    5       0.006 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               128       32         N/A          2  avgt    5       0.014 ±     0.016  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               128       32         N/A          3  avgt    5       0.013 ±     0.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               128     1000         N/A          2  avgt    5       0.013 ±     0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               128     1000         N/A          3  avgt    5       0.013 ±     0.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               128   100000         N/A          2  avgt    5       0.012 ±     0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               128   100000         N/A          3  avgt    5       0.014 ±     0.014  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               256       32         N/A          2  avgt    5       0.024 ±     0.017  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               256       32         N/A          3  avgt    5       0.024 ±     0.016  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               256     1000         N/A          2  avgt    5       0.024 ±     0.017  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               256     1000         N/A          3  avgt    5       0.025 ±     0.017  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               256   100000         N/A          2  avgt    5       0.032 ±     0.027  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               256   100000         N/A          3  avgt    5       0.028 ±     0.024  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               512       32         N/A          2  avgt    5       0.049 ±     0.037  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               512       32         N/A          3  avgt    5       0.046 ±     0.039  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               512     1000         N/A          2  avgt    5       0.054 ±     0.031  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               512     1000         N/A          3  avgt    5       0.049 ±     0.045  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               512   100000         N/A          2  avgt    5       0.054 ±     0.049  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               512   100000         N/A          3  avgt    5       0.046 ±     0.037  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              1024       32         N/A          2  avgt    5       0.103 ±     0.082  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              1024       32         N/A          3  avgt    5       0.099 ±     0.058  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              1024     1000         N/A          2  avgt    5       0.102 ±     0.078  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              1024     1000         N/A          3  avgt    5       0.113 ±     0.126  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              1024   100000         N/A          2  avgt    5       0.111 ±     0.095  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              1024   100000         N/A          3  avgt    5       0.100 ±     0.074  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              2048       32         N/A          2  avgt    5       0.215 ±     0.223  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              2048       32         N/A          3  avgt    5       0.243 ±     0.184  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              2048     1000         N/A          2  avgt    5       0.304 ±     0.410  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              2048     1000         N/A          3  avgt    5       0.306 ±     0.283  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              2048   100000         N/A          2  avgt    5       0.255 ±     0.246  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              2048   100000         N/A          3  avgt    5       0.191 ±     0.146  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              4096       32         N/A          2  avgt    5       0.463 ±     0.275  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              4096       32         N/A          3  avgt    5       0.470 ±     0.526  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              4096     1000         N/A          2  avgt    5       0.491 ±     0.454  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              4096     1000         N/A          3  avgt    5       0.512 ±     0.522  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              4096   100000         N/A          2  avgt    5       0.490 ±     0.344  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              4096   100000         N/A          3  avgt    5       0.580 ±     0.997  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              8192       32         N/A          2  avgt    5       1.047 ±     0.996  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              8192       32         N/A          3  avgt    5       0.874 ±     0.742  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              8192     1000         N/A          2  avgt    5       0.740 ±     0.548  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              8192     1000         N/A          3  avgt    5       0.903 ±     0.771  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              8192   100000         N/A          2  avgt    5       0.828 ±     0.688  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              8192   100000         N/A          3  avgt    5       0.808 ±     0.672  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10             16384       32         N/A          2  avgt    5       1.643 ±     1.518  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10             16384       32         N/A          3  avgt    5       1.839 ±     1.303  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10             16384     1000         N/A          2  avgt    5       1.809 ±     1.734  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10             16384     1000         N/A          3  avgt    5       1.848 ±     1.601  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10             16384   100000         N/A          2  avgt    5       1.676 ±     1.445  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10             16384   100000         N/A          3  avgt    5       1.870 ±     1.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                16       32         N/A          2  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                16       32         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                16     1000         N/A          2  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                16     1000         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                16   100000         N/A          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                16   100000         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                32       32         N/A          2  avgt    5       0.004 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                32       32         N/A          3  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                32     1000         N/A          2  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                32     1000         N/A          3  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                32   100000         N/A          2  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                32   100000         N/A          3  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                64       32         N/A          2  avgt    5       0.007 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                64       32         N/A          3  avgt    5       0.006 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                64     1000         N/A          2  avgt    5       0.005 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                64     1000         N/A          3  avgt    5       0.005 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                64   100000         N/A          2  avgt    5       0.006 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                64   100000         N/A          3  avgt    5       0.005 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               128       32         N/A          2  avgt    5       0.010 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               128       32         N/A          3  avgt    5       0.010 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               128     1000         N/A          2  avgt    5       0.010 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               128     1000         N/A          3  avgt    5       0.010 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               128   100000         N/A          2  avgt    5       0.011 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               128   100000         N/A          3  avgt    5       0.011 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               256       32         N/A          2  avgt    5       0.023 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               256       32         N/A          3  avgt    5       0.024 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               256     1000         N/A          2  avgt    5       0.024 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               256     1000         N/A          3  avgt    5       0.021 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               256   100000         N/A          2  avgt    5       0.020 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               256   100000         N/A          3  avgt    5       0.022 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               512       32         N/A          2  avgt    5       0.041 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               512       32         N/A          3  avgt    5       0.042 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               512     1000         N/A          2  avgt    5       0.040 ±     0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               512     1000         N/A          3  avgt    5       0.041 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               512   100000         N/A          2  avgt    5       0.041 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               512   100000         N/A          3  avgt    5       0.042 ±     0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              1024       32         N/A          2  avgt    5       0.084 ±     0.014  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              1024       32         N/A          3  avgt    5       0.084 ±     0.016  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              1024     1000         N/A          2  avgt    5       0.086 ±     0.017  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              1024     1000         N/A          3  avgt    5       0.091 ±     0.016  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              1024   100000         N/A          2  avgt    5       0.088 ±     0.015  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              1024   100000         N/A          3  avgt    5       0.086 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              2048       32         N/A          2  avgt    5       0.199 ±     0.065  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              2048       32         N/A          3  avgt    5       0.184 ±     0.062  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              2048     1000         N/A          2  avgt    5       0.172 ±     0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              2048     1000         N/A          3  avgt    5       0.168 ±     0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              2048   100000         N/A          2  avgt    5       0.163 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              2048   100000         N/A          3  avgt    5       0.160 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              4096       32         N/A          2  avgt    5       0.336 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              4096       32         N/A          3  avgt    5       0.332 ±     0.019  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              4096     1000         N/A          2  avgt    5       0.350 ±     0.141  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              4096     1000         N/A          3  avgt    5       0.314 ±     0.020  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              4096   100000         N/A          2  avgt    5       0.312 ±     0.010  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              4096   100000         N/A          3  avgt    5       0.292 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              8192       32         N/A          2  avgt    5       0.631 ±     0.028  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              8192       32         N/A          3  avgt    5       0.645 ±     0.010  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              8192     1000         N/A          2  avgt    5       0.708 ±     0.217  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              8192     1000         N/A          3  avgt    5       0.676 ±     0.051  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              8192   100000         N/A          2  avgt    5       0.686 ±     0.045  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              8192   100000         N/A          3  avgt    5       0.604 ±     0.008  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100             16384       32         N/A          2  avgt    5       1.198 ±     0.018  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100             16384       32         N/A          3  avgt    5       1.267 ±     0.032  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100             16384     1000         N/A          2  avgt    5       1.195 ±     0.055  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100             16384     1000         N/A          3  avgt    5       1.392 ±     0.603  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100             16384   100000         N/A          2  avgt    5       1.321 ±     0.179  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100             16384   100000         N/A          3  avgt    5       1.248 ±     0.231  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32          32          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32         128          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32         128          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32         256          2  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32         256          3  avgt    5       0.004 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32         512          2  avgt    5       0.008 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32         512          3  avgt    5       0.008 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        1024          2  avgt    5       0.015 ±     0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        1024          3  avgt    5       0.015 ±     0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        2048          2  avgt    5       0.031 ±     0.022  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        2048          3  avgt    5       0.028 ±     0.019  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        4096          2  avgt    5       0.058 ±     0.057  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        4096          3  avgt    5       0.053 ±     0.024  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        8192          2  avgt    5       0.113 ±     0.093  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        8192          3  avgt    5       0.110 ±     0.082  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32       16384          2  avgt    5       0.247 ±     0.213  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32       16384          3  avgt    5       0.237 ±     0.177  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000          32          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000          32          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000         128          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000         128          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000         256          2  avgt    5       0.004 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000         256          3  avgt    5       0.004 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000         512          2  avgt    5       0.008 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000         512          3  avgt    5       0.007 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        1024          2  avgt    5       0.015 ±     0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        1024          3  avgt    5       0.015 ±     0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        2048          2  avgt    5       0.029 ±     0.023  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        2048          3  avgt    5       0.029 ±     0.019  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        4096          2  avgt    5       0.060 ±     0.040  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        4096          3  avgt    5       0.058 ±     0.043  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        8192          2  avgt    5       0.116 ±     0.063  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        8192          3  avgt    5       0.120 ±     0.080  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000       16384          2  avgt    5       0.231 ±     0.164  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000       16384          3  avgt    5       0.231 ±     0.110  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           1          2  avgt    4      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           1          3  avgt    4      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000          32          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000         128          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000         128          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000         256          2  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000         256          3  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000         512          2  avgt    5       0.008 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000         512          3  avgt    5       0.008 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        1024          2  avgt    5       0.015 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        1024          3  avgt    5       0.014 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        2048          2  avgt    5       0.028 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        2048          3  avgt    5       0.035 ±     0.033  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        4096          2  avgt    5       0.055 ±     0.019  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        4096          3  avgt    5       0.059 ±     0.033  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        8192          2  avgt    5       0.116 ±     0.058  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        8192          3  avgt    5       0.117 ±     0.044  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000       16384          2  avgt    5       0.228 ±     0.088  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000       16384          3  avgt    5       0.219 ±     0.100  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32          32          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32         128          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32         128          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32         256          2  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32         256          3  avgt    5       0.004 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32         512          2  avgt    5       0.007 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32         512          3  avgt    5       0.007 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        1024          2  avgt    5       0.014 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        1024          3  avgt    5       0.014 ±     0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        2048          2  avgt    5       0.026 ±     0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        2048          3  avgt    5       0.027 ±     0.012  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        4096          2  avgt    5       0.057 ±     0.050  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        4096          3  avgt    5       0.055 ±     0.034  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        8192          2  avgt    5       0.109 ±     0.072  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        8192          3  avgt    5       0.118 ±     0.133  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32       16384          2  avgt    5       0.226 ±     0.186  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32       16384          3  avgt    5       0.221 ±     0.157  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000          32          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000         128          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000         128          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000         256          2  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000         256          3  avgt    5       0.004 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000         512          2  avgt    5       0.007 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000         512          3  avgt    5       0.007 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        1024          2  avgt    5       0.014 ±     0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        1024          3  avgt    5       0.016 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        2048          2  avgt    5       0.029 ±     0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        2048          3  avgt    5       0.029 ±     0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        4096          2  avgt    5       0.065 ±     0.069  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        4096          3  avgt    5       0.057 ±     0.020  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        8192          2  avgt    5       0.112 ±     0.082  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        8192          3  avgt    5       0.108 ±     0.052  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000       16384          2  avgt    5       0.229 ±     0.182  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000       16384          3  avgt    5       0.211 ±     0.092  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000           4          2  avgt    4      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000           4          3  avgt    4      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000          32          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000          32          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000         128          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000         128          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000         256          2  avgt    5       0.004 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000         256          3  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000         512          2  avgt    5       0.008 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000         512          3  avgt    5       0.008 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        1024          2  avgt    5       0.015 ±     0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        1024          3  avgt    5       0.015 ±     0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        2048          2  avgt    5       0.027 ±     0.018  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        2048          3  avgt    5       0.027 ±     0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        4096          2  avgt    5       0.059 ±     0.036  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        4096          3  avgt    5       0.071 ±     0.036  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        8192          2  avgt    5       0.121 ±     0.108  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        8192          3  avgt    5       0.120 ±     0.057  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000       16384          2  avgt    5       0.258 ±     0.157  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000       16384          3  avgt    5       0.235 ±     0.083  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32          32          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32          32          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32         128          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32         128          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32         256          2  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32         256          3  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32         512          2  avgt    5       0.007 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32         512          3  avgt    5       0.006 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        1024          2  avgt    5       0.013 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        1024          3  avgt    5       0.012 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        2048          2  avgt    5       0.026 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        2048          3  avgt    5       0.025 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        4096          2  avgt    5       0.048 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        4096          3  avgt    5       0.048 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        8192          2  avgt    5       0.101 ±     0.012  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        8192          3  avgt    5       0.101 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32       16384          2  avgt    5       0.201 ±     0.037  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32       16384          3  avgt    5       0.204 ±     0.012  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000          32          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000         128          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000         128          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000         256          2  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000         256          3  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000         512          2  avgt    5       0.006 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000         512          3  avgt    5       0.006 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        1024          2  avgt    5       0.012 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        1024          3  avgt    5       0.012 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        2048          2  avgt    5       0.025 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        2048          3  avgt    5       0.025 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        4096          2  avgt    5       0.050 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        4096          3  avgt    5       0.052 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        8192          2  avgt    5       0.099 ±     0.023  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        8192          3  avgt    5       0.101 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000       16384          2  avgt    5       0.207 ±     0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000       16384          3  avgt    5       0.198 ±     0.035  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000          32          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000          32          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000         128          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000         128          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000         256          2  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000         256          3  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000         512          2  avgt    5       0.006 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000         512          3  avgt    5       0.006 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        1024          2  avgt    5       0.012 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        1024          3  avgt    5       0.013 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        2048          2  avgt    5       0.025 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        2048          3  avgt    5       0.025 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        4096          2  avgt    5       0.050 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        4096          3  avgt    5       0.050 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        8192          2  avgt    5       0.112 ±     0.066  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        8192          3  avgt    5       0.124 ±     0.100  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000       16384          2  avgt    5       0.254 ±     0.170  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000       16384          3  avgt    5       0.246 ±     0.173  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32          32          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32         128          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32         128          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32         256          2  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32         256          3  avgt    5       0.004 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32         512          2  avgt    5       0.008 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32         512          3  avgt    5       0.008 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        1024          2  avgt    5       0.016 ±     0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        1024          3  avgt    5       0.016 ±     0.015  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        2048          2  avgt    5       0.032 ±     0.029  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        2048          3  avgt    5       0.030 ±     0.023  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        4096          2  avgt    5       0.049 ±     0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        4096          3  avgt    5       0.048 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        8192          2  avgt    5       0.094 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        8192          3  avgt    5       0.095 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32       16384          2  avgt    5       0.205 ±     0.030  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32       16384          3  avgt    5       0.207 ±     0.037  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000          32          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000          32          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000         128          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000         128          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000         256          2  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000         256          3  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000         512          2  avgt    5       0.006 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000         512          3  avgt    5       0.006 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        1024          2  avgt    5       0.013 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        1024          3  avgt    5       0.013 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        2048          2  avgt    5       0.027 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        2048          3  avgt    5       0.024 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        4096          2  avgt    5       0.049 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        4096          3  avgt    5       0.050 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        8192          2  avgt    5       0.100 ±     0.027  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        8192          3  avgt    5       0.092 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000       16384          2  avgt    5       0.183 ±     0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000       16384          3  avgt    5       0.187 ±     0.036  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000          32          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000          32          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000         128          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000         128          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000         256          2  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000         256          3  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000         512          2  avgt    5       0.007 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000         512          3  avgt    5       0.007 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        1024          2  avgt    5       0.012 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        1024          3  avgt    5       0.013 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        2048          2  avgt    5       0.026 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        2048          3  avgt    5       0.025 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        4096          2  avgt    5       0.049 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        4096          3  avgt    5       0.049 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        8192          2  avgt    5       0.099 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        8192          3  avgt    5       0.098 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000       16384          2  avgt    5       0.196 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000       16384          3  avgt    5       0.199 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           1          2  avgt           ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           1          3  avgt    4      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           4          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           8          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           8          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32          32          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32          64          2  avgt    5       0.003 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32          64          3  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32         128          2  avgt    5       0.007 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32         128          3  avgt    5       0.007 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32         256          2  avgt    5       0.013 ±     0.014  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32         256          3  avgt    5       0.013 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32         512          2  avgt    5       0.028 ±     0.027  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32         512          3  avgt    5       0.033 ±     0.029  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        1024          2  avgt    5       0.053 ±     0.042  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        1024          3  avgt    5       0.051 ±     0.056  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        2048          2  avgt    5       0.099 ±     0.123  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        2048          3  avgt    5       0.087 ±     0.075  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        4096          2  avgt    5       0.185 ±     0.398  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        4096          3  avgt    5       0.148 ±     0.097  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        8192          2  avgt    5       0.330 ±     0.242  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        8192          3  avgt    5       0.369 ±     0.266  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32       16384          2  avgt    5       0.736 ±     0.663  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32       16384          3  avgt    5       0.799 ±     1.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           1          2  avgt    4      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           1          3  avgt    5       0.001 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           2          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           4          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           4          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           8          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           8          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000          16          3  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000          32          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000          64          2  avgt    5       0.003 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000          64          3  avgt    5       0.003 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000         128          2  avgt    5       0.005 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000         128          3  avgt    5       0.006 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000         256          2  avgt    5       0.013 ±     0.014  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000         256          3  avgt    5       0.014 ±     0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000         512          2  avgt    5       0.024 ±     0.026  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000         512          3  avgt    5       0.026 ±     0.019  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        1024          2  avgt    5       0.047 ±     0.044  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        1024          3  avgt    5       0.050 ±     0.032  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        2048          2  avgt    5       0.107 ±     0.075  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        2048          3  avgt    5       0.106 ±     0.065  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        4096          2  avgt    5       0.185 ±     0.245  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        4096          3  avgt    5       0.173 ±     0.184  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        8192          2  avgt    5       0.346 ±     0.316  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        8192          3  avgt    5       0.334 ±     0.139  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000       16384          2  avgt    5       0.715 ±     0.679  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000       16384          3  avgt    5       0.788 ±     0.525  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           1          2  avgt    5       0.001 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           1          3  avgt    5       0.001 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           4          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           8          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           8          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000          32          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000          32          3  avgt    5       0.002 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000          64          2  avgt    5       0.004 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000          64          3  avgt    5       0.004 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000         128          2  avgt    5       0.006 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000         128          3  avgt    5       0.007 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000         256          2  avgt    5       0.013 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000         256          3  avgt    5       0.016 ±     0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000         512          2  avgt    5       0.029 ±     0.021  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000         512          3  avgt    5       0.021 ±     0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        1024          2  avgt    5       0.056 ±     0.033  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        1024          3  avgt    5       0.044 ±     0.026  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        2048          2  avgt    5       0.092 ±     0.070  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        2048          3  avgt    5       0.106 ±     0.086  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        4096          2  avgt    5       0.220 ±     0.199  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        4096          3  avgt    5       0.237 ±     0.184  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        8192          2  avgt    5       0.336 ±     0.168  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        8192          3  avgt    5       0.384 ±     0.164  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000       16384          2  avgt    5       1.009 ±     0.298  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000       16384          3  avgt    5       0.759 ±     0.801  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           1          2  avgt    3       0.001 ±     0.019  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           1          3  avgt    3       0.001 ±     0.032  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           2          2  avgt    4      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           2          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           4          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           8          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           8          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32          32          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32          32          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32          64          2  avgt    5       0.004 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32          64          3  avgt    5       0.004 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32         128          2  avgt    5       0.006 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32         128          3  avgt    5       0.007 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32         256          2  avgt    5       0.013 ±     0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32         256          3  avgt    5       0.011 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32         512          2  avgt    5       0.021 ±     0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32         512          3  avgt    5       0.022 ±     0.022  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        1024          2  avgt    5       0.043 ±     0.036  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        1024          3  avgt    5       0.048 ±     0.060  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        2048          2  avgt    5       0.100 ±     0.108  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        2048          3  avgt    5       0.098 ±     0.099  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        4096          2  avgt    5       0.202 ±     0.265  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        4096          3  avgt    5       0.191 ±     0.278  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        8192          2  avgt    5       0.435 ±     0.419  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        8192          3  avgt    5       0.333 ±     0.192  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32       16384          2  avgt    5       0.871 ±     0.765  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32       16384          3  avgt    5       0.847 ±     0.444  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           1          2  avgt    3      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           1          3  avgt    3       0.006 ±     0.177  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           2          2  avgt    4      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           2          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           8          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           8          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000          32          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000          32          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000          64          2  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000          64          3  avgt    5       0.003 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000         128          2  avgt    5       0.006 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000         128          3  avgt    5       0.009 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000         256          2  avgt    5       0.013 ±     0.012  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000         256          3  avgt    5       0.012 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000         512          2  avgt    5       0.028 ±     0.025  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000         512          3  avgt    5       0.027 ±     0.012  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        1024          2  avgt    5       0.053 ±     0.028  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        1024          3  avgt    5       0.044 ±     0.026  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        2048          2  avgt    5       0.096 ±     0.100  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        2048          3  avgt    5       0.079 ±     0.057  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        4096          2  avgt    5       0.176 ±     0.137  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        4096          3  avgt    5       0.206 ±     0.200  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        8192          2  avgt    5       0.385 ±     0.211  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        8192          3  avgt    5       0.451 ±     0.325  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000       16384          2  avgt    5       0.927 ±     0.581  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000       16384          3  avgt    5       0.834 ±     0.842  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000           1          2  avgt    5       0.003 ±     0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000           1          3  avgt    5       0.006 ±     0.029  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000           2          2  avgt    5       0.001 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000           2          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000           4          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000           4          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000           8          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000           8          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000          32          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000          32          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000          64          2  avgt    5       0.003 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000          64          3  avgt    5       0.003 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000         128          2  avgt    5       0.006 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000         128          3  avgt    5       0.008 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000         256          2  avgt    5       0.016 ±     0.019  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000         256          3  avgt    5       0.016 ±     0.023  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000         512          2  avgt    5       0.035 ±     0.023  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000         512          3  avgt    5       0.033 ±     0.032  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        1024          2  avgt    5       0.062 ±     0.034  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        1024          3  avgt    5       0.054 ±     0.033  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        2048          2  avgt    5       0.100 ±     0.045  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        2048          3  avgt    5       0.094 ±     0.100  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        4096          2  avgt    5       0.170 ±     0.096  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        4096          3  avgt    5       0.202 ±     0.076  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        8192          2  avgt    5       0.354 ±     0.287  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        8192          3  avgt    5       0.403 ±     0.359  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000       16384          2  avgt    5       1.005 ±     0.722  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000       16384          3  avgt    5       0.922 ±     0.704  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32          16          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32          16          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32          64          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32          64          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32         128          2  avgt    5       0.004 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32         128          3  avgt    5       0.004 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32         256          2  avgt    5       0.007 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32         256          3  avgt    5       0.007 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32         512          2  avgt    5       0.012 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32         512          3  avgt    5       0.018 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        1024          2  avgt    5       0.024 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        1024          3  avgt    5       0.026 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        2048          2  avgt    5       0.048 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        2048          3  avgt    5       0.057 ±     0.015  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        4096          2  avgt    5       0.095 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        4096          3  avgt    5       0.095 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        8192          2  avgt    5       0.188 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        8192          3  avgt    5       0.189 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32       16384          2  avgt    5       0.377 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32       16384          3  avgt    5       0.377 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000          16          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000          16          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000          64          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000          64          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000         128          2  avgt    5       0.005 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000         128          3  avgt    5       0.004 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000         256          2  avgt    5       0.008 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000         256          3  avgt    5       0.008 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000         512          2  avgt    5       0.018 ±     0.015  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000         512          3  avgt    5       0.016 ±     0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        1024          2  avgt    5       0.034 ±     0.027  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        1024          3  avgt    5       0.030 ±     0.020  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        2048          2  avgt    5       0.061 ±     0.049  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        2048          3  avgt    5       0.055 ±     0.029  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        4096          2  avgt    5       0.112 ±     0.079  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        4096          3  avgt    5       0.137 ±     0.097  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        8192          2  avgt    5       0.216 ±     0.122  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        8192          3  avgt    5       0.225 ±     0.163  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000       16384          2  avgt    5       0.452 ±     0.327  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000       16384          3  avgt    5       0.465 ±     0.410  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000          64          2  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000          64          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000         128          2  avgt    5       0.005 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000         128          3  avgt    5       0.006 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000         256          2  avgt    5       0.011 ±     0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000         256          3  avgt    5       0.011 ±     0.012  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000         512          2  avgt    5       0.016 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000         512          3  avgt    5       0.024 ±     0.026  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        1024          2  avgt    5       0.036 ±     0.036  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        1024          3  avgt    5       0.032 ±     0.022  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        2048          2  avgt    5       0.074 ±     0.056  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        2048          3  avgt    5       0.092 ±     0.107  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        4096          2  avgt    5       0.107 ±     0.041  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        4096          3  avgt    5       0.141 ±     0.081  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        8192          2  avgt    5       0.299 ±     0.180  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        8192          3  avgt    5       0.266 ±     0.217  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000       16384          2  avgt    5       0.667 ±     0.404  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000       16384          3  avgt    5       0.440 ±     0.224  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32          64          2  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32          64          3  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32         128          2  avgt    5       0.005 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32         128          3  avgt    5       0.005 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32         256          2  avgt    5       0.010 ±     0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32         256          3  avgt    5       0.012 ±     0.014  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32         512          2  avgt    5       0.019 ±     0.023  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32         512          3  avgt    5       0.019 ±     0.023  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        1024          2  avgt    5       0.038 ±     0.042  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        1024          3  avgt    5       0.038 ±     0.043  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        2048          2  avgt    5       0.074 ±     0.080  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        2048          3  avgt    5       0.074 ±     0.080  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        4096          2  avgt    5       0.142 ±     0.170  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        4096          3  avgt    5       0.132 ±     0.121  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        8192          2  avgt    5       0.293 ±     0.379  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        8192          3  avgt    5       0.277 ±     0.291  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32       16384          2  avgt    5       0.556 ±     0.603  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32       16384          3  avgt    5       0.553 ±     0.584  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000          64          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000          64          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000         128          2  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000         128          3  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000         256          2  avgt    5       0.008 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000         256          3  avgt    5       0.009 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000         512          2  avgt    5       0.016 ±     0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000         512          3  avgt    5       0.019 ±     0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        1024          2  avgt    5       0.033 ±     0.024  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        1024          3  avgt    5       0.036 ±     0.032  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        2048          2  avgt    5       0.070 ±     0.058  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        2048          3  avgt    5       0.066 ±     0.066  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        4096          2  avgt    5       0.121 ±     0.100  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        4096          3  avgt    5       0.133 ±     0.090  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        8192          2  avgt    5       0.264 ±     0.212  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        8192          3  avgt    5       0.264 ±     0.196  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000       16384          2  avgt    5       0.514 ±     0.365  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000       16384          3  avgt    5       0.530 ±     0.403  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000          64          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000          64          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000         128          2  avgt    5       0.005 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000         128          3  avgt    5       0.005 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000         256          2  avgt    5       0.010 ±     0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000         256          3  avgt    5       0.010 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000         512          2  avgt    5       0.019 ±     0.018  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000         512          3  avgt    5       0.020 ±     0.018  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        1024          2  avgt    5       0.048 ±     0.033  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        1024          3  avgt    5       0.041 ±     0.031  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        2048          2  avgt    5       0.080 ±     0.071  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        2048          3  avgt    5       0.077 ±     0.063  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        4096          2  avgt    5       0.141 ±     0.111  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        4096          3  avgt    5       0.170 ±     0.141  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        8192          2  avgt    5       0.262 ±     0.173  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        8192          3  avgt    5       0.288 ±     0.223  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000       16384          2  avgt    5       0.736 ±     0.633  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000       16384          3  avgt    5       0.552 ±     0.404  ms/op

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.3.1/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 9h 8m 1s
13 actionable tasks: 1 executed, 12 up-to-date
