Starting a Gradle Daemon, 2 busy Daemons could not be reused, use --status for details
Type-safe dependency accessors is an incubating feature.
> Task :buildSrc:extractPluginRequests UP-TO-DATE
> Task :buildSrc:generatePluginAdapters UP-TO-DATE
> Task :buildSrc:compileJava UP-TO-DATE
> Task :buildSrc:compileGroovy NO-SOURCE
> Task :buildSrc:compileGroovyPlugins UP-TO-DATE
> Task :buildSrc:pluginDescriptors UP-TO-DATE
> Task :buildSrc:processResources UP-TO-DATE
> Task :buildSrc:classes UP-TO-DATE
> Task :buildSrc:jar UP-TO-DATE
> Task :buildSrc:assemble UP-TO-DATE
> Task :buildSrc:pluginUnderTestMetadata UP-TO-DATE
> Task :buildSrc:compileTestJava NO-SOURCE
> Task :buildSrc:compileTestGroovy NO-SOURCE
> Task :buildSrc:processTestResources NO-SOURCE
> Task :buildSrc:testClasses UP-TO-DATE
> Task :buildSrc:test NO-SOURCE
> Task :buildSrc:validatePlugins UP-TO-DATE
> Task :buildSrc:check UP-TO-DATE
> Task :buildSrc:build UP-TO-DATE
> Task :refinery-store:compileJava UP-TO-DATE
> Task :refinery-store:processResources NO-SOURCE
> Task :refinery-store:classes UP-TO-DATE
> Task :refinery-store:compileTestJava UP-TO-DATE
> Task :refinery-store:processTestResources NO-SOURCE
> Task :refinery-store:testClasses UP-TO-DATE
> Task :refinery-store:compileJmhJava UP-TO-DATE
> Task :refinery-store:processJmhResources NO-SOURCE
> Task :refinery-store:jmhClasses UP-TO-DATE

> Task :refinery-store:jmh
# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 0.00% complete, ETA 01:44:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 0.16% complete, ETA 01:49:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 0.32% complete, ETA 01:49:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.037 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.039 ms/op
# Warmup Iteration   4: 0.034 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.033 ms/op
Iteration   3: 0.039 ms/op
Iteration   4: 0.054 ms/op
Iteration   5: 0.053 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.043 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.033, 0.043, 0.054), stdev = 0.010
  CI (99.9%): [0.004, 0.081] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 0.48% complete, ETA 01:48:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.040 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.035 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.035 ms/op
Iteration   1: 0.033 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.041 ms/op
Iteration   4: 0.055 ms/op
Iteration   5: 0.055 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.044 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.033, 0.044, 0.055), stdev = 0.011
  CI (99.9%): [0.003, 0.085] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 0.64% complete, ETA 01:48:40
# Fork: 1 of 1
# Warmup Iteration   1: 10.325 ms/op
# Warmup Iteration   2: 9.875 ms/op
# Warmup Iteration   3: 8.692 ms/op
# Warmup Iteration   4: 9.292 ms/op
# Warmup Iteration   5: 9.021 ms/op
Iteration   1: 7.332 ms/op
Iteration   2: 9.993 ms/op
Iteration   3: 12.139 ms/op
Iteration   4: 14.555 ms/op
Iteration   5: 13.522 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  11.508 ±(99.9%) 11.139 ms/op [Average]
  (min, avg, max) = (7.332, 11.508, 14.555), stdev = 2.893
  CI (99.9%): [0.370, 22.647] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 0.80% complete, ETA 01:49:26
# Fork: 1 of 1
# Warmup Iteration   1: 10.021 ms/op
# Warmup Iteration   2: 11.804 ms/op
# Warmup Iteration   3: 8.477 ms/op
# Warmup Iteration   4: 9.646 ms/op
# Warmup Iteration   5: 9.817 ms/op
Iteration   1: 9.666 ms/op
Iteration   2: 8.515 ms/op
Iteration   3: 12.302 ms/op
Iteration   4: 14.288 ms/op
Iteration   5: 13.296 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  11.613 ±(99.9%) 9.403 ms/op [Average]
  (min, avg, max) = (8.515, 11.613, 14.288), stdev = 2.442
  CI (99.9%): [2.210, 21.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 0.96% complete, ETA 01:49:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 1.12% complete, ETA 01:49:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 1.28% complete, ETA 01:48:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.073 ms/op
# Warmup Iteration   2: 0.066 ms/op
# Warmup Iteration   3: 0.066 ms/op
# Warmup Iteration   4: 0.068 ms/op
# Warmup Iteration   5: 0.066 ms/op
Iteration   1: 0.066 ms/op
Iteration   2: 0.086 ms/op
Iteration   3: 0.077 ms/op
Iteration   4: 0.107 ms/op
Iteration   5: 0.124 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.092 ±(99.9%) 0.090 ms/op [Average]
  (min, avg, max) = (0.066, 0.092, 0.124), stdev = 0.023
  CI (99.9%): [0.002, 0.182] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 1.44% complete, ETA 01:48:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.084 ms/op
# Warmup Iteration   2: 0.116 ms/op
# Warmup Iteration   3: 0.101 ms/op
# Warmup Iteration   4: 0.075 ms/op
# Warmup Iteration   5: 0.074 ms/op
Iteration   1: 0.076 ms/op
Iteration   2: 0.075 ms/op
Iteration   3: 0.113 ms/op
Iteration   4: 0.168 ms/op
Iteration   5: 0.162 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.119 ±(99.9%) 0.172 ms/op [Average]
  (min, avg, max) = (0.075, 0.119, 0.168), stdev = 0.045
  CI (99.9%): [? 0, 0.291] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 1.60% complete, ETA 01:48:15
# Fork: 1 of 1
# Warmup Iteration   1: 25.238 ms/op
# Warmup Iteration   2: 26.320 ms/op
# Warmup Iteration   3: 24.654 ms/op
# Warmup Iteration   4: 22.003 ms/op
# Warmup Iteration   5: 26.260 ms/op
Iteration   1: 29.801 ms/op
Iteration   2: 24.196 ms/op
Iteration   3: 36.603 ms/op
Iteration   4: 40.446 ms/op
Iteration   5: 41.107 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  34.431 ±(99.9%) 28.010 ms/op [Average]
  (min, avg, max) = (24.196, 34.431, 41.107), stdev = 7.274
  CI (99.9%): [6.420, 62.441] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 1.76% complete, ETA 01:48:24
# Fork: 1 of 1
# Warmup Iteration   1: 22.567 ms/op
# Warmup Iteration   2: 22.716 ms/op
# Warmup Iteration   3: 23.968 ms/op
# Warmup Iteration   4: 22.968 ms/op
# Warmup Iteration   5: 24.699 ms/op
Iteration   1: 24.135 ms/op
Iteration   2: 19.885 ms/op
Iteration   3: 27.713 ms/op
Iteration   4: 29.059 ms/op
Iteration   5: 27.500 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  25.658 ±(99.9%) 14.256 ms/op [Average]
  (min, avg, max) = (19.885, 25.658, 29.059), stdev = 3.702
  CI (99.9%): [11.402, 39.914] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 1.92% complete, ETA 01:48:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 10??, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 2.08% complete, ETA 01:48:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 10?³, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 2.24% complete, ETA 01:48:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.134 ms/op
# Warmup Iteration   2: 0.123 ms/op
# Warmup Iteration   3: 0.118 ms/op
# Warmup Iteration   4: 0.120 ms/op
# Warmup Iteration   5: 0.118 ms/op
Iteration   1: 0.110 ms/op
Iteration   2: 0.110 ms/op
Iteration   3: 0.139 ms/op
Iteration   4: 0.182 ms/op
Iteration   5: 0.173 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.143 ±(99.9%) 0.130 ms/op [Average]
  (min, avg, max) = (0.110, 0.143, 0.182), stdev = 0.034
  CI (99.9%): [0.013, 0.273] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 2.40% complete, ETA 01:47:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.130 ms/op
# Warmup Iteration   2: 0.128 ms/op
# Warmup Iteration   3: 0.126 ms/op
# Warmup Iteration   4: 0.131 ms/op
# Warmup Iteration   5: 0.121 ms/op
Iteration   1: 0.128 ms/op
Iteration   2: 0.123 ms/op
Iteration   3: 0.147 ms/op
Iteration   4: 0.173 ms/op
Iteration   5: 0.173 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.148 ±(99.9%) 0.092 ms/op [Average]
  (min, avg, max) = (0.123, 0.148, 0.173), stdev = 0.024
  CI (99.9%): [0.057, 0.240] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 2.56% complete, ETA 01:47:32
# Fork: 1 of 1
# Warmup Iteration   1: 34.841 ms/op
# Warmup Iteration   2: 33.827 ms/op
# Warmup Iteration   3: 32.101 ms/op
# Warmup Iteration   4: 36.890 ms/op
# Warmup Iteration   5: 30.736 ms/op
Iteration   1: 33.851 ms/op
Iteration   2: 32.771 ms/op
Iteration   3: 42.832 ms/op
Iteration   4: 54.811 ms/op
Iteration   5: 42.803 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  41.414 ±(99.9%) 34.188 ms/op [Average]
  (min, avg, max) = (32.771, 41.414, 54.811), stdev = 8.879
  CI (99.9%): [7.225, 75.602] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 2.72% complete, ETA 01:47:37
# Fork: 1 of 1
# Warmup Iteration   1: 37.047 ms/op
# Warmup Iteration   2: 30.961 ms/op
# Warmup Iteration   3: 41.156 ms/op
# Warmup Iteration   4: 34.387 ms/op
# Warmup Iteration   5: 31.992 ms/op
Iteration   1: 33.918 ms/op
Iteration   2: 30.542 ms/op
Iteration   3: 48.696 ms/op
Iteration   4: 52.264 ms/op
Iteration   5: 47.098 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  42.503 ±(99.9%) 37.110 ms/op [Average]
  (min, avg, max) = (30.542, 42.503, 52.264), stdev = 9.637
  CI (99.9%): [5.393, 79.614] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 2.88% complete, ETA 01:47:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.009 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.011), stdev = 0.002
  CI (99.9%): [? 0, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 3.04% complete, ETA 01:47:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.009 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.013), stdev = 0.003
  CI (99.9%): [? 0, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 3.21% complete, ETA 01:47:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.236 ms/op
# Warmup Iteration   2: 0.220 ms/op
# Warmup Iteration   3: 0.217 ms/op
# Warmup Iteration   4: 0.215 ms/op
# Warmup Iteration   5: 0.208 ms/op
Iteration   1: 0.210 ms/op
Iteration   2: 0.197 ms/op
Iteration   3: 0.262 ms/op
Iteration   4: 0.362 ms/op
Iteration   5: 0.355 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.277 ±(99.9%) 0.302 ms/op [Average]
  (min, avg, max) = (0.197, 0.277, 0.362), stdev = 0.078
  CI (99.9%): [? 0, 0.579] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 3.37% complete, ETA 01:47:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.220 ms/op
# Warmup Iteration   2: 0.199 ms/op
# Warmup Iteration   3: 0.220 ms/op
# Warmup Iteration   4: 0.232 ms/op
# Warmup Iteration   5: 0.231 ms/op
Iteration   1: 0.245 ms/op
Iteration   2: 0.226 ms/op
Iteration   3: 0.262 ms/op
Iteration   4: 0.302 ms/op
Iteration   5: 0.362 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.279 ±(99.9%) 0.208 ms/op [Average]
  (min, avg, max) = (0.226, 0.279, 0.362), stdev = 0.054
  CI (99.9%): [0.072, 0.487] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 3.53% complete, ETA 01:46:48
# Fork: 1 of 1
# Warmup Iteration   1: 61.718 ms/op
# Warmup Iteration   2: 49.777 ms/op
# Warmup Iteration   3: 50.856 ms/op
# Warmup Iteration   4: 67.351 ms/op
# Warmup Iteration   5: 59.860 ms/op
Iteration   1: 62.750 ms/op
Iteration   2: 66.070 ms/op
Iteration   3: 98.498 ms/op
Iteration   4: 121.119 ms/op
Iteration   5: 139.296 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  97.547 ±(99.9%) 129.171 ms/op [Average]
  (min, avg, max) = (62.750, 97.547, 139.296), stdev = 33.545
  CI (99.9%): [? 0, 226.718] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 3.69% complete, ETA 01:47:06
# Fork: 1 of 1
# Warmup Iteration   1: 116.705 ms/op
# Warmup Iteration   2: 106.234 ms/op
# Warmup Iteration   3: 110.186 ms/op
# Warmup Iteration   4: 104.283 ms/op
# Warmup Iteration   5: 93.954 ms/op
Iteration   1: 105.646 ms/op
Iteration   2: 94.933 ms/op
Iteration   3: 106.959 ms/op
Iteration   4: 98.434 ms/op
Iteration   5: 95.091 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  100.213 ±(99.9%) 22.146 ms/op [Average]
  (min, avg, max) = (94.933, 100.213, 106.959), stdev = 5.751
  CI (99.9%): [78.067, 122.359] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 3.85% complete, ETA 01:47:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.019 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.014, 0.019, 0.025), stdev = 0.005
  CI (99.9%): [? 10?³, 0.038] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 4.01% complete, ETA 01:47:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.018 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.013, 0.018, 0.024), stdev = 0.005
  CI (99.9%): [? 0, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 4.17% complete, ETA 01:46:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.461 ms/op
# Warmup Iteration   2: 0.404 ms/op
# Warmup Iteration   3: 0.453 ms/op
# Warmup Iteration   4: 0.418 ms/op
# Warmup Iteration   5: 0.401 ms/op
Iteration   1: 0.387 ms/op
Iteration   2: 0.420 ms/op
Iteration   3: 0.498 ms/op
Iteration   4: 0.633 ms/op
Iteration   5: 0.604 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.508 ±(99.9%) 0.419 ms/op [Average]
  (min, avg, max) = (0.387, 0.508, 0.633), stdev = 0.109
  CI (99.9%): [0.089, 0.928] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 4.33% complete, ETA 01:46:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.486 ms/op
# Warmup Iteration   2: 0.489 ms/op
# Warmup Iteration   3: 0.447 ms/op
# Warmup Iteration   4: 0.466 ms/op
# Warmup Iteration   5: 0.467 ms/op
Iteration   1: 0.453 ms/op
Iteration   2: 0.437 ms/op
Iteration   3: 0.531 ms/op
Iteration   4: 0.729 ms/op
Iteration   5: 0.651 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.560 ±(99.9%) 0.489 ms/op [Average]
  (min, avg, max) = (0.437, 0.560, 0.729), stdev = 0.127
  CI (99.9%): [0.072, 1.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 4.49% complete, ETA 01:46:21
# Fork: 1 of 1
# Warmup Iteration   1: 142.834 ms/op
# Warmup Iteration   2: 129.955 ms/op
# Warmup Iteration   3: 139.814 ms/op
# Warmup Iteration   4: 127.744 ms/op
# Warmup Iteration   5: 131.751 ms/op
Iteration   1: 120.659 ms/op
Iteration   2: 139.795 ms/op
Iteration   3: 202.591 ms/op
Iteration   4: 185.000 ms/op
Iteration   5: 201.289 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  169.867 ±(99.9%) 144.244 ms/op [Average]
  (min, avg, max) = (120.659, 169.867, 202.591), stdev = 37.460
  CI (99.9%): [25.623, 314.111] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 4.65% complete, ETA 01:46:32
# Fork: 1 of 1
# Warmup Iteration   1: 139.320 ms/op
# Warmup Iteration   2: 120.167 ms/op
# Warmup Iteration   3: 134.220 ms/op
# Warmup Iteration   4: 134.738 ms/op
# Warmup Iteration   5: 124.547 ms/op
Iteration   1: 126.449 ms/op
Iteration   2: 193.972 ms/op
Iteration   3: 227.199 ms/op
Iteration   4: 219.507 ms/op
Iteration   5: 171.848 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  187.795 ±(99.9%) 156.581 ms/op [Average]
  (min, avg, max) = (126.449, 187.795, 227.199), stdev = 40.664
  CI (99.9%): [31.214, 344.376] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 4.81% complete, ETA 01:46:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.058 ms/op
Iteration   5: 0.069 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.044 ±(99.9%) 0.073 ms/op [Average]
  (min, avg, max) = (0.027, 0.044, 0.069), stdev = 0.019
  CI (99.9%): [? 0, 0.116] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 4.97% complete, ETA 01:46:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.032 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.042 ms/op
Iteration   4: 0.075 ms/op
Iteration   5: 0.048 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.046 ±(99.9%) 0.069 ms/op [Average]
  (min, avg, max) = (0.031, 0.046, 0.075), stdev = 0.018
  CI (99.9%): [? 0, 0.115] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 5.13% complete, ETA 01:46:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.969 ms/op
# Warmup Iteration   2: 0.881 ms/op
# Warmup Iteration   3: 0.822 ms/op
# Warmup Iteration   4: 0.804 ms/op
# Warmup Iteration   5: 0.892 ms/op
Iteration   1: 0.902 ms/op
Iteration   2: 0.943 ms/op
Iteration   3: 1.393 ms/op
Iteration   4: 1.765 ms/op
Iteration   5: 1.408 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1.282 ±(99.9%) 1.390 ms/op [Average]
  (min, avg, max) = (0.902, 1.282, 1.765), stdev = 0.361
  CI (99.9%): [? 0, 2.672] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 5.29% complete, ETA 01:45:57
# Fork: 1 of 1
# Warmup Iteration   1: 2.177 ms/op
# Warmup Iteration   2: 1.723 ms/op
# Warmup Iteration   3: 1.153 ms/op
# Warmup Iteration   4: 0.932 ms/op
# Warmup Iteration   5: 1.112 ms/op
Iteration   1: 1.021 ms/op
Iteration   2: 1.428 ms/op
Iteration   3: 1.599 ms/op
Iteration   4: 1.697 ms/op
Iteration   5: 1.402 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1.429 ±(99.9%) 0.997 ms/op [Average]
  (min, avg, max) = (1.021, 1.429, 1.697), stdev = 0.259
  CI (99.9%): [0.432, 2.427] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 5.45% complete, ETA 01:45:44
# Fork: 1 of 1
# Warmup Iteration   1: 307.372 ms/op
# Warmup Iteration   2: 267.057 ms/op
# Warmup Iteration   3: 243.977 ms/op
# Warmup Iteration   4: 258.909 ms/op
# Warmup Iteration   5: 285.845 ms/op
Iteration   1: 260.327 ms/op
Iteration   2: 407.545 ms/op
Iteration   3: 395.072 ms/op
Iteration   4: 383.222 ms/op
Iteration   5: 366.076 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  362.449 ±(99.9%) 227.575 ms/op [Average]
  (min, avg, max) = (260.327, 362.449, 407.545), stdev = 59.101
  CI (99.9%): [134.873, 590.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 5.61% complete, ETA 01:46:08
# Fork: 1 of 1
# Warmup Iteration   1: 273.359 ms/op
# Warmup Iteration   2: 242.128 ms/op
# Warmup Iteration   3: 232.364 ms/op
# Warmup Iteration   4: 245.814 ms/op
# Warmup Iteration   5: 226.040 ms/op
Iteration   1: 266.458 ms/op
Iteration   2: 283.763 ms/op
Iteration   3: 327.955 ms/op
Iteration   4: 356.988 ms/op
Iteration   5: 308.252 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  308.683 ±(99.9%) 137.616 ms/op [Average]
  (min, avg, max) = (266.458, 308.683, 356.988), stdev = 35.738
  CI (99.9%): [171.067, 446.299] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 5.77% complete, ETA 01:46:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.058 ms/op
# Warmup Iteration   4: 0.060 ms/op
# Warmup Iteration   5: 0.056 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.066 ms/op
Iteration   4: 0.112 ms/op
Iteration   5: 0.084 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.075 ±(99.9%) 0.091 ms/op [Average]
  (min, avg, max) = (0.053, 0.075, 0.112), stdev = 0.024
  CI (99.9%): [? 0, 0.166] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 5.93% complete, ETA 01:46:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.066 ms/op
# Warmup Iteration   2: 0.056 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.054 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.067 ms/op
Iteration   4: 0.093 ms/op
Iteration   5: 0.108 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.076 ±(99.9%) 0.090 ms/op [Average]
  (min, avg, max) = (0.053, 0.076, 0.108), stdev = 0.023
  CI (99.9%): [? 0, 0.166] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 6.09% complete, ETA 01:45:47
# Fork: 1 of 1
# Warmup Iteration   1: 1.799 ms/op
# Warmup Iteration   2: 1.694 ms/op
# Warmup Iteration   3: 1.668 ms/op
# Warmup Iteration   4: 1.729 ms/op
# Warmup Iteration   5: 1.722 ms/op
Iteration   1: 1.761 ms/op
Iteration   2: 1.812 ms/op
Iteration   3: 2.093 ms/op
Iteration   4: 2.836 ms/op
Iteration   5: 2.846 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  2.270 ±(99.9%) 2.066 ms/op [Average]
  (min, avg, max) = (1.761, 2.270, 2.846), stdev = 0.537
  CI (99.9%): [0.203, 4.336] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 6.25% complete, ETA 01:45:30
# Fork: 1 of 1
# Warmup Iteration   1: 2.022 ms/op
# Warmup Iteration   2: 1.831 ms/op
# Warmup Iteration   3: 1.777 ms/op
# Warmup Iteration   4: 1.741 ms/op
# Warmup Iteration   5: 1.762 ms/op
Iteration   1: 1.817 ms/op
Iteration   2: 1.743 ms/op
Iteration   3: 2.048 ms/op
Iteration   4: 2.446 ms/op
Iteration   5: 2.593 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  2.130 ±(99.9%) 1.452 ms/op [Average]
  (min, avg, max) = (1.743, 2.130, 2.593), stdev = 0.377
  CI (99.9%): [0.678, 3.582] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 6.41% complete, ETA 01:45:15
# Fork: 1 of 1
# Warmup Iteration   1: 534.399 ms/op
# Warmup Iteration   2: 451.833 ms/op
# Warmup Iteration   3: 477.546 ms/op
# Warmup Iteration   4: 484.787 ms/op
# Warmup Iteration   5: 475.562 ms/op
Iteration   1: 513.403 ms/op
Iteration   2: 581.447 ms/op
Iteration   3: 676.742 ms/op
Iteration   4: 709.430 ms/op
Iteration   5: 664.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  629.005 ±(99.9%) 308.034 ms/op [Average]
  (min, avg, max) = (513.403, 629.005, 709.430), stdev = 79.995
  CI (99.9%): [320.971, 937.038] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 6.57% complete, ETA 01:45:54
# Fork: 1 of 1
# Warmup Iteration   1: 566.093 ms/op
# Warmup Iteration   2: 524.848 ms/op
# Warmup Iteration   3: 588.692 ms/op
# Warmup Iteration   4: 686.794 ms/op
# Warmup Iteration   5: 656.672 ms/op
Iteration   1: 654.641 ms/op
Iteration   2: 874.852 ms/op
Iteration   3: 791.144 ms/op
Iteration   4: 760.617 ms/op
Iteration   5: 796.856 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  775.622 ±(99.9%) 306.846 ms/op [Average]
  (min, avg, max) = (654.641, 775.622, 874.852), stdev = 79.687
  CI (99.9%): [468.776, 1082.468] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 6.73% complete, ETA 01:46:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.137 ms/op
# Warmup Iteration   2: 0.120 ms/op
# Warmup Iteration   3: 0.119 ms/op
# Warmup Iteration   4: 0.117 ms/op
# Warmup Iteration   5: 0.115 ms/op
Iteration   1: 0.114 ms/op
Iteration   2: 0.120 ms/op
Iteration   3: 0.146 ms/op
Iteration   4: 0.174 ms/op
Iteration   5: 0.194 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.150 ±(99.9%) 0.132 ms/op [Average]
  (min, avg, max) = (0.114, 0.150, 0.194), stdev = 0.034
  CI (99.9%): [0.017, 0.282] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 6.89% complete, ETA 01:46:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.135 ms/op
# Warmup Iteration   2: 0.130 ms/op
# Warmup Iteration   3: 0.123 ms/op
# Warmup Iteration   4: 0.127 ms/op
# Warmup Iteration   5: 0.131 ms/op
Iteration   1: 0.127 ms/op
Iteration   2: 0.128 ms/op
Iteration   3: 0.153 ms/op
Iteration   4: 0.209 ms/op
Iteration   5: 0.192 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.162 ±(99.9%) 0.144 ms/op [Average]
  (min, avg, max) = (0.127, 0.162, 0.209), stdev = 0.037
  CI (99.9%): [0.018, 0.305] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 7.05% complete, ETA 01:46:00
# Fork: 1 of 1
# Warmup Iteration   1: 4.311 ms/op
# Warmup Iteration   2: 3.560 ms/op
# Warmup Iteration   3: 3.610 ms/op
# Warmup Iteration   4: 3.331 ms/op
# Warmup Iteration   5: 3.480 ms/op
Iteration   1: 3.260 ms/op
Iteration   2: 3.209 ms/op
Iteration   3: 4.305 ms/op
Iteration   4: 5.673 ms/op
Iteration   5: 5.668 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  4.423 ±(99.9%) 4.697 ms/op [Average]
  (min, avg, max) = (3.209, 4.423, 5.673), stdev = 1.220
  CI (99.9%): [? 0, 9.120] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 7.21% complete, ETA 01:45:43
# Fork: 1 of 1
# Warmup Iteration   1: 4.053 ms/op
# Warmup Iteration   2: 3.743 ms/op
# Warmup Iteration   3: 3.417 ms/op
# Warmup Iteration   4: 3.424 ms/op
# Warmup Iteration   5: 3.234 ms/op
Iteration   1: 3.944 ms/op
Iteration   2: 3.862 ms/op
Iteration   3: 5.120 ms/op
Iteration   4: 7.354 ms/op
Iteration   5: 6.571 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  5.370 ±(99.9%) 6.011 ms/op [Average]
  (min, avg, max) = (3.862, 5.370, 7.354), stdev = 1.561
  CI (99.9%): [? 0, 11.381] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 7.37% complete, ETA 01:45:28
# Fork: 1 of 1
# Warmup Iteration   1: 1447.795 ms/op
# Warmup Iteration   2: 1567.502 ms/op
# Warmup Iteration   3: 2174.556 ms/op
# Warmup Iteration   4: 1477.752 ms/op
# Warmup Iteration   5: 1625.365 ms/op
Iteration   1: 1754.400 ms/op
Iteration   2: 1756.193 ms/op
Iteration   3: 1817.418 ms/op
Iteration   4: 1727.979 ms/op
Iteration   5: 1834.932 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1778.184 ±(99.9%) 175.717 ms/op [Average]
  (min, avg, max) = (1727.979, 1778.184, 1834.932), stdev = 45.633
  CI (99.9%): [1602.467, 1953.902] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 7.53% complete, ETA 01:46:54
# Fork: 1 of 1
# Warmup Iteration   1: 1792.523 ms/op
# Warmup Iteration   2: 1651.082 ms/op
# Warmup Iteration   3: 1586.612 ms/op
# Warmup Iteration   4: 1309.403 ms/op
# Warmup Iteration   5: 1996.643 ms/op
Iteration   1: 2535.290 ms/op
Iteration   2: 2508.908 ms/op
Iteration   3: 1855.213 ms/op
Iteration   4: 1720.704 ms/op
Iteration   5: 1535.733 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  2031.169 ±(99.9%) 1780.457 ms/op [Average]
  (min, avg, max) = (1535.733, 2031.169, 2535.290), stdev = 462.379
  CI (99.9%): [250.712, 3811.627] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 7.69% complete, ETA 01:48:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.297 ms/op
# Warmup Iteration   2: 0.251 ms/op
# Warmup Iteration   3: 0.233 ms/op
# Warmup Iteration   4: 0.224 ms/op
# Warmup Iteration   5: 0.218 ms/op
Iteration   1: 0.235 ms/op
Iteration   2: 0.236 ms/op
Iteration   3: 0.297 ms/op
Iteration   4: 0.400 ms/op
Iteration   5: 0.396 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.313 ±(99.9%) 0.315 ms/op [Average]
  (min, avg, max) = (0.235, 0.313, 0.400), stdev = 0.082
  CI (99.9%): [? 0, 0.627] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 7.85% complete, ETA 01:47:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.269 ms/op
# Warmup Iteration   2: 0.232 ms/op
# Warmup Iteration   3: 0.231 ms/op
# Warmup Iteration   4: 0.234 ms/op
# Warmup Iteration   5: 0.231 ms/op
Iteration   1: 0.236 ms/op
Iteration   2: 0.256 ms/op
Iteration   3: 0.282 ms/op
Iteration   4: 0.388 ms/op
Iteration   5: 0.407 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.314 ±(99.9%) 0.301 ms/op [Average]
  (min, avg, max) = (0.236, 0.314, 0.407), stdev = 0.078
  CI (99.9%): [0.013, 0.615] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 8.01% complete, ETA 01:47:39
# Fork: 1 of 1
# Warmup Iteration   1: 7.704 ms/op
# Warmup Iteration   2: 6.428 ms/op
# Warmup Iteration   3: 6.536 ms/op
# Warmup Iteration   4: 6.414 ms/op
# Warmup Iteration   5: 6.631 ms/op
Iteration   1: 6.979 ms/op
Iteration   2: 6.517 ms/op
Iteration   3: 8.236 ms/op
Iteration   4: 11.637 ms/op
Iteration   5: 10.436 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  8.761 ±(99.9%) 8.516 ms/op [Average]
  (min, avg, max) = (6.517, 8.761, 11.637), stdev = 2.212
  CI (99.9%): [0.245, 17.277] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 8.17% complete, ETA 01:47:19
# Fork: 1 of 1
# Warmup Iteration   1: 7.642 ms/op
# Warmup Iteration   2: 7.103 ms/op
# Warmup Iteration   3: 7.710 ms/op
# Warmup Iteration   4: 7.085 ms/op
# Warmup Iteration   5: 7.258 ms/op
Iteration   1: 7.462 ms/op
Iteration   2: 7.617 ms/op
Iteration   3: 9.925 ms/op
Iteration   4: 12.538 ms/op
Iteration   5: 11.466 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  9.802 ±(99.9%) 8.721 ms/op [Average]
  (min, avg, max) = (7.462, 9.802, 12.538), stdev = 2.265
  CI (99.9%): [1.080, 18.523] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 8.33% complete, ETA 01:47:00
# Fork: 1 of 1
# Warmup Iteration   1: 2125.265 ms/op
# Warmup Iteration   2: 2494.154 ms/op
# Warmup Iteration   3: 3122.146 ms/op
# Warmup Iteration   4: 3773.514 ms/op
# Warmup Iteration   5: 2952.490 ms/op
Iteration   1: 2944.151 ms/op
Iteration   2: 2884.759 ms/op
Iteration   3: 3235.014 ms/op
Iteration   4: 3300.150 ms/op
Iteration   5: 3076.009 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  3088.017 ±(99.9%) 690.877 ms/op [Average]
  (min, avg, max) = (2884.759, 3088.017, 3300.150), stdev = 179.419
  CI (99.9%): [2397.139, 3778.894] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 8.49% complete, ETA 01:50:42
# Fork: 1 of 1
# Warmup Iteration   1: 2339.791 ms/op
# Warmup Iteration   2: 2736.427 ms/op
# Warmup Iteration   3: 2931.660 ms/op
# Warmup Iteration   4: 3324.772 ms/op
# Warmup Iteration   5: 3291.727 ms/op
Iteration   1: 3067.964 ms/op
Iteration   2: 2952.759 ms/op
Iteration   3: 2820.349 ms/op
Iteration   4: 2865.512 ms/op
Iteration   5: 2973.115 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  2935.940 ±(99.9%) 372.422 ms/op [Average]
  (min, avg, max) = (2820.349, 2935.940, 3067.964), stdev = 96.717
  CI (99.9%): [2563.518, 3308.362] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 8.65% complete, ETA 01:54:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.546 ms/op
# Warmup Iteration   2: 0.448 ms/op
# Warmup Iteration   3: 0.438 ms/op
# Warmup Iteration   4: 0.430 ms/op
# Warmup Iteration   5: 0.423 ms/op
Iteration   1: 0.428 ms/op
Iteration   2: 0.436 ms/op
Iteration   3: 0.581 ms/op
Iteration   4: 0.830 ms/op
Iteration   5: 0.790 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.613 ±(99.9%) 0.733 ms/op [Average]
  (min, avg, max) = (0.428, 0.613, 0.830), stdev = 0.190
  CI (99.9%): [? 0, 1.345] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 8.81% complete, ETA 01:53:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.504 ms/op
# Warmup Iteration   2: 0.469 ms/op
# Warmup Iteration   3: 0.448 ms/op
# Warmup Iteration   4: 0.442 ms/op
# Warmup Iteration   5: 0.471 ms/op
Iteration   1: 0.537 ms/op
Iteration   2: 0.443 ms/op
Iteration   3: 0.593 ms/op
Iteration   4: 0.759 ms/op
Iteration   5: 0.794 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  0.625 ±(99.9%) 0.572 ms/op [Average]
  (min, avg, max) = (0.443, 0.625, 0.794), stdev = 0.149
  CI (99.9%): [0.053, 1.198] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 8.97% complete, ETA 01:53:10
# Fork: 1 of 1
# Warmup Iteration   1: 18.030 ms/op
# Warmup Iteration   2: 13.968 ms/op
# Warmup Iteration   3: 12.399 ms/op
# Warmup Iteration   4: 12.688 ms/op
# Warmup Iteration   5: 12.774 ms/op
Iteration   1: 13.226 ms/op
Iteration   2: 14.034 ms/op
Iteration   3: 18.089 ms/op
Iteration   4: 18.971 ms/op
Iteration   5: 21.140 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  17.092 ±(99.9%) 12.946 ms/op [Average]
  (min, avg, max) = (13.226, 17.092, 21.140), stdev = 3.362
  CI (99.9%): [4.146, 30.038] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 9.13% complete, ETA 01:52:45
# Fork: 1 of 1
# Warmup Iteration   1: 18.381 ms/op
# Warmup Iteration   2: 13.392 ms/op
# Warmup Iteration   3: 13.722 ms/op
# Warmup Iteration   4: 14.820 ms/op
# Warmup Iteration   5: 16.385 ms/op
Iteration   1: 14.639 ms/op
Iteration   2: 13.664 ms/op
Iteration   3: 15.684 ms/op
Iteration   4: 21.215 ms/op
Iteration   5: 21.047 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  17.250 ±(99.9%) 13.920 ms/op [Average]
  (min, avg, max) = (13.664, 17.250, 21.215), stdev = 3.615
  CI (99.9%): [3.330, 31.169] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 9.29% complete, ETA 01:52:21
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:104)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 9.46% complete, ETA 01:52:23
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:104)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 9.62% complete, ETA 01:53:05
# Fork: 1 of 1
# Warmup Iteration   1: 1.168 ms/op
# Warmup Iteration   2: 0.936 ms/op
# Warmup Iteration   3: 0.968 ms/op
# Warmup Iteration   4: 0.946 ms/op
# Warmup Iteration   5: 1.137 ms/op
Iteration   1: 1.189 ms/op
Iteration   2: 1.017 ms/op
Iteration   3: 1.170 ms/op
Iteration   4: 1.597 ms/op
Iteration   5: 1.541 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1.303 ±(99.9%) 0.972 ms/op [Average]
  (min, avg, max) = (1.017, 1.303, 1.597), stdev = 0.253
  CI (99.9%): [0.330, 2.275] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 9.78% complete, ETA 01:52:39
# Fork: 1 of 1
# Warmup Iteration   1: 1.097 ms/op
# Warmup Iteration   2: 0.990 ms/op
# Warmup Iteration   3: 1.051 ms/op
# Warmup Iteration   4: 0.956 ms/op
# Warmup Iteration   5: 0.980 ms/op
Iteration   1: 0.982 ms/op
Iteration   2: 1.010 ms/op
Iteration   3: 1.148 ms/op
Iteration   4: 1.562 ms/op
Iteration   5: 1.510 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  1.243 ±(99.9%) 1.062 ms/op [Average]
  (min, avg, max) = (0.982, 1.243, 1.562), stdev = 0.276
  CI (99.9%): [0.181, 2.304] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 9.94% complete, ETA 01:52:13
# Fork: 1 of 1
# Warmup Iteration   1: 52.793 ms/op
# Warmup Iteration   2: 32.097 ms/op
# Warmup Iteration   3: 28.032 ms/op
# Warmup Iteration   4: 28.699 ms/op
# Warmup Iteration   5: 28.237 ms/op
Iteration   1: 29.167 ms/op
Iteration   2: 32.021 ms/op
Iteration   3: 32.950 ms/op
Iteration   4: 38.652 ms/op
Iteration   5: 43.354 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  35.229 ±(99.9%) 21.950 ms/op [Average]
  (min, avg, max) = (29.167, 35.229, 43.354), stdev = 5.700
  CI (99.9%): [13.279, 57.178] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 10.10% complete, ETA 01:51:50
# Fork: 1 of 1
# Warmup Iteration   1: 59.718 ms/op
# Warmup Iteration   2: 28.678 ms/op
# Warmup Iteration   3: 27.249 ms/op
# Warmup Iteration   4: 28.627 ms/op
# Warmup Iteration   5: 29.207 ms/op
Iteration   1: 27.958 ms/op
Iteration   2: 27.458 ms/op
Iteration   3: 36.012 ms/op
Iteration   4: 41.235 ms/op
Iteration   5: 41.271 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous":
  34.787 ±(99.9%) 26.220 ms/op [Average]
  (min, avg, max) = (27.458, 34.787, 41.271), stdev = 6.809
  CI (99.9%): [8.566, 61.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 10.26% complete, ETA 01:51:27
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:104)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 10.42% complete, ETA 01:51:41
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1901)
	at java.base/java.util.HashMap.putVal(HashMap.java:629)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:514)
	at java.base/java.util.HashMap.<init>(HashMap.java:484)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:104)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.baselineGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_baselineGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 10.58% complete, ETA 01:52:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 10.74% complete, ETA 01:51:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 10.90% complete, ETA 01:51:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 11.06% complete, ETA 01:51:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 11.22% complete, ETA 01:50:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 11.38% complete, ETA 01:50:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 11.54% complete, ETA 01:49:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 11.70% complete, ETA 01:49:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 11.86% complete, ETA 01:49:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 12.02% complete, ETA 01:48:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 12.18% complete, ETA 01:48:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 12.34% complete, ETA 01:48:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 12.50% complete, ETA 01:47:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 12.66% complete, ETA 01:47:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 12.82% complete, ETA 01:47:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 12.98% complete, ETA 01:46:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 13.14% complete, ETA 01:46:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 13.30% complete, ETA 01:46:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 13.46% complete, ETA 01:45:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 13.62% complete, ETA 01:45:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 13.78% complete, ETA 01:45:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 13.94% complete, ETA 01:44:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 14.10% complete, ETA 01:44:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 14.26% complete, ETA 01:44:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 14.42% complete, ETA 01:44:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 14.58% complete, ETA 01:43:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 14.74% complete, ETA 01:43:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 14.90% complete, ETA 01:43:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 15.06% complete, ETA 01:42:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 15.22% complete, ETA 01:42:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 15.38% complete, ETA 01:42:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 15.54% complete, ETA 01:41:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10?³, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 15.71% complete, ETA 01:41:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 15.87% complete, ETA 01:41:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 16.03% complete, ETA 01:41:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 16.19% complete, ETA 01:40:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 16.35% complete, ETA 01:40:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 16.51% complete, ETA 01:40:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 16.67% complete, ETA 01:39:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.002, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 16.83% complete, ETA 01:39:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.002, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 16.99% complete, ETA 01:39:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 17.15% complete, ETA 01:39:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 10??, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 17.31% complete, ETA 01:38:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.007 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.008), stdev = 0.001
  CI (99.9%): [0.003, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 17.47% complete, ETA 01:38:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.008 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.009), stdev = 0.001
  CI (99.9%): [0.003, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 17.63% complete, ETA 01:38:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.010 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.013), stdev = 0.002
  CI (99.9%): [0.001, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 17.79% complete, ETA 01:38:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.009 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.002
  CI (99.9%): [0.001, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 17.95% complete, ETA 01:37:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.009 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.002
  CI (99.9%): [? 10?³, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 18.11% complete, ETA 01:37:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.010 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.013), stdev = 0.002
  CI (99.9%): [0.001, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 18.27% complete, ETA 01:37:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.015 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.020), stdev = 0.004
  CI (99.9%): [0.001, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 18.43% complete, ETA 01:37:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.015 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.021), stdev = 0.004
  CI (99.9%): [0.001, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 18.59% complete, ETA 01:36:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.053 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.032 ±(99.9%) 0.068 ms/op [Average]
  (min, avg, max) = (0.016, 0.032, 0.053), stdev = 0.018
  CI (99.9%): [? 0, 0.100] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 18.75% complete, ETA 01:36:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.031 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.020, 0.031, 0.044), stdev = 0.011
  CI (99.9%): [? 0, 0.071] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 18.91% complete, ETA 01:36:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.022 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.014, 0.022, 0.030), stdev = 0.007
  CI (99.9%): [? 0, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 19.07% complete, ETA 01:36:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.018 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.014, 0.018, 0.021), stdev = 0.003
  CI (99.9%): [0.005, 0.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 19.23% complete, ETA 01:35:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.029 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.023, 0.029, 0.035), stdev = 0.006
  CI (99.9%): [0.007, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 19.39% complete, ETA 01:35:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.032 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.030 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.025, 0.030, 0.037), stdev = 0.005
  CI (99.9%): [0.010, 0.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 19.55% complete, ETA 01:35:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.033 ms/op
Iteration   2: 0.033 ms/op
Iteration   3: 0.040 ms/op
Iteration   4: 0.053 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.041 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.033, 0.041, 0.053), stdev = 0.008
  CI (99.9%): [0.009, 0.073] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 19.71% complete, ETA 01:35:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.035 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.039 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.030, 0.039, 0.051), stdev = 0.010
  CI (99.9%): [0.001, 0.077] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 19.87% complete, ETA 01:34:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.034 ms/op
# Warmup Iteration   4: 0.034 ms/op
# Warmup Iteration   5: 0.038 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.039 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.044 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.039 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.032, 0.039, 0.047), stdev = 0.007
  CI (99.9%): [0.012, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 20.03% complete, ETA 01:34:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.041 ms/op
# Warmup Iteration   2: 0.035 ms/op
# Warmup Iteration   3: 0.033 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.062 ms/op
Iteration   5: 0.054 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.047 ±(99.9%) 0.047 ms/op [Average]
  (min, avg, max) = (0.035, 0.047, 0.062), stdev = 0.012
  CI (99.9%): [0.001, 0.094] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 20.19% complete, ETA 01:34:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.073 ms/op
Iteration   5: 0.077 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.059 ±(99.9%) 0.058 ms/op [Average]
  (min, avg, max) = (0.044, 0.059, 0.077), stdev = 0.015
  CI (99.9%): [0.001, 0.117] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 20.35% complete, ETA 01:34:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.078 ms/op
Iteration   5: 0.071 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.059 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.044, 0.059, 0.078), stdev = 0.015
  CI (99.9%): [? 0, 0.118] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 20.51% complete, ETA 01:33:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.061 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.062 ms/op
Iteration   3: 0.070 ms/op
Iteration   4: 0.090 ms/op
Iteration   5: 0.081 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.072 ±(99.9%) 0.054 ms/op [Average]
  (min, avg, max) = (0.055, 0.072, 0.090), stdev = 0.014
  CI (99.9%): [0.018, 0.126] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 20.67% complete, ETA 01:33:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.072 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.060 ms/op
# Warmup Iteration   4: 0.057 ms/op
# Warmup Iteration   5: 0.058 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.062 ms/op
Iteration   3: 0.069 ms/op
Iteration   4: 0.104 ms/op
Iteration   5: 0.098 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.078 ±(99.9%) 0.083 ms/op [Average]
  (min, avg, max) = (0.057, 0.078, 0.104), stdev = 0.021
  CI (99.9%): [? 0, 0.160] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 20.83% complete, ETA 01:33:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.072 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.057 ms/op
# Warmup Iteration   5: 0.058 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.081 ms/op
Iteration   5: 0.092 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.071 ±(99.9%) 0.057 ms/op [Average]
  (min, avg, max) = (0.059, 0.071, 0.092), stdev = 0.015
  CI (99.9%): [0.014, 0.128] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 20.99% complete, ETA 01:33:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ms/op
# Warmup Iteration   2: 0.054 ms/op
# Warmup Iteration   3: 0.055 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.055 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.062 ms/op
Iteration   3: 0.075 ms/op
Iteration   4: 0.101 ms/op
Iteration   5: 0.093 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous":
  0.078 ±(99.9%) 0.073 ms/op [Average]
  (min, avg, max) = (0.058, 0.078, 0.101), stdev = 0.019
  CI (99.9%): [0.005, 0.151] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 21.15% complete, ETA 01:32:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.004 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (? 10??, 0.004, 0.017), stdev = 0.008
  CI (99.9%): [? 0, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 21.31% complete, ETA 01:32:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 21.47% complete, ETA 01:32:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 21.63% complete, ETA 01:32:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.003 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (? 10??, 0.003, 0.014), stdev = 0.006
  CI (99.9%): [? 0, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 21.79% complete, ETA 01:32:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 21.96% complete, ETA 01:32:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 22.12% complete, ETA 01:31:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 22.28% complete, ETA 01:31:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 22.44% complete, ETA 01:31:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.005), stdev = 0.002
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 22.60% complete, ETA 01:31:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 22.76% complete, ETA 01:31:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 22.92% complete, ETA 01:31:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 23.08% complete, ETA 01:31:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.006), stdev = 0.002
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 23.24% complete, ETA 01:31:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 23.40% complete, ETA 01:30:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 23.56% complete, ETA 01:30:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 23.72% complete, ETA 01:30:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.003 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 23.88% complete, ETA 01:30:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.002, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 24.04% complete, ETA 01:30:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.004 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.002, 0.004, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 24.20% complete, ETA 01:30:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.002, 0.005, 0.013), stdev = 0.005
  CI (99.9%): [? 0, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 24.36% complete, ETA 01:30:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 24.52% complete, ETA 01:29:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.002, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 24.68% complete, ETA 01:29:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 24.84% complete, ETA 01:29:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 25.00% complete, ETA 01:29:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.012 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 25.16% complete, ETA 01:29:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.135 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.048 ±(99.9%) 1.388 ms/op [Average]
  (min, avg, max) = (0.003, 0.048, 0.135), stdev = 0.076
  CI (99.9%): [? 0, 1.435] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 25.32% complete, ETA 01:28:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.007 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.008), stdev = 0.001
  CI (99.9%): [0.003, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 25.48% complete, ETA 01:28:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.012), stdev = 0.002
  CI (99.9%): [? 10??, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 25.64% complete, ETA 01:28:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.015 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.011, 0.015, 0.021), stdev = 0.004
  CI (99.9%): [? 10?³, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 25.80% complete, ETA 01:28:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.018 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.012, 0.018, 0.023), stdev = 0.005
  CI (99.9%): [? 10?³, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 25.96% complete, ETA 01:28:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.019 ±(99.9%) 0.057 ms/op [Average]
  (min, avg, max) = (0.010, 0.019, 0.045), stdev = 0.015
  CI (99.9%): [? 0, 0.076] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 26.12% complete, ETA 01:28:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.017 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.009, 0.017, 0.036), stdev = 0.011
  CI (99.9%): [? 0, 0.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 26.28% complete, ETA 01:28:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.023 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.012, 0.023, 0.040), stdev = 0.010
  CI (99.9%): [? 0, 0.063] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 26.44% complete, ETA 01:27:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.021 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.012, 0.021, 0.035), stdev = 0.009
  CI (99.9%): [? 0, 0.054] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 26.60% complete, ETA 01:27:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.031 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.023, 0.031, 0.039), stdev = 0.006
  CI (99.9%): [0.008, 0.054] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 26.76% complete, ETA 01:27:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.021 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.032 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.021, 0.032, 0.045), stdev = 0.009
  CI (99.9%): [? 0, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 26.92% complete, ETA 01:27:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.026 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 27.08% complete, ETA 01:27:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.027 ms/op
Iteration   5: 0.297 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.076 ±(99.9%) 0.477 ms/op [Average]
  (min, avg, max) = (0.014, 0.076, 0.297), stdev = 0.124
  CI (99.9%): [? 0, 0.553] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 27.24% complete, ETA 01:26:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.026 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.021, 0.026, 0.031), stdev = 0.004
  CI (99.9%): [0.010, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 27.40% complete, ETA 01:26:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.033 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.027 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.019, 0.027, 0.033), stdev = 0.006
  CI (99.9%): [0.003, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 27.56% complete, ETA 01:26:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.043 ms/op
# Warmup Iteration   2: 0.042 ms/op
# Warmup Iteration   3: 0.042 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.066 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.059 ms/op
Iteration   4: 0.080 ms/op
Iteration   5: 0.055 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.061 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (0.047, 0.061, 0.080), stdev = 0.013
  CI (99.9%): [0.013, 0.110] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 27.72% complete, ETA 01:26:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.050 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.067 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.088 ms/op
Iteration   3: 0.086 ms/op
Iteration   4: 0.082 ms/op
Iteration   5: 0.063 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.075 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (0.057, 0.075, 0.088), stdev = 0.014
  CI (99.9%): [0.020, 0.130] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 27.88% complete, ETA 01:26:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.061 ms/op
# Warmup Iteration   5: 0.038 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.055 ms/op
Iteration   4: 0.510 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.158 ±(99.9%) 1.517 ms/op [Average]
  (min, avg, max) = (0.032, 0.158, 0.510), stdev = 0.235
  CI (99.9%): [? 0, 1.675] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 28.04% complete, ETA 01:26:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.079 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.049 ms/op
Iteration   4: 0.061 ms/op
Iteration   5: 2.062 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.447 ±(99.9%) 3.476 ms/op [Average]
  (min, avg, max) = (0.031, 0.447, 2.062), stdev = 0.903
  CI (99.9%): [? 0, 3.923] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 28.21% complete, ETA 01:25:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
# Warmup Iteration   2: 0.038 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.054 ms/op
# Warmup Iteration   5: 0.040 ms/op
Iteration   1: 0.090 ms/op
Iteration   2: 0.040 ms/op
Iteration   3: 0.060 ms/op
Iteration   4: 0.068 ms/op
Iteration   5: 0.058 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.063 ±(99.9%) 0.070 ms/op [Average]
  (min, avg, max) = (0.040, 0.063, 0.090), stdev = 0.018
  CI (99.9%): [? 0, 0.133] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 28.37% complete, ETA 01:25:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
# Warmup Iteration   2: 0.040 ms/op
# Warmup Iteration   3: 0.063 ms/op
# Warmup Iteration   4: 0.050 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.073 ms/op
Iteration   2: 0.041 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.063 ms/op
Iteration   5: 0.057 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.058 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (0.041, 0.058, 0.073), stdev = 0.011
  CI (99.9%): [0.014, 0.102] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 28.53% complete, ETA 01:25:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.110 ms/op
# Warmup Iteration   2: 0.094 ms/op
# Warmup Iteration   3: 0.101 ms/op
# Warmup Iteration   4: 0.097 ms/op
# Warmup Iteration   5: 0.103 ms/op
Iteration   1: 0.106 ms/op
Iteration   2: 0.113 ms/op
Iteration   3: 0.115 ms/op
Iteration   4: 0.152 ms/op
Iteration   5: 0.174 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.132 ±(99.9%) 0.114 ms/op [Average]
  (min, avg, max) = (0.106, 0.132, 0.174), stdev = 0.030
  CI (99.9%): [0.018, 0.246] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 28.69% complete, ETA 01:25:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.124 ms/op
# Warmup Iteration   2: 0.112 ms/op
# Warmup Iteration   3: 0.096 ms/op
# Warmup Iteration   4: 0.112 ms/op
# Warmup Iteration   5: 0.104 ms/op
Iteration   1: 0.093 ms/op
Iteration   2: 0.141 ms/op
Iteration   3: 0.117 ms/op
Iteration   4: 0.154 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.126 ±(99.9%) 0.090 ms/op [Average]
  (min, avg, max) = (0.093, 0.126, 0.154), stdev = 0.023
  CI (99.9%): [0.036, 0.216] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 28.85% complete, ETA 01:25:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.047 ms/op
# Warmup Iteration   4: 0.075 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.068 ms/op
Iteration   2: 0.068 ms/op
Iteration   3: 4.960 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  1.699 ±(99.9%) 51.532 ms/op [Average]
  (min, avg, max) = (0.068, 1.699, 4.960), stdev = 2.825
  CI (99.9%): [? 0, 53.231] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 29.01% complete, ETA 01:24:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.066 ms/op
# Warmup Iteration   2: 0.075 ms/op
# Warmup Iteration   3: 0.077 ms/op
# Warmup Iteration   4: 0.067 ms/op
# Warmup Iteration   5: 0.218 ms/op
Iteration   1: 0.062 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.112 ms/op
Iteration   4: 0.112 ms/op
Iteration   5: 2.729 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.616 ±(99.9%) 4.550 ms/op [Average]
  (min, avg, max) = (0.062, 0.616, 2.729), stdev = 1.182
  CI (99.9%): [? 0, 5.166] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 29.17% complete, ETA 01:24:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.096 ms/op
# Warmup Iteration   2: 0.081 ms/op
# Warmup Iteration   3: 0.142 ms/op
# Warmup Iteration   4: 0.085 ms/op
# Warmup Iteration   5: 0.090 ms/op
Iteration   1: 0.132 ms/op
Iteration   2: 0.221 ms/op
Iteration   3: 0.095 ms/op
Iteration   4: 0.132 ms/op
Iteration   5: 0.147 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.145 ±(99.9%) 0.179 ms/op [Average]
  (min, avg, max) = (0.095, 0.145, 0.221), stdev = 0.047
  CI (99.9%): [? 0, 0.325] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 29.33% complete, ETA 01:24:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.079 ms/op
# Warmup Iteration   2: 0.075 ms/op
# Warmup Iteration   3: 0.112 ms/op
# Warmup Iteration   4: 0.122 ms/op
# Warmup Iteration   5: 0.091 ms/op
Iteration   1: 0.153 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.116 ms/op
Iteration   4: 0.173 ms/op
Iteration   5: 0.153 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.133 ±(99.9%) 0.154 ms/op [Average]
  (min, avg, max) = (0.072, 0.133, 0.173), stdev = 0.040
  CI (99.9%): [? 0, 0.287] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 29.49% complete, ETA 01:24:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.232 ms/op
# Warmup Iteration   2: 0.206 ms/op
# Warmup Iteration   3: 0.174 ms/op
# Warmup Iteration   4: 0.360 ms/op
# Warmup Iteration   5: 0.218 ms/op
Iteration   1: 0.250 ms/op
Iteration   2: 0.266 ms/op
Iteration   3: 0.473 ms/op
Iteration   4: 0.353 ms/op
Iteration   5: 0.288 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.326 ±(99.9%) 0.351 ms/op [Average]
  (min, avg, max) = (0.250, 0.326, 0.473), stdev = 0.091
  CI (99.9%): [? 0, 0.677] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 29.65% complete, ETA 01:24:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.225 ms/op
# Warmup Iteration   2: 0.218 ms/op
# Warmup Iteration   3: 0.208 ms/op
# Warmup Iteration   4: 0.520 ms/op
# Warmup Iteration   5: 0.278 ms/op
Iteration   1: 0.364 ms/op
Iteration   2: 0.220 ms/op
Iteration   3: 0.386 ms/op
Iteration   4: 0.521 ms/op
Iteration   5: 0.281 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.354 ±(99.9%) 0.441 ms/op [Average]
  (min, avg, max) = (0.220, 0.354, 0.521), stdev = 0.114
  CI (99.9%): [? 0, 0.795] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 29.81% complete, ETA 01:24:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.114 ms/op
# Warmup Iteration   2: 0.131 ms/op
# Warmup Iteration   3: 0.127 ms/op
# Warmup Iteration   4: 0.212 ms/op
# Warmup Iteration   5: 0.135 ms/op
Iteration   1: 0.096 ms/op
Iteration   2: 0.126 ms/op
Iteration   3: 2.702 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.975 ±(99.9%) 27.294 ms/op [Average]
  (min, avg, max) = (0.096, 0.975, 2.702), stdev = 1.496
  CI (99.9%): [? 0, 28.268] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 29.97% complete, ETA 01:23:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.136 ms/op
# Warmup Iteration   2: 0.132 ms/op
# Warmup Iteration   3: 0.119 ms/op
# Warmup Iteration   4: 0.175 ms/op
# Warmup Iteration   5: 0.134 ms/op
Iteration   1: 0.097 ms/op
Iteration   2: 0.116 ms/op
Iteration   3: 5.903 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  2.039 ±(99.9%) 61.057 ms/op [Average]
  (min, avg, max) = (0.097, 2.039, 5.903), stdev = 3.347
  CI (99.9%): [? 0, 63.096] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 30.13% complete, ETA 01:23:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.167 ms/op
# Warmup Iteration   2: 0.148 ms/op
# Warmup Iteration   3: 0.173 ms/op
# Warmup Iteration   4: 0.167 ms/op
# Warmup Iteration   5: 0.210 ms/op
Iteration   1: 0.205 ms/op
Iteration   2: 0.156 ms/op
Iteration   3: 0.218 ms/op
Iteration   4: 0.191 ms/op
Iteration   5: 0.205 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.195 ±(99.9%) 0.092 ms/op [Average]
  (min, avg, max) = (0.156, 0.195, 0.218), stdev = 0.024
  CI (99.9%): [0.103, 0.287] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 30.29% complete, ETA 01:23:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.162 ms/op
# Warmup Iteration   2: 0.148 ms/op
# Warmup Iteration   3: 0.154 ms/op
# Warmup Iteration   4: 0.176 ms/op
# Warmup Iteration   5: 0.213 ms/op
Iteration   1: 0.212 ms/op
Iteration   2: 0.169 ms/op
Iteration   3: 0.193 ms/op
Iteration   4: 0.240 ms/op
Iteration   5: 0.200 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.203 ±(99.9%) 0.101 ms/op [Average]
  (min, avg, max) = (0.169, 0.203, 0.240), stdev = 0.026
  CI (99.9%): [0.102, 0.303] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 30.45% complete, ETA 01:23:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.423 ms/op
# Warmup Iteration   2: 0.391 ms/op
# Warmup Iteration   3: 0.402 ms/op
# Warmup Iteration   4: 0.388 ms/op
# Warmup Iteration   5: 0.394 ms/op
Iteration   1: 0.433 ms/op
Iteration   2: 0.398 ms/op
Iteration   3: 0.493 ms/op
Iteration   4: 0.524 ms/op
Iteration   5: 0.525 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.475 ±(99.9%) 0.218 ms/op [Average]
  (min, avg, max) = (0.398, 0.475, 0.525), stdev = 0.057
  CI (99.9%): [0.257, 0.692] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 30.61% complete, ETA 01:23:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.510 ms/op
# Warmup Iteration   2: 0.432 ms/op
# Warmup Iteration   3: 0.404 ms/op
# Warmup Iteration   4: 0.469 ms/op
# Warmup Iteration   5: 0.367 ms/op
Iteration   1: 0.438 ms/op
Iteration   2: 0.516 ms/op
Iteration   3: 0.521 ms/op
Iteration   4: 0.553 ms/op
Iteration   5: 0.566 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.519 ±(99.9%) 0.192 ms/op [Average]
  (min, avg, max) = (0.438, 0.519, 0.566), stdev = 0.050
  CI (99.9%): [0.326, 0.711] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 30.77% complete, ETA 01:22:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.240 ms/op
# Warmup Iteration   2: 0.210 ms/op
# Warmup Iteration   3: 0.168 ms/op
# Warmup Iteration   4: 0.294 ms/op
# Warmup Iteration   5: 0.178 ms/op
Iteration   1: 0.456 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.456 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 30.93% complete, ETA 01:22:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.268 ms/op
# Warmup Iteration   2: 0.249 ms/op
# Warmup Iteration   3: 0.229 ms/op
# Warmup Iteration   4: 0.356 ms/op
# Warmup Iteration   5: 0.246 ms/op
Iteration   1: 0.198 ms/op
Iteration   2: 0.562 ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous(ImmutableGetBenchmark.java:59)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_avgt_jmhStub(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.get.jmh_generated.ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.immutableGetAndCommitBenchmarkContinuous_AverageTime(ImmutableGetBenchmark_immutableGetAndCommitBenchmarkContinuous_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.380 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 31.09% complete, ETA 01:22:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.356 ms/op
# Warmup Iteration   2: 0.293 ms/op
# Warmup Iteration   3: 0.419 ms/op
# Warmup Iteration   4: 0.394 ms/op
# Warmup Iteration   5: 0.297 ms/op
Iteration   1: 0.714 ms/op
Iteration   2: 0.359 ms/op
Iteration   3: 0.444 ms/op
Iteration   4: 0.462 ms/op
Iteration   5: 0.403 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.476 ±(99.9%) 0.535 ms/op [Average]
  (min, avg, max) = (0.359, 0.476, 0.714), stdev = 0.139
  CI (99.9%): [? 0, 1.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 31.25% complete, ETA 01:22:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.309 ms/op
# Warmup Iteration   2: 0.278 ms/op
# Warmup Iteration   3: 0.417 ms/op
# Warmup Iteration   4: 0.305 ms/op
# Warmup Iteration   5: 0.408 ms/op
Iteration   1: 0.596 ms/op
Iteration   2: 0.302 ms/op
Iteration   3: 0.463 ms/op
Iteration   4: 0.526 ms/op
Iteration   5: 0.413 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  0.460 ±(99.9%) 0.430 ms/op [Average]
  (min, avg, max) = (0.302, 0.460, 0.596), stdev = 0.112
  CI (99.9%): [0.030, 0.890] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 31.41% complete, ETA 01:22:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.893 ms/op
# Warmup Iteration   2: 0.886 ms/op
# Warmup Iteration   3: 0.818 ms/op
# Warmup Iteration   4: 0.999 ms/op
# Warmup Iteration   5: 0.794 ms/op
Iteration   1: 0.938 ms/op
Iteration   2: 1.157 ms/op
Iteration   3: 1.256 ms/op
Iteration   4: 1.779 ms/op
Iteration   5: 1.226 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  1.271 ±(99.9%) 1.193 ms/op [Average]
  (min, avg, max) = (0.938, 1.271, 1.779), stdev = 0.310
  CI (99.9%): [0.079, 2.464] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 31.57% complete, ETA 01:22:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.948 ms/op
# Warmup Iteration   2: 1.020 ms/op
# Warmup Iteration   3: 0.851 ms/op
# Warmup Iteration   4: 1.178 ms/op
# Warmup Iteration   5: 1.104 ms/op
Iteration   1: 1.028 ms/op
Iteration   2: 1.131 ms/op
Iteration   3: 1.529 ms/op
Iteration   4: 1.854 ms/op
Iteration   5: 1.344 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous":
  1.377 ±(99.9%) 1.269 ms/op [Average]
  (min, avg, max) = (1.028, 1.377, 1.854), stdev = 0.330
  CI (99.9%): [0.109, 2.646] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 2)

# Run progress: 31.73% complete, ETA 01:21:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 32, nValues = 3)

# Run progress: 31.89% complete, ETA 01:21:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 2)

# Run progress: 32.05% complete, ETA 01:21:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 1000, nValues = 3)

# Run progress: 32.21% complete, ETA 01:21:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 2)

# Run progress: 32.37% complete, ETA 01:20:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16, nKeys = 100000, nValues = 3)

# Run progress: 32.53% complete, ETA 01:20:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 2)

# Run progress: 32.69% complete, ETA 01:20:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 32, nValues = 3)

# Run progress: 32.85% complete, ETA 01:20:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 2)

# Run progress: 33.01% complete, ETA 01:19:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 1000, nValues = 3)

# Run progress: 33.17% complete, ETA 01:19:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 2)

# Run progress: 33.33% complete, ETA 01:19:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 32, nKeys = 100000, nValues = 3)

# Run progress: 33.49% complete, ETA 01:19:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 2)

# Run progress: 33.65% complete, ETA 01:19:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 32, nValues = 3)

# Run progress: 33.81% complete, ETA 01:18:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 2)

# Run progress: 33.97% complete, ETA 01:18:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 1000, nValues = 3)

# Run progress: 34.13% complete, ETA 01:18:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 2)

# Run progress: 34.29% complete, ETA 01:18:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 64, nKeys = 100000, nValues = 3)

# Run progress: 34.46% complete, ETA 01:17:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 2)

# Run progress: 34.62% complete, ETA 01:17:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 32, nValues = 3)

# Run progress: 34.78% complete, ETA 01:17:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 2)

# Run progress: 34.94% complete, ETA 01:17:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 1000, nValues = 3)

# Run progress: 35.10% complete, ETA 01:17:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 2)

# Run progress: 35.26% complete, ETA 01:16:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 128, nKeys = 100000, nValues = 3)

# Run progress: 35.42% complete, ETA 01:16:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 2)

# Run progress: 35.58% complete, ETA 01:16:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 32, nValues = 3)

# Run progress: 35.74% complete, ETA 01:16:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 2)

# Run progress: 35.90% complete, ETA 01:15:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 1000, nValues = 3)

# Run progress: 36.06% complete, ETA 01:15:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 2)

# Run progress: 36.22% complete, ETA 01:15:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 10??, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 256, nKeys = 100000, nValues = 3)

# Run progress: 36.38% complete, ETA 01:15:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 2)

# Run progress: 36.54% complete, ETA 01:15:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 32, nValues = 3)

# Run progress: 36.70% complete, ETA 01:14:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 2)

# Run progress: 36.86% complete, ETA 01:14:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 1000, nValues = 3)

# Run progress: 37.02% complete, ETA 01:14:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 2)

# Run progress: 37.18% complete, ETA 01:14:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.011 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.014), stdev = 0.003
  CI (99.9%): [? 0, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 512, nKeys = 100000, nValues = 3)

# Run progress: 37.34% complete, ETA 01:14:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.011 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.009, 0.011, 0.014), stdev = 0.003
  CI (99.9%): [0.002, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 2)

# Run progress: 37.50% complete, ETA 01:13:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.007 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 32, nValues = 3)

# Run progress: 37.66% complete, ETA 01:13:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.007 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [? 0, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 2)

# Run progress: 37.82% complete, ETA 01:13:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 1000, nValues = 3)

# Run progress: 37.98% complete, ETA 01:13:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.008 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [0.001, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 2)

# Run progress: 38.14% complete, ETA 01:12:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.029 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.022, 0.029, 0.038), stdev = 0.008
  CI (99.9%): [? 0, 0.060] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 1024, nKeys = 100000, nValues = 3)

# Run progress: 38.30% complete, ETA 01:12:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.033 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.035 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.025, 0.035, 0.046), stdev = 0.010
  CI (99.9%): [? 0, 0.073] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 2)

# Run progress: 38.46% complete, ETA 01:12:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.013 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.017), stdev = 0.004
  CI (99.9%): [? 0, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 32, nValues = 3)

# Run progress: 38.62% complete, ETA 01:12:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.013 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.017), stdev = 0.004
  CI (99.9%): [? 0, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 2)

# Run progress: 38.78% complete, ETA 01:12:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.015 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.011, 0.015, 0.020), stdev = 0.004
  CI (99.9%): [? 0, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 1000, nValues = 3)

# Run progress: 38.94% complete, ETA 01:11:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.017 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.013, 0.017, 0.024), stdev = 0.005
  CI (99.9%): [? 0, 0.035] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 2)

# Run progress: 39.10% complete, ETA 01:11:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.053 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.046 ms/op
Iteration   3: 0.055 ms/op
Iteration   4: 0.079 ms/op
Iteration   5: 0.079 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.061 ±(99.9%) 0.064 ms/op [Average]
  (min, avg, max) = (0.046, 0.061, 0.079), stdev = 0.017
  CI (99.9%): [? 0, 0.126] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 2048, nKeys = 100000, nValues = 3)

# Run progress: 39.26% complete, ETA 01:11:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 ms/op
# Warmup Iteration   2: 0.054 ms/op
# Warmup Iteration   3: 0.052 ms/op
# Warmup Iteration   4: 0.053 ms/op
# Warmup Iteration   5: 0.053 ms/op
Iteration   1: 0.052 ms/op
Iteration   2: 0.053 ms/op
Iteration   3: 0.065 ms/op
Iteration   4: 0.096 ms/op
Iteration   5: 0.093 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.072 ±(99.9%) 0.082 ms/op [Average]
  (min, avg, max) = (0.052, 0.072, 0.096), stdev = 0.021
  CI (99.9%): [? 0, 0.153] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 2)

# Run progress: 39.42% complete, ETA 01:11:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.025 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.020, 0.025, 0.033), stdev = 0.006
  CI (99.9%): [0.001, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 32, nValues = 3)

# Run progress: 39.58% complete, ETA 01:11:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.025 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.020, 0.025, 0.031), stdev = 0.006
  CI (99.9%): [0.002, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 2)

# Run progress: 39.74% complete, ETA 01:10:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.040 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.031 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.022, 0.031, 0.042), stdev = 0.010
  CI (99.9%): [? 0, 0.068] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 1000, nValues = 3)

# Run progress: 39.90% complete, ETA 01:10:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.040 ms/op
Iteration   5: 0.041 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.031 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.023, 0.031, 0.041), stdev = 0.009
  CI (99.9%): [? 0, 0.065] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 2)

# Run progress: 40.06% complete, ETA 01:10:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.116 ms/op
# Warmup Iteration   2: 0.104 ms/op
# Warmup Iteration   3: 0.102 ms/op
# Warmup Iteration   4: 0.098 ms/op
# Warmup Iteration   5: 0.098 ms/op
Iteration   1: 0.099 ms/op
Iteration   2: 0.099 ms/op
Iteration   3: 0.128 ms/op
Iteration   4: 0.155 ms/op
Iteration   5: 0.179 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.132 ±(99.9%) 0.134 ms/op [Average]
  (min, avg, max) = (0.099, 0.132, 0.179), stdev = 0.035
  CI (99.9%): [? 0, 0.266] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 4096, nKeys = 100000, nValues = 3)

# Run progress: 40.22% complete, ETA 01:10:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.124 ms/op
# Warmup Iteration   2: 0.111 ms/op
# Warmup Iteration   3: 0.108 ms/op
# Warmup Iteration   4: 0.106 ms/op
# Warmup Iteration   5: 0.106 ms/op
Iteration   1: 0.106 ms/op
Iteration   2: 0.111 ms/op
Iteration   3: 0.132 ms/op
Iteration   4: 0.155 ms/op
Iteration   5: 0.191 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.139 ±(99.9%) 0.135 ms/op [Average]
  (min, avg, max) = (0.106, 0.139, 0.191), stdev = 0.035
  CI (99.9%): [0.003, 0.274] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 2)

# Run progress: 40.38% complete, ETA 01:10:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.034 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.038 ms/op
Iteration   1: 0.039 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.056 ms/op
Iteration   5: 0.066 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.049 ±(99.9%) 0.047 ms/op [Average]
  (min, avg, max) = (0.039, 0.049, 0.066), stdev = 0.012
  CI (99.9%): [0.002, 0.096] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 32, nValues = 3)

# Run progress: 40.54% complete, ETA 01:09:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.033 ms/op
# Warmup Iteration   3: 0.034 ms/op
# Warmup Iteration   4: 0.034 ms/op
# Warmup Iteration   5: 0.040 ms/op
Iteration   1: 0.040 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.067 ms/op
Iteration   5: 0.061 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.051 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (0.039, 0.051, 0.067), stdev = 0.013
  CI (99.9%): [0.002, 0.099] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 2)

# Run progress: 40.71% complete, ETA 01:09:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.043 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.078 ms/op
Iteration   5: 0.072 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.058 ±(99.9%) 0.064 ms/op [Average]
  (min, avg, max) = (0.043, 0.058, 0.078), stdev = 0.017
  CI (99.9%): [? 0, 0.121] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 1000, nValues = 3)

# Run progress: 40.87% complete, ETA 01:09:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.043 ms/op
# Warmup Iteration   3: 0.043 ms/op
# Warmup Iteration   4: 0.043 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.079 ms/op
Iteration   5: 0.080 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.061 ±(99.9%) 0.068 ms/op [Average]
  (min, avg, max) = (0.045, 0.061, 0.080), stdev = 0.018
  CI (99.9%): [? 0, 0.128] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 2)

# Run progress: 41.03% complete, ETA 01:09:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.273 ms/op
# Warmup Iteration   2: 0.242 ms/op
# Warmup Iteration   3: 0.231 ms/op
# Warmup Iteration   4: 0.233 ms/op
# Warmup Iteration   5: 0.235 ms/op
Iteration   1: 0.229 ms/op
Iteration   2: 0.231 ms/op
Iteration   3: 0.283 ms/op
Iteration   4: 0.384 ms/op
Iteration   5: 0.429 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.311 ±(99.9%) 0.350 ms/op [Average]
  (min, avg, max) = (0.229, 0.311, 0.429), stdev = 0.091
  CI (99.9%): [? 0, 0.661] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 8192, nKeys = 100000, nValues = 3)

# Run progress: 41.19% complete, ETA 01:08:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.280 ms/op
# Warmup Iteration   2: 0.255 ms/op
# Warmup Iteration   3: 0.247 ms/op
# Warmup Iteration   4: 0.244 ms/op
# Warmup Iteration   5: 0.241 ms/op
Iteration   1: 0.241 ms/op
Iteration   2: 0.243 ms/op
Iteration   3: 0.290 ms/op
Iteration   4: 0.410 ms/op
Iteration   5: 0.399 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.317 ±(99.9%) 0.317 ms/op [Average]
  (min, avg, max) = (0.241, 0.317, 0.410), stdev = 0.082
  CI (99.9%): [? 0, 0.634] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 2)

# Run progress: 41.35% complete, ETA 01:08:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.072 ms/op
# Warmup Iteration   2: 0.068 ms/op
# Warmup Iteration   3: 0.069 ms/op
# Warmup Iteration   4: 0.069 ms/op
# Warmup Iteration   5: 0.069 ms/op
Iteration   1: 0.069 ms/op
Iteration   2: 0.070 ms/op
Iteration   3: 0.075 ms/op
Iteration   4: 0.121 ms/op
Iteration   5: 0.122 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.092 ±(99.9%) 0.106 ms/op [Average]
  (min, avg, max) = (0.069, 0.092, 0.122), stdev = 0.027
  CI (99.9%): [? 0, 0.197] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 32, nValues = 3)

# Run progress: 41.51% complete, ETA 01:08:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.069 ms/op
# Warmup Iteration   3: 0.070 ms/op
# Warmup Iteration   4: 0.070 ms/op
# Warmup Iteration   5: 0.069 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.068 ms/op
Iteration   3: 0.083 ms/op
Iteration   4: 0.129 ms/op
Iteration   5: 0.140 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.098 ±(99.9%) 0.130 ms/op [Average]
  (min, avg, max) = (0.068, 0.098, 0.140), stdev = 0.034
  CI (99.9%): [? 0, 0.228] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 2)

# Run progress: 41.67% complete, ETA 01:08:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.101 ms/op
# Warmup Iteration   2: 0.091 ms/op
# Warmup Iteration   3: 0.090 ms/op
# Warmup Iteration   4: 0.090 ms/op
# Warmup Iteration   5: 0.091 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.092 ms/op
Iteration   3: 0.112 ms/op
Iteration   4: 0.180 ms/op
Iteration   5: 0.158 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.127 ±(99.9%) 0.155 ms/op [Average]
  (min, avg, max) = (0.091, 0.127, 0.180), stdev = 0.040
  CI (99.9%): [? 0, 0.282] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 1000, nValues = 3)

# Run progress: 41.83% complete, ETA 01:08:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.105 ms/op
# Warmup Iteration   2: 0.094 ms/op
# Warmup Iteration   3: 0.094 ms/op
# Warmup Iteration   4: 0.094 ms/op
# Warmup Iteration   5: 0.095 ms/op
Iteration   1: 0.093 ms/op
Iteration   2: 0.093 ms/op
Iteration   3: 0.108 ms/op
Iteration   4: 0.158 ms/op
Iteration   5: 0.164 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.123 ±(99.9%) 0.136 ms/op [Average]
  (min, avg, max) = (0.093, 0.123, 0.164), stdev = 0.035
  CI (99.9%): [? 0, 0.259] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 2)

# Run progress: 41.99% complete, ETA 01:07:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.611 ms/op
# Warmup Iteration   2: 0.547 ms/op
# Warmup Iteration   3: 0.542 ms/op
# Warmup Iteration   4: 0.528 ms/op
# Warmup Iteration   5: 0.523 ms/op
Iteration   1: 0.542 ms/op
Iteration   2: 0.523 ms/op
Iteration   3: 0.646 ms/op
Iteration   4: 0.830 ms/op
Iteration   5: 0.799 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.668 ±(99.9%) 0.548 ms/op [Average]
  (min, avg, max) = (0.523, 0.668, 0.830), stdev = 0.142
  CI (99.9%): [0.120, 1.215] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous
# Parameters: (nGet = 16384, nKeys = 100000, nValues = 3)

# Run progress: 42.15% complete, ETA 01:07:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.671 ms/op
# Warmup Iteration   2: 0.637 ms/op
# Warmup Iteration   3: 0.587 ms/op
# Warmup Iteration   4: 0.578 ms/op
# Warmup Iteration   5: 0.582 ms/op
Iteration   1: 0.598 ms/op
Iteration   2: 0.591 ms/op
Iteration   3: 0.779 ms/op
Iteration   4: 1.074 ms/op
Iteration   5: 1.082 ms/op


Result "tools.refinery.store.map.benchmarks.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous":
  0.825 ±(99.9%) 0.936 ms/op [Average]
  (min, avg, max) = (0.591, 0.825, 1.082), stdev = 0.243
  CI (99.9%): [? 0, 1.761] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 2)

# Run progress: 42.31% complete, ETA 01:07:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 3)

# Run progress: 42.47% complete, ETA 01:07:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 2)

# Run progress: 42.63% complete, ETA 01:07:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 3)

# Run progress: 42.79% complete, ETA 01:06:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 2)

# Run progress: 42.95% complete, ETA 01:06:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 3)

# Run progress: 43.11% complete, ETA 01:06:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 2)

# Run progress: 43.27% complete, ETA 01:06:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 3)

# Run progress: 43.43% complete, ETA 01:06:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 2)

# Run progress: 43.59% complete, ETA 01:05:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 3)

# Run progress: 43.75% complete, ETA 01:05:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 2)

# Run progress: 43.91% complete, ETA 01:05:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 3)

# Run progress: 44.07% complete, ETA 01:05:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 2)

# Run progress: 44.23% complete, ETA 01:05:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 3)

# Run progress: 44.39% complete, ETA 01:04:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 2)

# Run progress: 44.55% complete, ETA 01:04:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.010 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.008, 0.010, 0.015), stdev = 0.003
  CI (99.9%): [? 0, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 3)

# Run progress: 44.71% complete, ETA 01:04:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.011 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.015), stdev = 0.003
  CI (99.9%): [? 0, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 2)

# Run progress: 44.87% complete, ETA 01:04:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.020 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.015, 0.020, 0.026), stdev = 0.005
  CI (99.9%): [? 10??, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 3)

# Run progress: 45.03% complete, ETA 01:04:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.022 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.017, 0.022, 0.031), stdev = 0.007
  CI (99.9%): [? 0, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 2)

# Run progress: 45.19% complete, ETA 01:03:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.031 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.056 ms/op
Iteration   5: 0.054 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.041 ±(99.9%) 0.047 ms/op [Average]
  (min, avg, max) = (0.031, 0.041, 0.056), stdev = 0.012
  CI (99.9%): [? 0, 0.089] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 3)

# Run progress: 45.35% complete, ETA 01:03:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.039 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.035 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.040 ms/op
Iteration   4: 0.065 ms/op
Iteration   5: 0.063 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.048 ±(99.9%) 0.058 ms/op [Average]
  (min, avg, max) = (0.035, 0.048, 0.065), stdev = 0.015
  CI (99.9%): [? 0, 0.106] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 2)

# Run progress: 45.51% complete, ETA 01:03:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ms/op
# Warmup Iteration   2: 0.064 ms/op
# Warmup Iteration   3: 0.063 ms/op
# Warmup Iteration   4: 0.063 ms/op
# Warmup Iteration   5: 0.062 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.078 ms/op
Iteration   4: 0.116 ms/op
Iteration   5: 0.105 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.085 ±(99.9%) 0.093 ms/op [Average]
  (min, avg, max) = (0.063, 0.085, 0.116), stdev = 0.024
  CI (99.9%): [? 0, 0.178] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 3)

# Run progress: 45.67% complete, ETA 01:03:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.079 ms/op
# Warmup Iteration   2: 0.072 ms/op
# Warmup Iteration   3: 0.071 ms/op
# Warmup Iteration   4: 0.071 ms/op
# Warmup Iteration   5: 0.071 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.071 ms/op
Iteration   3: 0.085 ms/op
Iteration   4: 0.131 ms/op
Iteration   5: 0.119 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.095 ±(99.9%) 0.108 ms/op [Average]
  (min, avg, max) = (0.070, 0.095, 0.131), stdev = 0.028
  CI (99.9%): [? 0, 0.203] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 2)

# Run progress: 45.83% complete, ETA 01:03:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.135 ms/op
# Warmup Iteration   2: 0.127 ms/op
# Warmup Iteration   3: 0.124 ms/op
# Warmup Iteration   4: 0.126 ms/op
# Warmup Iteration   5: 0.125 ms/op
Iteration   1: 0.126 ms/op
Iteration   2: 0.127 ms/op
Iteration   3: 0.150 ms/op
Iteration   4: 0.214 ms/op
Iteration   5: 0.238 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.171 ±(99.9%) 0.200 ms/op [Average]
  (min, avg, max) = (0.126, 0.171, 0.238), stdev = 0.052
  CI (99.9%): [? 0, 0.371] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 3)

# Run progress: 45.99% complete, ETA 01:02:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.160 ms/op
# Warmup Iteration   2: 0.148 ms/op
# Warmup Iteration   3: 0.146 ms/op
# Warmup Iteration   4: 0.145 ms/op
# Warmup Iteration   5: 0.146 ms/op
Iteration   1: 0.146 ms/op
Iteration   2: 0.146 ms/op
Iteration   3: 0.171 ms/op
Iteration   4: 0.268 ms/op
Iteration   5: 0.264 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.199 ±(99.9%) 0.238 ms/op [Average]
  (min, avg, max) = (0.146, 0.199, 0.268), stdev = 0.062
  CI (99.9%): [? 0, 0.437] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 2)

# Run progress: 46.15% complete, ETA 01:02:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.275 ms/op
# Warmup Iteration   2: 0.253 ms/op
# Warmup Iteration   3: 0.257 ms/op
# Warmup Iteration   4: 0.251 ms/op
# Warmup Iteration   5: 0.251 ms/op
Iteration   1: 0.254 ms/op
Iteration   2: 0.256 ms/op
Iteration   3: 0.308 ms/op
Iteration   4: 0.457 ms/op
Iteration   5: 0.428 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.341 ±(99.9%) 0.370 ms/op [Average]
  (min, avg, max) = (0.254, 0.341, 0.457), stdev = 0.096
  CI (99.9%): [? 0, 0.710] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 3)

# Run progress: 46.31% complete, ETA 01:02:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.314 ms/op
# Warmup Iteration   2: 0.287 ms/op
# Warmup Iteration   3: 0.289 ms/op
# Warmup Iteration   4: 0.285 ms/op
# Warmup Iteration   5: 0.288 ms/op
Iteration   1: 0.285 ms/op
Iteration   2: 0.286 ms/op
Iteration   3: 0.337 ms/op
Iteration   4: 0.530 ms/op
Iteration   5: 0.486 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.385 ±(99.9%) 0.445 ms/op [Average]
  (min, avg, max) = (0.285, 0.385, 0.530), stdev = 0.116
  CI (99.9%): [? 0, 0.830] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 2)

# Run progress: 46.47% complete, ETA 01:02:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.582 ms/op
# Warmup Iteration   2: 0.522 ms/op
# Warmup Iteration   3: 0.520 ms/op
# Warmup Iteration   4: 0.529 ms/op
# Warmup Iteration   5: 0.523 ms/op
Iteration   1: 0.529 ms/op
Iteration   2: 0.527 ms/op
Iteration   3: 0.621 ms/op
Iteration   4: 1.047 ms/op
Iteration   5: 0.862 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.717 ±(99.9%) 0.884 ms/op [Average]
  (min, avg, max) = (0.527, 0.717, 1.047), stdev = 0.229
  CI (99.9%): [? 0, 1.601] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 3)

# Run progress: 46.63% complete, ETA 01:02:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.619 ms/op
# Warmup Iteration   2: 0.568 ms/op
# Warmup Iteration   3: 0.582 ms/op
# Warmup Iteration   4: 0.564 ms/op
# Warmup Iteration   5: 0.564 ms/op
Iteration   1: 0.565 ms/op
Iteration   2: 0.568 ms/op
Iteration   3: 0.659 ms/op
Iteration   4: 0.949 ms/op
Iteration   5: 1.066 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.761 ±(99.9%) 0.892 ms/op [Average]
  (min, avg, max) = (0.565, 0.761, 1.066), stdev = 0.232
  CI (99.9%): [? 0, 1.654] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 2)

# Run progress: 46.79% complete, ETA 01:01:51
# Fork: 1 of 1
# Warmup Iteration   1: 1.225 ms/op
# Warmup Iteration   2: 1.095 ms/op
# Warmup Iteration   3: 1.085 ms/op
# Warmup Iteration   4: 1.071 ms/op
# Warmup Iteration   5: 1.081 ms/op
Iteration   1: 1.085 ms/op
Iteration   2: 1.086 ms/op
Iteration   3: 1.323 ms/op
Iteration   4: 1.862 ms/op
Iteration   5: 2.022 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  1.475 ±(99.9%) 1.695 ms/op [Average]
  (min, avg, max) = (1.085, 1.475, 2.022), stdev = 0.440
  CI (99.9%): [? 0, 3.171] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 3)

# Run progress: 46.96% complete, ETA 01:01:39
# Fork: 1 of 1
# Warmup Iteration   1: 1.291 ms/op
# Warmup Iteration   2: 1.162 ms/op
# Warmup Iteration   3: 1.144 ms/op
# Warmup Iteration   4: 1.135 ms/op
# Warmup Iteration   5: 1.138 ms/op
Iteration   1: 1.150 ms/op
Iteration   2: 1.144 ms/op
Iteration   3: 1.419 ms/op
Iteration   4: 2.169 ms/op
Iteration   5: 1.928 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  1.562 ±(99.9%) 1.793 ms/op [Average]
  (min, avg, max) = (1.144, 1.562, 2.169), stdev = 0.466
  CI (99.9%): [? 0, 3.355] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 2)

# Run progress: 47.12% complete, ETA 01:01:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 3)

# Run progress: 47.28% complete, ETA 01:01:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 2)

# Run progress: 47.44% complete, ETA 01:01:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 3)

# Run progress: 47.60% complete, ETA 01:00:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 2)

# Run progress: 47.76% complete, ETA 01:00:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 3)

# Run progress: 47.92% complete, ETA 01:00:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 2)

# Run progress: 48.08% complete, ETA 01:00:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 3)

# Run progress: 48.24% complete, ETA 01:00:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 2)

# Run progress: 48.40% complete, ETA 00:59:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 3)

# Run progress: 48.56% complete, ETA 00:59:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 2)

# Run progress: 48.72% complete, ETA 00:59:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 3)

# Run progress: 48.88% complete, ETA 00:59:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 2)

# Run progress: 49.04% complete, ETA 00:59:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 3)

# Run progress: 49.20% complete, ETA 00:58:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 2)

# Run progress: 49.36% complete, ETA 00:58:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.016 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.022), stdev = 0.004
  CI (99.9%): [? 10??, 0.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 3)

# Run progress: 49.52% complete, ETA 00:58:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.016 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.021), stdev = 0.004
  CI (99.9%): [? 0, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 2)

# Run progress: 49.68% complete, ETA 00:58:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.040 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.041 ms/op
Iteration   4: 0.063 ms/op
Iteration   5: 0.067 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.048 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.035, 0.048, 0.067), stdev = 0.016
  CI (99.9%): [? 0, 0.108] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 3)

# Run progress: 49.84% complete, ETA 00:58:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.045 ms/op
# Warmup Iteration   2: 0.042 ms/op
# Warmup Iteration   3: 0.040 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.040 ms/op
Iteration   2: 0.041 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.079 ms/op
Iteration   5: 0.075 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.057 ±(99.9%) 0.074 ms/op [Average]
  (min, avg, max) = (0.040, 0.057, 0.079), stdev = 0.019
  CI (99.9%): [? 0, 0.130] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 2)

# Run progress: 50.00% complete, ETA 00:57:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.136 ms/op
# Warmup Iteration   2: 0.123 ms/op
# Warmup Iteration   3: 0.119 ms/op
# Warmup Iteration   4: 0.118 ms/op
# Warmup Iteration   5: 0.120 ms/op
Iteration   1: 0.119 ms/op
Iteration   2: 0.120 ms/op
Iteration   3: 0.139 ms/op
Iteration   4: 0.219 ms/op
Iteration   5: 0.214 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.162 ±(99.9%) 0.193 ms/op [Average]
  (min, avg, max) = (0.119, 0.162, 0.219), stdev = 0.050
  CI (99.9%): [? 0, 0.355] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 3)

# Run progress: 50.16% complete, ETA 00:57:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.164 ms/op
# Warmup Iteration   2: 0.148 ms/op
# Warmup Iteration   3: 0.145 ms/op
# Warmup Iteration   4: 0.146 ms/op
# Warmup Iteration   5: 0.144 ms/op
Iteration   1: 0.144 ms/op
Iteration   2: 0.144 ms/op
Iteration   3: 0.179 ms/op
Iteration   4: 0.275 ms/op
Iteration   5: 0.243 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.197 ±(99.9%) 0.229 ms/op [Average]
  (min, avg, max) = (0.144, 0.197, 0.275), stdev = 0.059
  CI (99.9%): [? 0, 0.426] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 2)

# Run progress: 50.32% complete, ETA 00:57:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.484 ms/op
# Warmup Iteration   2: 0.439 ms/op
# Warmup Iteration   3: 0.425 ms/op
# Warmup Iteration   4: 0.429 ms/op
# Warmup Iteration   5: 0.431 ms/op
Iteration   1: 0.427 ms/op
Iteration   2: 0.431 ms/op
Iteration   3: 0.502 ms/op
Iteration   4: 0.810 ms/op
Iteration   5: 0.788 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.591 ±(99.9%) 0.739 ms/op [Average]
  (min, avg, max) = (0.427, 0.591, 0.810), stdev = 0.192
  CI (99.9%): [? 0, 1.331] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 3)

# Run progress: 50.48% complete, ETA 00:57:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.598 ms/op
# Warmup Iteration   2: 0.523 ms/op
# Warmup Iteration   3: 0.524 ms/op
# Warmup Iteration   4: 0.519 ms/op
# Warmup Iteration   5: 0.522 ms/op
Iteration   1: 0.522 ms/op
Iteration   2: 0.520 ms/op
Iteration   3: 0.625 ms/op
Iteration   4: 0.990 ms/op
Iteration   5: 0.924 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.716 ±(99.9%) 0.867 ms/op [Average]
  (min, avg, max) = (0.520, 0.716, 0.990), stdev = 0.225
  CI (99.9%): [? 0, 1.583] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 2)

# Run progress: 50.64% complete, ETA 00:57:06
# Fork: 1 of 1
# Warmup Iteration   1: 1.337 ms/op
# Warmup Iteration   2: 1.148 ms/op
# Warmup Iteration   3: 1.147 ms/op
# Warmup Iteration   4: 1.137 ms/op
# Warmup Iteration   5: 1.141 ms/op
Iteration   1: 1.136 ms/op
Iteration   2: 1.143 ms/op
Iteration   3: 1.345 ms/op
Iteration   4: 2.173 ms/op
Iteration   5: 1.970 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  1.553 ±(99.9%) 1.870 ms/op [Average]
  (min, avg, max) = (1.136, 1.553, 2.173), stdev = 0.486
  CI (99.9%): [? 0, 3.424] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 3)

# Run progress: 50.80% complete, ETA 00:56:54
# Fork: 1 of 1
# Warmup Iteration   1: 1.810 ms/op
# Warmup Iteration   2: 1.594 ms/op
# Warmup Iteration   3: 1.566 ms/op
# Warmup Iteration   4: 1.567 ms/op
# Warmup Iteration   5: 1.572 ms/op
Iteration   1: 1.568 ms/op
Iteration   2: 1.557 ms/op
Iteration   3: 1.872 ms/op
Iteration   4: 2.842 ms/op
Iteration   5: 2.675 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  2.103 ±(99.9%) 2.366 ms/op [Average]
  (min, avg, max) = (1.557, 2.103, 2.842), stdev = 0.614
  CI (99.9%): [? 0, 4.468] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 2)

# Run progress: 50.96% complete, ETA 00:56:43
# Fork: 1 of 1
# Warmup Iteration   1: 3.547 ms/op
# Warmup Iteration   2: 3.047 ms/op
# Warmup Iteration   3: 2.961 ms/op
# Warmup Iteration   4: 2.975 ms/op
# Warmup Iteration   5: 2.902 ms/op
Iteration   1: 2.931 ms/op
Iteration   2: 2.957 ms/op
Iteration   3: 3.540 ms/op
Iteration   4: 5.282 ms/op
Iteration   5: 5.068 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  3.956 ±(99.9%) 4.397 ms/op [Average]
  (min, avg, max) = (2.931, 3.956, 5.282), stdev = 1.142
  CI (99.9%): [? 0, 8.353] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 3)

# Run progress: 51.12% complete, ETA 00:56:31
# Fork: 1 of 1
# Warmup Iteration   1: 4.523 ms/op
# Warmup Iteration   2: 3.924 ms/op
# Warmup Iteration   3: 3.776 ms/op
# Warmup Iteration   4: 3.709 ms/op
# Warmup Iteration   5: 3.746 ms/op
Iteration   1: 3.736 ms/op
Iteration   2: 3.761 ms/op
Iteration   3: 4.279 ms/op
Iteration   4: 7.051 ms/op
Iteration   5: 7.010 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  5.167 ±(99.9%) 6.602 ms/op [Average]
  (min, avg, max) = (3.736, 5.167, 7.051), stdev = 1.714
  CI (99.9%): [? 0, 11.769] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 2)

# Run progress: 51.28% complete, ETA 00:56:19
# Fork: 1 of 1
# Warmup Iteration   1: 8.530 ms/op
# Warmup Iteration   2: 7.116 ms/op
# Warmup Iteration   3: 6.274 ms/op
# Warmup Iteration   4: 6.239 ms/op
# Warmup Iteration   5: 6.184 ms/op
Iteration   1: 6.243 ms/op
Iteration   2: 6.250 ms/op
Iteration   3: 7.422 ms/op
Iteration   4: 10.451 ms/op
Iteration   5: 10.580 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  8.189 ±(99.9%) 8.386 ms/op [Average]
  (min, avg, max) = (6.243, 8.189, 10.580), stdev = 2.178
  CI (99.9%): [? 0, 16.575] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 3)

# Run progress: 51.44% complete, ETA 00:56:07
# Fork: 1 of 1
# Warmup Iteration   1: 10.846 ms/op
# Warmup Iteration   2: 8.923 ms/op
# Warmup Iteration   3: 8.168 ms/op
# Warmup Iteration   4: 8.145 ms/op
# Warmup Iteration   5: 7.945 ms/op
Iteration   1: 7.966 ms/op
Iteration   2: 7.936 ms/op
Iteration   3: 9.490 ms/op
Iteration   4: 13.639 ms/op
Iteration   5: 11.706 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  10.147 ±(99.9%) 9.569 ms/op [Average]
  (min, avg, max) = (7.936, 10.147, 13.639), stdev = 2.485
  CI (99.9%): [0.579, 19.716] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 2)

# Run progress: 51.60% complete, ETA 00:55:56
# Fork: 1 of 1
# Warmup Iteration   1: 18.002 ms/op
# Warmup Iteration   2: 14.237 ms/op
# Warmup Iteration   3: 12.857 ms/op
# Warmup Iteration   4: 13.061 ms/op
# Warmup Iteration   5: 12.927 ms/op
Iteration   1: 12.971 ms/op
Iteration   2: 12.977 ms/op
Iteration   3: 14.784 ms/op
Iteration   4: 21.273 ms/op
Iteration   5: 21.425 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  16.686 ±(99.9%) 16.638 ms/op [Average]
  (min, avg, max) = (12.971, 16.686, 21.425), stdev = 4.321
  CI (99.9%): [0.048, 33.324] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 3)

# Run progress: 51.76% complete, ETA 00:55:44
# Fork: 1 of 1
# Warmup Iteration   1: 27.882 ms/op
# Warmup Iteration   2: 17.562 ms/op
# Warmup Iteration   3: 16.187 ms/op
# Warmup Iteration   4: 16.364 ms/op
# Warmup Iteration   5: 16.402 ms/op
Iteration   1: 16.244 ms/op
Iteration   2: 16.522 ms/op
Iteration   3: 19.023 ms/op
Iteration   4: 25.424 ms/op
Iteration   5: 24.374 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  20.317 ±(99.9%) 16.696 ms/op [Average]
  (min, avg, max) = (16.244, 20.317, 25.424), stdev = 4.336
  CI (99.9%): [3.622, 37.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 2)

# Run progress: 51.92% complete, ETA 00:55:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 3)

# Run progress: 52.08% complete, ETA 00:55:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 2)

# Run progress: 52.24% complete, ETA 00:55:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 3)

# Run progress: 52.40% complete, ETA 00:54:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 2)

# Run progress: 52.56% complete, ETA 00:54:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 3)

# Run progress: 52.72% complete, ETA 00:54:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 2)

# Run progress: 52.88% complete, ETA 00:54:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 3)

# Run progress: 53.04% complete, ETA 00:54:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 2)

# Run progress: 53.21% complete, ETA 00:53:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 3)

# Run progress: 53.37% complete, ETA 00:53:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 2)

# Run progress: 53.53% complete, ETA 00:53:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 3)

# Run progress: 53.69% complete, ETA 00:53:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 2)

# Run progress: 53.85% complete, ETA 00:53:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 3)

# Run progress: 54.01% complete, ETA 00:53:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 10??, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 2)

# Run progress: 54.17% complete, ETA 00:52:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.016 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.013, 0.016, 0.021), stdev = 0.003
  CI (99.9%): [0.004, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 3)

# Run progress: 54.33% complete, ETA 00:52:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.017 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.014, 0.017, 0.021), stdev = 0.003
  CI (99.9%): [0.004, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 2)

# Run progress: 54.49% complete, ETA 00:52:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.041 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.040 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.039 ms/op
Iteration   1: 0.038 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.041 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.038 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.037, 0.038, 0.041), stdev = 0.002
  CI (99.9%): [0.032, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 3)

# Run progress: 54.65% complete, ETA 00:52:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.042 ms/op
# Warmup Iteration   4: 0.043 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.044 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.043 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.041, 0.043, 0.044), stdev = 0.002
  CI (99.9%): [0.037, 0.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 2)

# Run progress: 54.81% complete, ETA 00:52:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.139 ms/op
# Warmup Iteration   2: 0.124 ms/op
# Warmup Iteration   3: 0.119 ms/op
# Warmup Iteration   4: 0.119 ms/op
# Warmup Iteration   5: 0.119 ms/op
Iteration   1: 0.120 ms/op
Iteration   2: 0.117 ms/op
Iteration   3: 0.119 ms/op
Iteration   4: 0.118 ms/op
Iteration   5: 0.118 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.118 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.117, 0.118, 0.120), stdev = 0.001
  CI (99.9%): [0.114, 0.122] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 3)

# Run progress: 54.97% complete, ETA 00:51:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.161 ms/op
# Warmup Iteration   2: 0.145 ms/op
# Warmup Iteration   3: 0.144 ms/op
# Warmup Iteration   4: 0.143 ms/op
# Warmup Iteration   5: 0.144 ms/op
Iteration   1: 0.148 ms/op
Iteration   2: 0.144 ms/op
Iteration   3: 0.143 ms/op
Iteration   4: 0.145 ms/op
Iteration   5: 0.144 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.145 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.143, 0.145, 0.148), stdev = 0.002
  CI (99.9%): [0.137, 0.153] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 2)

# Run progress: 55.13% complete, ETA 00:51:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.487 ms/op
# Warmup Iteration   2: 0.435 ms/op
# Warmup Iteration   3: 0.428 ms/op
# Warmup Iteration   4: 0.423 ms/op
# Warmup Iteration   5: 0.426 ms/op
Iteration   1: 0.422 ms/op
Iteration   2: 0.429 ms/op
Iteration   3: 0.428 ms/op
Iteration   4: 0.425 ms/op
Iteration   5: 0.424 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.425 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.422, 0.425, 0.429), stdev = 0.003
  CI (99.9%): [0.414, 0.437] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 3)

# Run progress: 55.29% complete, ETA 00:51:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.603 ms/op
# Warmup Iteration   2: 0.540 ms/op
# Warmup Iteration   3: 0.545 ms/op
# Warmup Iteration   4: 0.533 ms/op
# Warmup Iteration   5: 0.529 ms/op
Iteration   1: 0.530 ms/op
Iteration   2: 0.532 ms/op
Iteration   3: 0.530 ms/op
Iteration   4: 0.529 ms/op
Iteration   5: 0.527 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  0.530 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.527, 0.530, 0.532), stdev = 0.002
  CI (99.9%): [0.522, 0.538] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 2)

# Run progress: 55.45% complete, ETA 00:51:17
# Fork: 1 of 1
# Warmup Iteration   1: 1.948 ms/op
# Warmup Iteration   2: 1.707 ms/op
# Warmup Iteration   3: 1.680 ms/op
# Warmup Iteration   4: 1.688 ms/op
# Warmup Iteration   5: 1.706 ms/op
Iteration   1: 1.679 ms/op
Iteration   2: 1.705 ms/op
Iteration   3: 1.720 ms/op
Iteration   4: 1.685 ms/op
Iteration   5: 1.692 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  1.696 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (1.679, 1.696, 1.720), stdev = 0.016
  CI (99.9%): [1.633, 1.759] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 3)

# Run progress: 55.61% complete, ETA 00:51:05
# Fork: 1 of 1
# Warmup Iteration   1: 2.576 ms/op
# Warmup Iteration   2: 2.199 ms/op
# Warmup Iteration   3: 2.249 ms/op
# Warmup Iteration   4: 2.187 ms/op
# Warmup Iteration   5: 2.194 ms/op
Iteration   1: 2.170 ms/op
Iteration   2: 2.197 ms/op
Iteration   3: 2.185 ms/op
Iteration   4: 2.154 ms/op
Iteration   5: 2.212 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  2.184 ±(99.9%) 0.087 ms/op [Average]
  (min, avg, max) = (2.154, 2.184, 2.212), stdev = 0.023
  CI (99.9%): [2.096, 2.271] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 2)

# Run progress: 55.77% complete, ETA 00:50:54
# Fork: 1 of 1
# Warmup Iteration   1: 9.572 ms/op
# Warmup Iteration   2: 8.247 ms/op
# Warmup Iteration   3: 7.787 ms/op
# Warmup Iteration   4: 7.791 ms/op
# Warmup Iteration   5: 7.762 ms/op
Iteration   1: 7.785 ms/op
Iteration   2: 7.717 ms/op
Iteration   3: 7.766 ms/op
Iteration   4: 7.825 ms/op
Iteration   5: 7.787 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  7.776 ±(99.9%) 0.152 ms/op [Average]
  (min, avg, max) = (7.717, 7.776, 7.825), stdev = 0.039
  CI (99.9%): [7.624, 7.928] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 3)

# Run progress: 55.93% complete, ETA 00:50:42
# Fork: 1 of 1
# Warmup Iteration   1: 14.048 ms/op
# Warmup Iteration   2: 10.065 ms/op
# Warmup Iteration   3: 9.982 ms/op
# Warmup Iteration   4: 9.891 ms/op
# Warmup Iteration   5: 9.940 ms/op
Iteration   1: 9.805 ms/op
Iteration   2: 9.899 ms/op
Iteration   3: 9.938 ms/op
Iteration   4: 9.825 ms/op
Iteration   5: 9.980 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  9.889 ±(99.9%) 0.285 ms/op [Average]
  (min, avg, max) = (9.805, 9.889, 9.980), stdev = 0.074
  CI (99.9%): [9.604, 10.175] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 2)

# Run progress: 56.09% complete, ETA 00:50:31
# Fork: 1 of 1
# Warmup Iteration   1: 54.124 ms/op
# Warmup Iteration   2: 40.505 ms/op
# Warmup Iteration   3: 34.929 ms/op
# Warmup Iteration   4: 35.402 ms/op
# Warmup Iteration   5: 34.792 ms/op
Iteration   1: 37.116 ms/op
Iteration   2: 34.703 ms/op
Iteration   3: 34.967 ms/op
Iteration   4: 34.961 ms/op
Iteration   5: 35.455 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  35.440 ±(99.9%) 3.756 ms/op [Average]
  (min, avg, max) = (34.703, 35.440, 37.116), stdev = 0.975
  CI (99.9%): [31.684, 39.196] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 3)

# Run progress: 56.25% complete, ETA 00:50:19
# Fork: 1 of 1
# Warmup Iteration   1: 67.586 ms/op
# Warmup Iteration   2: 49.577 ms/op
# Warmup Iteration   3: 45.456 ms/op
# Warmup Iteration   4: 44.696 ms/op
# Warmup Iteration   5: 44.994 ms/op
Iteration   1: 45.109 ms/op
Iteration   2: 44.956 ms/op
Iteration   3: 44.977 ms/op
Iteration   4: 45.014 ms/op
Iteration   5: 45.447 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  45.100 ±(99.9%) 0.779 ms/op [Average]
  (min, avg, max) = (44.956, 45.100, 45.447), stdev = 0.202
  CI (99.9%): [44.321, 45.880] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 2)

# Run progress: 56.41% complete, ETA 00:50:08
# Fork: 1 of 1
# Warmup Iteration   1: 370.936 ms/op
# Warmup Iteration   2: 329.675 ms/op
# Warmup Iteration   3: 342.269 ms/op
# Warmup Iteration   4: 316.908 ms/op
# Warmup Iteration   5: 317.934 ms/op
Iteration   1: 289.548 ms/op
Iteration   2: 253.758 ms/op
Iteration   3: 373.989 ms/op
Iteration   4: 390.651 ms/op
Iteration   5: 383.630 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  338.315 ±(99.9%) 240.421 ms/op [Average]
  (min, avg, max) = (253.758, 338.315, 390.651), stdev = 62.437
  CI (99.9%): [97.894, 578.736] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 3)

# Run progress: 56.57% complete, ETA 00:49:58
# Fork: 1 of 1
# Warmup Iteration   1: 444.874 ms/op
# Warmup Iteration   2: 460.780 ms/op
# Warmup Iteration   3: 490.818 ms/op
# Warmup Iteration   4: 520.949 ms/op
# Warmup Iteration   5: 526.606 ms/op
Iteration   1: 558.132 ms/op
Iteration   2: 442.527 ms/op
Iteration   3: 619.175 ms/op
Iteration   4: 431.990 ms/op
Iteration   5: 545.130 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous":
  519.391 ±(99.9%) 308.455 ms/op [Average]
  (min, avg, max) = (431.990, 519.391, 619.175), stdev = 80.105
  CI (99.9%): [210.936, 827.846] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 2)

# Run progress: 56.73% complete, ETA 00:49:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 3)

# Run progress: 56.89% complete, ETA 00:49:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 2)

# Run progress: 57.05% complete, ETA 00:49:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 3)

# Run progress: 57.21% complete, ETA 00:49:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 2)

# Run progress: 57.37% complete, ETA 00:49:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 3)

# Run progress: 57.53% complete, ETA 00:48:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 2)

# Run progress: 57.69% complete, ETA 00:48:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 3)

# Run progress: 57.85% complete, ETA 00:48:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 2)

# Run progress: 58.01% complete, ETA 00:48:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 3)

# Run progress: 58.17% complete, ETA 00:48:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 2)

# Run progress: 58.33% complete, ETA 00:47:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 3)

# Run progress: 58.49% complete, ETA 00:47:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 2)

# Run progress: 58.65% complete, ETA 00:47:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 3)

# Run progress: 58.81% complete, ETA 00:47:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 2)

# Run progress: 58.97% complete, ETA 00:47:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 3)

# Run progress: 59.13% complete, ETA 00:46:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 2)

# Run progress: 59.29% complete, ETA 00:46:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.008 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [0.001, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 3)

# Run progress: 59.46% complete, ETA 00:46:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.008 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.009), stdev = 0.002
  CI (99.9%): [0.001, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 2)

# Run progress: 59.62% complete, ETA 00:46:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.015 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.020), stdev = 0.003
  CI (99.9%): [0.003, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 3)

# Run progress: 59.78% complete, ETA 00:46:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.015 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.011, 0.015, 0.021), stdev = 0.004
  CI (99.9%): [? 0, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 2)

# Run progress: 59.94% complete, ETA 00:45:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.044 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.030 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.024, 0.030, 0.044), stdev = 0.008
  CI (99.9%): [? 0, 0.062] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 3)

# Run progress: 60.10% complete, ETA 00:45:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.041 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.030 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.023, 0.030, 0.041), stdev = 0.008
  CI (99.9%): [? 0, 0.063] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 2)

# Run progress: 60.26% complete, ETA 00:45:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
# Warmup Iteration   2: 0.048 ms/op
# Warmup Iteration   3: 0.049 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.054 ms/op
Iteration   4: 0.078 ms/op
Iteration   5: 0.079 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.061 ±(99.9%) 0.062 ms/op [Average]
  (min, avg, max) = (0.047, 0.061, 0.079), stdev = 0.016
  CI (99.9%): [? 0, 0.123] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 3)

# Run progress: 60.42% complete, ETA 00:45:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.070 ms/op
Iteration   5: 0.083 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.059 ±(99.9%) 0.067 ms/op [Average]
  (min, avg, max) = (0.044, 0.059, 0.083), stdev = 0.017
  CI (99.9%): [? 0, 0.125] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 2)

# Run progress: 60.58% complete, ETA 00:45:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.097 ms/op
# Warmup Iteration   2: 0.090 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.090 ms/op
Iteration   1: 0.089 ms/op
Iteration   2: 0.091 ms/op
Iteration   3: 0.113 ms/op
Iteration   4: 0.153 ms/op
Iteration   5: 0.157 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.120 ±(99.9%) 0.126 ms/op [Average]
  (min, avg, max) = (0.089, 0.120, 0.157), stdev = 0.033
  CI (99.9%): [? 0, 0.246] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 3)

# Run progress: 60.74% complete, ETA 00:45:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.091 ms/op
# Warmup Iteration   2: 0.089 ms/op
# Warmup Iteration   3: 0.088 ms/op
# Warmup Iteration   4: 0.086 ms/op
# Warmup Iteration   5: 0.086 ms/op
Iteration   1: 0.088 ms/op
Iteration   2: 0.087 ms/op
Iteration   3: 0.106 ms/op
Iteration   4: 0.163 ms/op
Iteration   5: 0.143 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.117 ±(99.9%) 0.131 ms/op [Average]
  (min, avg, max) = (0.087, 0.117, 0.163), stdev = 0.034
  CI (99.9%): [? 0, 0.248] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 2)

# Run progress: 60.90% complete, ETA 00:44:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.200 ms/op
# Warmup Iteration   2: 0.188 ms/op
# Warmup Iteration   3: 0.189 ms/op
# Warmup Iteration   4: 0.187 ms/op
# Warmup Iteration   5: 0.187 ms/op
Iteration   1: 0.187 ms/op
Iteration   2: 0.189 ms/op
Iteration   3: 0.213 ms/op
Iteration   4: 0.350 ms/op
Iteration   5: 0.362 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.260 ±(99.9%) 0.340 ms/op [Average]
  (min, avg, max) = (0.187, 0.260, 0.362), stdev = 0.088
  CI (99.9%): [? 0, 0.600] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 3)

# Run progress: 61.06% complete, ETA 00:44:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.198 ms/op
# Warmup Iteration   2: 0.183 ms/op
# Warmup Iteration   3: 0.184 ms/op
# Warmup Iteration   4: 0.187 ms/op
# Warmup Iteration   5: 0.186 ms/op
Iteration   1: 0.183 ms/op
Iteration   2: 0.192 ms/op
Iteration   3: 0.217 ms/op
Iteration   4: 0.331 ms/op
Iteration   5: 0.361 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.257 ±(99.9%) 0.319 ms/op [Average]
  (min, avg, max) = (0.183, 0.257, 0.361), stdev = 0.083
  CI (99.9%): [? 0, 0.576] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 2)

# Run progress: 61.22% complete, ETA 00:44:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.401 ms/op
# Warmup Iteration   2: 0.370 ms/op
# Warmup Iteration   3: 0.363 ms/op
# Warmup Iteration   4: 0.366 ms/op
# Warmup Iteration   5: 0.368 ms/op
Iteration   1: 0.363 ms/op
Iteration   2: 0.368 ms/op
Iteration   3: 0.436 ms/op
Iteration   4: 0.638 ms/op
Iteration   5: 0.602 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.481 ±(99.9%) 0.502 ms/op [Average]
  (min, avg, max) = (0.363, 0.481, 0.638), stdev = 0.130
  CI (99.9%): [? 0, 0.984] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 3)

# Run progress: 61.38% complete, ETA 00:44:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.364 ms/op
# Warmup Iteration   2: 0.351 ms/op
# Warmup Iteration   3: 0.344 ms/op
# Warmup Iteration   4: 0.352 ms/op
# Warmup Iteration   5: 0.345 ms/op
Iteration   1: 0.355 ms/op
Iteration   2: 0.364 ms/op
Iteration   3: 0.443 ms/op
Iteration   4: 0.663 ms/op
Iteration   5: 0.608 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.487 ±(99.9%) 0.544 ms/op [Average]
  (min, avg, max) = (0.355, 0.487, 0.663), stdev = 0.141
  CI (99.9%): [? 0, 1.031] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 2)

# Run progress: 61.54% complete, ETA 00:44:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 3)

# Run progress: 61.70% complete, ETA 00:43:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 2)

# Run progress: 61.86% complete, ETA 00:43:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 3)

# Run progress: 62.02% complete, ETA 00:43:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 2)

# Run progress: 62.18% complete, ETA 00:43:19
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 3)

# Run progress: 62.34% complete, ETA 00:43:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 2)

# Run progress: 62.50% complete, ETA 00:42:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 3)

# Run progress: 62.66% complete, ETA 00:42:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 2)

# Run progress: 62.82% complete, ETA 00:42:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 3)

# Run progress: 62.98% complete, ETA 00:42:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 2)

# Run progress: 63.14% complete, ETA 00:42:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 3)

# Run progress: 63.30% complete, ETA 00:42:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 2)

# Run progress: 63.46% complete, ETA 00:41:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 3)

# Run progress: 63.62% complete, ETA 00:41:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 2)

# Run progress: 63.78% complete, ETA 00:41:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 3)

# Run progress: 63.94% complete, ETA 00:41:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 2)

# Run progress: 64.10% complete, ETA 00:41:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.009 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.007, 0.009, 0.013), stdev = 0.003
  CI (99.9%): [? 0, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 3)

# Run progress: 64.26% complete, ETA 00:40:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.009 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.013), stdev = 0.003
  CI (99.9%): [? 0, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 2)

# Run progress: 64.42% complete, ETA 00:40:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.025 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.019 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.014, 0.019, 0.025), stdev = 0.006
  CI (99.9%): [? 0, 0.041] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 3)

# Run progress: 64.58% complete, ETA 00:40:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.018 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.012, 0.018, 0.024), stdev = 0.006
  CI (99.9%): [? 0, 0.041] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 2)

# Run progress: 64.74% complete, ETA 00:40:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.032 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.038 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.030, 0.038, 0.049), stdev = 0.009
  CI (99.9%): [0.003, 0.073] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 3)

# Run progress: 64.90% complete, ETA 00:40:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.036 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (0.026, 0.036, 0.052), stdev = 0.011
  CI (99.9%): [? 0, 0.080] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 2)

# Run progress: 65.06% complete, ETA 00:39:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.059 ms/op
# Warmup Iteration   2: 0.055 ms/op
# Warmup Iteration   3: 0.055 ms/op
# Warmup Iteration   4: 0.054 ms/op
# Warmup Iteration   5: 0.054 ms/op
Iteration   1: 0.054 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.116 ms/op
Iteration   5: 0.103 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.079 ±(99.9%) 0.111 ms/op [Average]
  (min, avg, max) = (0.054, 0.079, 0.116), stdev = 0.029
  CI (99.9%): [? 0, 0.190] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 3)

# Run progress: 65.22% complete, ETA 00:39:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.055 ms/op
# Warmup Iteration   2: 0.051 ms/op
# Warmup Iteration   3: 0.050 ms/op
# Warmup Iteration   4: 0.050 ms/op
# Warmup Iteration   5: 0.051 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.051 ms/op
Iteration   3: 0.060 ms/op
Iteration   4: 0.087 ms/op
Iteration   5: 0.110 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.072 ±(99.9%) 0.099 ms/op [Average]
  (min, avg, max) = (0.051, 0.072, 0.110), stdev = 0.026
  CI (99.9%): [? 0, 0.171] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 2)

# Run progress: 65.38% complete, ETA 00:39:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.114 ms/op
# Warmup Iteration   2: 0.107 ms/op
# Warmup Iteration   3: 0.107 ms/op
# Warmup Iteration   4: 0.108 ms/op
# Warmup Iteration   5: 0.105 ms/op
Iteration   1: 0.105 ms/op
Iteration   2: 0.105 ms/op
Iteration   3: 0.129 ms/op
Iteration   4: 0.164 ms/op
Iteration   5: 0.211 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.143 ±(99.9%) 0.175 ms/op [Average]
  (min, avg, max) = (0.105, 0.143, 0.211), stdev = 0.045
  CI (99.9%): [? 0, 0.318] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 3)

# Run progress: 65.54% complete, ETA 00:39:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.106 ms/op
# Warmup Iteration   2: 0.099 ms/op
# Warmup Iteration   3: 0.098 ms/op
# Warmup Iteration   4: 0.099 ms/op
# Warmup Iteration   5: 0.098 ms/op
Iteration   1: 0.098 ms/op
Iteration   2: 0.099 ms/op
Iteration   3: 0.120 ms/op
Iteration   4: 0.178 ms/op
Iteration   5: 0.179 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.135 ±(99.9%) 0.158 ms/op [Average]
  (min, avg, max) = (0.098, 0.135, 0.179), stdev = 0.041
  CI (99.9%): [? 0, 0.293] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 2)

# Run progress: 65.71% complete, ETA 00:39:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.216 ms/op
# Warmup Iteration   2: 0.203 ms/op
# Warmup Iteration   3: 0.200 ms/op
# Warmup Iteration   4: 0.201 ms/op
# Warmup Iteration   5: 0.200 ms/op
Iteration   1: 0.204 ms/op
Iteration   2: 0.201 ms/op
Iteration   3: 0.255 ms/op
Iteration   4: 0.376 ms/op
Iteration   5: 0.393 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.286 ±(99.9%) 0.357 ms/op [Average]
  (min, avg, max) = (0.201, 0.286, 0.393), stdev = 0.093
  CI (99.9%): [? 0, 0.643] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 3)

# Run progress: 65.87% complete, ETA 00:38:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.211 ms/op
# Warmup Iteration   2: 0.197 ms/op
# Warmup Iteration   3: 0.193 ms/op
# Warmup Iteration   4: 0.195 ms/op
# Warmup Iteration   5: 0.193 ms/op
Iteration   1: 0.193 ms/op
Iteration   2: 0.189 ms/op
Iteration   3: 0.238 ms/op
Iteration   4: 0.346 ms/op
Iteration   5: 0.355 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.264 ±(99.9%) 0.313 ms/op [Average]
  (min, avg, max) = (0.189, 0.264, 0.355), stdev = 0.081
  CI (99.9%): [? 0, 0.577] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 2)

# Run progress: 66.03% complete, ETA 00:38:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.414 ms/op
# Warmup Iteration   2: 0.389 ms/op
# Warmup Iteration   3: 0.390 ms/op
# Warmup Iteration   4: 0.387 ms/op
# Warmup Iteration   5: 0.396 ms/op
Iteration   1: 0.394 ms/op
Iteration   2: 0.390 ms/op
Iteration   3: 0.452 ms/op
Iteration   4: 0.778 ms/op
Iteration   5: 0.761 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.555 ±(99.9%) 0.760 ms/op [Average]
  (min, avg, max) = (0.390, 0.555, 0.778), stdev = 0.197
  CI (99.9%): [? 0, 1.315] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 3)

# Run progress: 66.19% complete, ETA 00:38:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.418 ms/op
# Warmup Iteration   2: 0.393 ms/op
# Warmup Iteration   3: 0.380 ms/op
# Warmup Iteration   4: 0.385 ms/op
# Warmup Iteration   5: 0.377 ms/op
Iteration   1: 0.382 ms/op
Iteration   2: 0.383 ms/op
Iteration   3: 0.465 ms/op
Iteration   4: 0.724 ms/op
Iteration   5: 0.745 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.540 ±(99.9%) 0.697 ms/op [Average]
  (min, avg, max) = (0.382, 0.540, 0.745), stdev = 0.181
  CI (99.9%): [? 0, 1.237] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 2)

# Run progress: 66.35% complete, ETA 00:38:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 3)

# Run progress: 66.51% complete, ETA 00:38:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 2)

# Run progress: 66.67% complete, ETA 00:38:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 3)

# Run progress: 66.83% complete, ETA 00:37:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 2)

# Run progress: 66.99% complete, ETA 00:37:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 3)

# Run progress: 67.15% complete, ETA 00:37:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 2)

# Run progress: 67.31% complete, ETA 00:37:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 3)

# Run progress: 67.47% complete, ETA 00:37:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 2)

# Run progress: 67.63% complete, ETA 00:36:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 3)

# Run progress: 67.79% complete, ETA 00:36:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 2)

# Run progress: 67.95% complete, ETA 00:36:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 3)

# Run progress: 68.11% complete, ETA 00:36:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 2)

# Run progress: 68.27% complete, ETA 00:36:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 3)

# Run progress: 68.43% complete, ETA 00:36:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 2)

# Run progress: 68.59% complete, ETA 00:35:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.003, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 3)

# Run progress: 68.75% complete, ETA 00:35:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 2)

# Run progress: 68.91% complete, ETA 00:35:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.007, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.007, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 3)

# Run progress: 69.07% complete, ETA 00:35:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.006 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.006, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 2)

# Run progress: 69.23% complete, ETA 00:35:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.015 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.014, 0.015, 0.015), stdev = 0.001
  CI (99.9%): [0.014, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 3)

# Run progress: 69.39% complete, ETA 00:34:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.013 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.013, 0.013, 0.013), stdev = 0.001
  CI (99.9%): [0.013, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 2)

# Run progress: 69.55% complete, ETA 00:34:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.031 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.032 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.030, 0.032, 0.033), stdev = 0.001
  CI (99.9%): [0.028, 0.035] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 3)

# Run progress: 69.71% complete, ETA 00:34:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.028 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.029 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.028, 0.029, 0.031), stdev = 0.001
  CI (99.9%): [0.024, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 2)

# Run progress: 69.87% complete, ETA 00:34:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.064 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.062 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.059 ms/op
Iteration   4: 0.059 ms/op
Iteration   5: 0.059 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.060 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.059, 0.060, 0.062), stdev = 0.001
  CI (99.9%): [0.054, 0.065] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 3)

# Run progress: 70.03% complete, ETA 00:34:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.060 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.054 ms/op
# Warmup Iteration   4: 0.055 ms/op
# Warmup Iteration   5: 0.053 ms/op
Iteration   1: 0.056 ms/op
Iteration   2: 0.053 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.053 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.053 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.052, 0.053, 0.056), stdev = 0.002
  CI (99.9%): [0.047, 0.059] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 2)

# Run progress: 70.19% complete, ETA 00:33:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.128 ms/op
# Warmup Iteration   2: 0.120 ms/op
# Warmup Iteration   3: 0.119 ms/op
# Warmup Iteration   4: 0.116 ms/op
# Warmup Iteration   5: 0.118 ms/op
Iteration   1: 0.117 ms/op
Iteration   2: 0.115 ms/op
Iteration   3: 0.110 ms/op
Iteration   4: 0.113 ms/op
Iteration   5: 0.112 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.114 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.110, 0.114, 0.117), stdev = 0.003
  CI (99.9%): [0.103, 0.124] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 3)

# Run progress: 70.35% complete, ETA 00:33:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.116 ms/op
# Warmup Iteration   2: 0.104 ms/op
# Warmup Iteration   3: 0.101 ms/op
# Warmup Iteration   4: 0.096 ms/op
# Warmup Iteration   5: 0.103 ms/op
Iteration   1: 0.108 ms/op
Iteration   2: 0.100 ms/op
Iteration   3: 0.097 ms/op
Iteration   4: 0.104 ms/op
Iteration   5: 0.103 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.102 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.097, 0.102, 0.108), stdev = 0.004
  CI (99.9%): [0.088, 0.117] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 2)

# Run progress: 70.51% complete, ETA 00:33:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.255 ms/op
# Warmup Iteration   2: 0.223 ms/op
# Warmup Iteration   3: 0.224 ms/op
# Warmup Iteration   4: 0.219 ms/op
# Warmup Iteration   5: 0.223 ms/op
Iteration   1: 0.233 ms/op
Iteration   2: 0.237 ms/op
Iteration   3: 0.234 ms/op
Iteration   4: 0.238 ms/op
Iteration   5: 0.232 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.235 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.232, 0.235, 0.238), stdev = 0.002
  CI (99.9%): [0.226, 0.244] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 3)

# Run progress: 70.67% complete, ETA 00:33:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.219 ms/op
# Warmup Iteration   2: 0.214 ms/op
# Warmup Iteration   3: 0.209 ms/op
# Warmup Iteration   4: 0.202 ms/op
# Warmup Iteration   5: 0.204 ms/op
Iteration   1: 0.203 ms/op
Iteration   2: 0.205 ms/op
Iteration   3: 0.208 ms/op
Iteration   4: 0.204 ms/op
Iteration   5: 0.203 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.204 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.203, 0.204, 0.208), stdev = 0.002
  CI (99.9%): [0.197, 0.212] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 2)

# Run progress: 70.83% complete, ETA 00:33:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.503 ms/op
# Warmup Iteration   2: 0.462 ms/op
# Warmup Iteration   3: 0.473 ms/op
# Warmup Iteration   4: 0.469 ms/op
# Warmup Iteration   5: 0.474 ms/op
Iteration   1: 0.469 ms/op
Iteration   2: 0.471 ms/op
Iteration   3: 0.470 ms/op
Iteration   4: 0.471 ms/op
Iteration   5: 0.477 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.472 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.469, 0.472, 0.477), stdev = 0.003
  CI (99.9%): [0.459, 0.485] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 3)

# Run progress: 70.99% complete, ETA 00:33:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.454 ms/op
# Warmup Iteration   2: 0.419 ms/op
# Warmup Iteration   3: 0.432 ms/op
# Warmup Iteration   4: 0.411 ms/op
# Warmup Iteration   5: 0.408 ms/op
Iteration   1: 0.408 ms/op
Iteration   2: 0.410 ms/op
Iteration   3: 0.411 ms/op
Iteration   4: 0.410 ms/op
Iteration   5: 0.416 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous":
  0.411 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.408, 0.411, 0.416), stdev = 0.003
  CI (99.9%): [0.400, 0.422] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 2)

# Run progress: 71.15% complete, ETA 00:32:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 3)

# Run progress: 71.31% complete, ETA 00:32:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 2)

# Run progress: 71.47% complete, ETA 00:32:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 3)

# Run progress: 71.63% complete, ETA 00:32:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 2)

# Run progress: 71.79% complete, ETA 00:32:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 3)

# Run progress: 71.96% complete, ETA 00:31:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10?³, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 2)

# Run progress: 72.12% complete, ETA 00:31:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 3)

# Run progress: 72.28% complete, ETA 00:31:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 2)

# Run progress: 72.44% complete, ETA 00:31:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 3)

# Run progress: 72.60% complete, ETA 00:31:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 2)

# Run progress: 72.76% complete, ETA 00:30:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 3)

# Run progress: 72.92% complete, ETA 00:30:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 2)

# Run progress: 73.08% complete, ETA 00:30:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.011 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.011, 0.011, 0.011), stdev = 0.001
  CI (99.9%): [0.010, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 3)

# Run progress: 73.24% complete, ETA 00:30:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.012 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.012, 0.012, 0.012), stdev = 0.001
  CI (99.9%): [0.011, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 2)

# Run progress: 73.40% complete, ETA 00:30:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.023 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.023, 0.023, 0.024), stdev = 0.001
  CI (99.9%): [0.022, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 3)

# Run progress: 73.56% complete, ETA 00:30:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.026 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.026, 0.026, 0.026), stdev = 0.001
  CI (99.9%): [0.025, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 2)

# Run progress: 73.72% complete, ETA 00:29:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
# Warmup Iteration   2: 0.051 ms/op
# Warmup Iteration   3: 0.050 ms/op
# Warmup Iteration   4: 0.051 ms/op
# Warmup Iteration   5: 0.051 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.051 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.051 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.051 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.050, 0.051, 0.051), stdev = 0.001
  CI (99.9%): [0.050, 0.052] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 3)

# Run progress: 73.88% complete, ETA 00:29:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.064 ms/op
# Warmup Iteration   2: 0.056 ms/op
# Warmup Iteration   3: 0.056 ms/op
# Warmup Iteration   4: 0.057 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.055 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.055 ms/op
Iteration   5: 0.056 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.056 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.055, 0.056, 0.057), stdev = 0.001
  CI (99.9%): [0.054, 0.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 2)

# Run progress: 74.04% complete, ETA 00:29:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.119 ms/op
# Warmup Iteration   2: 0.106 ms/op
# Warmup Iteration   3: 0.104 ms/op
# Warmup Iteration   4: 0.105 ms/op
# Warmup Iteration   5: 0.105 ms/op
Iteration   1: 0.104 ms/op
Iteration   2: 0.106 ms/op
Iteration   3: 0.105 ms/op
Iteration   4: 0.105 ms/op
Iteration   5: 0.105 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.105 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.104, 0.105, 0.106), stdev = 0.001
  CI (99.9%): [0.103, 0.107] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 3)

# Run progress: 74.20% complete, ETA 00:29:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.126 ms/op
# Warmup Iteration   2: 0.111 ms/op
# Warmup Iteration   3: 0.112 ms/op
# Warmup Iteration   4: 0.114 ms/op
# Warmup Iteration   5: 0.112 ms/op
Iteration   1: 0.112 ms/op
Iteration   2: 0.112 ms/op
Iteration   3: 0.111 ms/op
Iteration   4: 0.112 ms/op
Iteration   5: 0.112 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.112 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.111, 0.112, 0.112), stdev = 0.001
  CI (99.9%): [0.110, 0.114] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 2)

# Run progress: 74.36% complete, ETA 00:29:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.233 ms/op
# Warmup Iteration   2: 0.209 ms/op
# Warmup Iteration   3: 0.208 ms/op
# Warmup Iteration   4: 0.212 ms/op
# Warmup Iteration   5: 0.212 ms/op
Iteration   1: 0.208 ms/op
Iteration   2: 0.208 ms/op
Iteration   3: 0.212 ms/op
Iteration   4: 0.212 ms/op
Iteration   5: 0.211 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.210 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.208, 0.210, 0.212), stdev = 0.002
  CI (99.9%): [0.203, 0.218] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 3)

# Run progress: 74.52% complete, ETA 00:28:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.283 ms/op
# Warmup Iteration   2: 0.229 ms/op
# Warmup Iteration   3: 0.226 ms/op
# Warmup Iteration   4: 0.232 ms/op
# Warmup Iteration   5: 0.227 ms/op
Iteration   1: 0.232 ms/op
Iteration   2: 0.229 ms/op
Iteration   3: 0.228 ms/op
Iteration   4: 0.229 ms/op
Iteration   5: 0.234 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.230 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.228, 0.230, 0.234), stdev = 0.002
  CI (99.9%): [0.221, 0.239] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 2)

# Run progress: 74.68% complete, ETA 00:28:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.455 ms/op
# Warmup Iteration   2: 0.410 ms/op
# Warmup Iteration   3: 0.414 ms/op
# Warmup Iteration   4: 0.412 ms/op
# Warmup Iteration   5: 0.406 ms/op
Iteration   1: 0.431 ms/op
Iteration   2: 0.402 ms/op
Iteration   3: 0.404 ms/op
Iteration   4: 0.408 ms/op
Iteration   5: 0.411 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.411 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (0.402, 0.411, 0.431), stdev = 0.011
  CI (99.9%): [0.367, 0.455] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 3)

# Run progress: 74.84% complete, ETA 00:28:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.517 ms/op
# Warmup Iteration   2: 0.447 ms/op
# Warmup Iteration   3: 0.452 ms/op
# Warmup Iteration   4: 0.449 ms/op
# Warmup Iteration   5: 0.449 ms/op
Iteration   1: 0.452 ms/op
Iteration   2: 0.461 ms/op
Iteration   3: 0.464 ms/op
Iteration   4: 0.464 ms/op
Iteration   5: 0.456 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.460 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.452, 0.460, 0.464), stdev = 0.005
  CI (99.9%): [0.439, 0.480] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 2)

# Run progress: 75.00% complete, ETA 00:28:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.943 ms/op
# Warmup Iteration   2: 0.861 ms/op
# Warmup Iteration   3: 0.854 ms/op
# Warmup Iteration   4: 0.865 ms/op
# Warmup Iteration   5: 0.847 ms/op
Iteration   1: 0.850 ms/op
Iteration   2: 0.839 ms/op
Iteration   3: 0.851 ms/op
Iteration   4: 0.846 ms/op
Iteration   5: 0.840 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.845 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.839, 0.845, 0.851), stdev = 0.006
  CI (99.9%): [0.824, 0.866] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 3)

# Run progress: 75.16% complete, ETA 00:28:12
# Fork: 1 of 1
# Warmup Iteration   1: 1.046 ms/op
# Warmup Iteration   2: 0.904 ms/op
# Warmup Iteration   3: 0.901 ms/op
# Warmup Iteration   4: 0.900 ms/op
# Warmup Iteration   5: 0.887 ms/op
Iteration   1: 0.894 ms/op
Iteration   2: 0.889 ms/op
Iteration   3: 0.890 ms/op
Iteration   4: 0.893 ms/op
Iteration   5: 0.887 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.890 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.887, 0.890, 0.894), stdev = 0.003
  CI (99.9%): [0.879, 0.902] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 2)

# Run progress: 75.32% complete, ETA 00:28:01
# Fork: 1 of 1
# Warmup Iteration   1: 1.903 ms/op
# Warmup Iteration   2: 1.686 ms/op
# Warmup Iteration   3: 1.680 ms/op
# Warmup Iteration   4: 1.709 ms/op
# Warmup Iteration   5: 1.693 ms/op
Iteration   1: 1.677 ms/op
Iteration   2: 1.724 ms/op
Iteration   3: 1.666 ms/op
Iteration   4: 1.676 ms/op
Iteration   5: 1.713 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  1.691 ±(99.9%) 0.099 ms/op [Average]
  (min, avg, max) = (1.666, 1.691, 1.724), stdev = 0.026
  CI (99.9%): [1.592, 1.790] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 3)

# Run progress: 75.48% complete, ETA 00:27:50
# Fork: 1 of 1
# Warmup Iteration   1: 2.045 ms/op
# Warmup Iteration   2: 1.802 ms/op
# Warmup Iteration   3: 1.835 ms/op
# Warmup Iteration   4: 1.815 ms/op
# Warmup Iteration   5: 1.816 ms/op
Iteration   1: 1.810 ms/op
Iteration   2: 1.819 ms/op
Iteration   3: 1.827 ms/op
Iteration   4: 1.816 ms/op
Iteration   5: 1.822 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  1.819 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (1.810, 1.819, 1.827), stdev = 0.006
  CI (99.9%): [1.795, 1.843] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 2)

# Run progress: 75.64% complete, ETA 00:27:39
# Fork: 1 of 1
# Warmup Iteration   1: 3.793 ms/op
# Warmup Iteration   2: 3.340 ms/op
# Warmup Iteration   3: 3.264 ms/op
# Warmup Iteration   4: 3.308 ms/op
# Warmup Iteration   5: 3.296 ms/op
Iteration   1: 3.344 ms/op
Iteration   2: 3.299 ms/op
Iteration   3: 3.287 ms/op
Iteration   4: 3.308 ms/op
Iteration   5: 3.389 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  3.325 ±(99.9%) 0.159 ms/op [Average]
  (min, avg, max) = (3.287, 3.325, 3.389), stdev = 0.041
  CI (99.9%): [3.166, 3.484] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 3)

# Run progress: 75.80% complete, ETA 00:27:28
# Fork: 1 of 1
# Warmup Iteration   1: 4.155 ms/op
# Warmup Iteration   2: 3.684 ms/op
# Warmup Iteration   3: 3.671 ms/op
# Warmup Iteration   4: 3.687 ms/op
# Warmup Iteration   5: 3.662 ms/op
Iteration   1: 3.698 ms/op
Iteration   2: 3.642 ms/op
Iteration   3: 3.655 ms/op
Iteration   4: 3.668 ms/op
Iteration   5: 3.683 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  3.669 ±(99.9%) 0.086 ms/op [Average]
  (min, avg, max) = (3.642, 3.669, 3.698), stdev = 0.022
  CI (99.9%): [3.584, 3.755] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 2)

# Run progress: 75.96% complete, ETA 00:27:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 3)

# Run progress: 76.12% complete, ETA 00:27:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 2)

# Run progress: 76.28% complete, ETA 00:26:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 3)

# Run progress: 76.44% complete, ETA 00:26:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 2)

# Run progress: 76.60% complete, ETA 00:26:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 3)

# Run progress: 76.76% complete, ETA 00:26:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 2)

# Run progress: 76.92% complete, ETA 00:26:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 3)

# Run progress: 77.08% complete, ETA 00:25:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 2)

# Run progress: 77.24% complete, ETA 00:25:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 3)

# Run progress: 77.40% complete, ETA 00:25:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 2)

# Run progress: 77.56% complete, ETA 00:25:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 3)

# Run progress: 77.72% complete, ETA 00:25:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 2)

# Run progress: 77.88% complete, ETA 00:25:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.015 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.015, 0.015, 0.015), stdev = 0.001
  CI (99.9%): [0.015, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 3)

# Run progress: 78.04% complete, ETA 00:24:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.022 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.022, 0.022, 0.022), stdev = 0.001
  CI (99.9%): [0.021, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 2)

# Run progress: 78.21% complete, ETA 00:24:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.063 ms/op
# Warmup Iteration   2: 0.050 ms/op
# Warmup Iteration   3: 0.050 ms/op
# Warmup Iteration   4: 0.051 ms/op
# Warmup Iteration   5: 0.051 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.050 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.050 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.049, 0.050, 0.051), stdev = 0.001
  CI (99.9%): [0.048, 0.053] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 3)

# Run progress: 78.37% complete, ETA 00:24:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.079 ms/op
# Warmup Iteration   2: 0.067 ms/op
# Warmup Iteration   3: 0.064 ms/op
# Warmup Iteration   4: 0.065 ms/op
# Warmup Iteration   5: 0.064 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.063 ms/op
Iteration   5: 0.064 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.064 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.063, 0.064, 0.064), stdev = 0.001
  CI (99.9%): [0.062, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 2)

# Run progress: 78.53% complete, ETA 00:24:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.167 ms/op
# Warmup Iteration   2: 0.131 ms/op
# Warmup Iteration   3: 0.129 ms/op
# Warmup Iteration   4: 0.130 ms/op
# Warmup Iteration   5: 0.131 ms/op
Iteration   1: 0.130 ms/op
Iteration   2: 0.130 ms/op
Iteration   3: 0.131 ms/op
Iteration   4: 0.131 ms/op
Iteration   5: 0.129 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.130 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.129, 0.130, 0.131), stdev = 0.001
  CI (99.9%): [0.127, 0.133] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 3)

# Run progress: 78.69% complete, ETA 00:24:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.185 ms/op
# Warmup Iteration   2: 0.147 ms/op
# Warmup Iteration   3: 0.144 ms/op
# Warmup Iteration   4: 0.144 ms/op
# Warmup Iteration   5: 0.145 ms/op
Iteration   1: 0.144 ms/op
Iteration   2: 0.145 ms/op
Iteration   3: 0.145 ms/op
Iteration   4: 0.147 ms/op
Iteration   5: 0.142 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.145 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.142, 0.145, 0.147), stdev = 0.002
  CI (99.9%): [0.139, 0.151] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 2)

# Run progress: 78.85% complete, ETA 00:23:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.561 ms/op
# Warmup Iteration   2: 0.325 ms/op
# Warmup Iteration   3: 0.320 ms/op
# Warmup Iteration   4: 0.311 ms/op
# Warmup Iteration   5: 0.312 ms/op
Iteration   1: 0.310 ms/op
Iteration   2: 0.306 ms/op
Iteration   3: 0.313 ms/op
Iteration   4: 0.308 ms/op
Iteration   5: 0.307 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.309 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.306, 0.309, 0.313), stdev = 0.003
  CI (99.9%): [0.298, 0.319] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 3)

# Run progress: 79.01% complete, ETA 00:23:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.427 ms/op
# Warmup Iteration   2: 0.325 ms/op
# Warmup Iteration   3: 0.327 ms/op
# Warmup Iteration   4: 0.328 ms/op
# Warmup Iteration   5: 0.328 ms/op
Iteration   1: 0.329 ms/op
Iteration   2: 0.331 ms/op
Iteration   3: 0.329 ms/op
Iteration   4: 0.325 ms/op
Iteration   5: 0.329 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.329 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.325, 0.329, 0.331), stdev = 0.002
  CI (99.9%): [0.320, 0.337] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 2)

# Run progress: 79.17% complete, ETA 00:23:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.919 ms/op
# Warmup Iteration   2: 0.722 ms/op
# Warmup Iteration   3: 0.721 ms/op
# Warmup Iteration   4: 0.714 ms/op
# Warmup Iteration   5: 0.720 ms/op
Iteration   1: 0.710 ms/op
Iteration   2: 0.724 ms/op
Iteration   3: 0.707 ms/op
Iteration   4: 0.710 ms/op
Iteration   5: 0.719 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.714 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.707, 0.714, 0.724), stdev = 0.007
  CI (99.9%): [0.687, 0.741] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 3)

# Run progress: 79.33% complete, ETA 00:23:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.986 ms/op
# Warmup Iteration   2: 0.789 ms/op
# Warmup Iteration   3: 0.779 ms/op
# Warmup Iteration   4: 0.781 ms/op
# Warmup Iteration   5: 0.797 ms/op
Iteration   1: 0.786 ms/op
Iteration   2: 0.787 ms/op
Iteration   3: 0.789 ms/op
Iteration   4: 0.777 ms/op
Iteration   5: 0.773 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.782 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.773, 0.782, 0.789), stdev = 0.007
  CI (99.9%): [0.755, 0.809] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 2)

# Run progress: 79.49% complete, ETA 00:23:14
# Fork: 1 of 1
# Warmup Iteration   1: 2.106 ms/op
# Warmup Iteration   2: 1.568 ms/op
# Warmup Iteration   3: 1.554 ms/op
# Warmup Iteration   4: 1.609 ms/op
# Warmup Iteration   5: 1.583 ms/op
Iteration   1: 1.568 ms/op
Iteration   2: 1.578 ms/op
Iteration   3: 1.578 ms/op
Iteration   4: 1.571 ms/op
Iteration   5: 1.573 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  1.574 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (1.568, 1.574, 1.578), stdev = 0.005
  CI (99.9%): [1.556, 1.591] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 3)

# Run progress: 79.65% complete, ETA 00:23:03
# Fork: 1 of 1
# Warmup Iteration   1: 2.574 ms/op
# Warmup Iteration   2: 1.730 ms/op
# Warmup Iteration   3: 1.751 ms/op
# Warmup Iteration   4: 1.784 ms/op
# Warmup Iteration   5: 1.779 ms/op
Iteration   1: 1.762 ms/op
Iteration   2: 1.846 ms/op
Iteration   3: 1.732 ms/op
Iteration   4: 1.757 ms/op
Iteration   5: 1.756 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  1.771 ±(99.9%) 0.169 ms/op [Average]
  (min, avg, max) = (1.732, 1.771, 1.846), stdev = 0.044
  CI (99.9%): [1.602, 1.940] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 2)

# Run progress: 79.81% complete, ETA 00:22:52
# Fork: 1 of 1
# Warmup Iteration   1: 4.355 ms/op
# Warmup Iteration   2: 3.308 ms/op
# Warmup Iteration   3: 3.316 ms/op
# Warmup Iteration   4: 3.305 ms/op
# Warmup Iteration   5: 3.335 ms/op
Iteration   1: 3.284 ms/op
Iteration   2: 3.381 ms/op
Iteration   3: 3.304 ms/op
Iteration   4: 3.296 ms/op
Iteration   5: 3.246 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  3.302 ±(99.9%) 0.191 ms/op [Average]
  (min, avg, max) = (3.246, 3.302, 3.381), stdev = 0.050
  CI (99.9%): [3.111, 3.493] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 3)

# Run progress: 79.97% complete, ETA 00:22:41
# Fork: 1 of 1
# Warmup Iteration   1: 5.142 ms/op
# Warmup Iteration   2: 3.555 ms/op
# Warmup Iteration   3: 3.575 ms/op
# Warmup Iteration   4: 3.541 ms/op
# Warmup Iteration   5: 3.534 ms/op
Iteration   1: 3.543 ms/op
Iteration   2: 3.552 ms/op
Iteration   3: 3.555 ms/op
Iteration   4: 3.525 ms/op
Iteration   5: 3.540 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  3.543 ±(99.9%) 0.047 ms/op [Average]
  (min, avg, max) = (3.525, 3.543, 3.555), stdev = 0.012
  CI (99.9%): [3.496, 3.590] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 2)

# Run progress: 80.13% complete, ETA 00:22:30
# Fork: 1 of 1
# Warmup Iteration   1: 9.259 ms/op
# Warmup Iteration   2: 6.944 ms/op
# Warmup Iteration   3: 6.867 ms/op
# Warmup Iteration   4: 6.877 ms/op
# Warmup Iteration   5: 7.196 ms/op
Iteration   1: 7.102 ms/op
Iteration   2: 7.063 ms/op
Iteration   3: 7.153 ms/op
Iteration   4: 7.076 ms/op
Iteration   5: 7.153 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  7.109 ±(99.9%) 0.163 ms/op [Average]
  (min, avg, max) = (7.063, 7.109, 7.153), stdev = 0.042
  CI (99.9%): [6.947, 7.272] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 3)

# Run progress: 80.29% complete, ETA 00:22:19
# Fork: 1 of 1
# Warmup Iteration   1: 15.615 ms/op
# Warmup Iteration   2: 8.560 ms/op
# Warmup Iteration   3: 8.140 ms/op
# Warmup Iteration   4: 7.991 ms/op
# Warmup Iteration   5: 7.981 ms/op
Iteration   1: 7.902 ms/op
Iteration   2: 7.842 ms/op
Iteration   3: 7.867 ms/op
Iteration   4: 7.794 ms/op
Iteration   5: 7.821 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  7.845 ±(99.9%) 0.160 ms/op [Average]
  (min, avg, max) = (7.794, 7.845, 7.902), stdev = 0.042
  CI (99.9%): [7.685, 8.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 2)

# Run progress: 80.45% complete, ETA 00:22:08
# Fork: 1 of 1
# Warmup Iteration   1: 26.032 ms/op
# Warmup Iteration   2: 15.541 ms/op
# Warmup Iteration   3: 14.297 ms/op
# Warmup Iteration   4: 14.118 ms/op
# Warmup Iteration   5: 14.332 ms/op
Iteration   1: 14.303 ms/op
Iteration   2: 14.217 ms/op
Iteration   3: 14.118 ms/op
Iteration   4: 14.029 ms/op
Iteration   5: 14.148 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  14.163 ±(99.9%) 0.398 ms/op [Average]
  (min, avg, max) = (14.029, 14.163, 14.303), stdev = 0.103
  CI (99.9%): [13.765, 14.561] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 3)

# Run progress: 80.61% complete, ETA 00:21:57
# Fork: 1 of 1
# Warmup Iteration   1: 31.021 ms/op
# Warmup Iteration   2: 18.167 ms/op
# Warmup Iteration   3: 16.486 ms/op
# Warmup Iteration   4: 16.204 ms/op
# Warmup Iteration   5: 16.331 ms/op
Iteration   1: 16.198 ms/op
Iteration   2: 16.378 ms/op
Iteration   3: 16.421 ms/op
Iteration   4: 16.473 ms/op
Iteration   5: 16.346 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  16.363 ±(99.9%) 0.400 ms/op [Average]
  (min, avg, max) = (16.198, 16.363, 16.473), stdev = 0.104
  CI (99.9%): [15.963, 16.763] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 2)

# Run progress: 80.77% complete, ETA 00:21:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 3)

# Run progress: 80.93% complete, ETA 00:21:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 2)

# Run progress: 81.09% complete, ETA 00:21:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 3)

# Run progress: 81.25% complete, ETA 00:21:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 2)

# Run progress: 81.41% complete, ETA 00:21:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 3)

# Run progress: 81.57% complete, ETA 00:20:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 2)

# Run progress: 81.73% complete, ETA 00:20:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 3)

# Run progress: 81.89% complete, ETA 00:20:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 2)

# Run progress: 82.05% complete, ETA 00:20:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 3)

# Run progress: 82.21% complete, ETA 00:20:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 2)

# Run progress: 82.37% complete, ETA 00:19:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.004 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.004, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 3)

# Run progress: 82.53% complete, ETA 00:19:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.005 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.004, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 2)

# Run progress: 82.69% complete, ETA 00:19:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.015 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.015, 0.015, 0.015), stdev = 0.001
  CI (99.9%): [0.015, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 3)

# Run progress: 82.85% complete, ETA 00:19:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.021 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.021, 0.021, 0.021), stdev = 0.001
  CI (99.9%): [0.020, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 2)

# Run progress: 83.01% complete, ETA 00:19:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.063 ms/op
# Warmup Iteration   2: 0.049 ms/op
# Warmup Iteration   3: 0.049 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.048 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.048 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.048 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.048, 0.048, 0.049), stdev = 0.001
  CI (99.9%): [0.047, 0.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 3)

# Run progress: 83.17% complete, ETA 00:19:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.076 ms/op
# Warmup Iteration   2: 0.061 ms/op
# Warmup Iteration   3: 0.061 ms/op
# Warmup Iteration   4: 0.062 ms/op
# Warmup Iteration   5: 0.061 ms/op
Iteration   1: 0.062 ms/op
Iteration   2: 0.062 ms/op
Iteration   3: 0.061 ms/op
Iteration   4: 0.061 ms/op
Iteration   5: 0.061 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.061 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.061, 0.061, 0.062), stdev = 0.001
  CI (99.9%): [0.060, 0.063] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 2)

# Run progress: 83.33% complete, ETA 00:18:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.163 ms/op
# Warmup Iteration   2: 0.132 ms/op
# Warmup Iteration   3: 0.130 ms/op
# Warmup Iteration   4: 0.131 ms/op
# Warmup Iteration   5: 0.133 ms/op
Iteration   1: 0.134 ms/op
Iteration   2: 0.134 ms/op
Iteration   3: 0.133 ms/op
Iteration   4: 0.134 ms/op
Iteration   5: 0.134 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.134 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.133, 0.134, 0.134), stdev = 0.001
  CI (99.9%): [0.132, 0.135] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 3)

# Run progress: 83.49% complete, ETA 00:18:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.191 ms/op
# Warmup Iteration   2: 0.144 ms/op
# Warmup Iteration   3: 0.145 ms/op
# Warmup Iteration   4: 0.144 ms/op
# Warmup Iteration   5: 0.146 ms/op
Iteration   1: 0.144 ms/op
Iteration   2: 0.146 ms/op
Iteration   3: 0.143 ms/op
Iteration   4: 0.143 ms/op
Iteration   5: 0.144 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.144 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.143, 0.144, 0.146), stdev = 0.001
  CI (99.9%): [0.138, 0.150] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 2)

# Run progress: 83.65% complete, ETA 00:18:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.399 ms/op
# Warmup Iteration   2: 0.310 ms/op
# Warmup Iteration   3: 0.308 ms/op
# Warmup Iteration   4: 0.304 ms/op
# Warmup Iteration   5: 0.305 ms/op
Iteration   1: 0.301 ms/op
Iteration   2: 0.301 ms/op
Iteration   3: 0.309 ms/op
Iteration   4: 0.306 ms/op
Iteration   5: 0.303 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.304 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.301, 0.304, 0.309), stdev = 0.003
  CI (99.9%): [0.291, 0.316] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 3)

# Run progress: 83.81% complete, ETA 00:18:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.428 ms/op
# Warmup Iteration   2: 0.328 ms/op
# Warmup Iteration   3: 0.342 ms/op
# Warmup Iteration   4: 0.333 ms/op
# Warmup Iteration   5: 0.331 ms/op
Iteration   1: 0.330 ms/op
Iteration   2: 0.342 ms/op
Iteration   3: 0.341 ms/op
Iteration   4: 0.343 ms/op
Iteration   5: 0.346 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.340 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.330, 0.340, 0.346), stdev = 0.006
  CI (99.9%): [0.317, 0.364] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 2)

# Run progress: 83.97% complete, ETA 00:18:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.901 ms/op
# Warmup Iteration   2: 0.748 ms/op
# Warmup Iteration   3: 0.764 ms/op
# Warmup Iteration   4: 0.748 ms/op
# Warmup Iteration   5: 0.733 ms/op
Iteration   1: 0.736 ms/op
Iteration   2: 0.735 ms/op
Iteration   3: 0.730 ms/op
Iteration   4: 0.722 ms/op
Iteration   5: 0.718 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.728 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.718, 0.728, 0.736), stdev = 0.008
  CI (99.9%): [0.698, 0.758] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 3)

# Run progress: 84.13% complete, ETA 00:17:56
# Fork: 1 of 1
# Warmup Iteration   1: 1.068 ms/op
# Warmup Iteration   2: 0.770 ms/op
# Warmup Iteration   3: 0.770 ms/op
# Warmup Iteration   4: 0.776 ms/op
# Warmup Iteration   5: 0.782 ms/op
Iteration   1: 0.767 ms/op
Iteration   2: 0.771 ms/op
Iteration   3: 0.772 ms/op
Iteration   4: 0.781 ms/op
Iteration   5: 0.794 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  0.777 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.767, 0.777, 0.794), stdev = 0.011
  CI (99.9%): [0.736, 0.819] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 2)

# Run progress: 84.29% complete, ETA 00:17:45
# Fork: 1 of 1
# Warmup Iteration   1: 2.287 ms/op
# Warmup Iteration   2: 1.746 ms/op
# Warmup Iteration   3: 1.776 ms/op
# Warmup Iteration   4: 1.745 ms/op
# Warmup Iteration   5: 1.781 ms/op
Iteration   1: 1.779 ms/op
Iteration   2: 1.777 ms/op
Iteration   3: 1.781 ms/op
Iteration   4: 1.820 ms/op
Iteration   5: 1.773 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  1.786 ±(99.9%) 0.074 ms/op [Average]
  (min, avg, max) = (1.773, 1.786, 1.820), stdev = 0.019
  CI (99.9%): [1.712, 1.860] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 3)

# Run progress: 84.46% complete, ETA 00:17:34
# Fork: 1 of 1
# Warmup Iteration   1: 3.990 ms/op
# Warmup Iteration   2: 2.265 ms/op
# Warmup Iteration   3: 2.091 ms/op
# Warmup Iteration   4: 2.058 ms/op
# Warmup Iteration   5: 2.041 ms/op
Iteration   1: 2.050 ms/op
Iteration   2: 2.037 ms/op
Iteration   3: 2.041 ms/op
Iteration   4: 2.042 ms/op
Iteration   5: 2.021 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  2.038 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (2.021, 2.038, 2.050), stdev = 0.011
  CI (99.9%): [1.997, 2.079] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 2)

# Run progress: 84.62% complete, ETA 00:17:23
# Fork: 1 of 1
# Warmup Iteration   1: 7.644 ms/op
# Warmup Iteration   2: 4.555 ms/op
# Warmup Iteration   3: 4.403 ms/op
# Warmup Iteration   4: 4.382 ms/op
# Warmup Iteration   5: 4.391 ms/op
Iteration   1: 4.400 ms/op
Iteration   2: 4.389 ms/op
Iteration   3: 4.305 ms/op
Iteration   4: 4.336 ms/op
Iteration   5: 4.352 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  4.356 ±(99.9%) 0.150 ms/op [Average]
  (min, avg, max) = (4.305, 4.356, 4.400), stdev = 0.039
  CI (99.9%): [4.206, 4.506] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 3)

# Run progress: 84.78% complete, ETA 00:17:12
# Fork: 1 of 1
# Warmup Iteration   1: 8.452 ms/op
# Warmup Iteration   2: 5.048 ms/op
# Warmup Iteration   3: 4.903 ms/op
# Warmup Iteration   4: 4.973 ms/op
# Warmup Iteration   5: 4.998 ms/op
Iteration   1: 4.900 ms/op
Iteration   2: 4.922 ms/op
Iteration   3: 4.906 ms/op
Iteration   4: 4.903 ms/op
Iteration   5: 4.938 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  4.914 ±(99.9%) 0.061 ms/op [Average]
  (min, avg, max) = (4.900, 4.914, 4.938), stdev = 0.016
  CI (99.9%): [4.853, 4.975] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 2)

# Run progress: 84.94% complete, ETA 00:17:01
# Fork: 1 of 1
# Warmup Iteration   1: 12.415 ms/op
# Warmup Iteration   2: 9.790 ms/op
# Warmup Iteration   3: 9.911 ms/op
# Warmup Iteration   4: 10.083 ms/op
# Warmup Iteration   5: 9.824 ms/op
Iteration   1: 9.951 ms/op
Iteration   2: 9.736 ms/op
Iteration   3: 9.808 ms/op
Iteration   4: 9.777 ms/op
Iteration   5: 9.936 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  9.842 ±(99.9%) 0.372 ms/op [Average]
  (min, avg, max) = (9.736, 9.842, 9.951), stdev = 0.097
  CI (99.9%): [9.470, 10.213] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 3)

# Run progress: 85.10% complete, ETA 00:16:50
# Fork: 1 of 1
# Warmup Iteration   1: 14.141 ms/op
# Warmup Iteration   2: 10.367 ms/op
# Warmup Iteration   3: 10.469 ms/op
# Warmup Iteration   4: 10.478 ms/op
# Warmup Iteration   5: 10.294 ms/op
Iteration   1: 10.213 ms/op
Iteration   2: 10.333 ms/op
Iteration   3: 10.225 ms/op
Iteration   4: 10.514 ms/op
Iteration   5: 10.330 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  10.323 ±(99.9%) 0.465 ms/op [Average]
  (min, avg, max) = (10.213, 10.323, 10.514), stdev = 0.121
  CI (99.9%): [9.858, 10.788] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 2)

# Run progress: 85.26% complete, ETA 00:16:39
# Fork: 1 of 1
# Warmup Iteration   1: 31.925 ms/op
# Warmup Iteration   2: 22.243 ms/op
# Warmup Iteration   3: 21.993 ms/op
# Warmup Iteration   4: 22.463 ms/op
# Warmup Iteration   5: 22.240 ms/op
Iteration   1: 22.475 ms/op
Iteration   2: 22.238 ms/op
Iteration   3: 22.266 ms/op
Iteration   4: 22.326 ms/op
Iteration   5: 22.215 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  22.304 ±(99.9%) 0.402 ms/op [Average]
  (min, avg, max) = (22.215, 22.304, 22.475), stdev = 0.104
  CI (99.9%): [21.903, 22.706] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 3)

# Run progress: 85.42% complete, ETA 00:16:28
# Fork: 1 of 1
# Warmup Iteration   1: 35.024 ms/op
# Warmup Iteration   2: 22.799 ms/op
# Warmup Iteration   3: 23.734 ms/op
# Warmup Iteration   4: 22.525 ms/op
# Warmup Iteration   5: 22.631 ms/op
Iteration   1: 22.769 ms/op
Iteration   2: 22.688 ms/op
Iteration   3: 22.466 ms/op
Iteration   4: 22.552 ms/op
Iteration   5: 22.581 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous":
  22.611 ±(99.9%) 0.456 ms/op [Average]
  (min, avg, max) = (22.466, 22.611, 22.769), stdev = 0.118
  CI (99.9%): [22.155, 23.067] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 2)

# Run progress: 85.58% complete, ETA 00:16:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1, nValues = 3)

# Run progress: 85.74% complete, ETA 00:16:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 2)

# Run progress: 85.90% complete, ETA 00:15:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2, nValues = 3)

# Run progress: 86.06% complete, ETA 00:15:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 2)

# Run progress: 86.22% complete, ETA 00:15:33
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4, nValues = 3)

# Run progress: 86.38% complete, ETA 00:15:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 2)

# Run progress: 86.54% complete, ETA 00:15:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8, nValues = 3)

# Run progress: 86.70% complete, ETA 00:15:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 2)

# Run progress: 86.86% complete, ETA 00:14:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16, nValues = 3)

# Run progress: 87.02% complete, ETA 00:14:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 2)

# Run progress: 87.18% complete, ETA 00:14:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 32, nValues = 3)

# Run progress: 87.34% complete, ETA 00:14:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 2)

# Run progress: 87.50% complete, ETA 00:14:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.007 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.007), stdev = 0.001
  CI (99.9%): [0.006, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 64, nValues = 3)

# Run progress: 87.66% complete, ETA 00:13:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.008 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.008, 0.008, 0.008), stdev = 0.001
  CI (99.9%): [0.008, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 2)

# Run progress: 87.82% complete, ETA 00:13:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.016 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.016 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.016 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.015, 0.016, 0.016), stdev = 0.001
  CI (99.9%): [0.015, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 128, nValues = 3)

# Run progress: 87.98% complete, ETA 00:13:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.017 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.017, 0.017, 0.017), stdev = 0.001
  CI (99.9%): [0.017, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 2)

# Run progress: 88.14% complete, ETA 00:13:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.033 ms/op
# Warmup Iteration   3: 0.034 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.033 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.034 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.033, 0.034, 0.036), stdev = 0.001
  CI (99.9%): [0.031, 0.038] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 256, nValues = 3)

# Run progress: 88.30% complete, ETA 00:13:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.037 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.039 ms/op
Iteration   2: 0.039 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.038 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.037, 0.038, 0.039), stdev = 0.001
  CI (99.9%): [0.033, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 2)

# Run progress: 88.46% complete, ETA 00:13:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.068 ms/op
# Warmup Iteration   3: 0.066 ms/op
# Warmup Iteration   4: 0.067 ms/op
# Warmup Iteration   5: 0.067 ms/op
Iteration   1: 0.068 ms/op
Iteration   2: 0.067 ms/op
Iteration   3: 0.066 ms/op
Iteration   4: 0.066 ms/op
Iteration   5: 0.070 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.068 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.066, 0.068, 0.070), stdev = 0.002
  CI (99.9%): [0.061, 0.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 512, nValues = 3)

# Run progress: 88.62% complete, ETA 00:12:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.076 ms/op
# Warmup Iteration   2: 0.073 ms/op
# Warmup Iteration   3: 0.071 ms/op
# Warmup Iteration   4: 0.072 ms/op
# Warmup Iteration   5: 0.072 ms/op
Iteration   1: 0.071 ms/op
Iteration   2: 0.073 ms/op
Iteration   3: 0.075 ms/op
Iteration   4: 0.072 ms/op
Iteration   5: 0.073 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.073 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.071, 0.073, 0.075), stdev = 0.001
  CI (99.9%): [0.068, 0.078] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 2)

# Run progress: 88.78% complete, ETA 00:12:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.142 ms/op
# Warmup Iteration   2: 0.140 ms/op
# Warmup Iteration   3: 0.146 ms/op
# Warmup Iteration   4: 0.139 ms/op
# Warmup Iteration   5: 0.134 ms/op
Iteration   1: 0.140 ms/op
Iteration   2: 0.138 ms/op
Iteration   3: 0.140 ms/op
Iteration   4: 0.142 ms/op
Iteration   5: 0.146 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.141 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.138, 0.141, 0.146), stdev = 0.003
  CI (99.9%): [0.129, 0.153] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 1024, nValues = 3)

# Run progress: 88.94% complete, ETA 00:12:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.157 ms/op
# Warmup Iteration   2: 0.150 ms/op
# Warmup Iteration   3: 0.151 ms/op
# Warmup Iteration   4: 0.151 ms/op
# Warmup Iteration   5: 0.153 ms/op
Iteration   1: 0.154 ms/op
Iteration   2: 0.152 ms/op
Iteration   3: 0.151 ms/op
Iteration   4: 0.150 ms/op
Iteration   5: 0.149 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.151 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.149, 0.151, 0.154), stdev = 0.002
  CI (99.9%): [0.144, 0.159] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 2)

# Run progress: 89.10% complete, ETA 00:12:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.293 ms/op
# Warmup Iteration   2: 0.282 ms/op
# Warmup Iteration   3: 0.284 ms/op
# Warmup Iteration   4: 0.282 ms/op
# Warmup Iteration   5: 0.280 ms/op
Iteration   1: 0.284 ms/op
Iteration   2: 0.280 ms/op
Iteration   3: 0.275 ms/op
Iteration   4: 0.270 ms/op
Iteration   5: 0.278 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.277 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.270, 0.277, 0.284), stdev = 0.005
  CI (99.9%): [0.257, 0.298] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 2048, nValues = 3)

# Run progress: 89.26% complete, ETA 00:12:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.299 ms/op
# Warmup Iteration   2: 0.289 ms/op
# Warmup Iteration   3: 0.293 ms/op
# Warmup Iteration   4: 0.282 ms/op
# Warmup Iteration   5: 0.282 ms/op
Iteration   1: 0.278 ms/op
Iteration   2: 0.285 ms/op
Iteration   3: 0.277 ms/op
Iteration   4: 0.291 ms/op
Iteration   5: 0.281 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.282 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.277, 0.282, 0.291), stdev = 0.006
  CI (99.9%): [0.260, 0.304] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 2)

# Run progress: 89.42% complete, ETA 00:11:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.550 ms/op
# Warmup Iteration   2: 0.534 ms/op
# Warmup Iteration   3: 0.546 ms/op
# Warmup Iteration   4: 0.538 ms/op
# Warmup Iteration   5: 0.545 ms/op
Iteration   1: 0.549 ms/op
Iteration   2: 0.539 ms/op
Iteration   3: 0.540 ms/op
Iteration   4: 0.571 ms/op
Iteration   5: 0.559 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.552 ±(99.9%) 0.052 ms/op [Average]
  (min, avg, max) = (0.539, 0.552, 0.571), stdev = 0.014
  CI (99.9%): [0.500, 0.604] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 4096, nValues = 3)

# Run progress: 89.58% complete, ETA 00:11:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.650 ms/op
# Warmup Iteration   2: 0.611 ms/op
# Warmup Iteration   3: 0.596 ms/op
# Warmup Iteration   4: 0.597 ms/op
# Warmup Iteration   5: 0.603 ms/op
Iteration   1: 0.675 ms/op
Iteration   2: 0.608 ms/op
Iteration   3: 0.601 ms/op
Iteration   4: 0.596 ms/op
Iteration   5: 0.598 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.616 ±(99.9%) 0.128 ms/op [Average]
  (min, avg, max) = (0.596, 0.616, 0.675), stdev = 0.033
  CI (99.9%): [0.488, 0.744] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 2)

# Run progress: 89.74% complete, ETA 00:11:33
# Fork: 1 of 1
# Warmup Iteration   1: 1.141 ms/op
# Warmup Iteration   2: 1.144 ms/op
# Warmup Iteration   3: 1.195 ms/op
# Warmup Iteration   4: 1.155 ms/op
# Warmup Iteration   5: 1.119 ms/op
Iteration   1: 1.116 ms/op
Iteration   2: 1.125 ms/op
Iteration   3: 1.125 ms/op
Iteration   4: 1.144 ms/op
Iteration   5: 1.121 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  1.126 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (1.116, 1.126, 1.144), stdev = 0.011
  CI (99.9%): [1.085, 1.167] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 8192, nValues = 3)

# Run progress: 89.90% complete, ETA 00:11:23
# Fork: 1 of 1
# Warmup Iteration   1: 1.287 ms/op
# Warmup Iteration   2: 1.256 ms/op
# Warmup Iteration   3: 1.272 ms/op
# Warmup Iteration   4: 1.255 ms/op
# Warmup Iteration   5: 1.270 ms/op
Iteration   1: 1.245 ms/op
Iteration   2: 1.233 ms/op
Iteration   3: 1.254 ms/op
Iteration   4: 1.247 ms/op
Iteration   5: 1.249 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  1.245 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (1.233, 1.245, 1.254), stdev = 0.008
  CI (99.9%): [1.216, 1.275] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 2)

# Run progress: 90.06% complete, ETA 00:11:12
# Fork: 1 of 1
# Warmup Iteration   1: 2.305 ms/op
# Warmup Iteration   2: 2.249 ms/op
# Warmup Iteration   3: 2.217 ms/op
# Warmup Iteration   4: 2.227 ms/op
# Warmup Iteration   5: 2.239 ms/op
Iteration   1: 2.270 ms/op
Iteration   2: 2.297 ms/op
Iteration   3: 2.356 ms/op
Iteration   4: 2.367 ms/op
Iteration   5: 2.198 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  2.298 ±(99.9%) 0.265 ms/op [Average]
  (min, avg, max) = (2.198, 2.298, 2.367), stdev = 0.069
  CI (99.9%): [2.033, 2.562] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 32, nPut = 16384, nValues = 3)

# Run progress: 90.22% complete, ETA 00:11:01
# Fork: 1 of 1
# Warmup Iteration   1: 2.493 ms/op
# Warmup Iteration   2: 2.403 ms/op
# Warmup Iteration   3: 2.425 ms/op
# Warmup Iteration   4: 2.388 ms/op
# Warmup Iteration   5: 2.426 ms/op
Iteration   1: 2.385 ms/op
Iteration   2: 2.390 ms/op
Iteration   3: 2.554 ms/op
Iteration   4: 2.462 ms/op
Iteration   5: 2.461 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  2.451 ±(99.9%) 0.265 ms/op [Average]
  (min, avg, max) = (2.385, 2.451, 2.554), stdev = 0.069
  CI (99.9%): [2.185, 2.716] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 2)

# Run progress: 90.38% complete, ETA 00:10:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1, nValues = 3)

# Run progress: 90.54% complete, ETA 00:10:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 2)

# Run progress: 90.71% complete, ETA 00:10:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2, nValues = 3)

# Run progress: 90.87% complete, ETA 00:10:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 2)

# Run progress: 91.03% complete, ETA 00:10:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4, nValues = 3)

# Run progress: 91.19% complete, ETA 00:09:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 2)

# Run progress: 91.35% complete, ETA 00:09:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8, nValues = 3)

# Run progress: 91.51% complete, ETA 00:09:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 2)

# Run progress: 91.67% complete, ETA 00:09:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16, nValues = 3)

# Run progress: 91.83% complete, ETA 00:09:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 2)

# Run progress: 91.99% complete, ETA 00:09:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 32, nValues = 3)

# Run progress: 92.15% complete, ETA 00:08:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 2)

# Run progress: 92.31% complete, ETA 00:08:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.009 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.009, 0.009, 0.009), stdev = 0.001
  CI (99.9%): [0.009, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 64, nValues = 3)

# Run progress: 92.47% complete, ETA 00:08:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.014 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.014, 0.014, 0.014), stdev = 0.001
  CI (99.9%): [0.014, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 2)

# Run progress: 92.63% complete, ETA 00:08:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.028 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.027, 0.028, 0.028), stdev = 0.001
  CI (99.9%): [0.027, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 128, nValues = 3)

# Run progress: 92.79% complete, ETA 00:08:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.038 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.034 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.034 ms/op
Iteration   1: 0.034 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.034 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.034, 0.034, 0.034), stdev = 0.001
  CI (99.9%): [0.033, 0.035] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 2)

# Run progress: 92.95% complete, ETA 00:07:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.065 ms/op
# Warmup Iteration   3: 0.066 ms/op
# Warmup Iteration   4: 0.064 ms/op
# Warmup Iteration   5: 0.065 ms/op
Iteration   1: 0.065 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.063 ms/op
Iteration   4: 0.062 ms/op
Iteration   5: 0.062 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.063 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.062, 0.063, 0.065), stdev = 0.001
  CI (99.9%): [0.058, 0.069] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 256, nValues = 3)

# Run progress: 93.11% complete, ETA 00:07:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.074 ms/op
# Warmup Iteration   2: 0.068 ms/op
# Warmup Iteration   3: 0.068 ms/op
# Warmup Iteration   4: 0.068 ms/op
# Warmup Iteration   5: 0.067 ms/op
Iteration   1: 0.067 ms/op
Iteration   2: 0.067 ms/op
Iteration   3: 0.068 ms/op
Iteration   4: 0.069 ms/op
Iteration   5: 0.068 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.068 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.067, 0.068, 0.069), stdev = 0.001
  CI (99.9%): [0.065, 0.070] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 2)

# Run progress: 93.27% complete, ETA 00:07:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.133 ms/op
# Warmup Iteration   2: 0.125 ms/op
# Warmup Iteration   3: 0.124 ms/op
# Warmup Iteration   4: 0.124 ms/op
# Warmup Iteration   5: 0.124 ms/op
Iteration   1: 0.124 ms/op
Iteration   2: 0.123 ms/op
Iteration   3: 0.122 ms/op
Iteration   4: 0.123 ms/op
Iteration   5: 0.125 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.123 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.122, 0.123, 0.125), stdev = 0.001
  CI (99.9%): [0.120, 0.127] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 512, nValues = 3)

# Run progress: 93.43% complete, ETA 00:07:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.156 ms/op
# Warmup Iteration   2: 0.148 ms/op
# Warmup Iteration   3: 0.143 ms/op
# Warmup Iteration   4: 0.143 ms/op
# Warmup Iteration   5: 0.143 ms/op
Iteration   1: 0.143 ms/op
Iteration   2: 0.145 ms/op
Iteration   3: 0.146 ms/op
Iteration   4: 0.144 ms/op
Iteration   5: 0.143 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.144 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.143, 0.144, 0.146), stdev = 0.001
  CI (99.9%): [0.140, 0.149] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 2)

# Run progress: 93.59% complete, ETA 00:07:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.284 ms/op
# Warmup Iteration   2: 0.267 ms/op
# Warmup Iteration   3: 0.263 ms/op
# Warmup Iteration   4: 0.264 ms/op
# Warmup Iteration   5: 0.274 ms/op
Iteration   1: 0.261 ms/op
Iteration   2: 0.262 ms/op
Iteration   3: 0.262 ms/op
Iteration   4: 0.264 ms/op
Iteration   5: 0.261 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.262 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.261, 0.262, 0.264), stdev = 0.001
  CI (99.9%): [0.259, 0.266] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 1024, nValues = 3)

# Run progress: 93.75% complete, ETA 00:07:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.350 ms/op
# Warmup Iteration   2: 0.329 ms/op
# Warmup Iteration   3: 0.326 ms/op
# Warmup Iteration   4: 0.324 ms/op
# Warmup Iteration   5: 0.322 ms/op
Iteration   1: 0.321 ms/op
Iteration   2: 0.323 ms/op
Iteration   3: 0.320 ms/op
Iteration   4: 0.321 ms/op
Iteration   5: 0.324 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.322 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.320, 0.322, 0.324), stdev = 0.002
  CI (99.9%): [0.315, 0.329] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 2)

# Run progress: 93.91% complete, ETA 00:06:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.831 ms/op
# Warmup Iteration   2: 0.800 ms/op
# Warmup Iteration   3: 0.799 ms/op
# Warmup Iteration   4: 0.792 ms/op
# Warmup Iteration   5: 0.779 ms/op
Iteration   1: 0.784 ms/op
Iteration   2: 0.793 ms/op
Iteration   3: 0.792 ms/op
Iteration   4: 0.834 ms/op
Iteration   5: 0.792 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.799 ±(99.9%) 0.077 ms/op [Average]
  (min, avg, max) = (0.784, 0.799, 0.834), stdev = 0.020
  CI (99.9%): [0.722, 0.876] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 2048, nValues = 3)

# Run progress: 94.07% complete, ETA 00:06:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.757 ms/op
# Warmup Iteration   2: 0.711 ms/op
# Warmup Iteration   3: 0.722 ms/op
# Warmup Iteration   4: 0.685 ms/op
# Warmup Iteration   5: 0.694 ms/op
Iteration   1: 0.691 ms/op
Iteration   2: 0.693 ms/op
Iteration   3: 0.685 ms/op
Iteration   4: 0.694 ms/op
Iteration   5: 0.689 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.690 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.685, 0.690, 0.694), stdev = 0.004
  CI (99.9%): [0.676, 0.705] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 2)

# Run progress: 94.23% complete, ETA 00:06:29
# Fork: 1 of 1
# Warmup Iteration   1: 1.473 ms/op
# Warmup Iteration   2: 1.382 ms/op
# Warmup Iteration   3: 1.376 ms/op
# Warmup Iteration   4: 1.372 ms/op
# Warmup Iteration   5: 1.367 ms/op
Iteration   1: 1.360 ms/op
Iteration   2: 1.399 ms/op
Iteration   3: 1.433 ms/op
Iteration   4: 1.399 ms/op
Iteration   5: 1.420 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  1.402 ±(99.9%) 0.107 ms/op [Average]
  (min, avg, max) = (1.360, 1.402, 1.433), stdev = 0.028
  CI (99.9%): [1.295, 1.509] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 4096, nValues = 3)

# Run progress: 94.39% complete, ETA 00:06:18
# Fork: 1 of 1
# Warmup Iteration   1: 1.661 ms/op
# Warmup Iteration   2: 1.543 ms/op
# Warmup Iteration   3: 1.557 ms/op
# Warmup Iteration   4: 1.533 ms/op
# Warmup Iteration   5: 1.554 ms/op
Iteration   1: 1.553 ms/op
Iteration   2: 1.534 ms/op
Iteration   3: 1.553 ms/op
Iteration   4: 1.515 ms/op
Iteration   5: 1.533 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  1.537 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (1.515, 1.537, 1.553), stdev = 0.016
  CI (99.9%): [1.477, 1.598] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 2)

# Run progress: 94.55% complete, ETA 00:06:08
# Fork: 1 of 1
# Warmup Iteration   1: 3.185 ms/op
# Warmup Iteration   2: 2.939 ms/op
# Warmup Iteration   3: 2.955 ms/op
# Warmup Iteration   4: 2.978 ms/op
# Warmup Iteration   5: 2.981 ms/op
Iteration   1: 2.941 ms/op
Iteration   2: 2.933 ms/op
Iteration   3: 2.966 ms/op
Iteration   4: 2.988 ms/op
Iteration   5: 2.941 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  2.954 ±(99.9%) 0.087 ms/op [Average]
  (min, avg, max) = (2.933, 2.954, 2.988), stdev = 0.023
  CI (99.9%): [2.867, 3.041] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 8192, nValues = 3)

# Run progress: 94.71% complete, ETA 00:05:57
# Fork: 1 of 1
# Warmup Iteration   1: 3.429 ms/op
# Warmup Iteration   2: 3.174 ms/op
# Warmup Iteration   3: 3.152 ms/op
# Warmup Iteration   4: 3.168 ms/op
# Warmup Iteration   5: 3.161 ms/op
Iteration   1: 3.165 ms/op
Iteration   2: 3.108 ms/op
Iteration   3: 3.128 ms/op
Iteration   4: 3.109 ms/op
Iteration   5: 3.163 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  3.134 ±(99.9%) 0.107 ms/op [Average]
  (min, avg, max) = (3.108, 3.134, 3.165), stdev = 0.028
  CI (99.9%): [3.027, 3.241] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 2)

# Run progress: 94.87% complete, ETA 00:05:46
# Fork: 1 of 1
# Warmup Iteration   1: 7.756 ms/op
# Warmup Iteration   2: 7.540 ms/op
# Warmup Iteration   3: 7.634 ms/op
# Warmup Iteration   4: 7.671 ms/op
# Warmup Iteration   5: 7.660 ms/op
Iteration   1: 7.591 ms/op
Iteration   2: 7.591 ms/op
Iteration   3: 7.621 ms/op
Iteration   4: 7.554 ms/op
Iteration   5: 7.609 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  7.593 ±(99.9%) 0.097 ms/op [Average]
  (min, avg, max) = (7.554, 7.593, 7.621), stdev = 0.025
  CI (99.9%): [7.496, 7.691] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 1000, nPut = 16384, nValues = 3)

# Run progress: 95.03% complete, ETA 00:05:35
# Fork: 1 of 1
# Warmup Iteration   1: 9.180 ms/op
# Warmup Iteration   2: 8.825 ms/op
# Warmup Iteration   3: 8.736 ms/op
# Warmup Iteration   4: 8.954 ms/op
# Warmup Iteration   5: 8.948 ms/op
Iteration   1: 8.993 ms/op
Iteration   2: 8.785 ms/op
Iteration   3: 8.805 ms/op
Iteration   4: 8.897 ms/op
Iteration   5: 8.901 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  8.876 ±(99.9%) 0.322 ms/op [Average]
  (min, avg, max) = (8.785, 8.876, 8.993), stdev = 0.084
  CI (99.9%): [8.554, 9.198] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 2)

# Run progress: 95.19% complete, ETA 00:05:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1, nValues = 3)

# Run progress: 95.35% complete, ETA 00:05:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 2)

# Run progress: 95.51% complete, ETA 00:05:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2, nValues = 3)

# Run progress: 95.67% complete, ETA 00:04:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 2)

# Run progress: 95.83% complete, ETA 00:04:41
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4, nValues = 3)

# Run progress: 95.99% complete, ETA 00:04:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 2)

# Run progress: 96.15% complete, ETA 00:04:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8, nValues = 3)

# Run progress: 96.31% complete, ETA 00:04:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 2)

# Run progress: 96.47% complete, ETA 00:03:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16, nValues = 3)

# Run progress: 96.63% complete, ETA 00:03:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 2)

# Run progress: 96.79% complete, ETA 00:03:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 32, nValues = 3)

# Run progress: 96.96% complete, ETA 00:03:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.003 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 2)

# Run progress: 97.12% complete, ETA 00:03:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.010 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.009, 0.010, 0.010), stdev = 0.001
  CI (99.9%): [0.009, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 64, nValues = 3)

# Run progress: 97.28% complete, ETA 00:03:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.014 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.014, 0.014, 0.014), stdev = 0.001
  CI (99.9%): [0.014, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 2)

# Run progress: 97.44% complete, ETA 00:02:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.027 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.026, 0.027, 0.028), stdev = 0.001
  CI (99.9%): [0.025, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 128, nValues = 3)

# Run progress: 97.60% complete, ETA 00:02:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.033 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.035 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.033 ms/op
Iteration   3: 0.033 ms/op
Iteration   4: 0.032 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.033 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.032, 0.033, 0.035), stdev = 0.001
  CI (99.9%): [0.029, 0.038] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 2)

# Run progress: 97.76% complete, ETA 00:02:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ms/op
# Warmup Iteration   2: 0.064 ms/op
# Warmup Iteration   3: 0.062 ms/op
# Warmup Iteration   4: 0.066 ms/op
# Warmup Iteration   5: 0.067 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.067 ms/op
Iteration   3: 0.067 ms/op
Iteration   4: 0.065 ms/op
Iteration   5: 0.066 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.067 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.065, 0.067, 0.070), stdev = 0.002
  CI (99.9%): [0.060, 0.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 256, nValues = 3)

# Run progress: 97.92% complete, ETA 00:02:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.076 ms/op
# Warmup Iteration   2: 0.071 ms/op
# Warmup Iteration   3: 0.069 ms/op
# Warmup Iteration   4: 0.069 ms/op
# Warmup Iteration   5: 0.069 ms/op
Iteration   1: 0.068 ms/op
Iteration   2: 0.069 ms/op
Iteration   3: 0.069 ms/op
Iteration   4: 0.070 ms/op
Iteration   5: 0.070 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.069 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.068, 0.069, 0.070), stdev = 0.001
  CI (99.9%): [0.067, 0.072] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 2)

# Run progress: 98.08% complete, ETA 00:02:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.140 ms/op
# Warmup Iteration   2: 0.132 ms/op
# Warmup Iteration   3: 0.129 ms/op
# Warmup Iteration   4: 0.130 ms/op
# Warmup Iteration   5: 0.130 ms/op
Iteration   1: 0.128 ms/op
Iteration   2: 0.129 ms/op
Iteration   3: 0.129 ms/op
Iteration   4: 0.128 ms/op
Iteration   5: 0.126 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.128 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.126, 0.128, 0.129), stdev = 0.001
  CI (99.9%): [0.124, 0.132] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 512, nValues = 3)

# Run progress: 98.24% complete, ETA 00:01:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.153 ms/op
# Warmup Iteration   2: 0.145 ms/op
# Warmup Iteration   3: 0.145 ms/op
# Warmup Iteration   4: 0.145 ms/op
# Warmup Iteration   5: 0.145 ms/op
Iteration   1: 0.144 ms/op
Iteration   2: 0.145 ms/op
Iteration   3: 0.144 ms/op
Iteration   4: 0.143 ms/op
Iteration   5: 0.140 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.143 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.140, 0.143, 0.145), stdev = 0.002
  CI (99.9%): [0.136, 0.150] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 2)

# Run progress: 98.40% complete, ETA 00:01:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.286 ms/op
# Warmup Iteration   2: 0.269 ms/op
# Warmup Iteration   3: 0.270 ms/op
# Warmup Iteration   4: 0.266 ms/op
# Warmup Iteration   5: 0.265 ms/op
Iteration   1: 0.270 ms/op
Iteration   2: 0.277 ms/op
Iteration   3: 0.285 ms/op
Iteration   4: 0.281 ms/op
Iteration   5: 0.276 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.278 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.270, 0.278, 0.285), stdev = 0.006
  CI (99.9%): [0.256, 0.300] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 1024, nValues = 3)

# Run progress: 98.56% complete, ETA 00:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.379 ms/op
# Warmup Iteration   2: 0.322 ms/op
# Warmup Iteration   3: 0.321 ms/op
# Warmup Iteration   4: 0.341 ms/op
# Warmup Iteration   5: 0.296 ms/op
Iteration   1: 0.297 ms/op
Iteration   2: 0.306 ms/op
Iteration   3: 0.298 ms/op
Iteration   4: 0.298 ms/op
Iteration   5: 0.296 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.299 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.296, 0.299, 0.306), stdev = 0.004
  CI (99.9%): [0.284, 0.314] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 2)

# Run progress: 98.72% complete, ETA 00:01:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.802 ms/op
# Warmup Iteration   2: 0.748 ms/op
# Warmup Iteration   3: 0.734 ms/op
# Warmup Iteration   4: 0.724 ms/op
# Warmup Iteration   5: 0.765 ms/op
Iteration   1: 0.731 ms/op
Iteration   2: 0.723 ms/op
Iteration   3: 0.695 ms/op
Iteration   4: 0.695 ms/op
Iteration   5: 0.714 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.711 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.695, 0.711, 0.731), stdev = 0.016
  CI (99.9%): [0.649, 0.774] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 2048, nValues = 3)

# Run progress: 98.88% complete, ETA 00:01:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.822 ms/op
# Warmup Iteration   2: 0.751 ms/op
# Warmup Iteration   3: 0.732 ms/op
# Warmup Iteration   4: 0.715 ms/op
# Warmup Iteration   5: 0.723 ms/op
Iteration   1: 0.747 ms/op
Iteration   2: 0.794 ms/op
Iteration   3: 0.746 ms/op
Iteration   4: 0.736 ms/op
Iteration   5: 0.745 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  0.754 ±(99.9%) 0.089 ms/op [Average]
  (min, avg, max) = (0.736, 0.754, 0.794), stdev = 0.023
  CI (99.9%): [0.665, 0.843] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 2)

# Run progress: 99.04% complete, ETA 00:01:04
# Fork: 1 of 1
# Warmup Iteration   1: 1.629 ms/op
# Warmup Iteration   2: 1.468 ms/op
# Warmup Iteration   3: 1.482 ms/op
# Warmup Iteration   4: 1.477 ms/op
# Warmup Iteration   5: 1.490 ms/op
Iteration   1: 1.502 ms/op
Iteration   2: 1.487 ms/op
Iteration   3: 1.494 ms/op
Iteration   4: 1.505 ms/op
Iteration   5: 1.482 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  1.494 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (1.482, 1.494, 1.505), stdev = 0.009
  CI (99.9%): [1.458, 1.530] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 4096, nValues = 3)

# Run progress: 99.20% complete, ETA 00:00:54
# Fork: 1 of 1
# Warmup Iteration   1: 1.920 ms/op
# Warmup Iteration   2: 1.740 ms/op
# Warmup Iteration   3: 1.724 ms/op
# Warmup Iteration   4: 1.745 ms/op
# Warmup Iteration   5: 1.726 ms/op
Iteration   1: 1.768 ms/op
Iteration   2: 1.743 ms/op
Iteration   3: 1.749 ms/op
Iteration   4: 1.721 ms/op
Iteration   5: 1.726 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  1.741 ±(99.9%) 0.074 ms/op [Average]
  (min, avg, max) = (1.721, 1.741, 1.768), stdev = 0.019
  CI (99.9%): [1.667, 1.816] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 2)

# Run progress: 99.36% complete, ETA 00:00:43
# Fork: 1 of 1
# Warmup Iteration   1: 3.956 ms/op
# Warmup Iteration   2: 3.725 ms/op
# Warmup Iteration   3: 3.597 ms/op
# Warmup Iteration   4: 3.639 ms/op
# Warmup Iteration   5: 3.653 ms/op
Iteration   1: 3.606 ms/op
Iteration   2: 3.700 ms/op
Iteration   3: 3.714 ms/op
Iteration   4: 3.666 ms/op
Iteration   5: 3.661 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  3.669 ±(99.9%) 0.162 ms/op [Average]
  (min, avg, max) = (3.606, 3.669, 3.714), stdev = 0.042
  CI (99.9%): [3.508, 3.831] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 8192, nValues = 3)

# Run progress: 99.52% complete, ETA 00:00:32
# Fork: 1 of 1
# Warmup Iteration   1: 3.684 ms/op
# Warmup Iteration   2: 3.453 ms/op
# Warmup Iteration   3: 3.320 ms/op
# Warmup Iteration   4: 3.311 ms/op
# Warmup Iteration   5: 3.305 ms/op
Iteration   1: 3.306 ms/op
Iteration   2: 3.341 ms/op
Iteration   3: 3.351 ms/op
Iteration   4: 3.374 ms/op
Iteration   5: 3.374 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  3.349 ±(99.9%) 0.109 ms/op [Average]
  (min, avg, max) = (3.306, 3.349, 3.374), stdev = 0.028
  CI (99.9%): [3.240, 3.458] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 2)

# Run progress: 99.68% complete, ETA 00:00:21
# Fork: 1 of 1
# Warmup Iteration   1: 7.291 ms/op
# Warmup Iteration   2: 6.888 ms/op
# Warmup Iteration   3: 6.675 ms/op
# Warmup Iteration   4: 6.792 ms/op
# Warmup Iteration   5: 6.716 ms/op
Iteration   1: 6.662 ms/op
Iteration   2: 6.677 ms/op
Iteration   3: 6.633 ms/op
Iteration   4: 6.678 ms/op
Iteration   5: 6.714 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  6.673 ±(99.9%) 0.112 ms/op [Average]
  (min, avg, max) = (6.633, 6.673, 6.714), stdev = 0.029
  CI (99.9%): [6.561, 6.785] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous
# Parameters: (nKeys = 100000, nPut = 16384, nValues = 3)

# Run progress: 99.84% complete, ETA 00:00:10
# Fork: 1 of 1
# Warmup Iteration   1: 8.026 ms/op
# Warmup Iteration   2: 7.696 ms/op
# Warmup Iteration   3: 7.524 ms/op
# Warmup Iteration   4: 7.502 ms/op
# Warmup Iteration   5: 7.608 ms/op
Iteration   1: 7.487 ms/op
Iteration   2: 7.396 ms/op
Iteration   3: 7.319 ms/op
Iteration   4: 7.501 ms/op
Iteration   5: 7.442 ms/op


Result "tools.refinery.store.map.benchmarks.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous":
  7.429 ±(99.9%) 0.285 ms/op [Average]
  (min, avg, max) = (7.319, 7.429, 7.501), stdev = 0.074
  CI (99.9%): [7.144, 7.714] (assumes normal distribution)


# Run complete. Total time: 01:52:21

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     (nGet)  (nKeys)  (nPut)  (nValues)  Mode  Cnt     Score      Error  Units
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16       32     N/A          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16       32     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16     1000     N/A          2  avgt    5     0.043 ±    0.039  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16     1000     N/A          3  avgt    5     0.044 ±    0.041  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16   100000     N/A          2  avgt    5    11.508 ±   11.139  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       16   100000     N/A          3  avgt    5    11.613 ±    9.403  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32       32     N/A          2  avgt    5     0.003 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32       32     N/A          3  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32     1000     N/A          2  avgt    5     0.092 ±    0.090  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32     1000     N/A          3  avgt    5     0.119 ±    0.172  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32   100000     N/A          2  avgt    5    34.431 ±   28.010  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       32   100000     N/A          3  avgt    5    25.658 ±   14.256  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64       32     N/A          2  avgt    5     0.005 ±    0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64       32     N/A          3  avgt    5     0.005 ±    0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64     1000     N/A          2  avgt    5     0.143 ±    0.130  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64     1000     N/A          3  avgt    5     0.148 ±    0.092  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64   100000     N/A          2  avgt    5    41.414 ±   34.188  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous       64   100000     N/A          3  avgt    5    42.503 ±   37.110  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128       32     N/A          2  avgt    5     0.009 ±    0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128       32     N/A          3  avgt    5     0.009 ±    0.012  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128     1000     N/A          2  avgt    5     0.277 ±    0.302  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128     1000     N/A          3  avgt    5     0.279 ±    0.208  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128   100000     N/A          2  avgt    5    97.547 ±  129.171  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      128   100000     N/A          3  avgt    5   100.213 ±   22.146  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256       32     N/A          2  avgt    5     0.019 ±    0.019  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256       32     N/A          3  avgt    5     0.018 ±    0.018  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256     1000     N/A          2  avgt    5     0.508 ±    0.419  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256     1000     N/A          3  avgt    5     0.560 ±    0.489  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256   100000     N/A          2  avgt    5   169.867 ±  144.244  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      256   100000     N/A          3  avgt    5   187.795 ±  156.581  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512       32     N/A          2  avgt    5     0.044 ±    0.073  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512       32     N/A          3  avgt    5     0.046 ±    0.069  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512     1000     N/A          2  avgt    5     1.282 ±    1.390  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512     1000     N/A          3  avgt    5     1.429 ±    0.997  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512   100000     N/A          2  avgt    5   362.449 ±  227.575  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous      512   100000     N/A          3  avgt    5   308.683 ±  137.616  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024       32     N/A          2  avgt    5     0.075 ±    0.091  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024       32     N/A          3  avgt    5     0.076 ±    0.090  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024     1000     N/A          2  avgt    5     2.270 ±    2.066  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024     1000     N/A          3  avgt    5     2.130 ±    1.452  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024   100000     N/A          2  avgt    5   629.005 ±  308.034  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     1024   100000     N/A          3  avgt    5   775.622 ±  306.846  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048       32     N/A          2  avgt    5     0.150 ±    0.132  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048       32     N/A          3  avgt    5     0.162 ±    0.144  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048     1000     N/A          2  avgt    5     4.423 ±    4.697  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048     1000     N/A          3  avgt    5     5.370 ±    6.011  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048   100000     N/A          2  avgt    5  1778.184 ±  175.717  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     2048   100000     N/A          3  avgt    5  2031.169 ± 1780.457  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096       32     N/A          2  avgt    5     0.313 ±    0.315  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096       32     N/A          3  avgt    5     0.314 ±    0.301  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096     1000     N/A          2  avgt    5     8.761 ±    8.516  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096     1000     N/A          3  avgt    5     9.802 ±    8.721  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096   100000     N/A          2  avgt    5  3088.017 ±  690.877  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     4096   100000     N/A          3  avgt    5  2935.940 ±  372.422  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192       32     N/A          2  avgt    5     0.613 ±    0.733  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192       32     N/A          3  avgt    5     0.625 ±    0.572  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192     1000     N/A          2  avgt    5    17.092 ±   12.946  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous     8192     1000     N/A          3  avgt    5    17.250 ±   13.920  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384       32     N/A          2  avgt    5     1.303 ±    0.972  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384       32     N/A          3  avgt    5     1.243 ±    1.062  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384     1000     N/A          2  avgt    5    35.229 ±   21.950  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetAndCommitBenchmarkContinuous    16384     1000     N/A          3  avgt    5    34.787 ±   26.220  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16       32     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16       32     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16     1000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16     1000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16   100000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                16   100000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32       32     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32       32     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32     1000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32     1000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32   100000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                32   100000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64       32     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64       32     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64     1000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64     1000     N/A          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64   100000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous                64   100000     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128       32     N/A          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128       32     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128     1000     N/A          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128     1000     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128   100000     N/A          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               128   100000     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256       32     N/A          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256       32     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256     1000     N/A          2  avgt    5     0.001 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256     1000     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256   100000     N/A          2  avgt    5     0.001 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               256   100000     N/A          3  avgt    5     0.001 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512       32     N/A          2  avgt    5     0.002 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512       32     N/A          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512     1000     N/A          2  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512     1000     N/A          3  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512   100000     N/A          2  avgt    5     0.004 ±    0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous               512   100000     N/A          3  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024       32     N/A          2  avgt    5     0.004 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024       32     N/A          3  avgt    5     0.004 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024     1000     N/A          2  avgt    5     0.005 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024     1000     N/A          3  avgt    5     0.005 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024   100000     N/A          2  avgt    5     0.005 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              1024   100000     N/A          3  avgt    5     0.005 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048       32     N/A          2  avgt    5     0.007 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048       32     N/A          3  avgt    5     0.008 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048     1000     N/A          2  avgt    5     0.010 ±    0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048     1000     N/A          3  avgt    5     0.009 ±    0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048   100000     N/A          2  avgt    5     0.009 ±    0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              2048   100000     N/A          3  avgt    5     0.010 ±    0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096       32     N/A          2  avgt    5     0.015 ±    0.015  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096       32     N/A          3  avgt    5     0.015 ±    0.014  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096     1000     N/A          2  avgt    5     0.032 ±    0.068  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096     1000     N/A          3  avgt    5     0.031 ±    0.040  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096   100000     N/A          2  avgt    5     0.022 ±    0.025  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              4096   100000     N/A          3  avgt    5     0.018 ±    0.013  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192       32     N/A          2  avgt    5     0.029 ±    0.022  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192       32     N/A          3  avgt    5     0.030 ±    0.019  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192     1000     N/A          2  avgt    5     0.041 ±    0.032  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192     1000     N/A          3  avgt    5     0.039 ±    0.038  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192   100000     N/A          2  avgt    5     0.039 ±    0.027  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous              8192   100000     N/A          3  avgt    5     0.047 ±    0.047  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384       32     N/A          2  avgt    5     0.059 ±    0.058  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384       32     N/A          3  avgt    5     0.059 ±    0.060  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384     1000     N/A          2  avgt    5     0.072 ±    0.054  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384     1000     N/A          3  avgt    5     0.078 ±    0.083  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384   100000     N/A          2  avgt    5     0.071 ±    0.057  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.baselineGetBenchmarkContinuous             16384   100000     N/A          3  avgt    5     0.078 ±    0.073  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16       32     N/A          2  avgt    5     0.004 ±    0.029  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16       32     N/A          3  avgt    5     0.001 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16     1000     N/A          2  avgt    5     0.001 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16     1000     N/A          3  avgt    5     0.003 ±    0.023  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16   100000     N/A          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      16   100000     N/A          3  avgt    5     0.001 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32       32     N/A          2  avgt    2     0.001             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32       32     N/A          3  avgt    4     0.001 ±    0.006  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32     1000     N/A          2  avgt    5     0.002 ±    0.007  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32     1000     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32   100000     N/A          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      32   100000     N/A          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64       32     N/A          2  avgt    4     0.002 ±    0.015  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64       32     N/A          3  avgt    2     0.002             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64     1000     N/A          2  avgt    5     0.002 ±    0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64     1000     N/A          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64   100000     N/A          2  avgt    5     0.003 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous      64   100000     N/A          3  avgt    5     0.004 ±    0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128       32     N/A          2  avgt    5     0.004 ±    0.009  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128       32     N/A          3  avgt    5     0.005 ±    0.018  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128     1000     N/A          2  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128     1000     N/A          3  avgt    5     0.004 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128   100000     N/A          2  avgt    5     0.006 ±    0.007  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     128   100000     N/A          3  avgt    5     0.005 ±    0.006  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256       32     N/A          2  avgt    2     0.012             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256       32     N/A          3  avgt    3     0.048 ±    1.388  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256     1000     N/A          2  avgt    5     0.007 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256     1000     N/A          3  avgt    5     0.008 ±    0.008  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256   100000     N/A          2  avgt    5     0.015 ±    0.015  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     256   100000     N/A          3  avgt    5     0.018 ±    0.018  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512       32     N/A          2  avgt    5     0.019 ±    0.057  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512       32     N/A          3  avgt    5     0.017 ±    0.041  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512     1000     N/A          2  avgt    5     0.023 ±    0.039  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512     1000     N/A          3  avgt    5     0.021 ±    0.033  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512   100000     N/A          2  avgt    5     0.031 ±    0.023  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous     512   100000     N/A          3  avgt    5     0.032 ±    0.034  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024       32     N/A          2  avgt    2     0.026             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024       32     N/A          3  avgt    5     0.076 ±    0.477  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024     1000     N/A          2  avgt    5     0.026 ±    0.017  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024     1000     N/A          3  avgt    5     0.027 ±    0.023  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024   100000     N/A          2  avgt    5     0.061 ±    0.049  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    1024   100000     N/A          3  avgt    5     0.075 ±    0.055  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048       32     N/A          2  avgt    4     0.158 ±    1.517  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048       32     N/A          3  avgt    5     0.447 ±    3.476  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048     1000     N/A          2  avgt    5     0.063 ±    0.070  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048     1000     N/A          3  avgt    5     0.058 ±    0.044  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048   100000     N/A          2  avgt    5     0.132 ±    0.114  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    2048   100000     N/A          3  avgt    5     0.126 ±    0.090  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096       32     N/A          2  avgt    3     1.699 ±   51.532  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096       32     N/A          3  avgt    5     0.616 ±    4.550  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096     1000     N/A          2  avgt    5     0.145 ±    0.179  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096     1000     N/A          3  avgt    5     0.133 ±    0.154  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096   100000     N/A          2  avgt    5     0.326 ±    0.351  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    4096   100000     N/A          3  avgt    5     0.354 ±    0.441  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192       32     N/A          2  avgt    3     0.975 ±   27.294  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192       32     N/A          3  avgt    3     2.039 ±   61.057  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192     1000     N/A          2  avgt    5     0.195 ±    0.092  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192     1000     N/A          3  avgt    5     0.203 ±    0.101  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192   100000     N/A          2  avgt    5     0.475 ±    0.218  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous    8192   100000     N/A          3  avgt    5     0.519 ±    0.192  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384       32     N/A          2  avgt          0.456             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384       32     N/A          3  avgt    2     0.380             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384     1000     N/A          2  avgt    5     0.476 ±    0.535  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384     1000     N/A          3  avgt    5     0.460 ±    0.430  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384   100000     N/A          2  avgt    5     1.271 ±    1.193  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetAndCommitBenchmarkContinuous   16384   100000     N/A          3  avgt    5     1.377 ±    1.269  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16       32     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16       32     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16     1000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16     1000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16   100000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               16   100000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32       32     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32       32     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32     1000     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32     1000     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32   100000     N/A          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               32   100000     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64       32     N/A          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64       32     N/A          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64     1000     N/A          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64     1000     N/A          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64   100000     N/A          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous               64   100000     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128       32     N/A          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128       32     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128     1000     N/A          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128     1000     N/A          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128   100000     N/A          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              128   100000     N/A          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256       32     N/A          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256       32     N/A          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256     1000     N/A          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256     1000     N/A          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256   100000     N/A          2  avgt    5     0.005 ±    0.005  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              256   100000     N/A          3  avgt    5     0.005 ±    0.006  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512       32     N/A          2  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512       32     N/A          3  avgt    5     0.003 ±    0.003  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512     1000     N/A          2  avgt    5     0.004 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512     1000     N/A          3  avgt    5     0.004 ±    0.004  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512   100000     N/A          2  avgt    5     0.011 ±    0.011  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous              512   100000     N/A          3  avgt    5     0.011 ±    0.010  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024       32     N/A          2  avgt    5     0.007 ±    0.007  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024       32     N/A          3  avgt    5     0.007 ±    0.007  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024     1000     N/A          2  avgt    5     0.008 ±    0.008  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024     1000     N/A          3  avgt    5     0.008 ±    0.007  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024   100000     N/A          2  avgt    5     0.029 ±    0.031  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             1024   100000     N/A          3  avgt    5     0.035 ±    0.038  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048       32     N/A          2  avgt    5     0.013 ±    0.014  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048       32     N/A          3  avgt    5     0.013 ±    0.015  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048     1000     N/A          2  avgt    5     0.015 ±    0.017  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048     1000     N/A          3  avgt    5     0.017 ±    0.018  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048   100000     N/A          2  avgt    5     0.061 ±    0.064  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             2048   100000     N/A          3  avgt    5     0.072 ±    0.082  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096       32     N/A          2  avgt    5     0.025 ±    0.024  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096       32     N/A          3  avgt    5     0.025 ±    0.023  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096     1000     N/A          2  avgt    5     0.031 ±    0.038  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096     1000     N/A          3  avgt    5     0.031 ±    0.034  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096   100000     N/A          2  avgt    5     0.132 ±    0.134  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             4096   100000     N/A          3  avgt    5     0.139 ±    0.135  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192       32     N/A          2  avgt    5     0.049 ±    0.047  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192       32     N/A          3  avgt    5     0.051 ±    0.049  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192     1000     N/A          2  avgt    5     0.058 ±    0.064  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192     1000     N/A          3  avgt    5     0.061 ±    0.068  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192   100000     N/A          2  avgt    5     0.311 ±    0.350  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous             8192   100000     N/A          3  avgt    5     0.317 ±    0.317  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384       32     N/A          2  avgt    5     0.092 ±    0.106  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384       32     N/A          3  avgt    5     0.098 ±    0.130  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384     1000     N/A          2  avgt    5     0.127 ±    0.155  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384     1000     N/A          3  avgt    5     0.123 ±    0.136  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384   100000     N/A          2  avgt    5     0.668 ±    0.548  ms/op
t.r.s.m.b.get.ImmutableGetBenchmark.immutableGetBenchmarkContinuous            16384   100000     N/A          3  avgt    5     0.825 ±    0.936  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       4          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       8          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32       8          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32      16          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32      16          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32      32          2  avgt    5     0.002 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32      32          3  avgt    5     0.002 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32      64          2  avgt    5     0.005 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32      64          3  avgt    5     0.005 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32     128          2  avgt    5     0.010 ±    0.012  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32     128          3  avgt    5     0.011 ±    0.013  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32     256          2  avgt    5     0.020 ±    0.020  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32     256          3  avgt    5     0.022 ±    0.025  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32     512          2  avgt    5     0.041 ±    0.047  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32     512          3  avgt    5     0.048 ±    0.058  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    1024          2  avgt    5     0.085 ±    0.093  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    1024          3  avgt    5     0.095 ±    0.108  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    2048          2  avgt    5     0.171 ±    0.200  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    2048          3  avgt    5     0.199 ±    0.238  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    4096          2  avgt    5     0.341 ±    0.370  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    4096          3  avgt    5     0.385 ±    0.445  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    8192          2  avgt    5     0.717 ±    0.884  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32    8192          3  avgt    5     0.761 ±    0.892  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32   16384          2  avgt    5     1.475 ±    1.695  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A       32   16384          3  avgt    5     1.562 ±    1.793  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       4          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       8          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000       8          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000      16          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000      16          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000      32          2  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000      32          3  avgt    5     0.002 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000      64          2  avgt    5     0.006 ±    0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000      64          3  avgt    5     0.006 ±    0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000     128          2  avgt    5     0.016 ±    0.016  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000     128          3  avgt    5     0.016 ±    0.017  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000     256          2  avgt    5     0.048 ±    0.060  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000     256          3  avgt    5     0.057 ±    0.074  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000     512          2  avgt    5     0.162 ±    0.193  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000     512          3  avgt    5     0.197 ±    0.229  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    1024          2  avgt    5     0.591 ±    0.739  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    1024          3  avgt    5     0.716 ±    0.867  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    2048          2  avgt    5     1.553 ±    1.870  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    2048          3  avgt    5     2.103 ±    2.366  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    4096          2  avgt    5     3.956 ±    4.397  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    4096          3  avgt    5     5.167 ±    6.602  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    8192          2  avgt    5     8.189 ±    8.386  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000    8192          3  avgt    5    10.147 ±    9.569  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000   16384          2  avgt    5    16.686 ±   16.638  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A     1000   16384          3  avgt    5    20.317 ±   16.696  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       4          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       8          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000       8          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000      16          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000      16          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000      32          2  avgt    5     0.002 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000      32          3  avgt    5     0.002 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000      64          2  avgt    5     0.006 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000      64          3  avgt    5     0.006 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000     128          2  avgt    5     0.016 ±    0.013  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000     128          3  avgt    5     0.017 ±    0.013  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000     256          2  avgt    5     0.038 ±    0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000     256          3  avgt    5     0.043 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000     512          2  avgt    5     0.118 ±    0.004  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000     512          3  avgt    5     0.145 ±    0.008  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    1024          2  avgt    5     0.425 ±    0.011  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    1024          3  avgt    5     0.530 ±    0.008  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    2048          2  avgt    5     1.696 ±    0.063  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    2048          3  avgt    5     2.184 ±    0.087  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    4096          2  avgt    5     7.776 ±    0.152  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    4096          3  avgt    5     9.889 ±    0.285  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    8192          2  avgt    5    35.440 ±    3.756  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000    8192          3  avgt    5    45.100 ±    0.779  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000   16384          2  avgt    5   338.315 ±  240.421  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutAndCommitBenchmarkContinuous      N/A   100000   16384          3  avgt    5   519.391 ±  308.455  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       4          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       8          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32       8          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32      16          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32      16          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32      32          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32      32          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32      64          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32      64          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32     128          2  avgt    5     0.003 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32     128          3  avgt    5     0.003 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32     256          2  avgt    5     0.008 ±    0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32     256          3  avgt    5     0.008 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32     512          2  avgt    5     0.015 ±    0.013  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32     512          3  avgt    5     0.015 ±    0.017  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    1024          2  avgt    5     0.030 ±    0.032  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    1024          3  avgt    5     0.030 ±    0.033  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    2048          2  avgt    5     0.061 ±    0.062  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    2048          3  avgt    5     0.059 ±    0.067  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    4096          2  avgt    5     0.120 ±    0.126  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    4096          3  avgt    5     0.117 ±    0.131  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    8192          2  avgt    5     0.260 ±    0.340  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32    8192          3  avgt    5     0.257 ±    0.319  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32   16384          2  avgt    5     0.481 ±    0.502  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A       32   16384          3  avgt    5     0.487 ±    0.544  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       4          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       8          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000       8          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000      16          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000      16          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000      32          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000      32          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000      64          2  avgt    5     0.002 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000      64          3  avgt    5     0.002 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000     128          2  avgt    5     0.005 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000     128          3  avgt    5     0.004 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000     256          2  avgt    5     0.009 ±    0.010  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000     256          3  avgt    5     0.009 ±    0.012  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000     512          2  avgt    5     0.019 ±    0.022  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000     512          3  avgt    5     0.018 ±    0.023  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    1024          2  avgt    5     0.038 ±    0.035  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    1024          3  avgt    5     0.036 ±    0.044  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    2048          2  avgt    5     0.079 ±    0.111  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    2048          3  avgt    5     0.072 ±    0.099  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    4096          2  avgt    5     0.143 ±    0.175  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    4096          3  avgt    5     0.135 ±    0.158  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    8192          2  avgt    5     0.286 ±    0.357  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000    8192          3  avgt    5     0.264 ±    0.313  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000   16384          2  avgt    5     0.555 ±    0.760  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A     1000   16384          3  avgt    5     0.540 ±    0.697  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       4          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       8          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000       8          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000      16          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000      16          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000      32          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000      32          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000      64          2  avgt    5     0.002 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000      64          3  avgt    5     0.002 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000     128          2  avgt    5     0.004 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000     128          3  avgt    5     0.003 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000     256          2  avgt    5     0.007 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000     256          3  avgt    5     0.006 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000     512          2  avgt    5     0.015 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000     512          3  avgt    5     0.013 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    1024          2  avgt    5     0.032 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    1024          3  avgt    5     0.029 ±    0.004  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    2048          2  avgt    5     0.060 ±    0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    2048          3  avgt    5     0.053 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    4096          2  avgt    5     0.114 ±    0.011  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    4096          3  avgt    5     0.102 ±    0.015  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    8192          2  avgt    5     0.235 ±    0.009  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000    8192          3  avgt    5     0.204 ±    0.008  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000   16384          2  avgt    5     0.472 ±    0.013  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.baselinePutBenchmarkContinuous               N/A   100000   16384          3  avgt    5     0.411 ±    0.011  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       2          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       4          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       4          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       8          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32       8          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32      16          2  avgt    5     0.002 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32      16          3  avgt    5     0.002 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32      32          2  avgt    5     0.004 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32      32          3  avgt    5     0.005 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32      64          2  avgt    5     0.011 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32      64          3  avgt    5     0.012 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32     128          2  avgt    5     0.023 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32     128          3  avgt    5     0.026 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32     256          2  avgt    5     0.051 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32     256          3  avgt    5     0.056 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32     512          2  avgt    5     0.105 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32     512          3  avgt    5     0.112 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    1024          2  avgt    5     0.210 ±    0.008  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    1024          3  avgt    5     0.230 ±    0.009  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    2048          2  avgt    5     0.411 ±    0.044  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    2048          3  avgt    5     0.460 ±    0.021  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    4096          2  avgt    5     0.845 ±    0.021  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    4096          3  avgt    5     0.890 ±    0.011  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    8192          2  avgt    5     1.691 ±    0.099  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32    8192          3  avgt    5     1.819 ±    0.024  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32   16384          2  avgt    5     3.325 ±    0.159  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A       32   16384          3  avgt    5     3.669 ±    0.086  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       2          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       4          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       4          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       8          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000       8          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000      16          2  avgt    5     0.002 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000      16          3  avgt    5     0.002 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000      32          2  avgt    5     0.004 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000      32          3  avgt    5     0.005 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000      64          2  avgt    5     0.015 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000      64          3  avgt    5     0.022 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000     128          2  avgt    5     0.050 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000     128          3  avgt    5     0.064 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000     256          2  avgt    5     0.130 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000     256          3  avgt    5     0.145 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000     512          2  avgt    5     0.309 ±    0.010  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000     512          3  avgt    5     0.329 ±    0.008  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    1024          2  avgt    5     0.714 ±    0.027  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    1024          3  avgt    5     0.782 ±    0.027  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    2048          2  avgt    5     1.574 ±    0.018  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    2048          3  avgt    5     1.771 ±    0.169  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    4096          2  avgt    5     3.302 ±    0.191  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    4096          3  avgt    5     3.543 ±    0.047  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    8192          2  avgt    5     7.109 ±    0.163  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000    8192          3  avgt    5     7.845 ±    0.160  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000   16384          2  avgt    5    14.163 ±    0.398  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A     1000   16384          3  avgt    5    16.363 ±    0.400  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       2          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       4          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       4          3  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       8          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000       8          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000      16          2  avgt    5     0.002 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000      16          3  avgt    5     0.002 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000      32          2  avgt    5     0.004 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000      32          3  avgt    5     0.005 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000      64          2  avgt    5     0.015 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000      64          3  avgt    5     0.021 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000     128          2  avgt    5     0.048 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000     128          3  avgt    5     0.061 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000     256          2  avgt    5     0.134 ±    0.002  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000     256          3  avgt    5     0.144 ±    0.006  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000     512          2  avgt    5     0.304 ±    0.013  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000     512          3  avgt    5     0.340 ±    0.024  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    1024          2  avgt    5     0.728 ±    0.030  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    1024          3  avgt    5     0.777 ±    0.041  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    2048          2  avgt    5     1.786 ±    0.074  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    2048          3  avgt    5     2.038 ±    0.041  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    4096          2  avgt    5     4.356 ±    0.150  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    4096          3  avgt    5     4.914 ±    0.061  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    8192          2  avgt    5     9.842 ±    0.372  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000    8192          3  avgt    5    10.323 ±    0.465  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000   16384          2  avgt    5    22.304 ±    0.402  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutAndCommitBenchmarkContinuous     N/A   100000   16384          3  avgt    5    22.611 ±    0.456  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       4          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       8          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32       8          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32      16          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32      16          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32      32          2  avgt    5     0.002 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32      32          3  avgt    5     0.003 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32      64          2  avgt    5     0.007 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32      64          3  avgt    5     0.008 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32     128          2  avgt    5     0.016 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32     128          3  avgt    5     0.017 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32     256          2  avgt    5     0.034 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32     256          3  avgt    5     0.038 ±    0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32     512          2  avgt    5     0.068 ±    0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32     512          3  avgt    5     0.073 ±    0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    1024          2  avgt    5     0.141 ±    0.012  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    1024          3  avgt    5     0.151 ±    0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    2048          2  avgt    5     0.277 ±    0.021  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    2048          3  avgt    5     0.282 ±    0.022  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    4096          2  avgt    5     0.552 ±    0.052  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    4096          3  avgt    5     0.616 ±    0.128  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    8192          2  avgt    5     1.126 ±    0.041  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32    8192          3  avgt    5     1.245 ±    0.030  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32   16384          2  avgt    5     2.298 ±    0.265  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A       32   16384          3  avgt    5     2.451 ±    0.265  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       4          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       8          2  avgt    5    ? 10?³             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000       8          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000      16          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000      16          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000      32          2  avgt    5     0.002 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000      32          3  avgt    5     0.003 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000      64          2  avgt    5     0.009 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000      64          3  avgt    5     0.014 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000     128          2  avgt    5     0.028 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000     128          3  avgt    5     0.034 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000     256          2  avgt    5     0.063 ±    0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000     256          3  avgt    5     0.068 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000     512          2  avgt    5     0.123 ±    0.004  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000     512          3  avgt    5     0.144 ±    0.005  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    1024          2  avgt    5     0.262 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    1024          3  avgt    5     0.322 ±    0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    2048          2  avgt    5     0.799 ±    0.077  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    2048          3  avgt    5     0.690 ±    0.015  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    4096          2  avgt    5     1.402 ±    0.107  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    4096          3  avgt    5     1.537 ±    0.060  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    8192          2  avgt    5     2.954 ±    0.087  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000    8192          3  avgt    5     3.134 ±    0.107  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000   16384          2  avgt    5     7.593 ±    0.097  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A     1000   16384          3  avgt    5     8.876 ±    0.322  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       1          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       1          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       2          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       2          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       4          2  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       4          3  avgt    5    ? 10??             ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       8          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000       8          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000      16          2  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000      16          3  avgt    5     0.001 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000      32          2  avgt    5     0.002 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000      32          3  avgt    5     0.003 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000      64          2  avgt    5     0.010 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000      64          3  avgt    5     0.014 ±    0.001  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000     128          2  avgt    5     0.027 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000     128          3  avgt    5     0.033 ±    0.004  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000     256          2  avgt    5     0.067 ±    0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000     256          3  avgt    5     0.069 ±    0.003  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000     512          2  avgt    5     0.128 ±    0.004  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000     512          3  avgt    5     0.143 ±    0.007  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    1024          2  avgt    5     0.278 ±    0.022  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    1024          3  avgt    5     0.299 ±    0.015  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    2048          2  avgt    5     0.711 ±    0.063  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    2048          3  avgt    5     0.754 ±    0.089  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    4096          2  avgt    5     1.494 ±    0.036  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    4096          3  avgt    5     1.741 ±    0.074  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    8192          2  avgt    5     3.669 ±    0.162  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000    8192          3  avgt    5     3.349 ±    0.109  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000   16384          2  avgt    5     6.673 ±    0.112  ms/op
t.r.s.m.b.put.ImmutablePutBenchmark.immutablePutBenchmarkContinuous              N/A   100000   16384          3  avgt    5     7.429 ±    0.285  ms/op

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.3.1/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 1h 52m 31s
13 actionable tasks: 1 executed, 12 up-to-date
