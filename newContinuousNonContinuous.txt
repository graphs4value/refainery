Type-safe dependency accessors is an incubating feature.
> Task :buildSrc:extractPluginRequests UP-TO-DATE
> Task :buildSrc:generatePluginAdapters UP-TO-DATE
> Task :buildSrc:compileJava UP-TO-DATE
> Task :buildSrc:compileGroovy NO-SOURCE
> Task :buildSrc:compileGroovyPlugins UP-TO-DATE
> Task :buildSrc:pluginDescriptors UP-TO-DATE
> Task :buildSrc:processResources UP-TO-DATE
> Task :buildSrc:classes UP-TO-DATE
> Task :buildSrc:jar UP-TO-DATE
> Task :buildSrc:assemble UP-TO-DATE
> Task :buildSrc:pluginUnderTestMetadata UP-TO-DATE
> Task :buildSrc:compileTestJava NO-SOURCE
> Task :buildSrc:compileTestGroovy NO-SOURCE
> Task :buildSrc:processTestResources NO-SOURCE
> Task :buildSrc:testClasses UP-TO-DATE
> Task :buildSrc:test NO-SOURCE
> Task :buildSrc:validatePlugins UP-TO-DATE
> Task :buildSrc:check UP-TO-DATE
> Task :buildSrc:build UP-TO-DATE
> Task :refinery-store:compileJava UP-TO-DATE
> Task :refinery-store:processResources NO-SOURCE
> Task :refinery-store:classes UP-TO-DATE
> Task :refinery-store:compileTestJava UP-TO-DATE
> Task :refinery-store:processTestResources NO-SOURCE
> Task :refinery-store:testClasses UP-TO-DATE
> Task :refinery-store:compileJmhJava
> Task :refinery-store:processJmhResources NO-SOURCE
> Task :refinery-store:jmhClasses

> Task :refinery-store:jmh
# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 0.00% complete, ETA 03:28:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.029 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.020, 0.029, 0.039), stdev = 0.009
  CI (99.9%): [? 0, 0.064] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 0.08% complete, ETA 03:38:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.032 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (0.022, 0.032, 0.045), stdev = 0.012
  CI (99.9%): [? 0, 0.077] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 0.16% complete, ETA 03:38:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.775 ms/op
# Warmup Iteration   2: 0.707 ms/op
# Warmup Iteration   3: 0.705 ms/op
# Warmup Iteration   4: 0.743 ms/op
# Warmup Iteration   5: 0.705 ms/op
Iteration   1: 0.694 ms/op
Iteration   2: 0.686 ms/op
Iteration   3: 0.845 ms/op
Iteration   4: 1.291 ms/op
Iteration   5: 1.243 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.952 ±(99.9%) 1.136 ms/op [Average]
  (min, avg, max) = (0.686, 0.952, 1.291), stdev = 0.295
  CI (99.9%): [? 0, 2.087] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 0.24% complete, ETA 03:37:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.782 ms/op
# Warmup Iteration   2: 0.664 ms/op
# Warmup Iteration   3: 0.644 ms/op
# Warmup Iteration   4: 0.638 ms/op
# Warmup Iteration   5: 0.638 ms/op
Iteration   1: 0.648 ms/op
Iteration   2: 0.641 ms/op
Iteration   3: 0.806 ms/op
Iteration   4: 1.065 ms/op
Iteration   5: 1.202 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.872 ±(99.9%) 0.970 ms/op [Average]
  (min, avg, max) = (0.641, 0.872, 1.202), stdev = 0.252
  CI (99.9%): [? 0, 1.842] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 0.32% complete, ETA 03:37:44
# Fork: 1 of 1
# Warmup Iteration   1: 111.513 ms/op
# Warmup Iteration   2: 106.222 ms/op
# Warmup Iteration   3: 102.565 ms/op
# Warmup Iteration   4: 105.821 ms/op
# Warmup Iteration   5: 101.921 ms/op
Iteration   1: 100.605 ms/op
Iteration   2: 103.080 ms/op
Iteration   3: 154.629 ms/op
Iteration   4: 172.151 ms/op
Iteration   5: 174.596 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  141.012 ±(99.9%) 140.884 ms/op [Average]
  (min, avg, max) = (100.605, 141.012, 174.596), stdev = 36.587
  CI (99.9%): [0.128, 281.896] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 0.40% complete, ETA 03:40:35
# Fork: 1 of 1
# Warmup Iteration   1: 113.695 ms/op
# Warmup Iteration   2: 106.374 ms/op
# Warmup Iteration   3: 105.333 ms/op
# Warmup Iteration   4: 100.208 ms/op
# Warmup Iteration   5: 101.497 ms/op
Iteration   1: 100.572 ms/op
Iteration   2: 99.987 ms/op
Iteration   3: 170.335 ms/op
Iteration   4: 178.360 ms/op
Iteration   5: 186.265 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  147.104 ±(99.9%) 166.018 ms/op [Average]
  (min, avg, max) = (99.987, 147.104, 186.265), stdev = 43.114
  CI (99.9%): [? 0, 313.122] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 0.48% complete, ETA 03:42:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.087 ms/op
Iteration   5: 0.080 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.063 ±(99.9%) 0.076 ms/op [Average]
  (min, avg, max) = (0.045, 0.063, 0.087), stdev = 0.020
  CI (99.9%): [? 0, 0.139] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 0.56% complete, ETA 03:41:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.046 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.084 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.064 ±(99.9%) 0.085 ms/op [Average]
  (min, avg, max) = (0.045, 0.064, 0.091), stdev = 0.022
  CI (99.9%): [? 0, 0.149] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 0.64% complete, ETA 03:40:36
# Fork: 1 of 1
# Warmup Iteration   1: 1.423 ms/op
# Warmup Iteration   2: 1.316 ms/op
# Warmup Iteration   3: 1.282 ms/op
# Warmup Iteration   4: 1.304 ms/op
# Warmup Iteration   5: 1.325 ms/op
Iteration   1: 1.283 ms/op
Iteration   2: 1.299 ms/op
Iteration   3: 1.602 ms/op
Iteration   4: 2.669 ms/op
Iteration   5: 2.681 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.907 ±(99.9%) 2.744 ms/op [Average]
  (min, avg, max) = (1.283, 1.907, 2.681), stdev = 0.713
  CI (99.9%): [? 0, 4.651] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 0.72% complete, ETA 03:40:00
# Fork: 1 of 1
# Warmup Iteration   1: 1.416 ms/op
# Warmup Iteration   2: 1.351 ms/op
# Warmup Iteration   3: 1.307 ms/op
# Warmup Iteration   4: 1.318 ms/op
# Warmup Iteration   5: 1.318 ms/op
Iteration   1: 1.328 ms/op
Iteration   2: 1.324 ms/op
Iteration   3: 1.656 ms/op
Iteration   4: 2.406 ms/op
Iteration   5: 2.515 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.846 ±(99.9%) 2.226 ms/op [Average]
  (min, avg, max) = (1.324, 1.846, 2.515), stdev = 0.578
  CI (99.9%): [? 0, 4.072] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 0.80% complete, ETA 03:39:27
# Fork: 1 of 1
# Warmup Iteration   1: 227.540 ms/op
# Warmup Iteration   2: 208.315 ms/op
# Warmup Iteration   3: 204.693 ms/op
# Warmup Iteration   4: 203.475 ms/op
# Warmup Iteration   5: 207.984 ms/op
Iteration   1: 205.831 ms/op
Iteration   2: 211.475 ms/op
Iteration   3: 345.988 ms/op
Iteration   4: 338.884 ms/op
Iteration   5: 309.804 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  282.396 ±(99.9%) 264.535 ms/op [Average]
  (min, avg, max) = (205.831, 282.396, 345.988), stdev = 68.699
  CI (99.9%): [17.861, 546.931] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 0.88% complete, ETA 03:41:01
# Fork: 1 of 1
# Warmup Iteration   1: 232.654 ms/op
# Warmup Iteration   2: 216.134 ms/op
# Warmup Iteration   3: 207.345 ms/op
# Warmup Iteration   4: 202.885 ms/op
# Warmup Iteration   5: 202.987 ms/op
Iteration   1: 203.701 ms/op
Iteration   2: 208.891 ms/op
Iteration   3: 353.143 ms/op
Iteration   4: 364.603 ms/op
Iteration   5: 354.870 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  297.042 ±(99.9%) 319.505 ms/op [Average]
  (min, avg, max) = (203.701, 297.042, 364.603), stdev = 82.974
  CI (99.9%): [? 0, 616.546] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 0.96% complete, ETA 03:42:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.099 ms/op
# Warmup Iteration   2: 0.090 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.091 ms/op
# Warmup Iteration   5: 0.091 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.090 ms/op
Iteration   3: 0.108 ms/op
Iteration   4: 0.172 ms/op
Iteration   5: 0.172 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.126 ±(99.9%) 0.161 ms/op [Average]
  (min, avg, max) = (0.090, 0.126, 0.172), stdev = 0.042
  CI (99.9%): [? 0, 0.288] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 1.04% complete, ETA 03:41:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.096 ms/op
# Warmup Iteration   2: 0.090 ms/op
# Warmup Iteration   3: 0.090 ms/op
# Warmup Iteration   4: 0.090 ms/op
# Warmup Iteration   5: 0.090 ms/op
Iteration   1: 0.090 ms/op
Iteration   2: 0.088 ms/op
Iteration   3: 0.113 ms/op
Iteration   4: 0.159 ms/op
Iteration   5: 0.161 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.122 ±(99.9%) 0.138 ms/op [Average]
  (min, avg, max) = (0.088, 0.122, 0.161), stdev = 0.036
  CI (99.9%): [? 0, 0.260] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 1.12% complete, ETA 03:40:44
# Fork: 1 of 1
# Warmup Iteration   1: 2.834 ms/op
# Warmup Iteration   2: 2.606 ms/op
# Warmup Iteration   3: 2.618 ms/op
# Warmup Iteration   4: 2.617 ms/op
# Warmup Iteration   5: 2.628 ms/op
Iteration   1: 2.609 ms/op
Iteration   2: 2.619 ms/op
Iteration   3: 3.212 ms/op
Iteration   4: 4.536 ms/op
Iteration   5: 4.752 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  3.545 ±(99.9%) 3.985 ms/op [Average]
  (min, avg, max) = (2.609, 3.545, 4.752), stdev = 1.035
  CI (99.9%): [? 0, 7.531] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 1.20% complete, ETA 03:40:10
# Fork: 1 of 1
# Warmup Iteration   1: 2.816 ms/op
# Warmup Iteration   2: 2.650 ms/op
# Warmup Iteration   3: 2.615 ms/op
# Warmup Iteration   4: 2.629 ms/op
# Warmup Iteration   5: 2.563 ms/op
Iteration   1: 2.621 ms/op
Iteration   2: 2.631 ms/op
Iteration   3: 3.142 ms/op
Iteration   4: 4.700 ms/op
Iteration   5: 4.695 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  3.558 ±(99.9%) 4.088 ms/op [Average]
  (min, avg, max) = (2.621, 3.558, 4.700), stdev = 1.062
  CI (99.9%): [? 0, 7.645] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 1.28% complete, ETA 03:39:39
# Fork: 1 of 1
# Warmup Iteration   1: 452.294 ms/op
# Warmup Iteration   2: 428.697 ms/op
# Warmup Iteration   3: 425.140 ms/op
# Warmup Iteration   4: 420.701 ms/op
# Warmup Iteration   5: 428.037 ms/op
Iteration   1: 478.223 ms/op
Iteration   2: 753.048 ms/op
Iteration   3: 682.871 ms/op
Iteration   4: 729.371 ms/op
Iteration   5: 682.336 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  665.170 ±(99.9%) 419.180 ms/op [Average]
  (min, avg, max) = (478.223, 665.170, 753.048), stdev = 108.860
  CI (99.9%): [245.990, 1084.350] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 1.36% complete, ETA 03:43:40
# Fork: 1 of 1
# Warmup Iteration   1: 444.695 ms/op
# Warmup Iteration   2: 423.757 ms/op
# Warmup Iteration   3: 429.815 ms/op
# Warmup Iteration   4: 423.937 ms/op
# Warmup Iteration   5: 412.377 ms/op
Iteration   1: 443.914 ms/op
Iteration   2: 735.881 ms/op
Iteration   3: 742.430 ms/op
Iteration   4: 599.834 ms/op
Iteration   5: 634.693 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  631.350 ±(99.9%) 469.250 ms/op [Average]
  (min, avg, max) = (443.914, 631.350, 742.430), stdev = 121.863
  CI (99.9%): [162.100, 1100.601] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 1.44% complete, ETA 03:46:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.193 ms/op
# Warmup Iteration   2: 0.175 ms/op
# Warmup Iteration   3: 0.177 ms/op
# Warmup Iteration   4: 0.180 ms/op
# Warmup Iteration   5: 0.177 ms/op
Iteration   1: 0.180 ms/op
Iteration   2: 0.177 ms/op
Iteration   3: 0.211 ms/op
Iteration   4: 0.367 ms/op
Iteration   5: 0.300 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.247 ±(99.9%) 0.322 ms/op [Average]
  (min, avg, max) = (0.177, 0.247, 0.367), stdev = 0.084
  CI (99.9%): [? 0, 0.569] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 1.52% complete, ETA 03:45:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.194 ms/op
# Warmup Iteration   2: 0.177 ms/op
# Warmup Iteration   3: 0.182 ms/op
# Warmup Iteration   4: 0.179 ms/op
# Warmup Iteration   5: 0.179 ms/op
Iteration   1: 0.180 ms/op
Iteration   2: 0.181 ms/op
Iteration   3: 0.199 ms/op
Iteration   4: 0.368 ms/op
Iteration   5: 0.322 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.250 ±(99.9%) 0.341 ms/op [Average]
  (min, avg, max) = (0.180, 0.250, 0.368), stdev = 0.089
  CI (99.9%): [? 0, 0.591] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 1.60% complete, ETA 03:45:06
# Fork: 1 of 1
# Warmup Iteration   1: 5.763 ms/op
# Warmup Iteration   2: 5.236 ms/op
# Warmup Iteration   3: 5.284 ms/op
# Warmup Iteration   4: 5.403 ms/op
# Warmup Iteration   5: 5.396 ms/op
Iteration   1: 5.283 ms/op
Iteration   2: 5.290 ms/op
Iteration   3: 6.462 ms/op
Iteration   4: 9.074 ms/op
Iteration   5: 9.653 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  7.152 ±(99.9%) 8.028 ms/op [Average]
  (min, avg, max) = (5.283, 7.152, 9.653), stdev = 2.085
  CI (99.9%): [? 0, 15.180] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 1.68% complete, ETA 03:44:25
# Fork: 1 of 1
# Warmup Iteration   1: 5.650 ms/op
# Warmup Iteration   2: 5.164 ms/op
# Warmup Iteration   3: 5.158 ms/op
# Warmup Iteration   4: 5.171 ms/op
# Warmup Iteration   5: 5.225 ms/op
Iteration   1: 5.187 ms/op
Iteration   2: 5.369 ms/op
Iteration   3: 6.750 ms/op
Iteration   4: 8.939 ms/op
Iteration   5: 9.019 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  7.053 ±(99.9%) 7.161 ms/op [Average]
  (min, avg, max) = (5.187, 7.053, 9.019), stdev = 1.860
  CI (99.9%): [? 0, 14.213] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 1.76% complete, ETA 03:43:47
# Fork: 1 of 1
# Warmup Iteration   1: 884.092 ms/op
# Warmup Iteration   2: 825.801 ms/op
# Warmup Iteration   3: 804.326 ms/op
# Warmup Iteration   4: 804.308 ms/op
# Warmup Iteration   5: 1031.686 ms/op
Iteration   1: 1359.558 ms/op
Iteration   2: 1203.353 ms/op
Iteration   3: 1263.076 ms/op
Iteration   4: 1333.872 ms/op
Iteration   5: 1291.532 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1290.278 ±(99.9%) 235.784 ms/op [Average]
  (min, avg, max) = (1203.353, 1290.278, 1359.558), stdev = 61.232
  CI (99.9%): [1054.494, 1526.062] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 1.84% complete, ETA 03:47:50
# Fork: 1 of 1
# Warmup Iteration   1: 885.609 ms/op
# Warmup Iteration   2: 835.285 ms/op
# Warmup Iteration   3: 842.399 ms/op
# Warmup Iteration   4: 843.970 ms/op
# Warmup Iteration   5: 1142.070 ms/op
Iteration   1: 1389.604 ms/op
Iteration   2: 1361.279 ms/op
Iteration   3: 1273.897 ms/op
Iteration   4: 1385.272 ms/op
Iteration   5: 1213.838 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1324.778 ±(99.9%) 298.834 ms/op [Average]
  (min, avg, max) = (1213.838, 1324.778, 1389.604), stdev = 77.606
  CI (99.9%): [1025.944, 1623.611] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 1.92% complete, ETA 03:52:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.391 ms/op
# Warmup Iteration   2: 0.366 ms/op
# Warmup Iteration   3: 0.356 ms/op
# Warmup Iteration   4: 0.356 ms/op
# Warmup Iteration   5: 0.357 ms/op
Iteration   1: 0.361 ms/op
Iteration   2: 0.361 ms/op
Iteration   3: 0.415 ms/op
Iteration   4: 0.672 ms/op
Iteration   5: 0.714 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.504 ±(99.9%) 0.670 ms/op [Average]
  (min, avg, max) = (0.361, 0.504, 0.714), stdev = 0.174
  CI (99.9%): [? 0, 1.175] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 2.00% complete, ETA 03:51:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.387 ms/op
# Warmup Iteration   2: 0.362 ms/op
# Warmup Iteration   3: 0.376 ms/op
# Warmup Iteration   4: 0.395 ms/op
# Warmup Iteration   5: 0.390 ms/op
Iteration   1: 0.358 ms/op
Iteration   2: 0.364 ms/op
Iteration   3: 0.404 ms/op
Iteration   4: 0.732 ms/op
Iteration   5: 0.563 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.484 ±(99.9%) 0.622 ms/op [Average]
  (min, avg, max) = (0.358, 0.484, 0.732), stdev = 0.161
  CI (99.9%): [? 0, 1.106] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 2.08% complete, ETA 03:50:11
# Fork: 1 of 1
# Warmup Iteration   1: 11.754 ms/op
# Warmup Iteration   2: 11.497 ms/op
# Warmup Iteration   3: 10.870 ms/op
# Warmup Iteration   4: 10.821 ms/op
# Warmup Iteration   5: 10.537 ms/op
Iteration   1: 10.463 ms/op
Iteration   2: 10.829 ms/op
Iteration   3: 13.940 ms/op
Iteration   4: 18.320 ms/op
Iteration   5: 17.744 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  14.259 ±(99.9%) 14.268 ms/op [Average]
  (min, avg, max) = (10.463, 14.259, 18.320), stdev = 3.705
  CI (99.9%): [? 0, 28.528] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 2.16% complete, ETA 03:49:25
# Fork: 1 of 1
# Warmup Iteration   1: 12.097 ms/op
# Warmup Iteration   2: 11.471 ms/op
# Warmup Iteration   3: 10.947 ms/op
# Warmup Iteration   4: 11.391 ms/op
# Warmup Iteration   5: 10.942 ms/op
Iteration   1: 10.652 ms/op
Iteration   2: 10.534 ms/op
Iteration   3: 13.641 ms/op
Iteration   4: 18.389 ms/op
Iteration   5: 17.410 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  14.125 ±(99.9%) 14.170 ms/op [Average]
  (min, avg, max) = (10.534, 14.125, 18.389), stdev = 3.680
  CI (99.9%): [? 0, 28.295] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 2.24% complete, ETA 03:48:42
# Fork: 1 of 1
# Warmup Iteration   1: 1957.333 ms/op
# Warmup Iteration   2: 1819.918 ms/op
# Warmup Iteration   3: 1760.951 ms/op
# Warmup Iteration   4: 1679.109 ms/op
# Warmup Iteration   5: 2812.655 ms/op
Iteration   1: 2663.808 ms/op
Iteration   2: 2717.818 ms/op
Iteration   3: 2593.730 ms/op
Iteration   4: 2729.176 ms/op
Iteration   5: 3088.354 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2758.577 ±(99.9%) 739.270 ms/op [Average]
  (min, avg, max) = (2593.730, 2758.577, 3088.354), stdev = 191.986
  CI (99.9%): [2019.308, 3497.847] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 2.32% complete, ETA 03:57:48
# Fork: 1 of 1
# Warmup Iteration   1: 1742.616 ms/op
# Warmup Iteration   2: 1665.375 ms/op
# Warmup Iteration   3: 1631.814 ms/op
# Warmup Iteration   4: 1686.622 ms/op
# Warmup Iteration   5: 2391.282 ms/op
Iteration   1: 2886.572 ms/op
Iteration   2: 2843.715 ms/op
Iteration   3: 2760.688 ms/op
Iteration   4: 2986.589 ms/op
Iteration   5: 2814.442 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2858.401 ±(99.9%) 327.428 ms/op [Average]
  (min, avg, max) = (2760.688, 2858.401, 2986.589), stdev = 85.032
  CI (99.9%): [2530.973, 3185.829] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 2.40% complete, ETA 04:06:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.793 ms/op
# Warmup Iteration   2: 0.731 ms/op
# Warmup Iteration   3: 0.720 ms/op
# Warmup Iteration   4: 0.712 ms/op
# Warmup Iteration   5: 0.723 ms/op
Iteration   1: 0.726 ms/op
Iteration   2: 0.746 ms/op
Iteration   3: 0.915 ms/op
Iteration   4: 1.440 ms/op
Iteration   5: 1.340 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.033 ±(99.9%) 1.292 ms/op [Average]
  (min, avg, max) = (0.726, 1.033, 1.440), stdev = 0.336
  CI (99.9%): [? 0, 2.326] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 2.48% complete, ETA 04:04:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.776 ms/op
# Warmup Iteration   2: 0.719 ms/op
# Warmup Iteration   3: 0.703 ms/op
# Warmup Iteration   4: 0.708 ms/op
# Warmup Iteration   5: 0.706 ms/op
Iteration   1: 0.693 ms/op
Iteration   2: 0.693 ms/op
Iteration   3: 0.856 ms/op
Iteration   4: 1.250 ms/op
Iteration   5: 1.376 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.974 ±(99.9%) 1.233 ms/op [Average]
  (min, avg, max) = (0.693, 0.974, 1.376), stdev = 0.320
  CI (99.9%): [? 0, 2.206] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 2.56% complete, ETA 04:03:30
# Fork: 1 of 1
# Warmup Iteration   1: 23.113 ms/op
# Warmup Iteration   2: 21.433 ms/op
# Warmup Iteration   3: 21.422 ms/op
# Warmup Iteration   4: 21.194 ms/op
# Warmup Iteration   5: 21.111 ms/op
Iteration   1: 21.271 ms/op
Iteration   2: 21.269 ms/op
Iteration   3: 28.105 ms/op
Iteration   4: 42.904 ms/op
Iteration   5: 41.453 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  31.000 ±(99.9%) 40.783 ms/op [Average]
  (min, avg, max) = (21.269, 31.000, 42.904), stdev = 10.591
  CI (99.9%): [? 0, 71.784] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 2.64% complete, ETA 04:02:25
# Fork: 1 of 1
# Warmup Iteration   1: 23.167 ms/op
# Warmup Iteration   2: 20.974 ms/op
# Warmup Iteration   3: 20.729 ms/op
# Warmup Iteration   4: 20.963 ms/op
# Warmup Iteration   5: 20.740 ms/op
Iteration   1: 20.612 ms/op
Iteration   2: 20.544 ms/op
Iteration   3: 25.854 ms/op
Iteration   4: 41.370 ms/op
Iteration   5: 39.621 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  29.600 ±(99.9%) 39.259 ms/op [Average]
  (min, avg, max) = (20.544, 29.600, 41.370), stdev = 10.196
  CI (99.9%): [? 0, 68.859] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 2.72% complete, ETA 04:01:24
# Fork: 1 of 1
# Warmup Iteration   1: 3426.927 ms/op
# Warmup Iteration   2: 3334.205 ms/op
# Warmup Iteration   3: 5262.563 ms/op
# Warmup Iteration   4: 5633.320 ms/op
# Warmup Iteration   5: 5263.693 ms/op
Iteration   1: 5490.112 ms/op
Iteration   2: 5771.191 ms/op
Iteration   3: 5515.228 ms/op
Iteration   4: 5593.064 ms/op
Iteration   5: 5742.367 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  5622.392 ±(99.9%) 496.037 ms/op [Average]
  (min, avg, max) = (5490.112, 5622.392, 5771.191), stdev = 128.819
  CI (99.9%): [5126.356, 6118.429] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 2.80% complete, ETA 04:24:07
# Fork: 1 of 1
# Warmup Iteration   1: 3397.802 ms/op
# Warmup Iteration   2: 3180.064 ms/op
# Warmup Iteration   3: 5318.794 ms/op
# Warmup Iteration   4: 5494.991 ms/op
# Warmup Iteration   5: 5665.311 ms/op
Iteration   1: 5463.992 ms/op
Iteration   2: 5614.846 ms/op
Iteration   3: 5264.549 ms/op
Iteration   4: 5496.648 ms/op
Iteration   5: 5319.434 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  5431.894 ±(99.9%) 542.334 ms/op [Average]
  (min, avg, max) = (5264.549, 5431.894, 5614.846), stdev = 140.842
  CI (99.9%): [4889.560, 5974.228] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 2.88% complete, ETA 04:45:04
# Fork: 1 of 1
# Warmup Iteration   1: 1.553 ms/op
# Warmup Iteration   2: 1.442 ms/op
# Warmup Iteration   3: 1.449 ms/op
# Warmup Iteration   4: 1.452 ms/op
# Warmup Iteration   5: 1.428 ms/op
Iteration   1: 1.422 ms/op
Iteration   2: 1.429 ms/op
Iteration   3: 1.770 ms/op
Iteration   4: 2.874 ms/op
Iteration   5: 2.726 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2.044 ±(99.9%) 2.719 ms/op [Average]
  (min, avg, max) = (1.422, 2.044, 2.874), stdev = 0.706
  CI (99.9%): [? 0, 4.763] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 2.96% complete, ETA 04:42:50
# Fork: 1 of 1
# Warmup Iteration   1: 1.563 ms/op
# Warmup Iteration   2: 1.480 ms/op
# Warmup Iteration   3: 1.435 ms/op
# Warmup Iteration   4: 1.422 ms/op
# Warmup Iteration   5: 1.427 ms/op
Iteration   1: 1.423 ms/op
Iteration   2: 1.416 ms/op
Iteration   3: 1.758 ms/op
Iteration   4: 2.531 ms/op
Iteration   5: 2.980 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2.022 ±(99.9%) 2.704 ms/op [Average]
  (min, avg, max) = (1.416, 2.022, 2.980), stdev = 0.702
  CI (99.9%): [? 0, 4.726] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 3.04% complete, ETA 04:40:43
# Fork: 1 of 1
# Warmup Iteration   1: 45.235 ms/op
# Warmup Iteration   2: 41.896 ms/op
# Warmup Iteration   3: 42.347 ms/op
# Warmup Iteration   4: 41.749 ms/op
# Warmup Iteration   5: 41.751 ms/op
Iteration   1: 41.446 ms/op
Iteration   2: 42.093 ms/op
Iteration   3: 57.178 ms/op
Iteration   4: 89.343 ms/op
Iteration   5: 65.716 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  59.155 ±(99.9%) 76.117 ms/op [Average]
  (min, avg, max) = (41.446, 59.155, 89.343), stdev = 19.767
  CI (99.9%): [? 0, 135.272] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 3.13% complete, ETA 04:38:49
# Fork: 1 of 1
# Warmup Iteration   1: 46.252 ms/op
# Warmup Iteration   2: 42.395 ms/op
# Warmup Iteration   3: 42.358 ms/op
# Warmup Iteration   4: 41.585 ms/op
# Warmup Iteration   5: 41.556 ms/op
Iteration   1: 41.473 ms/op
Iteration   2: 42.174 ms/op
Iteration   3: 59.291 ms/op
Iteration   4: 80.309 ms/op
Iteration   5: 81.290 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  60.907 ±(99.9%) 75.140 ms/op [Average]
  (min, avg, max) = (41.473, 60.907, 81.290), stdev = 19.514
  CI (99.9%): [? 0, 136.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 3.21% complete, ETA 04:37:01
# Fork: 1 of 1
# Warmup Iteration   1: 6747.369 ms/op
# Warmup Iteration   2: 11469.369 ms/op
# Warmup Iteration   3: 11675.237 ms/op
# Warmup Iteration   4: 12308.242 ms/op
# Warmup Iteration   5: 11973.611 ms/op
Iteration   1: 11327.052 ms/op
Iteration   2: 11827.669 ms/op
Iteration   3: 11628.888 ms/op
Iteration   4: 11838.028 ms/op
Iteration   5: 11342.187 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  11592.765 ±(99.9%) 962.721 ms/op [Average]
  (min, avg, max) = (11327.052, 11592.765, 11838.028), stdev = 250.016
  CI (99.9%): [10630.043, 12555.486] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 3.29% complete, ETA 05:25:21
# Fork: 1 of 1
# Warmup Iteration   1: 6477.966 ms/op
# Warmup Iteration   2: 10432.254 ms/op
# Warmup Iteration   3: 11081.235 ms/op
# Warmup Iteration   4: 10725.756 ms/op
# Warmup Iteration   5: 10815.787 ms/op
Iteration   1: 10836.317 ms/op
Iteration   2: 10781.594 ms/op
Iteration   3: 10829.339 ms/op
Iteration   4: 10995.862 ms/op
Iteration   5: 11305.436 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  10949.710 ±(99.9%) 826.502 ms/op [Average]
  (min, avg, max) = (10781.594, 10949.710, 11305.436), stdev = 214.640
  CI (99.9%): [10123.208, 11776.211] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 3.37% complete, ETA 06:07:32
# Fork: 1 of 1
# Warmup Iteration   1: 3.060 ms/op
# Warmup Iteration   2: 2.862 ms/op
# Warmup Iteration   3: 2.839 ms/op
# Warmup Iteration   4: 2.850 ms/op
# Warmup Iteration   5: 2.818 ms/op
Iteration   1: 2.846 ms/op
Iteration   2: 2.837 ms/op
Iteration   3: 3.529 ms/op
Iteration   4: 5.979 ms/op
Iteration   5: 5.857 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  4.210 ±(99.9%) 6.105 ms/op [Average]
  (min, avg, max) = (2.837, 4.210, 5.979), stdev = 1.585
  CI (99.9%): [? 0, 10.315] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 3.45% complete, ETA 06:03:36
# Fork: 1 of 1
# Warmup Iteration   1: 3.169 ms/op
# Warmup Iteration   2: 2.885 ms/op
# Warmup Iteration   3: 2.848 ms/op
# Warmup Iteration   4: 2.840 ms/op
# Warmup Iteration   5: 2.841 ms/op
Iteration   1: 2.840 ms/op
Iteration   2: 2.846 ms/op
Iteration   3: 3.576 ms/op
Iteration   4: 6.087 ms/op
Iteration   5: 5.184 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  4.107 ±(99.9%) 5.632 ms/op [Average]
  (min, avg, max) = (2.840, 4.107, 6.087), stdev = 1.463
  CI (99.9%): [? 0, 9.739] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 3.53% complete, ETA 05:59:48
# Fork: 1 of 1
# Warmup Iteration   1: 90.455 ms/op
# Warmup Iteration   2: 85.417 ms/op
# Warmup Iteration   3: 82.551 ms/op
# Warmup Iteration   4: 83.665 ms/op
# Warmup Iteration   5: 82.588 ms/op
Iteration   1: 83.117 ms/op
Iteration   2: 84.855 ms/op
Iteration   3: 138.964 ms/op
Iteration   4: 155.702 ms/op
Iteration   5: 164.399 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  125.407 ±(99.9%) 149.815 ms/op [Average]
  (min, avg, max) = (83.117, 125.407, 164.399), stdev = 38.906
  CI (99.9%): [? 0, 275.222] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 3.61% complete, ETA 05:56:29
# Fork: 1 of 1
# Warmup Iteration   1: 91.577 ms/op
# Warmup Iteration   2: 85.727 ms/op
# Warmup Iteration   3: 83.445 ms/op
# Warmup Iteration   4: 84.066 ms/op
# Warmup Iteration   5: 83.671 ms/op
Iteration   1: 82.808 ms/op
Iteration   2: 82.942 ms/op
Iteration   3: 125.524 ms/op
Iteration   4: 152.821 ms/op
Iteration   5: 167.941 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  122.407 ±(99.9%) 150.786 ms/op [Average]
  (min, avg, max) = (82.808, 122.407, 167.941), stdev = 39.159
  CI (99.9%): [? 0, 273.193] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 3.69% complete, ETA 05:53:18
# Fork: 1 of 1
# Warmup Iteration   1: 17147.237 ms/op
# Warmup Iteration   2: 22391.797 ms/op
# Warmup Iteration   3: 22547.657 ms/op
# Warmup Iteration   4: 22559.993 ms/op
# Warmup Iteration   5: 22757.889 ms/op
Iteration   1: 22631.130 ms/op
Iteration   2: 22538.509 ms/op
Iteration   3: 22457.736 ms/op
Iteration   4: 22508.722 ms/op
Iteration   5: 22254.641 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  22478.148 ±(99.9%) 538.932 ms/op [Average]
  (min, avg, max) = (22254.641, 22478.148, 22631.130), stdev = 139.959
  CI (99.9%): [21939.216, 23017.079] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 3.77% complete, ETA 07:19:21
# Fork: 1 of 1
# Warmup Iteration   1: 17294.040 ms/op
# Warmup Iteration   2: 22570.242 ms/op
# Warmup Iteration   3: 22352.453 ms/op
# Warmup Iteration   4: 22733.280 ms/op
# Warmup Iteration   5: 22743.057 ms/op
Iteration   1: 22483.345 ms/op
Iteration   2: 22365.118 ms/op
Iteration   3: 22549.839 ms/op
Iteration   4: 21962.303 ms/op
Iteration   5: 22660.981 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  22404.317 ±(99.9%) 1037.195 ms/op [Average]
  (min, avg, max) = (21962.303, 22404.317, 22660.981), stdev = 269.356
  CI (99.9%): [21367.122, 23441.512] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 3.85% complete, ETA 08:41:38
# Fork: 1 of 1
# Warmup Iteration   1: 6.418 ms/op
# Warmup Iteration   2: 5.959 ms/op
# Warmup Iteration   3: 5.944 ms/op
# Warmup Iteration   4: 5.896 ms/op
# Warmup Iteration   5: 5.855 ms/op
Iteration   1: 5.837 ms/op
Iteration   2: 5.858 ms/op
Iteration   3: 7.327 ms/op
Iteration   4: 11.488 ms/op
Iteration   5: 11.880 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  8.478 ±(99.9%) 11.520 ms/op [Average]
  (min, avg, max) = (5.837, 8.478, 11.880), stdev = 2.992
  CI (99.9%): [? 0, 19.998] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 3.93% complete, ETA 08:34:51
# Fork: 1 of 1
# Warmup Iteration   1: 6.037 ms/op
# Warmup Iteration   2: 5.616 ms/op
# Warmup Iteration   3: 5.495 ms/op
# Warmup Iteration   4: 5.547 ms/op
# Warmup Iteration   5: 5.506 ms/op
Iteration   1: 5.648 ms/op
Iteration   2: 5.559 ms/op
Iteration   3: 7.297 ms/op
Iteration   4: 11.047 ms/op
Iteration   5: 12.123 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  8.335 ±(99.9%) 11.824 ms/op [Average]
  (min, avg, max) = (5.559, 8.335, 12.123), stdev = 3.071
  CI (99.9%): [? 0, 20.159] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 4.01% complete, ETA 08:28:19
# Fork: 1 of 1
# Warmup Iteration   1: 181.209 ms/op
# Warmup Iteration   2: 162.780 ms/op
# Warmup Iteration   3: 161.844 ms/op
# Warmup Iteration   4: 162.514 ms/op
# Warmup Iteration   5: 162.315 ms/op
Iteration   1: 161.794 ms/op
Iteration   2: 174.186 ms/op
Iteration   3: 356.853 ms/op
Iteration   4: 282.668 ms/op
Iteration   5: 305.978 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  256.296 ±(99.9%) 327.578 ms/op [Average]
  (min, avg, max) = (161.794, 256.296, 356.853), stdev = 85.071
  CI (99.9%): [? 0, 583.874] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 4.09% complete, ETA 08:22:29
# Fork: 1 of 1
# Warmup Iteration   1: 181.090 ms/op
# Warmup Iteration   2: 167.996 ms/op
# Warmup Iteration   3: 166.137 ms/op
# Warmup Iteration   4: 164.578 ms/op
# Warmup Iteration   5: 166.502 ms/op
Iteration   1: 167.611 ms/op
Iteration   2: 172.145 ms/op
Iteration   3: 335.855 ms/op
Iteration   4: 322.064 ms/op
Iteration   5: 301.176 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  259.770 ±(99.9%) 319.600 ms/op [Average]
  (min, avg, max) = (167.611, 259.770, 335.855), stdev = 82.999
  CI (99.9%): [? 0, 579.370] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 4.17% complete, ETA 08:16:52
# Fork: 1 of 1
# Warmup Iteration   1: 39207.220 ms/op
# Warmup Iteration   2: 43775.502 ms/op
# Warmup Iteration   3: 44172.950 ms/op
# Warmup Iteration   4: 43625.398 ms/op
# Warmup Iteration   5: 44556.614 ms/op
Iteration   1: 44083.252 ms/op
Iteration   2: 45035.131 ms/op
Iteration   3: 44009.649 ms/op
Iteration   4: 44328.521 ms/op
Iteration   5: 43415.387 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  44174.388 ±(99.9%) 2258.595 ms/op [Average]
  (min, avg, max) = (43415.387, 44174.388, 45035.131), stdev = 586.550
  CI (99.9%): [41915.793, 46432.983] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 4.25% complete, ETA 10:51:15
# Fork: 1 of 1
# Warmup Iteration   1: 39464.861 ms/op
# Warmup Iteration   2: 44118.259 ms/op
# Warmup Iteration   3: 43801.173 ms/op
# Warmup Iteration   4: 44436.945 ms/op
# Warmup Iteration   5: 44010.765 ms/op
Iteration   1: 43814.005 ms/op
Iteration   2: 44405.620 ms/op
Iteration   3: 44058.683 ms/op
Iteration   4: 43629.160 ms/op
Iteration   5: 43686.267 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  43918.747 ±(99.9%) 1226.032 ms/op [Average]
  (min, avg, max) = (43629.160, 43918.747, 44405.620), stdev = 318.397
  CI (99.9%): [42692.715, 45144.779] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 4.33% complete, ETA 13:19:20
# Fork: 1 of 1
# Warmup Iteration   1: 12.235 ms/op
# Warmup Iteration   2: 11.087 ms/op
# Warmup Iteration   3: 11.302 ms/op
# Warmup Iteration   4: 11.069 ms/op
# Warmup Iteration   5: 10.907 ms/op
Iteration   1: 11.219 ms/op
Iteration   2: 11.211 ms/op
Iteration   3: 13.824 ms/op
Iteration   4: 23.883 ms/op
Iteration   5: 22.946 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  16.617 ±(99.9%) 24.278 ms/op [Average]
  (min, avg, max) = (11.211, 16.617, 23.883), stdev = 6.305
  CI (99.9%): [? 0, 40.895] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 4.41% complete, ETA 13:07:57
# Fork: 1 of 1
# Warmup Iteration   1: 12.725 ms/op
# Warmup Iteration   2: 11.450 ms/op
# Warmup Iteration   3: 11.594 ms/op
# Warmup Iteration   4: 11.405 ms/op
# Warmup Iteration   5: 11.447 ms/op
Iteration   1: 11.522 ms/op
Iteration   2: 11.627 ms/op
Iteration   3: 13.928 ms/op
Iteration   4: 25.597 ms/op
Iteration   5: 24.315 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  17.398 ±(99.9%) 26.882 ms/op [Average]
  (min, avg, max) = (11.522, 17.398, 25.597), stdev = 6.981
  CI (99.9%): [? 0, 44.280] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 4.49% complete, ETA 12:56:57
# Fork: 1 of 1
# Warmup Iteration   1: 365.787 ms/op
# Warmup Iteration   2: 332.341 ms/op
# Warmup Iteration   3: 331.564 ms/op
# Warmup Iteration   4: 326.311 ms/op
# Warmup Iteration   5: 325.205 ms/op
Iteration   1: 330.651 ms/op
Iteration   2: 619.250 ms/op
Iteration   3: 639.769 ms/op
Iteration   4: 646.859 ms/op
Iteration   5: 685.308 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  584.367 ±(99.9%) 553.853 ms/op [Average]
  (min, avg, max) = (330.651, 584.367, 685.308), stdev = 143.834
  CI (99.9%): [30.515, 1138.220] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 4.57% complete, ETA 12:47:18
# Fork: 1 of 1
# Warmup Iteration   1: 361.327 ms/op
# Warmup Iteration   2: 338.338 ms/op
# Warmup Iteration   3: 339.791 ms/op
# Warmup Iteration   4: 332.343 ms/op
# Warmup Iteration   5: 337.393 ms/op
Iteration   1: 332.474 ms/op
Iteration   2: 349.710 ms/op
Iteration   3: 637.391 ms/op
Iteration   4: 635.991 ms/op
Iteration   5: 647.463 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  520.606 ±(99.9%) 631.682 ms/op [Average]
  (min, avg, max) = (332.474, 520.606, 647.463), stdev = 164.046
  CI (99.9%): [? 0, 1152.288] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 4.65% complete, ETA 12:37:33
# Fork: 1 of 1
# Warmup Iteration   1: 87454.713 ms/op
# Warmup Iteration   2: 93843.009 ms/op
# Warmup Iteration   3: 94365.032 ms/op
# Warmup Iteration   4: 94157.876 ms/op
# Warmup Iteration   5: 93693.592 ms/op
Iteration   1: 92212.461 ms/op
Iteration   2: 93445.589 ms/op
Iteration   3: 91919.380 ms/op
Iteration   4: 90300.351 ms/op
Iteration   5: 91313.606 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  91838.277 ±(99.9%) 4461.822 ms/op [Average]
  (min, avg, max) = (90300.351, 91838.277, 93445.589), stdev = 1158.721
  CI (99.9%): [87376.455, 96300.100] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 4.73% complete, ETA 17:34:13
# Fork: 1 of 1
# Warmup Iteration   1: 81964.000 ms/op
# Warmup Iteration   2: 85829.952 ms/op
# Warmup Iteration   3: 83442.110 ms/op
# Warmup Iteration   4: 85263.241 ms/op
# Warmup Iteration   5: 85430.594 ms/op
Iteration   1: 85505.304 ms/op
Iteration   2: 84466.003 ms/op
Iteration   3: 84483.736 ms/op
Iteration   4: 84752.755 ms/op
Iteration   5: 85290.655 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  84899.691 ±(99.9%) 1828.866 ms/op [Average]
  (min, avg, max) = (84466.003, 84899.691, 85505.304), stdev = 474.951
  CI (99.9%): [83070.825, 86728.557] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 4.81% complete, ETA 21:55:19
# Fork: 1 of 1
# Warmup Iteration   1: 28.067 ms/op
# Warmup Iteration   2: 26.045 ms/op
# Warmup Iteration   3: 25.961 ms/op
# Warmup Iteration   4: 25.142 ms/op
# Warmup Iteration   5: 26.198 ms/op
Iteration   1: 24.937 ms/op
Iteration   2: 23.726 ms/op
Iteration   3: 31.509 ms/op
Iteration   4: 42.794 ms/op
Iteration   5: 41.674 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  32.928 ±(99.9%) 34.675 ms/op [Average]
  (min, avg, max) = (23.726, 32.928, 42.794), stdev = 9.005
  CI (99.9%): [? 0, 67.603] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 4.89% complete, ETA 21:36:07
# Fork: 1 of 1
# Warmup Iteration   1: 27.241 ms/op
# Warmup Iteration   2: 24.114 ms/op
# Warmup Iteration   3: 23.875 ms/op
# Warmup Iteration   4: 22.975 ms/op
# Warmup Iteration   5: 23.718 ms/op
Iteration   1: 23.752 ms/op
Iteration   2: 23.038 ms/op
Iteration   3: 29.551 ms/op
Iteration   4: 49.206 ms/op
Iteration   5: 43.135 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  33.736 ±(99.9%) 45.534 ms/op [Average]
  (min, avg, max) = (23.038, 33.736, 49.206), stdev = 11.825
  CI (99.9%): [? 0, 79.270] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 4.97% complete, ETA 21:17:31
# Fork: 1 of 1
# Warmup Iteration   1: 783.400 ms/op
# Warmup Iteration   2: 659.174 ms/op
# Warmup Iteration   3: 655.377 ms/op
# Warmup Iteration   4: 651.087 ms/op
# Warmup Iteration   5: 659.295 ms/op
Iteration   1: 837.760 ms/op
Iteration   2: 1295.456 ms/op
Iteration   3: 1310.111 ms/op
Iteration   4: 1050.339 ms/op
Iteration   5: 1238.678 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1146.469 ±(99.9%) 774.977 ms/op [Average]
  (min, avg, max) = (837.760, 1146.469, 1310.111), stdev = 201.259
  CI (99.9%): [371.492, 1921.445] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 5.05% complete, ETA 21:00:28
# Fork: 1 of 1
# Warmup Iteration   1: 708.796 ms/op
# Warmup Iteration   2: 690.879 ms/op
# Warmup Iteration   3: 672.433 ms/op
# Warmup Iteration   4: 666.461 ms/op
# Warmup Iteration   5: 658.327 ms/op
Iteration   1: 808.567 ms/op
Iteration   2: 1245.574 ms/op
Iteration   3: 1278.458 ms/op
Iteration   4: 1306.599 ms/op
Iteration   5: 1186.070 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1165.054 ±(99.9%) 786.568 ms/op [Average]
  (min, avg, max) = (808.567, 1165.054, 1306.599), stdev = 204.269
  CI (99.9%): [378.486, 1951.621] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 5.13% complete, ETA 20:43:59
# Fork: 1 of 1
# Warmup Iteration   1: 171420.933 ms/op
# Warmup Iteration   2: 170403.768 ms/op
# Warmup Iteration   3: 174564.894 ms/op
# Warmup Iteration   4: 172485.296 ms/op
# Warmup Iteration   5: 170478.223 ms/op
Iteration   1: 172494.542 ms/op
Iteration   2: 173123.723 ms/op
Iteration   3: 173101.171 ms/op
Iteration   4: 169414.616 ms/op
Iteration   5: 177635.631 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  173153.937 ±(99.9%) 11309.788 ms/op [Average]
  (min, avg, max) = (169414.616, 173153.937, 177635.631), stdev = 2937.116
  CI (99.9%): [161844.149, 184463.725] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 5.21% complete, ETA 1 days, 05:07:17
# Fork: 1 of 1
# Warmup Iteration   1: 174026.608 ms/op
# Warmup Iteration   2: 176132.335 ms/op
# Warmup Iteration   3: 172160.972 ms/op
# Warmup Iteration   4: 170603.896 ms/op
# Warmup Iteration   5: 168630.550 ms/op
Iteration   1: 169145.909 ms/op
Iteration   2: 168419.533 ms/op
Iteration   3: 167240.648 ms/op
Iteration   4: 168491.479 ms/op
Iteration   5: 168468.318 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  168353.178 ±(99.9%) 2655.920 ms/op [Average]
  (min, avg, max) = (167240.648, 168353.178, 169145.909), stdev = 689.734
  CI (99.9%): [165697.257, 171009.098] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 5.29% complete, ETA 1 days, 13:08:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.032 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.023, 0.032, 0.043), stdev = 0.009
  CI (99.9%): [? 0, 0.068] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 5.37% complete, ETA 1 days, 12:35:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.040 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.029 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.020, 0.029, 0.040), stdev = 0.010
  CI (99.9%): [? 0, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 5.45% complete, ETA 1 days, 12:04:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.761 ms/op
# Warmup Iteration   2: 0.678 ms/op
# Warmup Iteration   3: 0.695 ms/op
# Warmup Iteration   4: 0.684 ms/op
# Warmup Iteration   5: 0.685 ms/op
Iteration   1: 0.703 ms/op
Iteration   2: 0.679 ms/op
Iteration   3: 0.781 ms/op
Iteration   4: 1.153 ms/op
Iteration   5: 1.240 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.911 ±(99.9%) 1.020 ms/op [Average]
  (min, avg, max) = (0.679, 0.911, 1.240), stdev = 0.265
  CI (99.9%): [? 0, 1.931] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 5.53% complete, ETA 1 days, 11:34:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.760 ms/op
# Warmup Iteration   2: 0.696 ms/op
# Warmup Iteration   3: 0.689 ms/op
# Warmup Iteration   4: 0.694 ms/op
# Warmup Iteration   5: 0.699 ms/op
Iteration   1: 0.699 ms/op
Iteration   2: 0.705 ms/op
Iteration   3: 0.858 ms/op
Iteration   4: 1.260 ms/op
Iteration   5: 1.300 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.964 ±(99.9%) 1.138 ms/op [Average]
  (min, avg, max) = (0.699, 0.964, 1.300), stdev = 0.295
  CI (99.9%): [? 0, 2.102] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 5.61% complete, ETA 1 days, 11:05:19
# Fork: 1 of 1
# Warmup Iteration   1: 116.664 ms/op
# Warmup Iteration   2: 116.284 ms/op
# Warmup Iteration   3: 108.010 ms/op
# Warmup Iteration   4: 101.751 ms/op
# Warmup Iteration   5: 105.018 ms/op
Iteration   1: 102.892 ms/op
Iteration   2: 114.109 ms/op
Iteration   3: 172.547 ms/op
Iteration   4: 172.555 ms/op
Iteration   5: 178.545 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  148.130 ±(99.9%) 140.454 ms/op [Average]
  (min, avg, max) = (102.892, 148.130, 178.545), stdev = 36.475
  CI (99.9%): [7.676, 288.584] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 5.69% complete, ETA 1 days, 10:37:06
# Fork: 1 of 1
# Warmup Iteration   1: 116.702 ms/op
# Warmup Iteration   2: 111.183 ms/op
# Warmup Iteration   3: 102.659 ms/op
# Warmup Iteration   4: 100.679 ms/op
# Warmup Iteration   5: 102.628 ms/op
Iteration   1: 104.525 ms/op
Iteration   2: 131.836 ms/op
Iteration   3: 157.910 ms/op
Iteration   4: 171.199 ms/op
Iteration   5: 159.547 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  145.003 ±(99.9%) 103.254 ms/op [Average]
  (min, avg, max) = (104.525, 145.003, 171.199), stdev = 26.815
  CI (99.9%): [41.749, 248.258] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 5.77% complete, ETA 1 days, 10:09:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.047 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.046 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.079 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.063 ±(99.9%) 0.080 ms/op [Average]
  (min, avg, max) = (0.044, 0.063, 0.091), stdev = 0.021
  CI (99.9%): [? 0, 0.144] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 5.85% complete, ETA 1 days, 09:42:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.043 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.090 ms/op
Iteration   5: 0.080 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.063 ±(99.9%) 0.081 ms/op [Average]
  (min, avg, max) = (0.043, 0.063, 0.090), stdev = 0.021
  CI (99.9%): [? 0, 0.144] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 5.93% complete, ETA 1 days, 09:16:29
# Fork: 1 of 1
# Warmup Iteration   1: 1.504 ms/op
# Warmup Iteration   2: 1.358 ms/op
# Warmup Iteration   3: 1.388 ms/op
# Warmup Iteration   4: 1.357 ms/op
# Warmup Iteration   5: 1.369 ms/op
Iteration   1: 1.385 ms/op
Iteration   2: 1.373 ms/op
Iteration   3: 1.684 ms/op
Iteration   4: 2.327 ms/op
Iteration   5: 2.521 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.858 ±(99.9%) 2.064 ms/op [Average]
  (min, avg, max) = (1.373, 1.858, 2.521), stdev = 0.536
  CI (99.9%): [? 0, 3.922] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 6.01% complete, ETA 1 days, 08:50:55
# Fork: 1 of 1
# Warmup Iteration   1: 1.506 ms/op
# Warmup Iteration   2: 1.381 ms/op
# Warmup Iteration   3: 1.351 ms/op
# Warmup Iteration   4: 1.374 ms/op
# Warmup Iteration   5: 1.364 ms/op
Iteration   1: 1.415 ms/op
Iteration   2: 1.450 ms/op
Iteration   3: 1.693 ms/op
Iteration   4: 2.593 ms/op
Iteration   5: 2.271 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.885 ±(99.9%) 2.016 ms/op [Average]
  (min, avg, max) = (1.415, 1.885, 2.593), stdev = 0.524
  CI (99.9%): [? 0, 3.900] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 6.09% complete, ETA 1 days, 08:26:01
# Fork: 1 of 1
# Warmup Iteration   1: 231.141 ms/op
# Warmup Iteration   2: 218.307 ms/op
# Warmup Iteration   3: 218.907 ms/op
# Warmup Iteration   4: 213.593 ms/op
# Warmup Iteration   5: 206.636 ms/op
Iteration   1: 209.601 ms/op
Iteration   2: 256.087 ms/op
Iteration   3: 343.654 ms/op
Iteration   4: 329.445 ms/op
Iteration   5: 321.208 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  291.999 ±(99.9%) 219.543 ms/op [Average]
  (min, avg, max) = (209.601, 291.999, 343.654), stdev = 57.015
  CI (99.9%): [72.456, 511.542] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 6.17% complete, ETA 1 days, 08:02:18
# Fork: 1 of 1
# Warmup Iteration   1: 228.506 ms/op
# Warmup Iteration   2: 220.583 ms/op
# Warmup Iteration   3: 205.180 ms/op
# Warmup Iteration   4: 200.144 ms/op
# Warmup Iteration   5: 195.250 ms/op
Iteration   1: 204.021 ms/op
Iteration   2: 289.324 ms/op
Iteration   3: 293.974 ms/op
Iteration   4: 312.944 ms/op
Iteration   5: 342.045 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  288.462 ±(99.9%) 198.522 ms/op [Average]
  (min, avg, max) = (204.021, 288.462, 342.045), stdev = 51.556
  CI (99.9%): [89.939, 486.984] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 6.25% complete, ETA 1 days, 07:39:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.094 ms/op
# Warmup Iteration   2: 0.088 ms/op
# Warmup Iteration   3: 0.089 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.088 ms/op
Iteration   1: 0.088 ms/op
Iteration   2: 0.088 ms/op
Iteration   3: 0.107 ms/op
Iteration   4: 0.178 ms/op
Iteration   5: 0.167 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.126 ±(99.9%) 0.169 ms/op [Average]
  (min, avg, max) = (0.088, 0.126, 0.178), stdev = 0.044
  CI (99.9%): [? 0, 0.295] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 6.33% complete, ETA 1 days, 07:16:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.098 ms/op
# Warmup Iteration   2: 0.090 ms/op
# Warmup Iteration   3: 0.092 ms/op
# Warmup Iteration   4: 0.091 ms/op
# Warmup Iteration   5: 0.090 ms/op
Iteration   1: 0.089 ms/op
Iteration   2: 0.090 ms/op
Iteration   3: 0.111 ms/op
Iteration   4: 0.160 ms/op
Iteration   5: 0.160 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.122 ±(99.9%) 0.139 ms/op [Average]
  (min, avg, max) = (0.089, 0.122, 0.160), stdev = 0.036
  CI (99.9%): [? 0, 0.261] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 6.41% complete, ETA 1 days, 06:53:42
# Fork: 1 of 1
# Warmup Iteration   1: 3.006 ms/op
# Warmup Iteration   2: 2.735 ms/op
# Warmup Iteration   3: 2.706 ms/op
# Warmup Iteration   4: 2.760 ms/op
# Warmup Iteration   5: 2.734 ms/op
Iteration   1: 2.706 ms/op
Iteration   2: 2.724 ms/op
Iteration   3: 3.176 ms/op
Iteration   4: 4.868 ms/op
Iteration   5: 4.956 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  3.686 ±(99.9%) 4.371 ms/op [Average]
  (min, avg, max) = (2.706, 3.686, 4.956), stdev = 1.135
  CI (99.9%): [? 0, 8.057] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 6.49% complete, ETA 1 days, 06:31:45
# Fork: 1 of 1
# Warmup Iteration   1: 3.001 ms/op
# Warmup Iteration   2: 2.739 ms/op
# Warmup Iteration   3: 2.736 ms/op
# Warmup Iteration   4: 2.745 ms/op
# Warmup Iteration   5: 2.730 ms/op
Iteration   1: 2.779 ms/op
Iteration   2: 2.738 ms/op
Iteration   3: 3.313 ms/op
Iteration   4: 5.178 ms/op
Iteration   5: 4.496 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  3.701 ±(99.9%) 4.193 ms/op [Average]
  (min, avg, max) = (2.738, 3.701, 5.178), stdev = 1.089
  CI (99.9%): [? 0, 7.893] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 6.57% complete, ETA 1 days, 06:10:21
# Fork: 1 of 1
# Warmup Iteration   1: 467.573 ms/op
# Warmup Iteration   2: 449.738 ms/op
# Warmup Iteration   3: 424.265 ms/op
# Warmup Iteration   4: 418.595 ms/op
# Warmup Iteration   5: 411.434 ms/op
Iteration   1: 577.238 ms/op
Iteration   2: 737.018 ms/op
Iteration   3: 611.962 ms/op
Iteration   4: 699.810 ms/op
Iteration   5: 733.718 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  671.949 ±(99.9%) 281.612 ms/op [Average]
  (min, avg, max) = (577.238, 671.949, 737.018), stdev = 73.134
  CI (99.9%): [390.337, 953.561] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 6.65% complete, ETA 1 days, 05:50:22
# Fork: 1 of 1
# Warmup Iteration   1: 451.106 ms/op
# Warmup Iteration   2: 452.907 ms/op
# Warmup Iteration   3: 404.847 ms/op
# Warmup Iteration   4: 402.684 ms/op
# Warmup Iteration   5: 403.895 ms/op
Iteration   1: 533.439 ms/op
Iteration   2: 618.779 ms/op
Iteration   3: 680.794 ms/op
Iteration   4: 663.815 ms/op
Iteration   5: 655.613 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  630.488 ±(99.9%) 226.406 ms/op [Average]
  (min, avg, max) = (533.439, 630.488, 680.794), stdev = 58.797
  CI (99.9%): [404.082, 856.894] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 6.73% complete, ETA 1 days, 05:30:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.198 ms/op
# Warmup Iteration   2: 0.187 ms/op
# Warmup Iteration   3: 0.183 ms/op
# Warmup Iteration   4: 0.183 ms/op
# Warmup Iteration   5: 0.180 ms/op
Iteration   1: 0.182 ms/op
Iteration   2: 0.180 ms/op
Iteration   3: 0.218 ms/op
Iteration   4: 0.356 ms/op
Iteration   5: 0.361 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.260 ±(99.9%) 0.352 ms/op [Average]
  (min, avg, max) = (0.180, 0.260, 0.361), stdev = 0.092
  CI (99.9%): [? 0, 0.612] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 6.81% complete, ETA 1 days, 05:10:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.190 ms/op
# Warmup Iteration   2: 0.178 ms/op
# Warmup Iteration   3: 0.178 ms/op
# Warmup Iteration   4: 0.178 ms/op
# Warmup Iteration   5: 0.178 ms/op
Iteration   1: 0.176 ms/op
Iteration   2: 0.176 ms/op
Iteration   3: 0.205 ms/op
Iteration   4: 0.313 ms/op
Iteration   5: 0.339 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.242 ±(99.9%) 0.301 ms/op [Average]
  (min, avg, max) = (0.176, 0.242, 0.339), stdev = 0.078
  CI (99.9%): [? 0, 0.543] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 6.89% complete, ETA 1 days, 04:51:23
# Fork: 1 of 1
# Warmup Iteration   1: 6.090 ms/op
# Warmup Iteration   2: 5.441 ms/op
# Warmup Iteration   3: 5.530 ms/op
# Warmup Iteration   4: 5.564 ms/op
# Warmup Iteration   5: 5.514 ms/op
Iteration   1: 5.456 ms/op
Iteration   2: 5.494 ms/op
Iteration   3: 6.620 ms/op
Iteration   4: 9.983 ms/op
Iteration   5: 10.295 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  7.570 ±(99.9%) 9.219 ms/op [Average]
  (min, avg, max) = (5.456, 7.570, 10.295), stdev = 2.394
  CI (99.9%): [? 0, 16.788] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 6.97% complete, ETA 1 days, 04:32:21
# Fork: 1 of 1
# Warmup Iteration   1: 6.053 ms/op
# Warmup Iteration   2: 5.566 ms/op
# Warmup Iteration   3: 5.502 ms/op
# Warmup Iteration   4: 5.517 ms/op
# Warmup Iteration   5: 5.565 ms/op
Iteration   1: 5.539 ms/op
Iteration   2: 5.471 ms/op
Iteration   3: 6.989 ms/op
Iteration   4: 10.043 ms/op
Iteration   5: 10.786 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  7.766 ±(99.9%) 9.653 ms/op [Average]
  (min, avg, max) = (5.471, 7.766, 10.786), stdev = 2.507
  CI (99.9%): [? 0, 17.419] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 7.05% complete, ETA 1 days, 04:13:44
# Fork: 1 of 1
# Warmup Iteration   1: 879.461 ms/op
# Warmup Iteration   2: 866.272 ms/op
# Warmup Iteration   3: 801.377 ms/op
# Warmup Iteration   4: 799.686 ms/op
# Warmup Iteration   5: 1170.567 ms/op
Iteration   1: 1304.313 ms/op
Iteration   2: 1409.909 ms/op
Iteration   3: 1268.039 ms/op
Iteration   4: 1342.098 ms/op
Iteration   5: 1250.451 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1314.962 ±(99.9%) 245.266 ms/op [Average]
  (min, avg, max) = (1250.451, 1314.962, 1409.909), stdev = 63.695
  CI (99.9%): [1069.696, 1560.228] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 7.13% complete, ETA 1 days, 03:56:38
# Fork: 1 of 1
# Warmup Iteration   1: 895.743 ms/op
# Warmup Iteration   2: 848.138 ms/op
# Warmup Iteration   3: 799.045 ms/op
# Warmup Iteration   4: 828.089 ms/op
# Warmup Iteration   5: 1211.269 ms/op
Iteration   1: 1284.614 ms/op
Iteration   2: 1374.775 ms/op
Iteration   3: 1516.073 ms/op
Iteration   4: 1289.413 ms/op
Iteration   5: 1276.681 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1348.311 ±(99.9%) 392.225 ms/op [Average]
  (min, avg, max) = (1276.681, 1348.311, 1516.073), stdev = 101.859
  CI (99.9%): [956.086, 1740.536] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 7.21% complete, ETA 1 days, 03:39:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.378 ms/op
# Warmup Iteration   2: 0.357 ms/op
# Warmup Iteration   3: 0.353 ms/op
# Warmup Iteration   4: 0.346 ms/op
# Warmup Iteration   5: 0.352 ms/op
Iteration   1: 0.348 ms/op
Iteration   2: 0.350 ms/op
Iteration   3: 0.402 ms/op
Iteration   4: 0.680 ms/op
Iteration   5: 0.607 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.477 ±(99.9%) 0.598 ms/op [Average]
  (min, avg, max) = (0.348, 0.477, 0.680), stdev = 0.155
  CI (99.9%): [? 0, 1.076] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 7.29% complete, ETA 1 days, 03:22:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.379 ms/op
# Warmup Iteration   2: 0.358 ms/op
# Warmup Iteration   3: 0.357 ms/op
# Warmup Iteration   4: 0.345 ms/op
# Warmup Iteration   5: 0.347 ms/op
Iteration   1: 0.357 ms/op
Iteration   2: 0.350 ms/op
Iteration   3: 0.427 ms/op
Iteration   4: 0.721 ms/op
Iteration   5: 0.623 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.496 ±(99.9%) 0.645 ms/op [Average]
  (min, avg, max) = (0.350, 0.496, 0.721), stdev = 0.167
  CI (99.9%): [? 0, 1.140] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 7.37% complete, ETA 1 days, 03:05:28
# Fork: 1 of 1
# Warmup Iteration   1: 12.224 ms/op
# Warmup Iteration   2: 10.985 ms/op
# Warmup Iteration   3: 10.858 ms/op
# Warmup Iteration   4: 10.848 ms/op
# Warmup Iteration   5: 10.958 ms/op
Iteration   1: 10.770 ms/op
Iteration   2: 10.821 ms/op
Iteration   3: 13.832 ms/op
Iteration   4: 20.172 ms/op
Iteration   5: 19.950 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  15.109 ±(99.9%) 18.053 ms/op [Average]
  (min, avg, max) = (10.770, 15.109, 20.172), stdev = 4.688
  CI (99.9%): [? 0, 33.161] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 7.45% complete, ETA 1 days, 02:48:46
# Fork: 1 of 1
# Warmup Iteration   1: 12.024 ms/op
# Warmup Iteration   2: 10.937 ms/op
# Warmup Iteration   3: 11.253 ms/op
# Warmup Iteration   4: 10.758 ms/op
# Warmup Iteration   5: 11.061 ms/op
Iteration   1: 10.861 ms/op
Iteration   2: 10.953 ms/op
Iteration   3: 13.834 ms/op
Iteration   4: 19.682 ms/op
Iteration   5: 20.702 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  15.206 ±(99.9%) 18.172 ms/op [Average]
  (min, avg, max) = (10.861, 15.206, 20.702), stdev = 4.719
  CI (99.9%): [? 0, 33.378] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 7.53% complete, ETA 1 days, 02:32:25
# Fork: 1 of 1
# Warmup Iteration   1: 1835.639 ms/op
# Warmup Iteration   2: 1738.284 ms/op
# Warmup Iteration   3: 1715.671 ms/op
# Warmup Iteration   4: 1655.306 ms/op
# Warmup Iteration   5: 2833.475 ms/op
Iteration   1: 2499.333 ms/op
Iteration   2: 2797.497 ms/op
Iteration   3: 2534.790 ms/op
Iteration   4: 2738.645 ms/op
Iteration   5: 2721.865 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2658.426 ±(99.9%) 510.834 ms/op [Average]
  (min, avg, max) = (2499.333, 2658.426, 2797.497), stdev = 132.662
  CI (99.9%): [2147.592, 3169.260] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 7.61% complete, ETA 1 days, 02:19:19
# Fork: 1 of 1
# Warmup Iteration   1: 1785.308 ms/op
# Warmup Iteration   2: 1717.717 ms/op
# Warmup Iteration   3: 1587.628 ms/op
# Warmup Iteration   4: 1684.476 ms/op
# Warmup Iteration   5: 2451.207 ms/op
Iteration   1: 2794.930 ms/op
Iteration   2: 2549.632 ms/op
Iteration   3: 2566.256 ms/op
Iteration   4: 2585.875 ms/op
Iteration   5: 2419.888 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2583.316 ±(99.9%) 519.914 ms/op [Average]
  (min, avg, max) = (2419.888, 2583.316, 2794.930), stdev = 135.020
  CI (99.9%): [2063.402, 3103.230] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 7.69% complete, ETA 1 days, 02:06:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.807 ms/op
# Warmup Iteration   2: 0.738 ms/op
# Warmup Iteration   3: 0.741 ms/op
# Warmup Iteration   4: 0.728 ms/op
# Warmup Iteration   5: 0.732 ms/op
Iteration   1: 0.739 ms/op
Iteration   2: 0.721 ms/op
Iteration   3: 0.864 ms/op
Iteration   4: 1.412 ms/op
Iteration   5: 1.306 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.008 ±(99.9%) 1.259 ms/op [Average]
  (min, avg, max) = (0.721, 1.008, 1.412), stdev = 0.327
  CI (99.9%): [? 0, 2.267] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 7.77% complete, ETA 1 days, 01:50:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.779 ms/op
# Warmup Iteration   2: 0.721 ms/op
# Warmup Iteration   3: 0.718 ms/op
# Warmup Iteration   4: 0.712 ms/op
# Warmup Iteration   5: 0.713 ms/op
Iteration   1: 0.728 ms/op
Iteration   2: 0.712 ms/op
Iteration   3: 0.866 ms/op
Iteration   4: 1.366 ms/op
Iteration   5: 1.224 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  0.979 ±(99.9%) 1.149 ms/op [Average]
  (min, avg, max) = (0.712, 0.979, 1.366), stdev = 0.298
  CI (99.9%): [? 0, 2.129] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 7.85% complete, ETA 1 days, 01:35:37
# Fork: 1 of 1
# Warmup Iteration   1: 23.683 ms/op
# Warmup Iteration   2: 21.689 ms/op
# Warmup Iteration   3: 21.627 ms/op
# Warmup Iteration   4: 22.090 ms/op
# Warmup Iteration   5: 21.562 ms/op
Iteration   1: 21.436 ms/op
Iteration   2: 21.511 ms/op
Iteration   3: 28.266 ms/op
Iteration   4: 39.060 ms/op
Iteration   5: 42.239 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  30.502 ±(99.9%) 37.482 ms/op [Average]
  (min, avg, max) = (21.436, 30.502, 42.239), stdev = 9.734
  CI (99.9%): [? 0, 67.985] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 7.93% complete, ETA 1 days, 01:20:50
# Fork: 1 of 1
# Warmup Iteration   1: 23.478 ms/op
# Warmup Iteration   2: 21.928 ms/op
# Warmup Iteration   3: 22.177 ms/op
# Warmup Iteration   4: 21.418 ms/op
# Warmup Iteration   5: 21.427 ms/op
Iteration   1: 21.571 ms/op
Iteration   2: 21.821 ms/op
Iteration   3: 28.144 ms/op
Iteration   4: 38.945 ms/op
Iteration   5: 37.901 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  29.677 ±(99.9%) 32.407 ms/op [Average]
  (min, avg, max) = (21.571, 29.677, 38.945), stdev = 8.416
  CI (99.9%): [? 0, 62.083] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 8.01% complete, ETA 1 days, 01:06:20
# Fork: 1 of 1
# Warmup Iteration   1: 3498.748 ms/op
# Warmup Iteration   2: 3147.961 ms/op
# Warmup Iteration   3: 5130.004 ms/op
# Warmup Iteration   4: 5314.579 ms/op
# Warmup Iteration   5: 5333.579 ms/op
Iteration   1: 5777.033 ms/op
Iteration   2: 5764.585 ms/op
Iteration   3: 5496.601 ms/op
Iteration   4: 5486.655 ms/op
Iteration   5: 5614.170 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  5627.809 ±(99.9%) 538.752 ms/op [Average]
  (min, avg, max) = (5486.655, 5627.809, 5777.033), stdev = 139.912
  CI (99.9%): [5089.057, 6166.560] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 8.09% complete, ETA 1 days, 00:59:59
# Fork: 1 of 1
# Warmup Iteration   1: 3538.893 ms/op
# Warmup Iteration   2: 3333.877 ms/op
# Warmup Iteration   3: 5440.103 ms/op
# Warmup Iteration   4: 5314.469 ms/op
# Warmup Iteration   5: 5322.360 ms/op
Iteration   1: 5154.853 ms/op
Iteration   2: 6239.996 ms/op
Iteration   3: 6940.904 ms/op
Iteration   4: 6514.283 ms/op
Iteration   5: 6358.623 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  6241.731 ±(99.9%) 2552.847 ms/op [Average]
  (min, avg, max) = (5154.853, 6241.731, 6940.904), stdev = 662.966
  CI (99.9%): [3688.885, 8794.578] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 8.17% complete, ETA 1 days, 00:54:23
# Fork: 1 of 1
# Warmup Iteration   1: 1.627 ms/op
# Warmup Iteration   2: 1.439 ms/op
# Warmup Iteration   3: 1.454 ms/op
# Warmup Iteration   4: 1.457 ms/op
# Warmup Iteration   5: 1.418 ms/op
Iteration   1: 1.424 ms/op
Iteration   2: 1.423 ms/op
Iteration   3: 1.812 ms/op
Iteration   4: 2.788 ms/op
Iteration   5: 2.674 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  2.024 ±(99.9%) 2.562 ms/op [Average]
  (min, avg, max) = (1.423, 2.024, 2.788), stdev = 0.665
  CI (99.9%): [? 0, 4.586] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 8.25% complete, ETA 1 days, 00:40:31
# Fork: 1 of 1
# Warmup Iteration   1: 1.586 ms/op
# Warmup Iteration   2: 1.465 ms/op
# Warmup Iteration   3: 1.460 ms/op
# Warmup Iteration   4: 1.415 ms/op
# Warmup Iteration   5: 1.399 ms/op
Iteration   1: 1.425 ms/op
Iteration   2: 1.396 ms/op
Iteration   3: 1.651 ms/op
Iteration   4: 2.584 ms/op
Iteration   5: 2.656 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1.943 ±(99.9%) 2.414 ms/op [Average]
  (min, avg, max) = (1.396, 1.943, 2.656), stdev = 0.627
  CI (99.9%): [? 0, 4.357] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 8.33% complete, ETA 1 days, 00:26:56
# Fork: 1 of 1
# Warmup Iteration   1: 48.403 ms/op
# Warmup Iteration   2: 44.634 ms/op
# Warmup Iteration   3: 43.937 ms/op
# Warmup Iteration   4: 44.120 ms/op
# Warmup Iteration   5: 44.478 ms/op
Iteration   1: 44.331 ms/op
Iteration   2: 43.956 ms/op
Iteration   3: 56.865 ms/op
Iteration   4: 89.556 ms/op
Iteration   5: 85.019 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  63.946 ±(99.9%) 84.680 ms/op [Average]
  (min, avg, max) = (43.956, 63.946, 89.556), stdev = 21.991
  CI (99.9%): [? 0, 148.625] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 8.41% complete, ETA 1 days, 00:13:38
# Fork: 1 of 1
# Warmup Iteration   1: 47.602 ms/op
# Warmup Iteration   2: 43.525 ms/op
# Warmup Iteration   3: 43.084 ms/op
# Warmup Iteration   4: 43.059 ms/op
# Warmup Iteration   5: 42.895 ms/op
Iteration   1: 42.834 ms/op
Iteration   2: 42.486 ms/op
Iteration   3: 56.253 ms/op
Iteration   4: 78.022 ms/op
Iteration   5: 76.277 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  59.174 ±(99.9%) 66.745 ms/op [Average]
  (min, avg, max) = (42.486, 59.174, 78.022), stdev = 17.333
  CI (99.9%): [? 0, 125.919] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 8.49% complete, ETA 1 days, 00:00:35
# Fork: 1 of 1
# Warmup Iteration   1: 6820.423 ms/op
# Warmup Iteration   2: 10894.891 ms/op
# Warmup Iteration   3: 11368.905 ms/op
# Warmup Iteration   4: 11778.134 ms/op
# Warmup Iteration   5: 12162.529 ms/op
Iteration   1: 11802.733 ms/op
Iteration   2: 11904.539 ms/op
Iteration   3: 11675.504 ms/op
Iteration   4: 11503.907 ms/op
Iteration   5: 11462.271 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  11669.791 ±(99.9%) 729.072 ms/op [Average]
  (min, avg, max) = (11462.271, 11669.791, 11904.539), stdev = 189.338
  CI (99.9%): [10940.719, 12398.862] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 8.57% complete, ETA 1 days, 00:05:58
# Fork: 1 of 1
# Warmup Iteration   1: 8026.268 ms/op
# Warmup Iteration   2: 10264.494 ms/op
# Warmup Iteration   3: 10630.040 ms/op
# Warmup Iteration   4: 12276.057 ms/op
# Warmup Iteration   5: 14062.878 ms/op
Iteration   1: 13811.707 ms/op
Iteration   2: 12181.744 ms/op
Iteration   3: 12835.499 ms/op
Iteration   4: 13779.433 ms/op
Iteration   5: 14049.108 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  13331.498 ±(99.9%) 3052.809 ms/op [Average]
  (min, avg, max) = (12181.744, 13331.498, 14049.108), stdev = 792.805
  CI (99.9%): [10278.689, 16384.307] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 8.65% complete, ETA 1 days, 00:13:01
# Fork: 1 of 1
# Warmup Iteration   1: 3.191 ms/op
# Warmup Iteration   2: 3.038 ms/op
# Warmup Iteration   3: 3.001 ms/op
# Warmup Iteration   4: 3.145 ms/op
# Warmup Iteration   5: 3.159 ms/op
Iteration   1: 3.161 ms/op
Iteration   2: 3.127 ms/op
Iteration   3: 3.957 ms/op
Iteration   4: 6.046 ms/op
Iteration   5: 5.320 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  4.322 ±(99.9%) 5.049 ms/op [Average]
  (min, avg, max) = (3.127, 4.322, 6.046), stdev = 1.311
  CI (99.9%): [? 0, 9.372] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 8.73% complete, ETA 1 days, 00:00:14
# Fork: 1 of 1
# Warmup Iteration   1: 3.164 ms/op
# Warmup Iteration   2: 2.901 ms/op
# Warmup Iteration   3: 2.935 ms/op
# Warmup Iteration   4: 2.937 ms/op
# Warmup Iteration   5: 3.105 ms/op
Iteration   1: 3.074 ms/op
Iteration   2: 3.050 ms/op
Iteration   3: 3.920 ms/op
Iteration   4: 5.436 ms/op
Iteration   5: 5.351 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  4.166 ±(99.9%) 4.522 ms/op [Average]
  (min, avg, max) = (3.050, 4.166, 5.436), stdev = 1.174
  CI (99.9%): [? 0, 8.688] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 8.81% complete, ETA 23:47:42
# Fork: 1 of 1
# Warmup Iteration   1: 95.607 ms/op
# Warmup Iteration   2: 86.991 ms/op
# Warmup Iteration   3: 87.495 ms/op
# Warmup Iteration   4: 87.247 ms/op
# Warmup Iteration   5: 87.078 ms/op
Iteration   1: 87.210 ms/op
Iteration   2: 87.025 ms/op
Iteration   3: 130.789 ms/op
Iteration   4: 153.810 ms/op
Iteration   5: 156.494 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  123.065 ±(99.9%) 132.090 ms/op [Average]
  (min, avg, max) = (87.025, 123.065, 156.494), stdev = 34.303
  CI (99.9%): [? 0, 255.155] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 8.89% complete, ETA 23:35:27
# Fork: 1 of 1
# Warmup Iteration   1: 96.492 ms/op
# Warmup Iteration   2: 89.774 ms/op
# Warmup Iteration   3: 87.114 ms/op
# Warmup Iteration   4: 87.784 ms/op
# Warmup Iteration   5: 87.154 ms/op
Iteration   1: 89.384 ms/op
Iteration   2: 86.938 ms/op
Iteration   3: 131.675 ms/op
Iteration   4: 145.111 ms/op
Iteration   5: 153.260 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  121.274 ±(99.9%) 120.166 ms/op [Average]
  (min, avg, max) = (86.938, 121.274, 153.260), stdev = 31.207
  CI (99.9%): [1.108, 241.440] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 8.97% complete, ETA 23:23:27
# Fork: 1 of 1
# Warmup Iteration   1: 17174.405 ms/op
# Warmup Iteration   2: 23048.442 ms/op
# Warmup Iteration   3: 22525.225 ms/op
# Warmup Iteration   4: 23280.833 ms/op
# Warmup Iteration   5: 24420.710 ms/op
Iteration   1: 26253.931 ms/op
Iteration   2: 27701.480 ms/op
Iteration   3: 31711.564 ms/op
Iteration   4: 28424.813 ms/op
Iteration   5: 24700.335 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  27758.424 ±(99.9%) 10131.301 ms/op [Average]
  (min, avg, max) = (24700.335, 27758.424, 31711.564), stdev = 2631.067
  CI (99.9%): [17627.124, 37889.725] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 9.05% complete, ETA 23:51:50
# Fork: 1 of 1
# Warmup Iteration   1: 18465.262 ms/op
# Warmup Iteration   2: 23383.082 ms/op
# Warmup Iteration   3: 23579.640 ms/op
# Warmup Iteration   4: 23415.487 ms/op
# Warmup Iteration   5: 24512.559 ms/op
Iteration   1: 26748.862 ms/op
Iteration   2: 24217.441 ms/op
Iteration   3: 22998.676 ms/op
Iteration   4: 25625.367 ms/op
Iteration   5: 24772.062 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  24872.482 ±(99.9%) 5458.534 ms/op [Average]
  (min, avg, max) = (22998.676, 24872.482, 26748.862), stdev = 1417.564
  CI (99.9%): [19413.947, 30331.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 9.13% complete, ETA 1 days, 00:17:42
# Fork: 1 of 1
# Warmup Iteration   1: 6.120 ms/op
# Warmup Iteration   2: 5.985 ms/op
# Warmup Iteration   3: 5.927 ms/op
# Warmup Iteration   4: 5.951 ms/op
# Warmup Iteration   5: 5.840 ms/op
Iteration   1: 5.813 ms/op
Iteration   2: 5.779 ms/op
Iteration   3: 7.554 ms/op
Iteration   4: 10.437 ms/op
Iteration   5: 11.598 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  8.236 ±(99.9%) 10.282 ms/op [Average]
  (min, avg, max) = (5.779, 8.236, 11.598), stdev = 2.670
  CI (99.9%): [? 0, 18.519] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 9.21% complete, ETA 1 days, 00:05:29
# Fork: 1 of 1
# Warmup Iteration   1: 6.246 ms/op
# Warmup Iteration   2: 5.629 ms/op
# Warmup Iteration   3: 5.671 ms/op
# Warmup Iteration   4: 5.646 ms/op
# Warmup Iteration   5: 5.685 ms/op
Iteration   1: 5.647 ms/op
Iteration   2: 5.588 ms/op
Iteration   3: 6.644 ms/op
Iteration   4: 9.456 ms/op
Iteration   5: 9.903 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  7.447 ±(99.9%) 8.033 ms/op [Average]
  (min, avg, max) = (5.588, 7.447, 9.903), stdev = 2.086
  CI (99.9%): [? 0, 15.480] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 9.29% complete, ETA 23:53:27
# Fork: 1 of 1
# Warmup Iteration   1: 187.294 ms/op
# Warmup Iteration   2: 170.946 ms/op
# Warmup Iteration   3: 173.470 ms/op
# Warmup Iteration   4: 173.452 ms/op
# Warmup Iteration   5: 177.726 ms/op
Iteration   1: 170.211 ms/op
Iteration   2: 171.076 ms/op
Iteration   3: 265.961 ms/op
Iteration   4: 342.882 ms/op
Iteration   5: 306.754 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  251.377 ±(99.9%) 302.519 ms/op [Average]
  (min, avg, max) = (170.211, 251.377, 342.882), stdev = 78.563
  CI (99.9%): [? 0, 553.895] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 9.38% complete, ETA 23:41:50
# Fork: 1 of 1
# Warmup Iteration   1: 192.323 ms/op
# Warmup Iteration   2: 173.538 ms/op
# Warmup Iteration   3: 173.067 ms/op
# Warmup Iteration   4: 174.557 ms/op
# Warmup Iteration   5: 174.561 ms/op
Iteration   1: 172.896 ms/op
Iteration   2: 173.686 ms/op
Iteration   3: 251.498 ms/op
Iteration   4: 317.486 ms/op
Iteration   5: 322.186 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  247.550 ±(99.9%) 282.349 ms/op [Average]
  (min, avg, max) = (172.896, 247.550, 322.186), stdev = 73.325
  CI (99.9%): [? 0, 529.899] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 9.46% complete, ETA 23:30:23
# Fork: 1 of 1
# Warmup Iteration   1: 40340.715 ms/op
# Warmup Iteration   2: 54356.348 ms/op
# Warmup Iteration   3: 56446.798 ms/op
# Warmup Iteration   4: 56502.366 ms/op
# Warmup Iteration   5: 50012.197 ms/op
Iteration   1: 52605.379 ms/op
Iteration   2: 48554.216 ms/op
Iteration   3: 43547.083 ms/op
Iteration   4: 49156.600 ms/op
Iteration   5: 63522.832 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  51477.222 ±(99.9%) 28763.165 ms/op [Average]
  (min, avg, max) = (43547.083, 51477.222, 63522.832), stdev = 7469.703
  CI (99.9%): [22714.057, 80240.387] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 9.54% complete, ETA 1 days, 00:38:59
# Fork: 1 of 1
# Warmup Iteration   1: 38204.962 ms/op
# Warmup Iteration   2: 44394.251 ms/op
# Warmup Iteration   3: 45826.794 ms/op
# Warmup Iteration   4: 51681.292 ms/op
# Warmup Iteration   5: 59494.525 ms/op
Iteration   1: 47718.600 ms/op
Iteration   2: 49723.038 ms/op
Iteration   3: 58575.723 ms/op
Iteration   4: 49552.497 ms/op
Iteration   5: 46422.325 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  50398.437 ±(99.9%) 18369.507 ms/op [Average]
  (min, avg, max) = (46422.325, 50398.437, 58575.723), stdev = 4770.503
  CI (99.9%): [32028.929, 68767.944] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 9.62% complete, ETA 1 days, 01:42:35
# Fork: 1 of 1
# Warmup Iteration   1: 12.716 ms/op
# Warmup Iteration   2: 11.597 ms/op
# Warmup Iteration   3: 11.628 ms/op
# Warmup Iteration   4: 11.618 ms/op
# Warmup Iteration   5: 11.983 ms/op
Iteration   1: 11.908 ms/op
Iteration   2: 11.512 ms/op
Iteration   3: 14.137 ms/op
Iteration   4: 19.925 ms/op
Iteration   5: 22.121 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  15.921 ±(99.9%) 18.587 ms/op [Average]
  (min, avg, max) = (11.512, 15.921, 22.121), stdev = 4.827
  CI (99.9%): [? 0, 34.508] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 9.70% complete, ETA 1 days, 01:30:07
# Fork: 1 of 1
# Warmup Iteration   1: 12.755 ms/op
# Warmup Iteration   2: 11.438 ms/op
# Warmup Iteration   3: 11.971 ms/op
# Warmup Iteration   4: 11.352 ms/op
# Warmup Iteration   5: 11.524 ms/op
Iteration   1: 11.508 ms/op
Iteration   2: 11.387 ms/op
Iteration   3: 13.019 ms/op
Iteration   4: 20.362 ms/op
Iteration   5: 20.281 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  15.311 ±(99.9%) 17.786 ms/op [Average]
  (min, avg, max) = (11.387, 15.311, 20.362), stdev = 4.619
  CI (99.9%): [? 0, 33.097] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 9.78% complete, ETA 1 days, 01:17:50
# Fork: 1 of 1
# Warmup Iteration   1: 396.329 ms/op
# Warmup Iteration   2: 361.677 ms/op
# Warmup Iteration   3: 351.389 ms/op
# Warmup Iteration   4: 343.257 ms/op
# Warmup Iteration   5: 361.169 ms/op
Iteration   1: 345.124 ms/op
Iteration   2: 342.271 ms/op
Iteration   3: 516.510 ms/op
Iteration   4: 558.339 ms/op
Iteration   5: 544.907 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  461.430 ±(99.9%) 417.930 ms/op [Average]
  (min, avg, max) = (342.271, 461.430, 558.339), stdev = 108.535
  CI (99.9%): [43.500, 879.360] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 9.86% complete, ETA 1 days, 01:05:51
# Fork: 1 of 1
# Warmup Iteration   1: 373.744 ms/op
# Warmup Iteration   2: 344.927 ms/op
# Warmup Iteration   3: 360.245 ms/op
# Warmup Iteration   4: 356.242 ms/op
# Warmup Iteration   5: 338.115 ms/op
Iteration   1: 346.626 ms/op
Iteration   2: 368.219 ms/op
Iteration   3: 513.912 ms/op
Iteration   4: 639.041 ms/op
Iteration   5: 532.754 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  480.110 ±(99.9%) 469.678 ms/op [Average]
  (min, avg, max) = (346.626, 480.110, 639.041), stdev = 121.974
  CI (99.9%): [10.432, 949.788] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 9.94% complete, ETA 1 days, 00:54:04
# Fork: 1 of 1
# Warmup Iteration   1: 105284.052 ms/op
# Warmup Iteration   2: 97627.023 ms/op
# Warmup Iteration   3: 98334.165 ms/op
# Warmup Iteration   4: 114154.680 ms/op
# Warmup Iteration   5: 90467.820 ms/op
Iteration   1: 95326.185 ms/op
Iteration   2: 93365.670 ms/op
Iteration   3: 123289.676 ms/op
Iteration   4: 107516.934 ms/op
Iteration   5: 100027.367 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  103905.166 ±(99.9%) 46707.268 ms/op [Average]
  (min, avg, max) = (93365.670, 103905.166, 123289.676), stdev = 12129.729
  CI (99.9%): [57197.898, 150612.434] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 10.02% complete, ETA 1 days, 03:14:35
# Fork: 1 of 1
# Warmup Iteration   1: 84943.913 ms/op
# Warmup Iteration   2: 103251.121 ms/op
# Warmup Iteration   3: 99434.144 ms/op
# Warmup Iteration   4: 92824.773 ms/op
# Warmup Iteration   5: 94763.018 ms/op
Iteration   1: 106690.011 ms/op
Iteration   2: 105778.986 ms/op
Iteration   3: 105246.822 ms/op
Iteration   4: 102671.613 ms/op
Iteration   5: 98546.318 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  103786.750 ±(99.9%) 12659.691 ms/op [Average]
  (min, avg, max) = (98546.318, 103786.750, 106690.011), stdev = 3287.682
  CI (99.9%): [91127.059, 116446.441] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 10.10% complete, ETA 1 days, 05:27:57
# Fork: 1 of 1
# Warmup Iteration   1: 23.996 ms/op
# Warmup Iteration   2: 22.308 ms/op
# Warmup Iteration   3: 22.232 ms/op
# Warmup Iteration   4: 23.131 ms/op
# Warmup Iteration   5: 22.612 ms/op
Iteration   1: 22.205 ms/op
Iteration   2: 22.417 ms/op
Iteration   3: 31.918 ms/op
Iteration   4: 39.448 ms/op
Iteration   5: 36.727 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  30.543 ±(99.9%) 30.744 ms/op [Average]
  (min, avg, max) = (22.205, 30.543, 39.448), stdev = 7.984
  CI (99.9%): [? 0, 61.287] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 10.18% complete, ETA 1 days, 05:14:02
# Fork: 1 of 1
# Warmup Iteration   1: 25.249 ms/op
# Warmup Iteration   2: 22.200 ms/op
# Warmup Iteration   3: 22.231 ms/op
# Warmup Iteration   4: 22.809 ms/op
# Warmup Iteration   5: 22.131 ms/op
Iteration   1: 21.971 ms/op
Iteration   2: 21.961 ms/op
Iteration   3: 27.531 ms/op
Iteration   4: 35.928 ms/op
Iteration   5: 39.117 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  29.302 ±(99.9%) 30.503 ms/op [Average]
  (min, avg, max) = (21.961, 29.302, 39.117), stdev = 7.922
  CI (99.9%): [? 0, 59.805] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 10.26% complete, ETA 1 days, 05:00:19
# Fork: 1 of 1
# Warmup Iteration   1: 772.828 ms/op
# Warmup Iteration   2: 685.323 ms/op
# Warmup Iteration   3: 686.031 ms/op
# Warmup Iteration   4: 692.626 ms/op
# Warmup Iteration   5: 698.104 ms/op
Iteration   1: 994.864 ms/op
Iteration   2: 1129.458 ms/op
Iteration   3: 1128.119 ms/op
Iteration   4: 1052.753 ms/op
Iteration   5: 1090.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1079.040 ±(99.9%) 218.231 ms/op [Average]
  (min, avg, max) = (994.864, 1079.040, 1129.458), stdev = 56.674
  CI (99.9%): [860.810, 1297.271] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 10.34% complete, ETA 1 days, 04:47:17
# Fork: 1 of 1
# Warmup Iteration   1: 725.659 ms/op
# Warmup Iteration   2: 679.480 ms/op
# Warmup Iteration   3: 677.224 ms/op
# Warmup Iteration   4: 674.275 ms/op
# Warmup Iteration   5: 669.077 ms/op
Iteration   1: 798.748 ms/op
Iteration   2: 1051.737 ms/op
Iteration   3: 1009.103 ms/op
Iteration   4: 1011.194 ms/op
Iteration   5: 1148.871 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  1003.931 ±(99.9%) 492.644 ms/op [Average]
  (min, avg, max) = (798.748, 1003.931, 1148.871), stdev = 127.938
  CI (99.9%): [511.287, 1496.574] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 10.42% complete, ETA 1 days, 04:34:20
# Fork: 1 of 1
# Warmup Iteration   1: 198336.447 ms/op
# Warmup Iteration   2: 229624.014 ms/op
# Warmup Iteration   3: 218105.668 ms/op
# Warmup Iteration   4: 219759.960 ms/op
# Warmup Iteration   5: 211507.263 ms/op
Iteration   1: 222573.172 ms/op
Iteration   2: 209540.752 ms/op
Iteration   3: 197612.358 ms/op
Iteration   4: 200463.329 ms/op
Iteration   5: 206387.541 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  207315.430 ±(99.9%) 37517.240 ms/op [Average]
  (min, avg, max) = (197612.358, 207315.430, 222573.172), stdev = 9743.108
  CI (99.9%): [169798.190, 244832.670] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 10.50% complete, ETA 1 days, 09:20:20
# Fork: 1 of 1
# Warmup Iteration   1: 203052.915 ms/op
# Warmup Iteration   2: 201414.155 ms/op
# Warmup Iteration   3: 207798.482 ms/op
# Warmup Iteration   4: 204702.851 ms/op
# Warmup Iteration   5: 197329.840 ms/op
Iteration   1: 208276.824 ms/op
Iteration   2: 196330.181 ms/op
Iteration   3: 196873.850 ms/op
Iteration   4: 200248.719 ms/op
Iteration   5: 197829.649 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark":
  199911.845 ±(99.9%) 18911.291 ms/op [Average]
  (min, avg, max) = (196330.181, 199911.845, 208276.824), stdev = 4911.202
  CI (99.9%): [181000.554, 218823.136] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 10.58% complete, ETA 1 days, 13:47:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.021 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.021 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.028 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.021, 0.028, 0.039), stdev = 0.008
  CI (99.9%): [? 0, 0.059] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 10.66% complete, ETA 1 days, 13:29:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.020 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.040 ms/op
Iteration   5: 0.040 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.029 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.020, 0.029, 0.040), stdev = 0.010
  CI (99.9%): [? 0, 0.069] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 10.74% complete, ETA 1 days, 13:12:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.699 ms/op
# Warmup Iteration   2: 0.634 ms/op
# Warmup Iteration   3: 0.654 ms/op
# Warmup Iteration   4: 0.681 ms/op
# Warmup Iteration   5: 0.699 ms/op
Iteration   1: 0.885 ms/op
Iteration   2: 2.059 ms/op
Iteration   3: 2.326 ms/op
Iteration   4: 2.690 ms/op
Iteration   5: 3.081 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.208 ±(99.9%) 3.211 ms/op [Average]
  (min, avg, max) = (0.885, 2.208, 3.081), stdev = 0.834
  CI (99.9%): [? 0, 5.419] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 10.82% complete, ETA 1 days, 12:55:19
# Fork: 1 of 1
# Warmup Iteration   1: 1.223 ms/op
# Warmup Iteration   2: 1.048 ms/op
# Warmup Iteration   3: 1.145 ms/op
# Warmup Iteration   4: 1.183 ms/op
# Warmup Iteration   5: 1.192 ms/op
Iteration   1: 1.028 ms/op
Iteration   2: 1.038 ms/op
Iteration   3: 1.541 ms/op
Iteration   4: 2.836 ms/op
Iteration   5: 2.634 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.815 ±(99.9%) 3.340 ms/op [Average]
  (min, avg, max) = (1.028, 1.815, 2.836), stdev = 0.867
  CI (99.9%): [? 0, 5.156] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 10.90% complete, ETA 1 days, 12:38:29
# Fork: 1 of 1
# Warmup Iteration   1: 198.062 ms/op
# Warmup Iteration   2: 196.870 ms/op
# Warmup Iteration   3: 185.712 ms/op
# Warmup Iteration   4: 192.741 ms/op
# Warmup Iteration   5: 178.570 ms/op
Iteration   1: 171.319 ms/op
Iteration   2: 306.312 ms/op
Iteration   3: 321.120 ms/op
Iteration   4: 321.880 ms/op
Iteration   5: 393.429 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  302.812 ±(99.9%) 311.717 ms/op [Average]
  (min, avg, max) = (171.319, 302.812, 393.429), stdev = 80.952
  CI (99.9%): [? 0, 614.529] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 10.98% complete, ETA 1 days, 12:22:12
# Fork: 1 of 1
# Warmup Iteration   1: 180.543 ms/op
# Warmup Iteration   2: 155.399 ms/op
# Warmup Iteration   3: 144.881 ms/op
# Warmup Iteration   4: 146.844 ms/op
# Warmup Iteration   5: 147.599 ms/op
Iteration   1: 156.678 ms/op
Iteration   2: 168.616 ms/op
Iteration   3: 306.099 ms/op
Iteration   4: 284.751 ms/op
Iteration   5: 259.986 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  235.226 ±(99.9%) 263.251 ms/op [Average]
  (min, avg, max) = (156.678, 235.226, 306.099), stdev = 68.366
  CI (99.9%): [? 0, 498.478] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 11.06% complete, ETA 1 days, 12:06:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.077 ms/op
# Warmup Iteration   2: 0.068 ms/op
# Warmup Iteration   3: 0.066 ms/op
# Warmup Iteration   4: 0.069 ms/op
# Warmup Iteration   5: 0.068 ms/op
Iteration   1: 0.068 ms/op
Iteration   2: 0.067 ms/op
Iteration   3: 0.092 ms/op
Iteration   4: 0.159 ms/op
Iteration   5: 0.140 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.105 ±(99.9%) 0.161 ms/op [Average]
  (min, avg, max) = (0.067, 0.105, 0.159), stdev = 0.042
  CI (99.9%): [? 0, 0.266] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 11.14% complete, ETA 1 days, 11:49:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.051 ms/op
# Warmup Iteration   2: 0.048 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.046 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.060 ms/op
Iteration   4: 0.078 ms/op
Iteration   5: 0.070 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.060 ±(99.9%) 0.054 ms/op [Average]
  (min, avg, max) = (0.046, 0.060, 0.078), stdev = 0.014
  CI (99.9%): [0.006, 0.114] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 11.22% complete, ETA 1 days, 11:34:01
# Fork: 1 of 1
# Warmup Iteration   1: 1.417 ms/op
# Warmup Iteration   2: 1.283 ms/op
# Warmup Iteration   3: 1.277 ms/op
# Warmup Iteration   4: 1.279 ms/op
# Warmup Iteration   5: 1.275 ms/op
Iteration   1: 1.260 ms/op
Iteration   2: 1.275 ms/op
Iteration   3: 1.581 ms/op
Iteration   4: 2.282 ms/op
Iteration   5: 2.239 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.727 ±(99.9%) 1.939 ms/op [Average]
  (min, avg, max) = (1.260, 1.727, 2.282), stdev = 0.504
  CI (99.9%): [? 0, 3.667] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 11.30% complete, ETA 1 days, 11:18:20
# Fork: 1 of 1
# Warmup Iteration   1: 1.399 ms/op
# Warmup Iteration   2: 1.260 ms/op
# Warmup Iteration   3: 1.275 ms/op
# Warmup Iteration   4: 1.280 ms/op
# Warmup Iteration   5: 1.267 ms/op
Iteration   1: 1.260 ms/op
Iteration   2: 1.268 ms/op
Iteration   3: 1.516 ms/op
Iteration   4: 2.363 ms/op
Iteration   5: 2.084 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.698 ±(99.9%) 1.927 ms/op [Average]
  (min, avg, max) = (1.260, 1.698, 2.363), stdev = 0.500
  CI (99.9%): [? 0, 3.625] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 11.38% complete, ETA 1 days, 11:02:52
# Fork: 1 of 1
# Warmup Iteration   1: 225.845 ms/op
# Warmup Iteration   2: 206.986 ms/op
# Warmup Iteration   3: 203.731 ms/op
# Warmup Iteration   4: 207.489 ms/op
# Warmup Iteration   5: 205.260 ms/op
Iteration   1: 206.833 ms/op
Iteration   2: 202.191 ms/op
Iteration   3: 334.553 ms/op
Iteration   4: 374.181 ms/op
Iteration   5: 355.027 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  294.557 ±(99.9%) 321.149 ms/op [Average]
  (min, avg, max) = (202.191, 294.557, 374.181), stdev = 83.401
  CI (99.9%): [? 0, 615.706] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 11.46% complete, ETA 1 days, 10:47:46
# Fork: 1 of 1
# Warmup Iteration   1: 221.959 ms/op
# Warmup Iteration   2: 203.576 ms/op
# Warmup Iteration   3: 201.636 ms/op
# Warmup Iteration   4: 201.015 ms/op
# Warmup Iteration   5: 195.136 ms/op
Iteration   1: 192.707 ms/op
Iteration   2: 232.166 ms/op
Iteration   3: 365.021 ms/op
Iteration   4: 311.516 ms/op
Iteration   5: 359.384 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  292.159 ±(99.9%) 296.354 ms/op [Average]
  (min, avg, max) = (192.707, 292.159, 365.021), stdev = 76.962
  CI (99.9%): [? 0, 588.512] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 11.54% complete, ETA 1 days, 10:32:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.098 ms/op
# Warmup Iteration   2: 0.090 ms/op
# Warmup Iteration   3: 0.090 ms/op
# Warmup Iteration   4: 0.090 ms/op
# Warmup Iteration   5: 0.090 ms/op
Iteration   1: 0.090 ms/op
Iteration   2: 0.090 ms/op
Iteration   3: 0.109 ms/op
Iteration   4: 0.172 ms/op
Iteration   5: 0.191 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.131 ±(99.9%) 0.184 ms/op [Average]
  (min, avg, max) = (0.090, 0.131, 0.191), stdev = 0.048
  CI (99.9%): [? 0, 0.315] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 11.62% complete, ETA 1 days, 10:18:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.102 ms/op
# Warmup Iteration   2: 0.095 ms/op
# Warmup Iteration   3: 0.088 ms/op
# Warmup Iteration   4: 0.087 ms/op
# Warmup Iteration   5: 0.087 ms/op
Iteration   1: 0.088 ms/op
Iteration   2: 0.087 ms/op
Iteration   3: 0.105 ms/op
Iteration   4: 0.165 ms/op
Iteration   5: 0.174 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.124 ±(99.9%) 0.163 ms/op [Average]
  (min, avg, max) = (0.087, 0.124, 0.174), stdev = 0.042
  CI (99.9%): [? 0, 0.287] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 11.70% complete, ETA 1 days, 10:03:28
# Fork: 1 of 1
# Warmup Iteration   1: 2.910 ms/op
# Warmup Iteration   2: 2.602 ms/op
# Warmup Iteration   3: 2.591 ms/op
# Warmup Iteration   4: 2.617 ms/op
# Warmup Iteration   5: 2.617 ms/op
Iteration   1: 2.565 ms/op
Iteration   2: 2.578 ms/op
Iteration   3: 3.190 ms/op
Iteration   4: 4.276 ms/op
Iteration   5: 4.052 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  3.332 ±(99.9%) 3.097 ms/op [Average]
  (min, avg, max) = (2.565, 3.332, 4.276), stdev = 0.804
  CI (99.9%): [0.235, 6.429] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 11.78% complete, ETA 1 days, 09:49:02
# Fork: 1 of 1
# Warmup Iteration   1: 2.838 ms/op
# Warmup Iteration   2: 2.555 ms/op
# Warmup Iteration   3: 2.587 ms/op
# Warmup Iteration   4: 2.559 ms/op
# Warmup Iteration   5: 2.613 ms/op
Iteration   1: 2.565 ms/op
Iteration   2: 2.549 ms/op
Iteration   3: 3.050 ms/op
Iteration   4: 5.227 ms/op
Iteration   5: 4.513 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  3.581 ±(99.9%) 4.700 ms/op [Average]
  (min, avg, max) = (2.549, 3.581, 5.227), stdev = 1.221
  CI (99.9%): [? 0, 8.281] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 11.86% complete, ETA 1 days, 09:34:47
# Fork: 1 of 1
# Warmup Iteration   1: 436.821 ms/op
# Warmup Iteration   2: 415.039 ms/op
# Warmup Iteration   3: 420.983 ms/op
# Warmup Iteration   4: 412.621 ms/op
# Warmup Iteration   5: 401.795 ms/op
Iteration   1: 413.522 ms/op
Iteration   2: 650.846 ms/op
Iteration   3: 691.738 ms/op
Iteration   4: 776.052 ms/op
Iteration   5: 745.365 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  655.504 ±(99.9%) 552.996 ms/op [Average]
  (min, avg, max) = (413.522, 655.504, 776.052), stdev = 143.611
  CI (99.9%): [102.508, 1208.501] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 11.94% complete, ETA 1 days, 09:21:09
# Fork: 1 of 1
# Warmup Iteration   1: 432.463 ms/op
# Warmup Iteration   2: 409.556 ms/op
# Warmup Iteration   3: 407.246 ms/op
# Warmup Iteration   4: 427.489 ms/op
# Warmup Iteration   5: 438.510 ms/op
Iteration   1: 536.733 ms/op
Iteration   2: 694.862 ms/op
Iteration   3: 690.763 ms/op
Iteration   4: 727.623 ms/op
Iteration   5: 604.944 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  650.985 ±(99.9%) 301.694 ms/op [Average]
  (min, avg, max) = (536.733, 650.985, 727.623), stdev = 78.349
  CI (99.9%): [349.291, 952.679] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 12.02% complete, ETA 1 days, 09:07:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.204 ms/op
# Warmup Iteration   2: 0.193 ms/op
# Warmup Iteration   3: 0.190 ms/op
# Warmup Iteration   4: 0.194 ms/op
# Warmup Iteration   5: 0.208 ms/op
Iteration   1: 0.219 ms/op
Iteration   2: 0.210 ms/op
Iteration   3: 0.264 ms/op
Iteration   4: 0.349 ms/op
Iteration   5: 0.322 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.273 ±(99.9%) 0.237 ms/op [Average]
  (min, avg, max) = (0.210, 0.273, 0.349), stdev = 0.061
  CI (99.9%): [0.036, 0.509] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 12.10% complete, ETA 1 days, 08:54:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.223 ms/op
# Warmup Iteration   2: 0.275 ms/op
# Warmup Iteration   3: 0.366 ms/op
# Warmup Iteration   4: 0.345 ms/op
# Warmup Iteration   5: 0.401 ms/op
Iteration   1: 0.392 ms/op
Iteration   2: 0.342 ms/op
Iteration   3: 0.317 ms/op
Iteration   4: 0.463 ms/op
Iteration   5: 0.412 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.385 ±(99.9%) 0.222 ms/op [Average]
  (min, avg, max) = (0.317, 0.385, 0.463), stdev = 0.058
  CI (99.9%): [0.163, 0.607] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 12.18% complete, ETA 1 days, 08:40:29
# Fork: 1 of 1
# Warmup Iteration   1: 8.161 ms/op
# Warmup Iteration   2: 6.464 ms/op
# Warmup Iteration   3: 6.029 ms/op
# Warmup Iteration   4: 6.027 ms/op
# Warmup Iteration   5: 6.464 ms/op
Iteration   1: 6.460 ms/op
Iteration   2: 7.058 ms/op
Iteration   3: 8.638 ms/op
Iteration   4: 11.004 ms/op
Iteration   5: 9.871 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  8.606 ±(99.9%) 7.293 ms/op [Average]
  (min, avg, max) = (6.460, 8.606, 11.004), stdev = 1.894
  CI (99.9%): [1.313, 15.900] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 12.26% complete, ETA 1 days, 08:27:09
# Fork: 1 of 1
# Warmup Iteration   1: 6.575 ms/op
# Warmup Iteration   2: 8.270 ms/op
# Warmup Iteration   3: 10.364 ms/op
# Warmup Iteration   4: 10.227 ms/op
# Warmup Iteration   5: 10.018 ms/op
Iteration   1: 11.115 ms/op
Iteration   2: 14.104 ms/op
Iteration   3: 10.712 ms/op
Iteration   4: 6.723 ms/op
Iteration   5: 7.226 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  9.976 ±(99.9%) 11.715 ms/op [Average]
  (min, avg, max) = (6.723, 9.976, 14.104), stdev = 3.042
  CI (99.9%): [? 0, 21.691] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 12.34% complete, ETA 1 days, 08:14:00
# Fork: 1 of 1
# Warmup Iteration   1: 1860.409 ms/op
# Warmup Iteration   2: 2274.656 ms/op
# Warmup Iteration   3: 1718.143 ms/op
# Warmup Iteration   4: 1835.583 ms/op
# Warmup Iteration   5: 1501.724 ms/op
Iteration   1: 1491.618 ms/op
Iteration   2: 1359.089 ms/op
Iteration   3: 1556.409 ms/op
Iteration   4: 1380.522 ms/op
Iteration   5: 1409.119 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1439.351 ±(99.9%) 317.830 ms/op [Average]
  (min, avg, max) = (1359.089, 1439.351, 1556.409), stdev = 82.540
  CI (99.9%): [1121.521, 1757.182] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 12.42% complete, ETA 1 days, 08:01:51
# Fork: 1 of 1
# Warmup Iteration   1: 862.098 ms/op
# Warmup Iteration   2: 827.602 ms/op
# Warmup Iteration   3: 825.994 ms/op
# Warmup Iteration   4: 794.355 ms/op
# Warmup Iteration   5: 1153.196 ms/op
Iteration   1: 1371.375 ms/op
Iteration   2: 1338.678 ms/op
Iteration   3: 1358.262 ms/op
Iteration   4: 1452.828 ms/op
Iteration   5: 1355.566 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1375.342 ±(99.9%) 172.710 ms/op [Average]
  (min, avg, max) = (1338.678, 1375.342, 1452.828), stdev = 44.852
  CI (99.9%): [1202.632, 1548.052] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 12.50% complete, ETA 1 days, 07:49:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.414 ms/op
# Warmup Iteration   2: 0.380 ms/op
# Warmup Iteration   3: 0.383 ms/op
# Warmup Iteration   4: 0.361 ms/op
# Warmup Iteration   5: 0.355 ms/op
Iteration   1: 0.365 ms/op
Iteration   2: 0.370 ms/op
Iteration   3: 0.441 ms/op
Iteration   4: 0.726 ms/op
Iteration   5: 0.626 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.506 ±(99.9%) 0.626 ms/op [Average]
  (min, avg, max) = (0.365, 0.506, 0.726), stdev = 0.162
  CI (99.9%): [? 0, 1.131] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 12.58% complete, ETA 1 days, 07:37:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.391 ms/op
# Warmup Iteration   2: 0.372 ms/op
# Warmup Iteration   3: 0.371 ms/op
# Warmup Iteration   4: 0.364 ms/op
# Warmup Iteration   5: 0.367 ms/op
Iteration   1: 0.392 ms/op
Iteration   2: 0.360 ms/op
Iteration   3: 0.434 ms/op
Iteration   4: 0.617 ms/op
Iteration   5: 0.590 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.479 ±(99.9%) 0.452 ms/op [Average]
  (min, avg, max) = (0.360, 0.479, 0.617), stdev = 0.117
  CI (99.9%): [0.026, 0.931] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 12.66% complete, ETA 1 days, 07:24:28
# Fork: 1 of 1
# Warmup Iteration   1: 11.471 ms/op
# Warmup Iteration   2: 11.192 ms/op
# Warmup Iteration   3: 11.379 ms/op
# Warmup Iteration   4: 10.682 ms/op
# Warmup Iteration   5: 10.956 ms/op
Iteration   1: 10.808 ms/op
Iteration   2: 10.778 ms/op
Iteration   3: 13.051 ms/op
Iteration   4: 22.409 ms/op
Iteration   5: 22.154 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  15.840 ±(99.9%) 22.922 ms/op [Average]
  (min, avg, max) = (10.778, 15.840, 22.409), stdev = 5.953
  CI (99.9%): [? 0, 38.762] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 12.74% complete, ETA 1 days, 07:12:06
# Fork: 1 of 1
# Warmup Iteration   1: 12.376 ms/op
# Warmup Iteration   2: 11.368 ms/op
# Warmup Iteration   3: 10.829 ms/op
# Warmup Iteration   4: 11.176 ms/op
# Warmup Iteration   5: 10.854 ms/op
Iteration   1: 10.942 ms/op
Iteration   2: 10.507 ms/op
Iteration   3: 11.825 ms/op
Iteration   4: 18.792 ms/op
Iteration   5: 17.537 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  13.920 ±(99.9%) 15.126 ms/op [Average]
  (min, avg, max) = (10.507, 13.920, 18.792), stdev = 3.928
  CI (99.9%): [? 0, 29.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 12.82% complete, ETA 1 days, 06:59:53
# Fork: 1 of 1
# Warmup Iteration   1: 1905.908 ms/op
# Warmup Iteration   2: 1786.094 ms/op
# Warmup Iteration   3: 1707.621 ms/op
# Warmup Iteration   4: 1797.891 ms/op
# Warmup Iteration   5: 2687.892 ms/op
Iteration   1: 2710.893 ms/op
Iteration   2: 2614.268 ms/op
Iteration   3: 2645.908 ms/op
Iteration   4: 2708.487 ms/op
Iteration   5: 2646.481 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2665.207 ±(99.9%) 164.254 ms/op [Average]
  (min, avg, max) = (2614.268, 2665.207, 2710.893), stdev = 42.656
  CI (99.9%): [2500.953, 2829.462] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 12.90% complete, ETA 1 days, 06:49:19
# Fork: 1 of 1
# Warmup Iteration   1: 1845.618 ms/op
# Warmup Iteration   2: 1820.594 ms/op
# Warmup Iteration   3: 1693.052 ms/op
# Warmup Iteration   4: 1680.659 ms/op
# Warmup Iteration   5: 2425.124 ms/op
Iteration   1: 2777.639 ms/op
Iteration   2: 2653.995 ms/op
Iteration   3: 2693.089 ms/op
Iteration   4: 2577.523 ms/op
Iteration   5: 2678.386 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2676.126 ±(99.9%) 277.740 ms/op [Average]
  (min, avg, max) = (2577.523, 2676.126, 2777.639), stdev = 72.128
  CI (99.9%): [2398.386, 2953.867] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 12.98% complete, ETA 1 days, 06:38:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.799 ms/op
# Warmup Iteration   2: 0.735 ms/op
# Warmup Iteration   3: 0.758 ms/op
# Warmup Iteration   4: 0.814 ms/op
# Warmup Iteration   5: 0.778 ms/op
Iteration   1: 0.793 ms/op
Iteration   2: 0.869 ms/op
Iteration   3: 1.129 ms/op
Iteration   4: 2.356 ms/op
Iteration   5: 2.318 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.493 ±(99.9%) 3.006 ms/op [Average]
  (min, avg, max) = (0.793, 1.493, 2.356), stdev = 0.781
  CI (99.9%): [? 0, 4.499] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 13.06% complete, ETA 1 days, 06:27:03
# Fork: 1 of 1
# Warmup Iteration   1: 3.341 ms/op
# Warmup Iteration   2: 1.681 ms/op
# Warmup Iteration   3: 0.958 ms/op
# Warmup Iteration   4: 0.985 ms/op
# Warmup Iteration   5: 0.886 ms/op
Iteration   1: 0.836 ms/op
Iteration   2: 1.075 ms/op
Iteration   3: 3.038 ms/op
Iteration   4: 2.380 ms/op
Iteration   5: 2.483 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.962 ±(99.9%) 3.683 ms/op [Average]
  (min, avg, max) = (0.836, 1.962, 3.038), stdev = 0.956
  CI (99.9%): [? 0, 5.645] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 13.14% complete, ETA 1 days, 06:15:25
# Fork: 1 of 1
# Warmup Iteration   1: 46.707 ms/op
# Warmup Iteration   2: 36.526 ms/op
# Warmup Iteration   3: 44.134 ms/op
# Warmup Iteration   4: 78.406 ms/op
# Warmup Iteration   5: 93.893 ms/op
Iteration   1: 91.979 ms/op
Iteration   2: 89.388 ms/op
Iteration   3: 101.176 ms/op
Iteration   4: 84.678 ms/op
Iteration   5: 68.104 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  87.065 ±(99.9%) 46.920 ms/op [Average]
  (min, avg, max) = (68.104, 87.065, 101.176), stdev = 12.185
  CI (99.9%): [40.146, 133.985] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 13.22% complete, ETA 1 days, 06:03:57
# Fork: 1 of 1
# Warmup Iteration   1: 42.735 ms/op
# Warmup Iteration   2: 42.537 ms/op
# Warmup Iteration   3: 34.265 ms/op
# Warmup Iteration   4: 40.280 ms/op
# Warmup Iteration   5: 54.595 ms/op
Iteration   1: 52.268 ms/op
Iteration   2: 42.491 ms/op
Iteration   3: 56.364 ms/op
Iteration   4: 73.474 ms/op
Iteration   5: 71.156 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  59.151 ±(99.9%) 50.280 ms/op [Average]
  (min, avg, max) = (42.491, 59.151, 73.474), stdev = 13.057
  CI (99.9%): [8.871, 109.430] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 13.30% complete, ETA 1 days, 05:52:36
# Fork: 1 of 1
# Warmup Iteration   1: 8453.688 ms/op
# Warmup Iteration   2: 9492.018 ms/op
# Warmup Iteration   3: 5557.513 ms/op
# Warmup Iteration   4: 5461.607 ms/op
# Warmup Iteration   5: 5510.065 ms/op
Iteration   1: 5231.324 ms/op
Iteration   2: 5457.753 ms/op
Iteration   3: 5521.492 ms/op
Iteration   4: 5148.532 ms/op
Iteration   5: 5425.337 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  5356.888 ±(99.9%) 612.277 ms/op [Average]
  (min, avg, max) = (5148.532, 5356.888, 5521.492), stdev = 159.006
  CI (99.9%): [4744.611, 5969.164] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 13.38% complete, ETA 1 days, 05:46:58
# Fork: 1 of 1
# Warmup Iteration   1: 3357.712 ms/op
# Warmup Iteration   2: 3214.697 ms/op
# Warmup Iteration   3: 4707.570 ms/op
# Warmup Iteration   4: 5296.842 ms/op
# Warmup Iteration   5: 5139.031 ms/op
Iteration   1: 5008.450 ms/op
Iteration   2: 5133.682 ms/op
Iteration   3: 5096.610 ms/op
Iteration   4: 4763.430 ms/op
Iteration   5: 4870.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  4974.436 ±(99.9%) 599.241 ms/op [Average]
  (min, avg, max) = (4763.430, 4974.436, 5133.682), stdev = 155.621
  CI (99.9%): [4375.195, 5573.677] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 13.46% complete, ETA 1 days, 05:39:44
# Fork: 1 of 1
# Warmup Iteration   1: 1.548 ms/op
# Warmup Iteration   2: 1.447 ms/op
# Warmup Iteration   3: 1.431 ms/op
# Warmup Iteration   4: 1.407 ms/op
# Warmup Iteration   5: 1.434 ms/op
Iteration   1: 1.431 ms/op
Iteration   2: 1.441 ms/op
Iteration   3: 1.680 ms/op
Iteration   4: 2.610 ms/op
Iteration   5: 2.462 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.925 ±(99.9%) 2.193 ms/op [Average]
  (min, avg, max) = (1.431, 1.925, 2.610), stdev = 0.569
  CI (99.9%): [? 0, 4.117] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 13.54% complete, ETA 1 days, 05:28:41
# Fork: 1 of 1
# Warmup Iteration   1: 1.551 ms/op
# Warmup Iteration   2: 1.464 ms/op
# Warmup Iteration   3: 1.442 ms/op
# Warmup Iteration   4: 1.433 ms/op
# Warmup Iteration   5: 1.406 ms/op
Iteration   1: 1.437 ms/op
Iteration   2: 1.457 ms/op
Iteration   3: 1.707 ms/op
Iteration   4: 3.062 ms/op
Iteration   5: 2.437 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.020 ±(99.9%) 2.734 ms/op [Average]
  (min, avg, max) = (1.437, 2.020, 3.062), stdev = 0.710
  CI (99.9%): [? 0, 4.754] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 13.62% complete, ETA 1 days, 05:17:45
# Fork: 1 of 1
# Warmup Iteration   1: 45.425 ms/op
# Warmup Iteration   2: 41.900 ms/op
# Warmup Iteration   3: 41.657 ms/op
# Warmup Iteration   4: 41.565 ms/op
# Warmup Iteration   5: 41.901 ms/op
Iteration   1: 41.828 ms/op
Iteration   2: 41.247 ms/op
Iteration   3: 56.127 ms/op
Iteration   4: 85.490 ms/op
Iteration   5: 70.276 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  58.994 ±(99.9%) 73.243 ms/op [Average]
  (min, avg, max) = (41.247, 58.994, 85.490), stdev = 19.021
  CI (99.9%): [? 0, 132.237] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 13.70% complete, ETA 1 days, 05:06:59
# Fork: 1 of 1
# Warmup Iteration   1: 44.402 ms/op
# Warmup Iteration   2: 41.155 ms/op
# Warmup Iteration   3: 40.995 ms/op
# Warmup Iteration   4: 40.565 ms/op
# Warmup Iteration   5: 43.469 ms/op
Iteration   1: 41.248 ms/op
Iteration   2: 40.538 ms/op
Iteration   3: 51.019 ms/op
Iteration   4: 72.910 ms/op
Iteration   5: 73.836 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  55.910 ±(99.9%) 63.435 ms/op [Average]
  (min, avg, max) = (40.538, 55.910, 73.836), stdev = 16.474
  CI (99.9%): [? 0, 119.345] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 13.78% complete, ETA 1 days, 04:56:19
# Fork: 1 of 1
# Warmup Iteration   1: 6623.697 ms/op
# Warmup Iteration   2: 10760.483 ms/op
# Warmup Iteration   3: 10869.074 ms/op
# Warmup Iteration   4: 11085.041 ms/op
# Warmup Iteration   5: 11271.948 ms/op
Iteration   1: 10575.153 ms/op
Iteration   2: 10428.402 ms/op
Iteration   3: 10772.027 ms/op
Iteration   4: 10899.153 ms/op
Iteration   5: 11094.115 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  10753.770 ±(99.9%) 1009.780 ms/op [Average]
  (min, avg, max) = (10428.402, 10753.770, 11094.115), stdev = 262.237
  CI (99.9%): [9743.990, 11763.551] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 13.86% complete, ETA 1 days, 04:55:33
# Fork: 1 of 1
# Warmup Iteration   1: 6690.747 ms/op
# Warmup Iteration   2: 10599.870 ms/op
# Warmup Iteration   3: 10757.757 ms/op
# Warmup Iteration   4: 11007.256 ms/op
# Warmup Iteration   5: 10475.799 ms/op
Iteration   1: 11320.091 ms/op
Iteration   2: 11072.123 ms/op
Iteration   3: 10998.160 ms/op
Iteration   4: 11484.931 ms/op
Iteration   5: 10596.756 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  11094.412 ±(99.9%) 1307.035 ms/op [Average]
  (min, avg, max) = (10596.756, 11094.412, 11484.931), stdev = 339.433
  CI (99.9%): [9787.378, 12401.447] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 13.94% complete, ETA 1 days, 04:54:50
# Fork: 1 of 1
# Warmup Iteration   1: 3.125 ms/op
# Warmup Iteration   2: 3.024 ms/op
# Warmup Iteration   3: 3.156 ms/op
# Warmup Iteration   4: 3.289 ms/op
# Warmup Iteration   5: 3.549 ms/op
Iteration   1: 3.070 ms/op
Iteration   2: 3.226 ms/op
Iteration   3: 3.948 ms/op
Iteration   4: 5.856 ms/op
Iteration   5: 5.425 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  4.305 ±(99.9%) 4.899 ms/op [Average]
  (min, avg, max) = (3.070, 4.305, 5.856), stdev = 1.272
  CI (99.9%): [? 0, 9.204] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 14.02% complete, ETA 1 days, 04:44:23
# Fork: 1 of 1
# Warmup Iteration   1: 3.291 ms/op
# Warmup Iteration   2: 3.115 ms/op
# Warmup Iteration   3: 3.022 ms/op
# Warmup Iteration   4: 3.065 ms/op
# Warmup Iteration   5: 2.957 ms/op
Iteration   1: 2.969 ms/op
Iteration   2: 2.940 ms/op
Iteration   3: 3.663 ms/op
Iteration   4: 5.483 ms/op
Iteration   5: 5.092 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  4.029 ±(99.9%) 4.591 ms/op [Average]
  (min, avg, max) = (2.940, 4.029, 5.483), stdev = 1.192
  CI (99.9%): [? 0, 8.621] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 14.10% complete, ETA 1 days, 04:34:03
# Fork: 1 of 1
# Warmup Iteration   1: 98.347 ms/op
# Warmup Iteration   2: 88.006 ms/op
# Warmup Iteration   3: 103.560 ms/op
# Warmup Iteration   4: 95.751 ms/op
# Warmup Iteration   5: 93.989 ms/op
Iteration   1: 93.829 ms/op
Iteration   2: 92.922 ms/op
Iteration   3: 130.857 ms/op
Iteration   4: 175.382 ms/op
Iteration   5: 170.347 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  132.667 ±(99.9%) 153.250 ms/op [Average]
  (min, avg, max) = (92.922, 132.667, 175.382), stdev = 39.798
  CI (99.9%): [? 0, 285.917] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 14.18% complete, ETA 1 days, 04:23:54
# Fork: 1 of 1
# Warmup Iteration   1: 99.763 ms/op
# Warmup Iteration   2: 98.604 ms/op
# Warmup Iteration   3: 95.648 ms/op
# Warmup Iteration   4: 91.869 ms/op
# Warmup Iteration   5: 89.215 ms/op
Iteration   1: 90.421 ms/op
Iteration   2: 93.401 ms/op
Iteration   3: 138.950 ms/op
Iteration   4: 161.509 ms/op
Iteration   5: 153.485 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  127.553 ±(99.9%) 129.161 ms/op [Average]
  (min, avg, max) = (90.421, 127.553, 161.509), stdev = 33.543
  CI (99.9%): [? 0, 256.714] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 14.26% complete, ETA 1 days, 04:13:52
# Fork: 1 of 1
# Warmup Iteration   1: 18884.465 ms/op
# Warmup Iteration   2: 23018.083 ms/op
# Warmup Iteration   3: 24060.398 ms/op
# Warmup Iteration   4: 23387.249 ms/op
# Warmup Iteration   5: 22081.144 ms/op
Iteration   1: 23406.685 ms/op
Iteration   2: 23053.748 ms/op
Iteration   3: 18982.849 ms/op
Iteration   4: 19783.994 ms/op
Iteration   5: 34143.979 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  23874.251 ±(99.9%) 23344.492 ms/op [Average]
  (min, avg, max) = (18982.849, 23874.251, 34143.979), stdev = 6062.491
  CI (99.9%): [529.759, 47218.743] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 14.34% complete, ETA 1 days, 04:25:52
# Fork: 1 of 1
# Warmup Iteration   1: 26573.441 ms/op
# Warmup Iteration   2: 26824.600 ms/op
# Warmup Iteration   3: 23498.437 ms/op
# Warmup Iteration   4: 22837.032 ms/op
# Warmup Iteration   5: 22117.248 ms/op
Iteration   1: 21888.655 ms/op
Iteration   2: 18384.653 ms/op
Iteration   3: 21378.450 ms/op
Iteration   4: 21705.056 ms/op
Iteration   5: 20657.834 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  20802.929 ±(99.9%) 5510.920 ms/op [Average]
  (min, avg, max) = (18384.653, 20802.929, 21888.655), stdev = 1431.168
  CI (99.9%): [15292.010, 26313.849] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 14.42% complete, ETA 1 days, 04:37:15
# Fork: 1 of 1
# Warmup Iteration   1: 8.739 ms/op
# Warmup Iteration   2: 7.177 ms/op
# Warmup Iteration   3: 6.454 ms/op
# Warmup Iteration   4: 6.691 ms/op
# Warmup Iteration   5: 6.593 ms/op
Iteration   1: 6.728 ms/op
Iteration   2: 6.677 ms/op
Iteration   3: 6.664 ms/op
Iteration   4: 6.652 ms/op
Iteration   5: 6.627 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  6.669 ±(99.9%) 0.144 ms/op [Average]
  (min, avg, max) = (6.627, 6.669, 6.728), stdev = 0.037
  CI (99.9%): [6.525, 6.814] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 14.50% complete, ETA 1 days, 04:27:13
# Fork: 1 of 1
# Warmup Iteration   1: 7.023 ms/op
# Warmup Iteration   2: 6.679 ms/op
# Warmup Iteration   3: 6.567 ms/op
# Warmup Iteration   4: 6.486 ms/op
# Warmup Iteration   5: 6.462 ms/op
Iteration   1: 6.423 ms/op
Iteration   2: 6.491 ms/op
Iteration   3: 6.477 ms/op
Iteration   4: 6.451 ms/op
Iteration   5: 6.330 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  6.434 ±(99.9%) 0.247 ms/op [Average]
  (min, avg, max) = (6.330, 6.434, 6.491), stdev = 0.064
  CI (99.9%): [6.187, 6.681] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 14.58% complete, ETA 1 days, 04:17:16
# Fork: 1 of 1
# Warmup Iteration   1: 209.790 ms/op
# Warmup Iteration   2: 195.892 ms/op
# Warmup Iteration   3: 190.741 ms/op
# Warmup Iteration   4: 191.263 ms/op
# Warmup Iteration   5: 190.861 ms/op
Iteration   1: 189.918 ms/op
Iteration   2: 191.466 ms/op
Iteration   3: 191.809 ms/op
Iteration   4: 193.538 ms/op
Iteration   5: 192.131 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  191.773 ±(99.9%) 5.013 ms/op [Average]
  (min, avg, max) = (189.918, 191.773, 193.538), stdev = 1.302
  CI (99.9%): [186.760, 196.785] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 14.66% complete, ETA 1 days, 04:07:33
# Fork: 1 of 1
# Warmup Iteration   1: 210.989 ms/op
# Warmup Iteration   2: 193.586 ms/op
# Warmup Iteration   3: 199.783 ms/op
# Warmup Iteration   4: 192.963 ms/op
# Warmup Iteration   5: 193.908 ms/op
Iteration   1: 195.494 ms/op
Iteration   2: 193.046 ms/op
Iteration   3: 193.387 ms/op
Iteration   4: 192.649 ms/op
Iteration   5: 193.470 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  193.609 ±(99.9%) 4.244 ms/op [Average]
  (min, avg, max) = (192.649, 193.609, 195.494), stdev = 1.102
  CI (99.9%): [189.365, 197.853] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 14.74% complete, ETA 1 days, 03:57:58
# Fork: 1 of 1
# Warmup Iteration   1: 38664.689 ms/op
# Warmup Iteration   2: 33542.559 ms/op
# Warmup Iteration   3: 32786.192 ms/op
# Warmup Iteration   4: 34669.120 ms/op
# Warmup Iteration   5: 44225.341 ms/op
Iteration   1: 43491.869 ms/op
Iteration   2: 34316.797 ms/op
Iteration   3: 37630.496 ms/op
Iteration   4: 35079.851 ms/op
Iteration   5: 37083.081 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  37520.419 ±(99.9%) 13894.525 ms/op [Average]
  (min, avg, max) = (34316.797, 37520.419, 43491.869), stdev = 3608.364
  CI (99.9%): [23625.894, 51414.943] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 14.82% complete, ETA 1 days, 04:22:58
# Fork: 1 of 1
# Warmup Iteration   1: 41221.381 ms/op
# Warmup Iteration   2: 36821.429 ms/op
# Warmup Iteration   3: 32916.090 ms/op
# Warmup Iteration   4: 37158.802 ms/op
# Warmup Iteration   5: 39244.186 ms/op
Iteration   1: 36520.205 ms/op
Iteration   2: 38989.461 ms/op
Iteration   3: 32892.908 ms/op
Iteration   4: 36252.241 ms/op
Iteration   5: 34608.100 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  35852.583 ±(99.9%) 8771.076 ms/op [Average]
  (min, avg, max) = (32892.908, 35852.583, 38989.461), stdev = 2277.821
  CI (99.9%): [27081.507, 44623.659] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 14.90% complete, ETA 1 days, 04:47:11
# Fork: 1 of 1
# Warmup Iteration   1: 15.713 ms/op
# Warmup Iteration   2: 13.655 ms/op
# Warmup Iteration   3: 13.862 ms/op
# Warmup Iteration   4: 13.475 ms/op
# Warmup Iteration   5: 13.583 ms/op
Iteration   1: 13.622 ms/op
Iteration   2: 13.327 ms/op
Iteration   3: 13.197 ms/op
Iteration   4: 13.135 ms/op
Iteration   5: 13.176 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  13.291 ±(99.9%) 0.763 ms/op [Average]
  (min, avg, max) = (13.135, 13.291, 13.622), stdev = 0.198
  CI (99.9%): [12.528, 14.055] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 14.98% complete, ETA 1 days, 04:37:20
# Fork: 1 of 1
# Warmup Iteration   1: 15.080 ms/op
# Warmup Iteration   2: 13.349 ms/op
# Warmup Iteration   3: 13.220 ms/op
# Warmup Iteration   4: 13.071 ms/op
# Warmup Iteration   5: 13.099 ms/op
Iteration   1: 13.147 ms/op
Iteration   2: 13.131 ms/op
Iteration   3: 13.151 ms/op
Iteration   4: 13.236 ms/op
Iteration   5: 13.781 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  13.289 ±(99.9%) 1.070 ms/op [Average]
  (min, avg, max) = (13.131, 13.289, 13.781), stdev = 0.278
  CI (99.9%): [12.219, 14.359] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 15.06% complete, ETA 1 days, 04:27:35
# Fork: 1 of 1
# Warmup Iteration   1: 466.162 ms/op
# Warmup Iteration   2: 414.797 ms/op
# Warmup Iteration   3: 415.650 ms/op
# Warmup Iteration   4: 422.654 ms/op
# Warmup Iteration   5: 438.028 ms/op
Iteration   1: 443.899 ms/op
Iteration   2: 447.535 ms/op
Iteration   3: 468.794 ms/op
Iteration   4: 457.561 ms/op
Iteration   5: 423.688 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  448.295 ±(99.9%) 64.763 ms/op [Average]
  (min, avg, max) = (423.688, 448.295, 468.794), stdev = 16.819
  CI (99.9%): [383.532, 513.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 15.14% complete, ETA 1 days, 04:18:13
# Fork: 1 of 1
# Warmup Iteration   1: 575.036 ms/op
# Warmup Iteration   2: 473.726 ms/op
# Warmup Iteration   3: 491.994 ms/op
# Warmup Iteration   4: 450.388 ms/op
# Warmup Iteration   5: 451.092 ms/op
Iteration   1: 439.390 ms/op
Iteration   2: 446.403 ms/op
Iteration   3: 456.037 ms/op
Iteration   4: 495.823 ms/op
Iteration   5: 485.589 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  464.649 ±(99.9%) 95.404 ms/op [Average]
  (min, avg, max) = (439.390, 464.649, 495.823), stdev = 24.776
  CI (99.9%): [369.244, 560.053] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 15.22% complete, ETA 1 days, 04:09:00
# Fork: 1 of 1
# Warmup Iteration   1: 75144.189 ms/op
# Warmup Iteration   2: 72879.638 ms/op
# Warmup Iteration   3: 76913.452 ms/op
# Warmup Iteration   4: 77025.396 ms/op
# Warmup Iteration   5: 74122.608 ms/op
Iteration   1: 70056.819 ms/op
Iteration   2: 77520.478 ms/op
Iteration   3: 73686.860 ms/op
Iteration   4: 79845.226 ms/op
Iteration   5: 65872.238 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  73396.324 ±(99.9%) 21649.863 ms/op [Average]
  (min, avg, max) = (65872.238, 73396.324, 79845.226), stdev = 5622.401
  CI (99.9%): [51746.461, 95046.187] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 15.30% complete, ETA 1 days, 05:07:11
# Fork: 1 of 1
# Warmup Iteration   1: 62593.207 ms/op
# Warmup Iteration   2: 62394.869 ms/op
# Warmup Iteration   3: 65341.097 ms/op
# Warmup Iteration   4: 90090.748 ms/op
# Warmup Iteration   5: 69907.446 ms/op
Iteration   1: 78337.537 ms/op
Iteration   2: 78861.362 ms/op
Iteration   3: 66222.967 ms/op
Iteration   4: 80212.744 ms/op
Iteration   5: 73762.350 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  75479.392 ±(99.9%) 22006.099 ms/op [Average]
  (min, avg, max) = (66222.967, 75479.392, 80212.744), stdev = 5714.914
  CI (99.9%): [53473.293, 97485.490] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 15.38% complete, ETA 1 days, 06:03:13
# Fork: 1 of 1
# Warmup Iteration   1: 35.456 ms/op
# Warmup Iteration   2: 29.543 ms/op
# Warmup Iteration   3: 28.039 ms/op
# Warmup Iteration   4: 27.174 ms/op
# Warmup Iteration   5: 26.850 ms/op
Iteration   1: 27.723 ms/op
Iteration   2: 27.678 ms/op
Iteration   3: 27.660 ms/op
Iteration   4: 27.639 ms/op
Iteration   5: 26.688 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  27.477 ±(99.9%) 1.703 ms/op [Average]
  (min, avg, max) = (26.688, 27.477, 27.723), stdev = 0.442
  CI (99.9%): [25.775, 29.180] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 15.46% complete, ETA 1 days, 05:53:09
# Fork: 1 of 1
# Warmup Iteration   1: 33.916 ms/op
# Warmup Iteration   2: 27.767 ms/op
# Warmup Iteration   3: 27.674 ms/op
# Warmup Iteration   4: 27.484 ms/op
# Warmup Iteration   5: 28.497 ms/op
Iteration   1: 27.031 ms/op
Iteration   2: 27.322 ms/op
Iteration   3: 29.810 ms/op
Iteration   4: 29.546 ms/op
Iteration   5: 30.136 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  28.769 ±(99.9%) 5.669 ms/op [Average]
  (min, avg, max) = (27.031, 28.769, 30.136), stdev = 1.472
  CI (99.9%): [23.100, 34.438] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 15.54% complete, ETA 1 days, 05:43:11
# Fork: 1 of 1
# Warmup Iteration   1: 1017.336 ms/op
# Warmup Iteration   2: 876.833 ms/op
# Warmup Iteration   3: 865.820 ms/op
# Warmup Iteration   4: 862.835 ms/op
# Warmup Iteration   5: 817.669 ms/op
Iteration   1: 824.865 ms/op
Iteration   2: 825.124 ms/op
Iteration   3: 852.473 ms/op
Iteration   4: 891.727 ms/op
Iteration   5: 890.364 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  856.911 ±(99.9%) 127.542 ms/op [Average]
  (min, avg, max) = (824.865, 856.911, 891.727), stdev = 33.122
  CI (99.9%): [729.369, 984.453] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 15.63% complete, ETA 1 days, 05:33:52
# Fork: 1 of 1
# Warmup Iteration   1: 1004.407 ms/op
# Warmup Iteration   2: 863.602 ms/op
# Warmup Iteration   3: 845.978 ms/op
# Warmup Iteration   4: 860.970 ms/op
# Warmup Iteration   5: 880.660 ms/op
Iteration   1: 942.441 ms/op
Iteration   2: 952.316 ms/op
Iteration   3: 932.885 ms/op
Iteration   4: 904.191 ms/op
Iteration   5: 934.379 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  933.242 ±(99.9%) 69.253 ms/op [Average]
  (min, avg, max) = (904.191, 933.242, 952.316), stdev = 17.985
  CI (99.9%): [863.989, 1002.495] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 15.71% complete, ETA 1 days, 05:24:44
# Fork: 1 of 1
# Warmup Iteration   1: 175136.691 ms/op
# Warmup Iteration   2: 143558.790 ms/op
# Warmup Iteration   3: 223273.585 ms/op
# Warmup Iteration   4: 209984.839 ms/op
# Warmup Iteration   5: 232330.407 ms/op
Iteration   1: 219717.606 ms/op
Iteration   2: 204622.081 ms/op
Iteration   3: 222348.549 ms/op
Iteration   4: 196349.185 ms/op
Iteration   5: 180401.530 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  204687.790 ±(99.9%) 66616.052 ms/op [Average]
  (min, avg, max) = (180401.530, 204687.790, 222348.549), stdev = 17299.977
  CI (99.9%): [138071.739, 271303.842] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 15.79% complete, ETA 1 days, 08:12:42
# Fork: 1 of 1
# Warmup Iteration   1: 183981.249 ms/op
# Warmup Iteration   2: 189529.811 ms/op
# Warmup Iteration   3: 200868.399 ms/op
# Warmup Iteration   4: 189782.002 ms/op
# Warmup Iteration   5: 176513.258 ms/op
Iteration   1: 193607.617 ms/op
Iteration   2: 176616.239 ms/op
Iteration   3: 171492.026 ms/op
Iteration   4: 192903.801 ms/op
Iteration   5: 180259.890 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  182975.915 ±(99.9%) 38085.282 ms/op [Average]
  (min, avg, max) = (171492.026, 182975.915, 193607.617), stdev = 9890.627
  CI (99.9%): [144890.632, 221061.197] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 15.87% complete, ETA 1 days, 10:45:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.030 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.023, 0.030, 0.038), stdev = 0.007
  CI (99.9%): [0.002, 0.057] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 15.95% complete, ETA 1 days, 10:33:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.049 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.036 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (0.024, 0.036, 0.050), stdev = 0.012
  CI (99.9%): [? 0, 0.084] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 16.03% complete, ETA 1 days, 10:22:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.881 ms/op
# Warmup Iteration   2: 0.931 ms/op
# Warmup Iteration   3: 0.912 ms/op
# Warmup Iteration   4: 0.928 ms/op
# Warmup Iteration   5: 0.885 ms/op
Iteration   1: 0.862 ms/op
Iteration   2: 0.855 ms/op
Iteration   3: 1.048 ms/op
Iteration   4: 1.558 ms/op
Iteration   5: 1.312 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.127 ±(99.9%) 1.173 ms/op [Average]
  (min, avg, max) = (0.855, 1.127, 1.558), stdev = 0.305
  CI (99.9%): [? 0, 2.300] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 16.11% complete, ETA 1 days, 10:10:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.997 ms/op
# Warmup Iteration   2: 1.027 ms/op
# Warmup Iteration   3: 0.987 ms/op
# Warmup Iteration   4: 0.915 ms/op
# Warmup Iteration   5: 0.875 ms/op
Iteration   1: 0.874 ms/op
Iteration   2: 0.858 ms/op
Iteration   3: 1.108 ms/op
Iteration   4: 1.602 ms/op
Iteration   5: 1.519 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.192 ±(99.9%) 1.354 ms/op [Average]
  (min, avg, max) = (0.858, 1.192, 1.602), stdev = 0.352
  CI (99.9%): [? 0, 2.546] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 16.19% complete, ETA 1 days, 09:59:43
# Fork: 1 of 1
# Warmup Iteration   1: 195.025 ms/op
# Warmup Iteration   2: 183.679 ms/op
# Warmup Iteration   3: 173.647 ms/op
# Warmup Iteration   4: 193.599 ms/op
# Warmup Iteration   5: 181.436 ms/op
Iteration   1: 149.479 ms/op
Iteration   2: 272.842 ms/op
Iteration   3: 295.841 ms/op
Iteration   4: 219.833 ms/op
Iteration   5: 288.726 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  245.344 ±(99.9%) 236.031 ms/op [Average]
  (min, avg, max) = (149.479, 245.344, 295.841), stdev = 61.297
  CI (99.9%): [9.313, 481.375] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 16.27% complete, ETA 1 days, 09:48:50
# Fork: 1 of 1
# Warmup Iteration   1: 217.609 ms/op
# Warmup Iteration   2: 221.416 ms/op
# Warmup Iteration   3: 157.830 ms/op
# Warmup Iteration   4: 189.883 ms/op
# Warmup Iteration   5: 194.269 ms/op
Iteration   1: 304.259 ms/op
Iteration   2: 259.102 ms/op
Iteration   3: 268.398 ms/op
Iteration   4: 377.962 ms/op
Iteration   5: 262.146 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  294.373 ±(99.9%) 192.938 ms/op [Average]
  (min, avg, max) = (259.102, 294.373, 377.962), stdev = 50.105
  CI (99.9%): [101.435, 487.311] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 16.35% complete, ETA 1 days, 09:38:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.099 ms/op
# Warmup Iteration   2: 0.072 ms/op
# Warmup Iteration   3: 0.073 ms/op
# Warmup Iteration   4: 0.068 ms/op
# Warmup Iteration   5: 0.074 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.085 ms/op
Iteration   4: 0.112 ms/op
Iteration   5: 0.107 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.089 ±(99.9%) 0.075 ms/op [Average]
  (min, avg, max) = (0.070, 0.089, 0.112), stdev = 0.019
  CI (99.9%): [0.014, 0.164] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 16.43% complete, ETA 1 days, 09:27:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.059 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.055 ms/op
Iteration   1: 0.056 ms/op
Iteration   2: 0.056 ms/op
Iteration   3: 0.069 ms/op
Iteration   4: 0.115 ms/op
Iteration   5: 0.093 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.078 ±(99.9%) 0.099 ms/op [Average]
  (min, avg, max) = (0.056, 0.078, 0.115), stdev = 0.026
  CI (99.9%): [? 0, 0.177] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 16.51% complete, ETA 1 days, 09:16:25
# Fork: 1 of 1
# Warmup Iteration   1: 1.720 ms/op
# Warmup Iteration   2: 1.624 ms/op
# Warmup Iteration   3: 1.544 ms/op
# Warmup Iteration   4: 1.625 ms/op
# Warmup Iteration   5: 1.647 ms/op
Iteration   1: 1.725 ms/op
Iteration   2: 1.636 ms/op
Iteration   3: 1.995 ms/op
Iteration   4: 2.936 ms/op
Iteration   5: 2.664 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.191 ±(99.9%) 2.231 ms/op [Average]
  (min, avg, max) = (1.636, 2.191, 2.936), stdev = 0.580
  CI (99.9%): [? 0, 4.423] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 16.59% complete, ETA 1 days, 09:05:45
# Fork: 1 of 1
# Warmup Iteration   1: 1.663 ms/op
# Warmup Iteration   2: 1.628 ms/op
# Warmup Iteration   3: 1.595 ms/op
# Warmup Iteration   4: 1.638 ms/op
# Warmup Iteration   5: 1.647 ms/op
Iteration   1: 1.706 ms/op
Iteration   2: 1.939 ms/op
Iteration   3: 2.264 ms/op
Iteration   4: 3.271 ms/op
Iteration   5: 3.132 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.462 ±(99.9%) 2.715 ms/op [Average]
  (min, avg, max) = (1.706, 2.462, 3.271), stdev = 0.705
  CI (99.9%): [? 0, 5.177] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 16.67% complete, ETA 1 days, 08:55:10
# Fork: 1 of 1
# Warmup Iteration   1: 389.704 ms/op
# Warmup Iteration   2: 327.480 ms/op
# Warmup Iteration   3: 363.485 ms/op
# Warmup Iteration   4: 292.154 ms/op
# Warmup Iteration   5: 265.341 ms/op
Iteration   1: 348.400 ms/op
Iteration   2: 438.038 ms/op
Iteration   3: 524.119 ms/op
Iteration   4: 376.677 ms/op
Iteration   5: 446.799 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  426.806 ±(99.9%) 262.974 ms/op [Average]
  (min, avg, max) = (348.400, 426.806, 524.119), stdev = 68.294
  CI (99.9%): [163.832, 689.781] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 16.75% complete, ETA 1 days, 08:44:56
# Fork: 1 of 1
# Warmup Iteration   1: 314.467 ms/op
# Warmup Iteration   2: 253.943 ms/op
# Warmup Iteration   3: 286.831 ms/op
# Warmup Iteration   4: 286.128 ms/op
# Warmup Iteration   5: 256.176 ms/op
Iteration   1: 256.298 ms/op
Iteration   2: 571.862 ms/op
Iteration   3: 344.699 ms/op
Iteration   4: 367.394 ms/op
Iteration   5: 367.034 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  381.457 ±(99.9%) 446.060 ms/op [Average]
  (min, avg, max) = (256.298, 381.457, 571.862), stdev = 115.840
  CI (99.9%): [? 0, 827.517] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 16.83% complete, ETA 1 days, 08:34:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.112 ms/op
# Warmup Iteration   2: 0.101 ms/op
# Warmup Iteration   3: 0.106 ms/op
# Warmup Iteration   4: 0.108 ms/op
# Warmup Iteration   5: 0.108 ms/op
Iteration   1: 0.108 ms/op
Iteration   2: 0.107 ms/op
Iteration   3: 0.135 ms/op
Iteration   4: 0.192 ms/op
Iteration   5: 0.158 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.140 ±(99.9%) 0.139 ms/op [Average]
  (min, avg, max) = (0.107, 0.140, 0.192), stdev = 0.036
  CI (99.9%): [0.001, 0.279] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 16.91% complete, ETA 1 days, 08:24:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.111 ms/op
# Warmup Iteration   2: 0.104 ms/op
# Warmup Iteration   3: 0.115 ms/op
# Warmup Iteration   4: 0.115 ms/op
# Warmup Iteration   5: 0.117 ms/op
Iteration   1: 0.119 ms/op
Iteration   2: 0.112 ms/op
Iteration   3: 0.134 ms/op
Iteration   4: 0.209 ms/op
Iteration   5: 0.186 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.152 ±(99.9%) 0.166 ms/op [Average]
  (min, avg, max) = (0.112, 0.152, 0.209), stdev = 0.043
  CI (99.9%): [? 0, 0.318] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 16.99% complete, ETA 1 days, 08:14:20
# Fork: 1 of 1
# Warmup Iteration   1: 3.374 ms/op
# Warmup Iteration   2: 3.257 ms/op
# Warmup Iteration   3: 3.252 ms/op
# Warmup Iteration   4: 3.235 ms/op
# Warmup Iteration   5: 3.333 ms/op
Iteration   1: 3.445 ms/op
Iteration   2: 3.388 ms/op
Iteration   3: 4.241 ms/op
Iteration   4: 6.250 ms/op
Iteration   5: 6.286 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  4.722 ±(99.9%) 5.588 ms/op [Average]
  (min, avg, max) = (3.388, 4.722, 6.286), stdev = 1.451
  CI (99.9%): [? 0, 10.310] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 17.07% complete, ETA 1 days, 08:04:14
# Fork: 1 of 1
# Warmup Iteration   1: 4.170 ms/op
# Warmup Iteration   2: 3.734 ms/op
# Warmup Iteration   3: 3.881 ms/op
# Warmup Iteration   4: 3.725 ms/op
# Warmup Iteration   5: 3.671 ms/op
Iteration   1: 3.732 ms/op
Iteration   2: 3.993 ms/op
Iteration   3: 4.851 ms/op
Iteration   4: 6.748 ms/op
Iteration   5: 6.336 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  5.132 ±(99.9%) 5.236 ms/op [Average]
  (min, avg, max) = (3.732, 5.132, 6.748), stdev = 1.360
  CI (99.9%): [? 0, 10.369] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 17.15% complete, ETA 1 days, 07:54:14
# Fork: 1 of 1
# Warmup Iteration   1: 806.292 ms/op
# Warmup Iteration   2: 675.534 ms/op
# Warmup Iteration   3: 741.184 ms/op
# Warmup Iteration   4: 790.214 ms/op
# Warmup Iteration   5: 984.884 ms/op
Iteration   1: 1157.519 ms/op
Iteration   2: 1096.628 ms/op
Iteration   3: 834.248 ms/op
Iteration   4: 1091.811 ms/op
Iteration   5: 845.520 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1005.145 ±(99.9%) 589.614 ms/op [Average]
  (min, avg, max) = (834.248, 1005.145, 1157.519), stdev = 153.121
  CI (99.9%): [415.531, 1594.760] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 17.23% complete, ETA 1 days, 07:44:57
# Fork: 1 of 1
# Warmup Iteration   1: 704.477 ms/op
# Warmup Iteration   2: 569.727 ms/op
# Warmup Iteration   3: 610.965 ms/op
# Warmup Iteration   4: 604.399 ms/op
# Warmup Iteration   5: 530.866 ms/op
Iteration   1: 809.322 ms/op
Iteration   2: 1191.537 ms/op
Iteration   3: 887.199 ms/op
Iteration   4: 1139.848 ms/op
Iteration   5: 781.284 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  961.838 ±(99.9%) 735.365 ms/op [Average]
  (min, avg, max) = (781.284, 961.838, 1191.537), stdev = 190.972
  CI (99.9%): [226.474, 1697.203] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 17.31% complete, ETA 1 days, 07:35:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.228 ms/op
# Warmup Iteration   2: 0.199 ms/op
# Warmup Iteration   3: 0.203 ms/op
# Warmup Iteration   4: 0.208 ms/op
# Warmup Iteration   5: 0.217 ms/op
Iteration   1: 0.210 ms/op
Iteration   2: 0.210 ms/op
Iteration   3: 0.257 ms/op
Iteration   4: 0.338 ms/op
Iteration   5: 0.332 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.269 ±(99.9%) 0.242 ms/op [Average]
  (min, avg, max) = (0.210, 0.269, 0.338), stdev = 0.063
  CI (99.9%): [0.027, 0.512] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 17.39% complete, ETA 1 days, 07:25:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.215 ms/op
# Warmup Iteration   2: 0.197 ms/op
# Warmup Iteration   3: 0.193 ms/op
# Warmup Iteration   4: 0.191 ms/op
# Warmup Iteration   5: 0.196 ms/op
Iteration   1: 0.202 ms/op
Iteration   2: 0.210 ms/op
Iteration   3: 0.260 ms/op
Iteration   4: 0.388 ms/op
Iteration   5: 0.357 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.283 ±(99.9%) 0.328 ms/op [Average]
  (min, avg, max) = (0.202, 0.283, 0.388), stdev = 0.085
  CI (99.9%): [? 0, 0.611] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 17.47% complete, ETA 1 days, 07:16:05
# Fork: 1 of 1
# Warmup Iteration   1: 7.055 ms/op
# Warmup Iteration   2: 6.407 ms/op
# Warmup Iteration   3: 6.471 ms/op
# Warmup Iteration   4: 7.770 ms/op
# Warmup Iteration   5: 9.155 ms/op
Iteration   1: 6.835 ms/op
Iteration   2: 6.279 ms/op
Iteration   3: 8.090 ms/op
Iteration   4: 11.050 ms/op
Iteration   5: 10.129 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  8.476 ±(99.9%) 7.945 ms/op [Average]
  (min, avg, max) = (6.279, 8.476, 11.050), stdev = 2.063
  CI (99.9%): [0.531, 16.421] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 17.55% complete, ETA 1 days, 07:06:31
# Fork: 1 of 1
# Warmup Iteration   1: 6.693 ms/op
# Warmup Iteration   2: 6.247 ms/op
# Warmup Iteration   3: 7.066 ms/op
# Warmup Iteration   4: 7.434 ms/op
# Warmup Iteration   5: 7.327 ms/op
Iteration   1: 7.355 ms/op
Iteration   2: 7.247 ms/op
Iteration   3: 9.762 ms/op
Iteration   4: 12.863 ms/op
Iteration   5: 12.548 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  9.955 ±(99.9%) 10.424 ms/op [Average]
  (min, avg, max) = (7.247, 9.955, 12.863), stdev = 2.707
  CI (99.9%): [? 0, 20.379] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 17.63% complete, ETA 1 days, 06:57:03
# Fork: 1 of 1
# Warmup Iteration   1: 1549.286 ms/op
# Warmup Iteration   2: 1289.434 ms/op
# Warmup Iteration   3: 1306.743 ms/op
# Warmup Iteration   4: 1337.190 ms/op
# Warmup Iteration   5: 1129.228 ms/op
Iteration   1: 2299.727 ms/op
Iteration   2: 2082.448 ms/op
Iteration   3: 1722.031 ms/op
Iteration   4: 1855.217 ms/op
Iteration   5: 2155.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2022.888 ±(99.9%) 895.376 ms/op [Average]
  (min, avg, max) = (1722.031, 2022.888, 2299.727), stdev = 232.526
  CI (99.9%): [1127.512, 2918.264] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 17.71% complete, ETA 1 days, 06:48:16
# Fork: 1 of 1
# Warmup Iteration   1: 1740.144 ms/op
# Warmup Iteration   2: 1421.050 ms/op
# Warmup Iteration   3: 1449.163 ms/op
# Warmup Iteration   4: 1466.891 ms/op
# Warmup Iteration   5: 1807.763 ms/op
Iteration   1: 2290.070 ms/op
Iteration   2: 2469.680 ms/op
Iteration   3: 2457.840 ms/op
Iteration   4: 2113.251 ms/op
Iteration   5: 2331.882 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2332.545 ±(99.9%) 559.336 ms/op [Average]
  (min, avg, max) = (2113.251, 2332.545, 2469.680), stdev = 145.258
  CI (99.9%): [1773.209, 2891.880] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 17.79% complete, ETA 1 days, 06:39:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.689 ms/op
# Warmup Iteration   2: 0.555 ms/op
# Warmup Iteration   3: 0.533 ms/op
# Warmup Iteration   4: 0.585 ms/op
# Warmup Iteration   5: 0.608 ms/op
Iteration   1: 0.617 ms/op
Iteration   2: 0.616 ms/op
Iteration   3: 0.813 ms/op
Iteration   4: 0.900 ms/op
Iteration   5: 0.772 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.744 ±(99.9%) 0.482 ms/op [Average]
  (min, avg, max) = (0.616, 0.744, 0.900), stdev = 0.125
  CI (99.9%): [0.262, 1.225] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 17.87% complete, ETA 1 days, 06:30:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.497 ms/op
# Warmup Iteration   2: 0.493 ms/op
# Warmup Iteration   3: 0.525 ms/op
# Warmup Iteration   4: 0.478 ms/op
# Warmup Iteration   5: 0.480 ms/op
Iteration   1: 0.462 ms/op
Iteration   2: 0.463 ms/op
Iteration   3: 0.602 ms/op
Iteration   4: 0.908 ms/op
Iteration   5: 0.824 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  0.652 ±(99.9%) 0.792 ms/op [Average]
  (min, avg, max) = (0.462, 0.652, 0.908), stdev = 0.206
  CI (99.9%): [? 0, 1.444] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 17.95% complete, ETA 1 days, 06:21:25
# Fork: 1 of 1
# Warmup Iteration   1: 15.359 ms/op
# Warmup Iteration   2: 15.928 ms/op
# Warmup Iteration   3: 13.369 ms/op
# Warmup Iteration   4: 12.924 ms/op
# Warmup Iteration   5: 13.010 ms/op
Iteration   1: 13.308 ms/op
Iteration   2: 12.812 ms/op
Iteration   3: 16.409 ms/op
Iteration   4: 22.780 ms/op
Iteration   5: 21.222 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  17.306 ±(99.9%) 17.465 ms/op [Average]
  (min, avg, max) = (12.812, 17.306, 22.780), stdev = 4.536
  CI (99.9%): [? 0, 34.772] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 18.03% complete, ETA 1 days, 06:12:21
# Fork: 1 of 1
# Warmup Iteration   1: 13.892 ms/op
# Warmup Iteration   2: 13.519 ms/op
# Warmup Iteration   3: 14.413 ms/op
# Warmup Iteration   4: 12.576 ms/op
# Warmup Iteration   5: 12.078 ms/op
Iteration   1: 11.925 ms/op
Iteration   2: 12.126 ms/op
Iteration   3: 16.385 ms/op
Iteration   4: 20.226 ms/op
Iteration   5: 22.101 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  16.553 ±(99.9%) 17.784 ms/op [Average]
  (min, avg, max) = (11.925, 16.553, 22.101), stdev = 4.618
  CI (99.9%): [? 0, 34.337] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 18.11% complete, ETA 1 days, 06:03:22
# Fork: 1 of 1
# Warmup Iteration   1: 2020.433 ms/op
# Warmup Iteration   2: 1870.201 ms/op
# Warmup Iteration   3: 2001.760 ms/op
# Warmup Iteration   4: 2638.664 ms/op
# Warmup Iteration   5: 2859.057 ms/op
Iteration   1: 3182.492 ms/op
Iteration   2: 2903.274 ms/op
Iteration   3: 2905.183 ms/op
Iteration   4: 2850.140 ms/op
Iteration   5: 2693.093 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2906.836 ±(99.9%) 680.438 ms/op [Average]
  (min, avg, max) = (2693.093, 2906.836, 3182.492), stdev = 176.708
  CI (99.9%): [2226.398, 3587.275] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 18.19% complete, ETA 1 days, 05:55:42
# Fork: 1 of 1
# Warmup Iteration   1: 2174.541 ms/op
# Warmup Iteration   2: 2051.842 ms/op
# Warmup Iteration   3: 1926.705 ms/op
# Warmup Iteration   4: 2534.673 ms/op
# Warmup Iteration   5: 2826.883 ms/op
Iteration   1: 3034.492 ms/op
Iteration   2: 2756.484 ms/op
Iteration   3: 2986.144 ms/op
Iteration   4: 2665.231 ms/op
Iteration   5: 2735.304 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2835.531 ±(99.9%) 631.453 ms/op [Average]
  (min, avg, max) = (2665.231, 2835.531, 3034.492), stdev = 163.986
  CI (99.9%): [2204.078, 3466.983] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 18.27% complete, ETA 1 days, 05:48:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.873 ms/op
# Warmup Iteration   2: 0.829 ms/op
# Warmup Iteration   3: 0.821 ms/op
# Warmup Iteration   4: 0.818 ms/op
# Warmup Iteration   5: 0.797 ms/op
Iteration   1: 0.806 ms/op
Iteration   2: 0.829 ms/op
Iteration   3: 1.055 ms/op
Iteration   4: 1.531 ms/op
Iteration   5: 1.211 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.086 ±(99.9%) 1.154 ms/op [Average]
  (min, avg, max) = (0.806, 1.086, 1.531), stdev = 0.300
  CI (99.9%): [? 0, 2.240] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 18.35% complete, ETA 1 days, 05:39:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.886 ms/op
# Warmup Iteration   2: 0.828 ms/op
# Warmup Iteration   3: 0.856 ms/op
# Warmup Iteration   4: 0.881 ms/op
# Warmup Iteration   5: 0.852 ms/op
Iteration   1: 0.857 ms/op
Iteration   2: 0.910 ms/op
Iteration   3: 1.107 ms/op
Iteration   4: 1.638 ms/op
Iteration   5: 1.546 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1.212 ±(99.9%) 1.389 ms/op [Average]
  (min, avg, max) = (0.857, 1.212, 1.638), stdev = 0.361
  CI (99.9%): [? 0, 2.601] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 18.43% complete, ETA 1 days, 05:30:37
# Fork: 1 of 1
# Warmup Iteration   1: 33.755 ms/op
# Warmup Iteration   2: 32.252 ms/op
# Warmup Iteration   3: 30.050 ms/op
# Warmup Iteration   4: 28.391 ms/op
# Warmup Iteration   5: 28.894 ms/op
Iteration   1: 31.603 ms/op
Iteration   2: 27.953 ms/op
Iteration   3: 36.582 ms/op
Iteration   4: 46.369 ms/op
Iteration   5: 39.867 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  36.475 ±(99.9%) 27.617 ms/op [Average]
  (min, avg, max) = (27.953, 36.475, 46.369), stdev = 7.172
  CI (99.9%): [8.858, 64.092] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 18.51% complete, ETA 1 days, 05:22:01
# Fork: 1 of 1
# Warmup Iteration   1: 30.022 ms/op
# Warmup Iteration   2: 29.079 ms/op
# Warmup Iteration   3: 29.826 ms/op
# Warmup Iteration   4: 28.467 ms/op
# Warmup Iteration   5: 27.506 ms/op
Iteration   1: 26.830 ms/op
Iteration   2: 26.164 ms/op
Iteration   3: 36.457 ms/op
Iteration   4: 46.619 ms/op
Iteration   5: 43.263 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  35.867 ±(99.9%) 35.838 ms/op [Average]
  (min, avg, max) = (26.164, 35.867, 46.619), stdev = 9.307
  CI (99.9%): [0.028, 71.705] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 18.59% complete, ETA 1 days, 05:13:28
# Fork: 1 of 1
# Warmup Iteration   1: 5097.434 ms/op
# Warmup Iteration   2: 6502.583 ms/op
# Warmup Iteration   3: 6402.093 ms/op
# Warmup Iteration   4: 7073.986 ms/op
# Warmup Iteration   5: 7808.173 ms/op
Iteration   1: 11277.070 ms/op
Iteration   2: 10625.920 ms/op
Iteration   3: 8802.352 ms/op
Iteration   4: 8173.025 ms/op
Iteration   5: 8281.649 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  9432.003 ±(99.9%) 5491.223 ms/op [Average]
  (min, avg, max) = (8173.025, 9432.003, 11277.070), stdev = 1426.053
  CI (99.9%): [3940.781, 14923.226] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 18.67% complete, ETA 1 days, 05:10:09
# Fork: 1 of 1
# Warmup Iteration   1: 4559.554 ms/op
# Warmup Iteration   2: 5303.021 ms/op
# Warmup Iteration   3: 5719.486 ms/op
# Warmup Iteration   4: 5699.434 ms/op
# Warmup Iteration   5: 5677.535 ms/op
Iteration   1: 6940.115 ms/op
Iteration   2: 8251.616 ms/op
Iteration   3: 8529.221 ms/op
Iteration   4: 12088.944 ms/op
Iteration   5: 10240.468 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  9210.072 ±(99.9%) 7673.445 ms/op [Average]
  (min, avg, max) = (6940.115, 9210.072, 12088.944), stdev = 1992.769
  CI (99.9%): [1536.627, 16883.518] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 18.75% complete, ETA 1 days, 05:06:24
# Fork: 1 of 1
# Warmup Iteration   1: 2.269 ms/op
# Warmup Iteration   2: 2.073 ms/op
# Warmup Iteration   3: 2.110 ms/op
# Warmup Iteration   4: 2.175 ms/op
# Warmup Iteration   5: 2.159 ms/op
Iteration   1: 2.116 ms/op
Iteration   2: 2.023 ms/op
Iteration   3: 2.561 ms/op
Iteration   4: 3.566 ms/op
Iteration   5: 3.493 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.752 ±(99.9%) 2.845 ms/op [Average]
  (min, avg, max) = (2.023, 2.752, 3.566), stdev = 0.739
  CI (99.9%): [? 0, 5.597] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 18.83% complete, ETA 1 days, 04:58:00
# Fork: 1 of 1
# Warmup Iteration   1: 2.469 ms/op
# Warmup Iteration   2: 2.199 ms/op
# Warmup Iteration   3: 1.745 ms/op
# Warmup Iteration   4: 1.679 ms/op
# Warmup Iteration   5: 1.681 ms/op
Iteration   1: 1.670 ms/op
Iteration   2: 1.667 ms/op
Iteration   3: 2.265 ms/op
Iteration   4: 2.913 ms/op
Iteration   5: 2.372 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  2.177 ±(99.9%) 2.023 ms/op [Average]
  (min, avg, max) = (1.667, 2.177, 2.913), stdev = 0.525
  CI (99.9%): [0.154, 4.200] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 18.91% complete, ETA 1 days, 04:49:41
# Fork: 1 of 1
# Warmup Iteration   1: 52.585 ms/op
# Warmup Iteration   2: 52.434 ms/op
# Warmup Iteration   3: 55.703 ms/op
# Warmup Iteration   4: 58.251 ms/op
# Warmup Iteration   5: 56.894 ms/op
Iteration   1: 55.871 ms/op
Iteration   2: 54.375 ms/op
Iteration   3: 74.235 ms/op
Iteration   4: 72.074 ms/op
Iteration   5: 70.587 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  65.428 ±(99.9%) 36.624 ms/op [Average]
  (min, avg, max) = (54.375, 65.428, 74.235), stdev = 9.511
  CI (99.9%): [28.804, 102.053] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 18.99% complete, ETA 1 days, 04:41:27
# Fork: 1 of 1
# Warmup Iteration   1: 54.375 ms/op
# Warmup Iteration   2: 51.617 ms/op
# Warmup Iteration   3: 50.668 ms/op
# Warmup Iteration   4: 47.650 ms/op
# Warmup Iteration   5: 46.990 ms/op
Iteration   1: 47.433 ms/op
Iteration   2: 47.566 ms/op
Iteration   3: 70.452 ms/op
Iteration   4: 105.259 ms/op
Iteration   5: 89.693 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  72.080 ±(99.9%) 98.589 ms/op [Average]
  (min, avg, max) = (47.433, 72.080, 105.259), stdev = 25.603
  CI (99.9%): [? 0, 170.669] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 19.07% complete, ETA 1 days, 04:33:18
# Fork: 1 of 1
# Warmup Iteration   1: 11563.989 ms/op
# Warmup Iteration   2: 14282.566 ms/op
# Warmup Iteration   3: 16836.358 ms/op
# Warmup Iteration   4: 16267.722 ms/op
# Warmup Iteration   5: 17814.441 ms/op
Iteration   1: 18732.819 ms/op
Iteration   2: 15628.645 ms/op
Iteration   3: 14745.425 ms/op
Iteration   4: 15974.740 ms/op
Iteration   5: 17963.632 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  16609.052 ±(99.9%) 6438.159 ms/op [Average]
  (min, avg, max) = (14745.425, 16609.052, 18732.819), stdev = 1671.969
  CI (99.9%): [10170.893, 23047.211] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 19.15% complete, ETA 1 days, 04:35:48
# Fork: 1 of 1
# Warmup Iteration   1: 12659.749 ms/op
# Warmup Iteration   2: 16184.940 ms/op
# Warmup Iteration   3: 13959.339 ms/op
# Warmup Iteration   4: 16266.374 ms/op
# Warmup Iteration   5: 18712.762 ms/op
Iteration   1: 21889.172 ms/op
Iteration   2: 15648.200 ms/op
Iteration   3: 10588.110 ms/op
Iteration   4: 11883.289 ms/op
Iteration   5: 11971.428 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  14396.040 ±(99.9%) 17688.661 ms/op [Average]
  (min, avg, max) = (10588.110, 14396.040, 21889.172), stdev = 4593.689
  CI (99.9%): [? 0, 32084.701] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 19.23% complete, ETA 1 days, 04:37:35
# Fork: 1 of 1
# Warmup Iteration   1: 3.477 ms/op
# Warmup Iteration   2: 3.160 ms/op
# Warmup Iteration   3: 3.408 ms/op
# Warmup Iteration   4: 4.167 ms/op
# Warmup Iteration   5: 4.137 ms/op
Iteration   1: 3.940 ms/op
Iteration   2: 3.983 ms/op
Iteration   3: 3.972 ms/op
Iteration   4: 4.090 ms/op
Iteration   5: 3.835 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  3.964 ±(99.9%) 0.353 ms/op [Average]
  (min, avg, max) = (3.835, 3.964, 4.090), stdev = 0.092
  CI (99.9%): [3.612, 4.317] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 19.31% complete, ETA 1 days, 04:29:30
# Fork: 1 of 1
# Warmup Iteration   1: 3.384 ms/op
# Warmup Iteration   2: 3.179 ms/op
# Warmup Iteration   3: 3.399 ms/op
# Warmup Iteration   4: 4.213 ms/op
# Warmup Iteration   5: 3.549 ms/op
Iteration   1: 3.193 ms/op
Iteration   2: 3.182 ms/op
Iteration   3: 3.214 ms/op
Iteration   4: 3.294 ms/op
Iteration   5: 3.286 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  3.234 ±(99.9%) 0.202 ms/op [Average]
  (min, avg, max) = (3.182, 3.234, 3.294), stdev = 0.053
  CI (99.9%): [3.032, 3.436] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 19.39% complete, ETA 1 days, 04:21:28
# Fork: 1 of 1
# Warmup Iteration   1: 107.922 ms/op
# Warmup Iteration   2: 107.357 ms/op
# Warmup Iteration   3: 99.877 ms/op
# Warmup Iteration   4: 104.005 ms/op
# Warmup Iteration   5: 106.236 ms/op
Iteration   1: 107.622 ms/op
Iteration   2: 100.806 ms/op
Iteration   3: 106.638 ms/op
Iteration   4: 107.059 ms/op
Iteration   5: 102.480 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  104.921 ±(99.9%) 11.823 ms/op [Average]
  (min, avg, max) = (100.806, 104.921, 107.622), stdev = 3.071
  CI (99.9%): [93.098, 116.744] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 19.47% complete, ETA 1 days, 04:13:32
# Fork: 1 of 1
# Warmup Iteration   1: 115.862 ms/op
# Warmup Iteration   2: 108.044 ms/op
# Warmup Iteration   3: 106.866 ms/op
# Warmup Iteration   4: 106.219 ms/op
# Warmup Iteration   5: 105.584 ms/op
Iteration   1: 107.451 ms/op
Iteration   2: 110.913 ms/op
Iteration   3: 103.049 ms/op
Iteration   4: 99.378 ms/op
Iteration   5: 100.386 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  104.235 ±(99.9%) 18.741 ms/op [Average]
  (min, avg, max) = (99.378, 104.235, 110.913), stdev = 4.867
  CI (99.9%): [85.494, 122.976] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 19.55% complete, ETA 1 days, 04:05:41
# Fork: 1 of 1
# Warmup Iteration   1: 15382.518 ms/op
# Warmup Iteration   2: 17442.521 ms/op
# Warmup Iteration   3: 19970.843 ms/op
# Warmup Iteration   4: 25990.034 ms/op
# Warmup Iteration   5: 23549.377 ms/op
Iteration   1: 28275.225 ms/op
Iteration   2: 27025.563 ms/op
Iteration   3: 28833.218 ms/op
Iteration   4: 25611.400 ms/op
Iteration   5: 22460.355 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  26441.152 ±(99.9%) 9810.185 ms/op [Average]
  (min, avg, max) = (22460.355, 26441.152, 28833.218), stdev = 2547.674
  CI (99.9%): [16630.967, 36251.337] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 19.63% complete, ETA 1 days, 04:13:13
# Fork: 1 of 1
# Warmup Iteration   1: 16378.461 ms/op
# Warmup Iteration   2: 20515.826 ms/op
# Warmup Iteration   3: 20303.032 ms/op
# Warmup Iteration   4: 23988.933 ms/op
# Warmup Iteration   5: 34441.913 ms/op
Iteration   1: 30261.346 ms/op
Iteration   2: 24775.107 ms/op
Iteration   3: 23095.354 ms/op
Iteration   4: 24761.882 ms/op
Iteration   5: 26234.865 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  25825.711 ±(99.9%) 10462.954 ms/op [Average]
  (min, avg, max) = (23095.354, 25825.711, 30261.346), stdev = 2717.196
  CI (99.9%): [15362.757, 36288.664] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 19.71% complete, ETA 1 days, 04:21:23
# Fork: 1 of 1
# Warmup Iteration   1: 6.096 ms/op
# Warmup Iteration   2: 5.855 ms/op
# Warmup Iteration   3: 5.931 ms/op
# Warmup Iteration   4: 5.998 ms/op
# Warmup Iteration   5: 5.965 ms/op
Iteration   1: 5.965 ms/op
Iteration   2: 5.940 ms/op
Iteration   3: 7.794 ms/op
Iteration   4: 9.499 ms/op
Iteration   5: 9.645 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  7.769 ±(99.9%) 6.972 ms/op [Average]
  (min, avg, max) = (5.940, 7.769, 9.645), stdev = 1.811
  CI (99.9%): [0.797, 14.740] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 19.79% complete, ETA 1 days, 04:13:31
# Fork: 1 of 1
# Warmup Iteration   1: 6.282 ms/op
# Warmup Iteration   2: 5.713 ms/op
# Warmup Iteration   3: 5.736 ms/op
# Warmup Iteration   4: 5.726 ms/op
# Warmup Iteration   5: 5.779 ms/op
Iteration   1: 5.784 ms/op
Iteration   2: 5.796 ms/op
Iteration   3: 7.355 ms/op
Iteration   4: 10.233 ms/op
Iteration   5: 10.651 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  7.964 ±(99.9%) 9.070 ms/op [Average]
  (min, avg, max) = (5.784, 7.964, 10.651), stdev = 2.355
  CI (99.9%): [? 0, 17.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 19.87% complete, ETA 1 days, 04:05:43
# Fork: 1 of 1
# Warmup Iteration   1: 197.463 ms/op
# Warmup Iteration   2: 183.334 ms/op
# Warmup Iteration   3: 177.591 ms/op
# Warmup Iteration   4: 180.341 ms/op
# Warmup Iteration   5: 178.830 ms/op
Iteration   1: 178.798 ms/op
Iteration   2: 176.743 ms/op
Iteration   3: 284.107 ms/op
Iteration   4: 309.986 ms/op
Iteration   5: 296.768 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  249.280 ±(99.9%) 253.840 ms/op [Average]
  (min, avg, max) = (176.743, 249.280, 309.986), stdev = 65.921
  CI (99.9%): [? 0, 503.120] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 19.95% complete, ETA 1 days, 03:58:02
# Fork: 1 of 1
# Warmup Iteration   1: 187.376 ms/op
# Warmup Iteration   2: 173.438 ms/op
# Warmup Iteration   3: 167.250 ms/op
# Warmup Iteration   4: 170.584 ms/op
# Warmup Iteration   5: 175.942 ms/op
Iteration   1: 170.704 ms/op
Iteration   2: 177.385 ms/op
Iteration   3: 248.452 ms/op
Iteration   4: 321.293 ms/op
Iteration   5: 325.095 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  248.586 ±(99.9%) 287.352 ms/op [Average]
  (min, avg, max) = (170.704, 248.586, 325.095), stdev = 74.624
  CI (99.9%): [? 0, 535.938] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 20.03% complete, ETA 1 days, 03:50:25
# Fork: 1 of 1
# Warmup Iteration   1: 44846.827 ms/op
# Warmup Iteration   2: 49555.518 ms/op
# Warmup Iteration   3: 49340.653 ms/op
# Warmup Iteration   4: 54857.461 ms/op
# Warmup Iteration   5: 49042.854 ms/op
Iteration   1: 50661.575 ms/op
Iteration   2: 47642.037 ms/op
Iteration   3: 52616.946 ms/op
Iteration   4: 54147.841 ms/op
Iteration   5: 59511.380 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  52915.956 ±(99.9%) 17004.314 ms/op [Average]
  (min, avg, max) = (47642.037, 52915.956, 59511.380), stdev = 4415.966
  CI (99.9%): [35911.642, 69920.269] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 20.11% complete, ETA 1 days, 04:16:05
# Fork: 1 of 1
# Warmup Iteration   1: 42507.699 ms/op
# Warmup Iteration   2: 55152.208 ms/op
# Warmup Iteration   3: 47477.117 ms/op
# Warmup Iteration   4: 48020.462 ms/op
# Warmup Iteration   5: 47191.845 ms/op
Iteration   1: 47493.349 ms/op
Iteration   2: 43552.678 ms/op
Iteration   3: 45094.291 ms/op
Iteration   4: 56475.880 ms/op
Iteration   5: 53025.079 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  49128.255 ±(99.9%) 21020.925 ms/op [Average]
  (min, avg, max) = (43552.678, 49128.255, 56475.880), stdev = 5459.067
  CI (99.9%): [28107.331, 70149.180] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 20.19% complete, ETA 1 days, 04:39:49
# Fork: 1 of 1
# Warmup Iteration   1: 14.459 ms/op
# Warmup Iteration   2: 13.262 ms/op
# Warmup Iteration   3: 11.975 ms/op
# Warmup Iteration   4: 12.091 ms/op
# Warmup Iteration   5: 11.983 ms/op
Iteration   1: 12.076 ms/op
Iteration   2: 12.372 ms/op
Iteration   3: 14.969 ms/op
Iteration   4: 22.625 ms/op
Iteration   5: 23.688 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  17.146 ±(99.9%) 21.615 ms/op [Average]
  (min, avg, max) = (12.076, 17.146, 23.688), stdev = 5.613
  CI (99.9%): [? 0, 38.762] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 20.27% complete, ETA 1 days, 04:31:59
# Fork: 1 of 1
# Warmup Iteration   1: 12.854 ms/op
# Warmup Iteration   2: 12.451 ms/op
# Warmup Iteration   3: 11.819 ms/op
# Warmup Iteration   4: 11.921 ms/op
# Warmup Iteration   5: 11.871 ms/op
Iteration   1: 11.624 ms/op
Iteration   2: 13.369 ms/op
Iteration   3: 14.763 ms/op
Iteration   4: 19.515 ms/op
Iteration   5: 20.191 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  15.892 ±(99.9%) 14.594 ms/op [Average]
  (min, avg, max) = (11.624, 15.892, 20.191), stdev = 3.790
  CI (99.9%): [1.298, 30.487] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 20.35% complete, ETA 1 days, 04:24:13
# Fork: 1 of 1
# Warmup Iteration   1: 395.793 ms/op
# Warmup Iteration   2: 375.005 ms/op
# Warmup Iteration   3: 365.410 ms/op
# Warmup Iteration   4: 372.599 ms/op
# Warmup Iteration   5: 432.152 ms/op
Iteration   1: 399.187 ms/op
Iteration   2: 521.363 ms/op
Iteration   3: 655.134 ms/op
Iteration   4: 645.985 ms/op
Iteration   5: 804.954 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  605.324 ±(99.9%) 588.809 ms/op [Average]
  (min, avg, max) = (399.187, 605.324, 804.954), stdev = 152.912
  CI (99.9%): [16.515, 1194.134] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 20.43% complete, ETA 1 days, 04:16:41
# Fork: 1 of 1
# Warmup Iteration   1: 470.252 ms/op
# Warmup Iteration   2: 370.580 ms/op
# Warmup Iteration   3: 362.378 ms/op
# Warmup Iteration   4: 368.617 ms/op
# Warmup Iteration   5: 356.081 ms/op
Iteration   1: 352.840 ms/op
Iteration   2: 452.684 ms/op
Iteration   3: 555.978 ms/op
Iteration   4: 581.990 ms/op
Iteration   5: 569.816 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  502.662 ±(99.9%) 378.215 ms/op [Average]
  (min, avg, max) = (352.840, 502.662, 581.990), stdev = 98.221
  CI (99.9%): [124.446, 880.877] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 20.51% complete, ETA 1 days, 04:09:08
# Fork: 1 of 1
# Warmup Iteration   1: 103690.816 ms/op
# Warmup Iteration   2: 105135.493 ms/op
# Warmup Iteration   3: 104574.775 ms/op
# Warmup Iteration   4: 94616.973 ms/op
# Warmup Iteration   5: 94531.278 ms/op
Iteration   1: 112729.466 ms/op
Iteration   2: 100907.079 ms/op
Iteration   3: 97847.271 ms/op
Iteration   4: 95608.800 ms/op
Iteration   5: 93689.327 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  100156.389 ±(99.9%) 28974.739 ms/op [Average]
  (min, avg, max) = (93689.327, 100156.389, 112729.466), stdev = 7524.648
  CI (99.9%): [71181.650, 129131.127] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 20.59% complete, ETA 1 days, 05:05:25
# Fork: 1 of 1
# Warmup Iteration   1: 81251.743 ms/op
# Warmup Iteration   2: 83116.107 ms/op
# Warmup Iteration   3: 85438.185 ms/op
# Warmup Iteration   4: 79351.626 ms/op
# Warmup Iteration   5: 87559.041 ms/op
Iteration   1: 84014.700 ms/op
Iteration   2: 79824.271 ms/op
Iteration   3: 84780.030 ms/op
Iteration   4: 81305.148 ms/op
Iteration   5: 80224.683 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  82029.766 ±(99.9%) 8642.855 ms/op [Average]
  (min, avg, max) = (79824.271, 82029.766, 84780.030), stdev = 2244.522
  CI (99.9%): [73386.911, 90672.622] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 20.67% complete, ETA 1 days, 05:49:51
# Fork: 1 of 1
# Warmup Iteration   1: 24.320 ms/op
# Warmup Iteration   2: 22.254 ms/op
# Warmup Iteration   3: 22.710 ms/op
# Warmup Iteration   4: 22.337 ms/op
# Warmup Iteration   5: 22.255 ms/op
Iteration   1: 22.206 ms/op
Iteration   2: 22.371 ms/op
Iteration   3: 28.188 ms/op
Iteration   4: 40.881 ms/op
Iteration   5: 41.358 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  31.001 ±(99.9%) 36.763 ms/op [Average]
  (min, avg, max) = (22.206, 31.001, 41.358), stdev = 9.547
  CI (99.9%): [? 0, 67.764] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 20.75% complete, ETA 1 days, 05:41:49
# Fork: 1 of 1
# Warmup Iteration   1: 24.846 ms/op
# Warmup Iteration   2: 22.808 ms/op
# Warmup Iteration   3: 22.468 ms/op
# Warmup Iteration   4: 22.658 ms/op
# Warmup Iteration   5: 22.543 ms/op
Iteration   1: 22.295 ms/op
Iteration   2: 22.412 ms/op
Iteration   3: 27.834 ms/op
Iteration   4: 41.993 ms/op
Iteration   5: 38.199 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  30.546 ±(99.9%) 35.039 ms/op [Average]
  (min, avg, max) = (22.295, 30.546, 41.993), stdev = 9.099
  CI (99.9%): [? 0, 65.585] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 20.83% complete, ETA 1 days, 05:33:50
# Fork: 1 of 1
# Warmup Iteration   1: 733.607 ms/op
# Warmup Iteration   2: 681.905 ms/op
# Warmup Iteration   3: 670.295 ms/op
# Warmup Iteration   4: 680.326 ms/op
# Warmup Iteration   5: 678.093 ms/op
Iteration   1: 890.304 ms/op
Iteration   2: 1025.256 ms/op
Iteration   3: 1104.879 ms/op
Iteration   4: 1067.366 ms/op
Iteration   5: 1126.565 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1042.874 ±(99.9%) 360.383 ms/op [Average]
  (min, avg, max) = (890.304, 1042.874, 1126.565), stdev = 93.590
  CI (99.9%): [682.491, 1403.257] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 20.91% complete, ETA 1 days, 05:26:06
# Fork: 1 of 1
# Warmup Iteration   1: 723.414 ms/op
# Warmup Iteration   2: 676.205 ms/op
# Warmup Iteration   3: 673.440 ms/op
# Warmup Iteration   4: 677.993 ms/op
# Warmup Iteration   5: 670.944 ms/op
Iteration   1: 865.065 ms/op
Iteration   2: 1061.739 ms/op
Iteration   3: 1143.454 ms/op
Iteration   4: 1136.270 ms/op
Iteration   5: 1139.323 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  1069.170 ±(99.9%) 458.276 ms/op [Average]
  (min, avg, max) = (865.065, 1069.170, 1143.454), stdev = 119.013
  CI (99.9%): [610.894, 1527.446] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 20.99% complete, ETA 1 days, 05:18:25
# Fork: 1 of 1
# Warmup Iteration   1: 165102.034 ms/op
# Warmup Iteration   2: 167940.050 ms/op
# Warmup Iteration   3: 171731.611 ms/op
# Warmup Iteration   4: 169207.651 ms/op
# Warmup Iteration   5: 166810.038 ms/op
Iteration   1: 168756.471 ms/op
Iteration   2: 163574.247 ms/op
Iteration   3: 161389.745 ms/op
Iteration   4: 168270.349 ms/op
Iteration   5: 168978.585 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  166193.879 ±(99.9%) 13418.730 ms/op [Average]
  (min, avg, max) = (161389.745, 166193.879, 168978.585), stdev = 3484.802
  CI (99.9%): [152775.149, 179612.609] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 21.07% complete, ETA 1 days, 06:54:25
# Fork: 1 of 1
# Warmup Iteration   1: 174254.163 ms/op
# Warmup Iteration   2: 174560.259 ms/op
# Warmup Iteration   3: 177213.879 ms/op
# Warmup Iteration   4: 176266.254 ms/op
# Warmup Iteration   5: 176339.156 ms/op
Iteration   1: 174209.222 ms/op
Iteration   2: 177575.799 ms/op
Iteration   3: 175754.611 ms/op
Iteration   4: 180332.687 ms/op
Iteration   5: 199600.865 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark":
  181494.637 ±(99.9%) 39950.689 ms/op [Average]
  (min, avg, max) = (174209.222, 181494.637, 199600.865), stdev = 10375.067
  CI (99.9%): [141543.948, 221445.326] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 21.15% complete, ETA 1 days, 08:36:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.003 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 21.23% complete, ETA 1 days, 08:27:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 21.31% complete, ETA 1 days, 08:19:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 21.39% complete, ETA 1 days, 08:10:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 21.47% complete, ETA 1 days, 08:02:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 21.55% complete, ETA 1 days, 07:53:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 21.63% complete, ETA 1 days, 07:45:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 21.71% complete, ETA 1 days, 07:37:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.002, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 21.79% complete, ETA 1 days, 07:28:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 21.88% complete, ETA 1 days, 07:20:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 21.96% complete, ETA 1 days, 07:12:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 22.04% complete, ETA 1 days, 07:04:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 22.12% complete, ETA 1 days, 06:56:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.009), stdev = 0.001
  CI (99.9%): [0.003, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 22.20% complete, ETA 1 days, 06:48:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.009), stdev = 0.001
  CI (99.9%): [0.004, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 22.28% complete, ETA 1 days, 06:40:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.001
  CI (99.9%): [0.003, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 22.36% complete, ETA 1 days, 06:32:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.001
  CI (99.9%): [0.004, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 22.44% complete, ETA 1 days, 06:24:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.001
  CI (99.9%): [0.004, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 22.52% complete, ETA 1 days, 06:16:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.009), stdev = 0.001
  CI (99.9%): [0.004, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 22.60% complete, ETA 1 days, 06:09:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.015 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.013, 0.015, 0.017), stdev = 0.002
  CI (99.9%): [0.007, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 22.68% complete, ETA 1 days, 06:01:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.015 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.013, 0.015, 0.017), stdev = 0.002
  CI (99.9%): [0.007, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 22.76% complete, ETA 1 days, 05:53:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.015 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.017), stdev = 0.002
  CI (99.9%): [0.005, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 22.84% complete, ETA 1 days, 05:46:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.015 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.012, 0.015, 0.018), stdev = 0.002
  CI (99.9%): [0.005, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 22.92% complete, ETA 1 days, 05:38:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.015 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.013, 0.015, 0.018), stdev = 0.002
  CI (99.9%): [0.006, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 23.00% complete, ETA 1 days, 05:31:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.015 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.013, 0.015, 0.018), stdev = 0.002
  CI (99.9%): [0.007, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 23.08% complete, ETA 1 days, 05:24:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.036 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.030 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.025, 0.030, 0.034), stdev = 0.004
  CI (99.9%): [0.015, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 23.16% complete, ETA 1 days, 05:16:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.036 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.031 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.027, 0.031, 0.034), stdev = 0.004
  CI (99.9%): [0.016, 0.046] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 23.24% complete, ETA 1 days, 05:09:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.029 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.032 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.029, 0.032, 0.039), stdev = 0.004
  CI (99.9%): [0.016, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 23.32% complete, ETA 1 days, 05:02:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.035 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.032 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.028, 0.032, 0.035), stdev = 0.004
  CI (99.9%): [0.017, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 23.40% complete, ETA 1 days, 04:55:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.030 ms/op
# Warmup Iteration   4: 0.031 ms/op
# Warmup Iteration   5: 0.029 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.034 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.029, 0.034, 0.043), stdev = 0.006
  CI (99.9%): [0.012, 0.057] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 23.48% complete, ETA 1 days, 04:47:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.032 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.029 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.035 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.039 ±(99.9%) 0.037 ms/op [Average]
  (min, avg, max) = (0.029, 0.039, 0.052), stdev = 0.010
  CI (99.9%): [0.001, 0.076] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 23.56% complete, ETA 1 days, 04:40:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.075 ms/op
# Warmup Iteration   2: 0.065 ms/op
# Warmup Iteration   3: 0.065 ms/op
# Warmup Iteration   4: 0.063 ms/op
# Warmup Iteration   5: 0.060 ms/op
Iteration   1: 0.061 ms/op
Iteration   2: 0.061 ms/op
Iteration   3: 0.083 ms/op
Iteration   4: 0.085 ms/op
Iteration   5: 0.067 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.071 ±(99.9%) 0.046 ms/op [Average]
  (min, avg, max) = (0.061, 0.071, 0.085), stdev = 0.012
  CI (99.9%): [0.026, 0.117] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 23.64% complete, ETA 1 days, 04:33:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.072 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.060 ms/op
# Warmup Iteration   4: 0.057 ms/op
# Warmup Iteration   5: 0.054 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.056 ms/op
Iteration   3: 0.081 ms/op
Iteration   4: 0.107 ms/op
Iteration   5: 0.081 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.076 ±(99.9%) 0.081 ms/op [Average]
  (min, avg, max) = (0.056, 0.076, 0.107), stdev = 0.021
  CI (99.9%): [? 0, 0.157] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 23.72% complete, ETA 1 days, 04:26:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.074 ms/op
# Warmup Iteration   2: 0.063 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.057 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.052 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.059 ms/op
Iteration   4: 0.069 ms/op
Iteration   5: 0.068 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.060 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.052, 0.060, 0.069), stdev = 0.008
  CI (99.9%): [0.031, 0.089] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 23.80% complete, ETA 1 days, 04:19:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.050 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.055 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.073 ms/op
Iteration   5: 0.069 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.062 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.050, 0.062, 0.073), stdev = 0.009
  CI (99.9%): [0.026, 0.099] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 23.88% complete, ETA 1 days, 04:12:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.066 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.051 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.054 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.055 ms/op
Iteration   3: 0.067 ms/op
Iteration   4: 0.065 ms/op
Iteration   5: 0.065 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.061 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.050, 0.061, 0.067), stdev = 0.007
  CI (99.9%): [0.032, 0.089] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 23.96% complete, ETA 1 days, 04:06:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.068 ms/op
# Warmup Iteration   2: 0.054 ms/op
# Warmup Iteration   3: 0.056 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.053 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.070 ms/op
Iteration   5: 0.062 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.063 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.054, 0.063, 0.074), stdev = 0.009
  CI (99.9%): [0.030, 0.097] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 24.04% complete, ETA 1 days, 03:59:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.144 ms/op
# Warmup Iteration   2: 0.114 ms/op
# Warmup Iteration   3: 0.109 ms/op
# Warmup Iteration   4: 0.117 ms/op
# Warmup Iteration   5: 0.104 ms/op
Iteration   1: 0.100 ms/op
Iteration   2: 0.104 ms/op
Iteration   3: 0.116 ms/op
Iteration   4: 0.127 ms/op
Iteration   5: 0.130 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.115 ±(99.9%) 0.052 ms/op [Average]
  (min, avg, max) = (0.100, 0.115, 0.130), stdev = 0.013
  CI (99.9%): [0.064, 0.167] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 24.12% complete, ETA 1 days, 03:52:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.141 ms/op
# Warmup Iteration   2: 0.116 ms/op
# Warmup Iteration   3: 0.106 ms/op
# Warmup Iteration   4: 0.106 ms/op
# Warmup Iteration   5: 0.102 ms/op
Iteration   1: 0.099 ms/op
Iteration   2: 0.111 ms/op
Iteration   3: 0.119 ms/op
Iteration   4: 0.137 ms/op
Iteration   5: 0.135 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.120 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.099, 0.120, 0.137), stdev = 0.016
  CI (99.9%): [0.058, 0.183] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 24.20% complete, ETA 1 days, 03:45:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.151 ms/op
# Warmup Iteration   2: 0.107 ms/op
# Warmup Iteration   3: 0.113 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.096 ms/op
Iteration   1: 0.103 ms/op
Iteration   2: 0.107 ms/op
Iteration   3: 0.108 ms/op
Iteration   4: 0.138 ms/op
Iteration   5: 0.129 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.117 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.103, 0.117, 0.138), stdev = 0.016
  CI (99.9%): [0.057, 0.177] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 24.28% complete, ETA 1 days, 03:38:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.140 ms/op
# Warmup Iteration   2: 0.117 ms/op
# Warmup Iteration   3: 0.102 ms/op
# Warmup Iteration   4: 0.103 ms/op
# Warmup Iteration   5: 0.100 ms/op
Iteration   1: 0.097 ms/op
Iteration   2: 0.108 ms/op
Iteration   3: 0.108 ms/op
Iteration   4: 0.143 ms/op
Iteration   5: 0.133 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.118 ±(99.9%) 0.074 ms/op [Average]
  (min, avg, max) = (0.097, 0.118, 0.143), stdev = 0.019
  CI (99.9%): [0.044, 0.192] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 24.36% complete, ETA 1 days, 03:32:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.138 ms/op
# Warmup Iteration   2: 0.108 ms/op
# Warmup Iteration   3: 0.111 ms/op
# Warmup Iteration   4: 0.105 ms/op
# Warmup Iteration   5: 0.096 ms/op
Iteration   1: 0.103 ms/op
Iteration   2: 0.105 ms/op
Iteration   3: 0.117 ms/op
Iteration   4: 0.125 ms/op
Iteration   5: 0.132 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.116 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (0.103, 0.116, 0.132), stdev = 0.012
  CI (99.9%): [0.068, 0.164] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 24.44% complete, ETA 1 days, 03:25:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.130 ms/op
# Warmup Iteration   2: 0.109 ms/op
# Warmup Iteration   3: 0.097 ms/op
# Warmup Iteration   4: 0.103 ms/op
# Warmup Iteration   5: 0.100 ms/op
Iteration   1: 0.095 ms/op
Iteration   2: 0.106 ms/op
Iteration   3: 0.124 ms/op
Iteration   4: 0.129 ms/op
Iteration   5: 0.143 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.120 ±(99.9%) 0.073 ms/op [Average]
  (min, avg, max) = (0.095, 0.120, 0.143), stdev = 0.019
  CI (99.9%): [0.046, 0.193] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 24.52% complete, ETA 1 days, 03:19:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.287 ms/op
# Warmup Iteration   2: 0.228 ms/op
# Warmup Iteration   3: 0.222 ms/op
# Warmup Iteration   4: 0.213 ms/op
# Warmup Iteration   5: 0.202 ms/op
Iteration   1: 0.214 ms/op
Iteration   2: 0.235 ms/op
Iteration   3: 0.258 ms/op
Iteration   4: 0.294 ms/op
Iteration   5: 0.295 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.259 ±(99.9%) 0.138 ms/op [Average]
  (min, avg, max) = (0.214, 0.259, 0.295), stdev = 0.036
  CI (99.9%): [0.121, 0.397] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 24.60% complete, ETA 1 days, 03:12:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.281 ms/op
# Warmup Iteration   2: 0.232 ms/op
# Warmup Iteration   3: 0.209 ms/op
# Warmup Iteration   4: 0.218 ms/op
# Warmup Iteration   5: 0.224 ms/op
Iteration   1: 0.219 ms/op
Iteration   2: 0.226 ms/op
Iteration   3: 0.281 ms/op
Iteration   4: 0.277 ms/op
Iteration   5: 0.250 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.251 ±(99.9%) 0.109 ms/op [Average]
  (min, avg, max) = (0.219, 0.251, 0.281), stdev = 0.028
  CI (99.9%): [0.142, 0.360] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 24.68% complete, ETA 1 days, 03:06:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.277 ms/op
# Warmup Iteration   2: 0.242 ms/op
# Warmup Iteration   3: 0.232 ms/op
# Warmup Iteration   4: 0.227 ms/op
# Warmup Iteration   5: 0.227 ms/op
Iteration   1: 0.220 ms/op
Iteration   2: 0.221 ms/op
Iteration   3: 0.301 ms/op
Iteration   4: 0.301 ms/op
Iteration   5: 0.272 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.263 ±(99.9%) 0.156 ms/op [Average]
  (min, avg, max) = (0.220, 0.263, 0.301), stdev = 0.041
  CI (99.9%): [0.107, 0.419] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 24.76% complete, ETA 1 days, 02:59:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.279 ms/op
# Warmup Iteration   2: 0.242 ms/op
# Warmup Iteration   3: 0.251 ms/op
# Warmup Iteration   4: 0.243 ms/op
# Warmup Iteration   5: 0.225 ms/op
Iteration   1: 0.228 ms/op
Iteration   2: 0.236 ms/op
Iteration   3: 0.342 ms/op
Iteration   4: 0.371 ms/op
Iteration   5: 0.270 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.289 ±(99.9%) 0.247 ms/op [Average]
  (min, avg, max) = (0.228, 0.289, 0.371), stdev = 0.064
  CI (99.9%): [0.043, 0.536] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 24.84% complete, ETA 1 days, 02:53:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.285 ms/op
# Warmup Iteration   2: 0.243 ms/op
# Warmup Iteration   3: 0.213 ms/op
# Warmup Iteration   4: 0.209 ms/op
# Warmup Iteration   5: 0.217 ms/op
Iteration   1: 0.200 ms/op
Iteration   2: 0.222 ms/op
Iteration   3: 0.271 ms/op
Iteration   4: 0.260 ms/op
Iteration   5: 0.250 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.241 ±(99.9%) 0.112 ms/op [Average]
  (min, avg, max) = (0.200, 0.241, 0.271), stdev = 0.029
  CI (99.9%): [0.129, 0.353] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 24.92% complete, ETA 1 days, 02:46:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.259 ms/op
# Warmup Iteration   2: 0.203 ms/op
# Warmup Iteration   3: 0.200 ms/op
# Warmup Iteration   4: 0.229 ms/op
# Warmup Iteration   5: 0.195 ms/op
Iteration   1: 0.191 ms/op
Iteration   2: 0.198 ms/op
Iteration   3: 0.243 ms/op
Iteration   4: 0.251 ms/op
Iteration   5: 0.262 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.229 ±(99.9%) 0.125 ms/op [Average]
  (min, avg, max) = (0.191, 0.229, 0.262), stdev = 0.032
  CI (99.9%): [0.104, 0.353] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 25.00% complete, ETA 1 days, 02:40:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.565 ms/op
# Warmup Iteration   2: 0.418 ms/op
# Warmup Iteration   3: 0.406 ms/op
# Warmup Iteration   4: 0.406 ms/op
# Warmup Iteration   5: 0.384 ms/op
Iteration   1: 0.366 ms/op
Iteration   2: 0.400 ms/op
Iteration   3: 0.423 ms/op
Iteration   4: 0.440 ms/op
Iteration   5: 0.498 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.425 ±(99.9%) 0.190 ms/op [Average]
  (min, avg, max) = (0.366, 0.425, 0.498), stdev = 0.049
  CI (99.9%): [0.236, 0.615] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 25.08% complete, ETA 1 days, 02:34:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.579 ms/op
# Warmup Iteration   2: 0.438 ms/op
# Warmup Iteration   3: 0.438 ms/op
# Warmup Iteration   4: 0.418 ms/op
# Warmup Iteration   5: 0.392 ms/op
Iteration   1: 0.427 ms/op
Iteration   2: 0.438 ms/op
Iteration   3: 0.507 ms/op
Iteration   4: 0.566 ms/op
Iteration   5: 0.494 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.486 ±(99.9%) 0.217 ms/op [Average]
  (min, avg, max) = (0.427, 0.486, 0.566), stdev = 0.056
  CI (99.9%): [0.270, 0.703] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 25.16% complete, ETA 1 days, 02:28:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.552 ms/op
# Warmup Iteration   2: 0.426 ms/op
# Warmup Iteration   3: 0.425 ms/op
# Warmup Iteration   4: 0.386 ms/op
# Warmup Iteration   5: 0.413 ms/op
Iteration   1: 0.398 ms/op
Iteration   2: 0.434 ms/op
Iteration   3: 0.482 ms/op
Iteration   4: 0.569 ms/op
Iteration   5: 0.514 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.479 ±(99.9%) 0.258 ms/op [Average]
  (min, avg, max) = (0.398, 0.479, 0.569), stdev = 0.067
  CI (99.9%): [0.221, 0.738] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 25.24% complete, ETA 1 days, 02:21:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.532 ms/op
# Warmup Iteration   2: 0.435 ms/op
# Warmup Iteration   3: 0.410 ms/op
# Warmup Iteration   4: 0.420 ms/op
# Warmup Iteration   5: 0.390 ms/op
Iteration   1: 0.394 ms/op
Iteration   2: 0.433 ms/op
Iteration   3: 0.502 ms/op
Iteration   4: 0.560 ms/op
Iteration   5: 0.545 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.487 ±(99.9%) 0.275 ms/op [Average]
  (min, avg, max) = (0.394, 0.487, 0.560), stdev = 0.071
  CI (99.9%): [0.212, 0.762] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 25.32% complete, ETA 1 days, 02:15:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.540 ms/op
# Warmup Iteration   2: 0.444 ms/op
# Warmup Iteration   3: 0.459 ms/op
# Warmup Iteration   4: 0.485 ms/op
# Warmup Iteration   5: 0.420 ms/op
Iteration   1: 0.418 ms/op
Iteration   2: 0.470 ms/op
Iteration   3: 0.587 ms/op
Iteration   4: 0.558 ms/op
Iteration   5: 0.503 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.507 ±(99.9%) 0.261 ms/op [Average]
  (min, avg, max) = (0.418, 0.507, 0.587), stdev = 0.068
  CI (99.9%): [0.246, 0.768] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 25.40% complete, ETA 1 days, 02:09:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.517 ms/op
# Warmup Iteration   2: 0.496 ms/op
# Warmup Iteration   3: 0.472 ms/op
# Warmup Iteration   4: 0.483 ms/op
# Warmup Iteration   5: 0.453 ms/op
Iteration   1: 0.459 ms/op
Iteration   2: 0.454 ms/op
Iteration   3: 0.705 ms/op
Iteration   4: 0.573 ms/op
Iteration   5: 0.527 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.544 ±(99.9%) 0.397 ms/op [Average]
  (min, avg, max) = (0.454, 0.544, 0.705), stdev = 0.103
  CI (99.9%): [0.147, 0.941] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 25.48% complete, ETA 1 days, 02:03:31
# Fork: 1 of 1
# Warmup Iteration   1: 1.136 ms/op
# Warmup Iteration   2: 1.001 ms/op
# Warmup Iteration   3: 0.919 ms/op
# Warmup Iteration   4: 0.993 ms/op
# Warmup Iteration   5: 0.905 ms/op
Iteration   1: 0.888 ms/op
Iteration   2: 0.824 ms/op
Iteration   3: 1.120 ms/op
Iteration   4: 1.043 ms/op
Iteration   5: 1.080 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.991 ±(99.9%) 0.493 ms/op [Average]
  (min, avg, max) = (0.824, 0.991, 1.120), stdev = 0.128
  CI (99.9%): [0.498, 1.484] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 25.56% complete, ETA 1 days, 01:57:27
# Fork: 1 of 1
# Warmup Iteration   1: 1.136 ms/op
# Warmup Iteration   2: 0.879 ms/op
# Warmup Iteration   3: 0.909 ms/op
# Warmup Iteration   4: 0.843 ms/op
# Warmup Iteration   5: 0.861 ms/op
Iteration   1: 0.824 ms/op
Iteration   2: 0.907 ms/op
Iteration   3: 0.999 ms/op
Iteration   4: 1.104 ms/op
Iteration   5: 0.987 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.964 ±(99.9%) 0.405 ms/op [Average]
  (min, avg, max) = (0.824, 0.964, 1.104), stdev = 0.105
  CI (99.9%): [0.559, 1.370] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 25.64% complete, ETA 1 days, 01:51:26
# Fork: 1 of 1
# Warmup Iteration   1: 1.055 ms/op
# Warmup Iteration   2: 0.850 ms/op
# Warmup Iteration   3: 0.793 ms/op
# Warmup Iteration   4: 0.807 ms/op
# Warmup Iteration   5: 0.750 ms/op
Iteration   1: 0.714 ms/op
Iteration   2: 0.788 ms/op
Iteration   3: 0.906 ms/op
Iteration   4: 0.966 ms/op
Iteration   5: 0.920 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.859 ±(99.9%) 0.401 ms/op [Average]
  (min, avg, max) = (0.714, 0.859, 0.966), stdev = 0.104
  CI (99.9%): [0.457, 1.260] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 25.72% complete, ETA 1 days, 01:45:27
# Fork: 1 of 1
# Warmup Iteration   1: 1.109 ms/op
# Warmup Iteration   2: 0.822 ms/op
# Warmup Iteration   3: 0.831 ms/op
# Warmup Iteration   4: 0.781 ms/op
# Warmup Iteration   5: 0.788 ms/op
Iteration   1: 0.730 ms/op
Iteration   2: 0.808 ms/op
Iteration   3: 0.931 ms/op
Iteration   4: 1.074 ms/op
Iteration   5: 0.898 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.888 ±(99.9%) 0.501 ms/op [Average]
  (min, avg, max) = (0.730, 0.888, 1.074), stdev = 0.130
  CI (99.9%): [0.387, 1.389] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 25.80% complete, ETA 1 days, 01:39:30
# Fork: 1 of 1
# Warmup Iteration   1: 1.107 ms/op
# Warmup Iteration   2: 0.877 ms/op
# Warmup Iteration   3: 0.877 ms/op
# Warmup Iteration   4: 0.864 ms/op
# Warmup Iteration   5: 0.807 ms/op
Iteration   1: 0.810 ms/op
Iteration   2: 0.881 ms/op
Iteration   3: 1.140 ms/op
Iteration   4: 1.045 ms/op
Iteration   5: 1.060 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.987 ±(99.9%) 0.526 ms/op [Average]
  (min, avg, max) = (0.810, 0.987, 1.140), stdev = 0.137
  CI (99.9%): [0.461, 1.513] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 25.88% complete, ETA 1 days, 01:33:36
# Fork: 1 of 1
# Warmup Iteration   1: 1.055 ms/op
# Warmup Iteration   2: 0.867 ms/op
# Warmup Iteration   3: 0.898 ms/op
# Warmup Iteration   4: 0.869 ms/op
# Warmup Iteration   5: 0.802 ms/op
Iteration   1: 0.814 ms/op
Iteration   2: 0.882 ms/op
Iteration   3: 1.156 ms/op
Iteration   4: 1.057 ms/op
Iteration   5: 1.080 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.998 ±(99.9%) 0.553 ms/op [Average]
  (min, avg, max) = (0.814, 0.998, 1.156), stdev = 0.144
  CI (99.9%): [0.445, 1.551] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 25.96% complete, ETA 1 days, 01:27:44
# Fork: 1 of 1
# Warmup Iteration   1: 2.210 ms/op
# Warmup Iteration   2: 1.750 ms/op
# Warmup Iteration   3: 1.755 ms/op
# Warmup Iteration   4: 1.750 ms/op
# Warmup Iteration   5: 1.798 ms/op
Iteration   1: 1.716 ms/op
Iteration   2: 1.859 ms/op
Iteration   3: 2.181 ms/op
Iteration   4: 2.305 ms/op
Iteration   5: 2.167 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.046 ±(99.9%) 0.949 ms/op [Average]
  (min, avg, max) = (1.716, 2.046, 2.305), stdev = 0.247
  CI (99.9%): [1.096, 2.995] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 26.04% complete, ETA 1 days, 01:21:54
# Fork: 1 of 1
# Warmup Iteration   1: 2.234 ms/op
# Warmup Iteration   2: 1.641 ms/op
# Warmup Iteration   3: 1.867 ms/op
# Warmup Iteration   4: 1.728 ms/op
# Warmup Iteration   5: 1.737 ms/op
Iteration   1: 1.692 ms/op
Iteration   2: 1.847 ms/op
Iteration   3: 2.046 ms/op
Iteration   4: 2.602 ms/op
Iteration   5: 2.092 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.056 ±(99.9%) 1.328 ms/op [Average]
  (min, avg, max) = (1.692, 2.056, 2.602), stdev = 0.345
  CI (99.9%): [0.728, 3.384] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 26.12% complete, ETA 1 days, 01:16:05
# Fork: 1 of 1
# Warmup Iteration   1: 2.209 ms/op
# Warmup Iteration   2: 1.973 ms/op
# Warmup Iteration   3: 1.936 ms/op
# Warmup Iteration   4: 1.887 ms/op
# Warmup Iteration   5: 1.806 ms/op
Iteration   1: 1.840 ms/op
Iteration   2: 1.838 ms/op
Iteration   3: 2.606 ms/op
Iteration   4: 2.439 ms/op
Iteration   5: 2.268 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.198 ±(99.9%) 1.344 ms/op [Average]
  (min, avg, max) = (1.838, 2.198, 2.606), stdev = 0.349
  CI (99.9%): [0.854, 3.542] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 26.20% complete, ETA 1 days, 01:10:19
# Fork: 1 of 1
# Warmup Iteration   1: 2.333 ms/op
# Warmup Iteration   2: 1.966 ms/op
# Warmup Iteration   3: 2.251 ms/op
# Warmup Iteration   4: 2.027 ms/op
# Warmup Iteration   5: 1.933 ms/op
Iteration   1: 1.945 ms/op
Iteration   2: 1.914 ms/op
Iteration   3: 2.709 ms/op
Iteration   4: 2.736 ms/op
Iteration   5: 2.247 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.310 ±(99.9%) 1.534 ms/op [Average]
  (min, avg, max) = (1.914, 2.310, 2.736), stdev = 0.398
  CI (99.9%): [0.776, 3.844] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 26.28% complete, ETA 1 days, 01:04:34
# Fork: 1 of 1
# Warmup Iteration   1: 2.312 ms/op
# Warmup Iteration   2: 2.095 ms/op
# Warmup Iteration   3: 2.007 ms/op
# Warmup Iteration   4: 1.941 ms/op
# Warmup Iteration   5: 1.715 ms/op
Iteration   1: 1.731 ms/op
Iteration   2: 1.738 ms/op
Iteration   3: 2.807 ms/op
Iteration   4: 2.187 ms/op
Iteration   5: 2.086 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.109 ±(99.9%) 1.694 ms/op [Average]
  (min, avg, max) = (1.731, 2.109, 2.807), stdev = 0.440
  CI (99.9%): [0.416, 3.803] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 26.36% complete, ETA 1 days, 00:58:52
# Fork: 1 of 1
# Warmup Iteration   1: 2.218 ms/op
# Warmup Iteration   2: 1.784 ms/op
# Warmup Iteration   3: 1.777 ms/op
# Warmup Iteration   4: 1.950 ms/op
# Warmup Iteration   5: 1.795 ms/op
Iteration   1: 1.724 ms/op
Iteration   2: 1.738 ms/op
Iteration   3: 2.329 ms/op
Iteration   4: 2.373 ms/op
Iteration   5: 2.265 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.086 ±(99.9%) 1.256 ms/op [Average]
  (min, avg, max) = (1.724, 2.086, 2.373), stdev = 0.326
  CI (99.9%): [0.830, 3.341] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 26.44% complete, ETA 1 days, 00:53:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 26.52% complete, ETA 1 days, 00:47:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 26.60% complete, ETA 1 days, 00:41:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10?³, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 26.68% complete, ETA 1 days, 00:36:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 26.76% complete, ETA 1 days, 00:30:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10?³, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 26.84% complete, ETA 1 days, 00:25:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 26.92% complete, ETA 1 days, 00:19:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 27.00% complete, ETA 1 days, 00:14:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 27.08% complete, ETA 1 days, 00:09:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [0.002, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 27.16% complete, ETA 1 days, 00:03:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.002, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 27.24% complete, ETA 23:58:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 27.32% complete, ETA 23:53:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.004 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 27.40% complete, ETA 23:47:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.009), stdev = 0.001
  CI (99.9%): [0.003, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 27.48% complete, ETA 23:42:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.009), stdev = 0.001
  CI (99.9%): [0.003, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 27.56% complete, ETA 23:37:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.009), stdev = 0.001
  CI (99.9%): [0.003, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 27.64% complete, ETA 23:32:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.007 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.009), stdev = 0.001
  CI (99.9%): [0.002, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 27.72% complete, ETA 23:26:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.001
  CI (99.9%): [0.003, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 27.80% complete, ETA 23:21:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.008 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.007, 0.008, 0.010), stdev = 0.001
  CI (99.9%): [0.003, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 27.88% complete, ETA 23:16:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.015 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.014, 0.015, 0.018), stdev = 0.002
  CI (99.9%): [0.009, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 27.96% complete, ETA 23:11:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.016 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.013, 0.016, 0.019), stdev = 0.002
  CI (99.9%): [0.007, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 28.04% complete, ETA 23:06:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.016 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.014, 0.016, 0.019), stdev = 0.002
  CI (99.9%): [0.007, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 28.13% complete, ETA 23:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.016 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.016 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.014, 0.016, 0.020), stdev = 0.002
  CI (99.9%): [0.007, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 28.21% complete, ETA 22:56:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.016 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.013, 0.016, 0.019), stdev = 0.002
  CI (99.9%): [0.006, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 28.29% complete, ETA 22:51:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.017 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.014, 0.017, 0.022), stdev = 0.003
  CI (99.9%): [0.004, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 28.37% complete, ETA 22:46:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.036 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.030 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.034 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.030 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.026, 0.030, 0.034), stdev = 0.003
  CI (99.9%): [0.017, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 28.45% complete, ETA 22:41:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.037 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.030 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.026, 0.030, 0.037), stdev = 0.005
  CI (99.9%): [0.012, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 28.53% complete, ETA 22:36:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.030 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.025, 0.030, 0.034), stdev = 0.003
  CI (99.9%): [0.016, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 28.61% complete, ETA 22:31:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.037 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.030 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.026, 0.030, 0.034), stdev = 0.003
  CI (99.9%): [0.017, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 28.69% complete, ETA 22:27:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.028 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.032 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.025, 0.032, 0.038), stdev = 0.005
  CI (99.9%): [0.012, 0.053] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 28.77% complete, ETA 22:22:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.028 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.033 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.031 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.025, 0.031, 0.038), stdev = 0.005
  CI (99.9%): [0.012, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 28.85% complete, ETA 22:17:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.075 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.052 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.053 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.058 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.076 ms/op
Iteration   5: 0.068 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.064 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.053, 0.064, 0.076), stdev = 0.009
  CI (99.9%): [0.030, 0.098] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 28.93% complete, ETA 22:12:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.073 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.050 ms/op
# Warmup Iteration   4: 0.058 ms/op
# Warmup Iteration   5: 0.055 ms/op
Iteration   1: 0.054 ms/op
Iteration   2: 0.061 ms/op
Iteration   3: 0.066 ms/op
Iteration   4: 0.075 ms/op
Iteration   5: 0.067 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.065 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.054, 0.065, 0.075), stdev = 0.008
  CI (99.9%): [0.035, 0.094] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 29.01% complete, ETA 22:08:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.081 ms/op
# Warmup Iteration   2: 0.058 ms/op
# Warmup Iteration   3: 0.059 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.054 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.078 ms/op
Iteration   4: 0.074 ms/op
Iteration   5: 0.068 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.066 ±(99.9%) 0.042 ms/op [Average]
  (min, avg, max) = (0.054, 0.066, 0.078), stdev = 0.011
  CI (99.9%): [0.023, 0.108] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 29.09% complete, ETA 22:03:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.082 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.062 ms/op
# Warmup Iteration   4: 0.065 ms/op
# Warmup Iteration   5: 0.058 ms/op
Iteration   1: 0.058 ms/op
Iteration   2: 0.057 ms/op
Iteration   3: 0.075 ms/op
Iteration   4: 0.082 ms/op
Iteration   5: 0.070 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.068 ±(99.9%) 0.042 ms/op [Average]
  (min, avg, max) = (0.057, 0.068, 0.082), stdev = 0.011
  CI (99.9%): [0.026, 0.110] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 29.17% complete, ETA 21:58:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.075 ms/op
# Warmup Iteration   2: 0.049 ms/op
# Warmup Iteration   3: 0.050 ms/op
# Warmup Iteration   4: 0.052 ms/op
# Warmup Iteration   5: 0.049 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.061 ms/op
Iteration   3: 0.074 ms/op
Iteration   4: 0.062 ms/op
Iteration   5: 0.061 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.062 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.053, 0.062, 0.074), stdev = 0.008
  CI (99.9%): [0.033, 0.092] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 29.25% complete, ETA 21:53:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ms/op
# Warmup Iteration   2: 0.049 ms/op
# Warmup Iteration   3: 0.049 ms/op
# Warmup Iteration   4: 0.057 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.052 ms/op
Iteration   3: 0.075 ms/op
Iteration   4: 0.064 ms/op
Iteration   5: 0.063 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.060 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.049, 0.060, 0.075), stdev = 0.010
  CI (99.9%): [0.021, 0.100] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 29.33% complete, ETA 21:49:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.147 ms/op
# Warmup Iteration   2: 0.109 ms/op
# Warmup Iteration   3: 0.104 ms/op
# Warmup Iteration   4: 0.100 ms/op
# Warmup Iteration   5: 0.093 ms/op
Iteration   1: 0.096 ms/op
Iteration   2: 0.101 ms/op
Iteration   3: 0.110 ms/op
Iteration   4: 0.127 ms/op
Iteration   5: 0.123 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.111 ±(99.9%) 0.051 ms/op [Average]
  (min, avg, max) = (0.096, 0.111, 0.127), stdev = 0.013
  CI (99.9%): [0.060, 0.163] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 29.41% complete, ETA 21:44:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.163 ms/op
# Warmup Iteration   2: 0.108 ms/op
# Warmup Iteration   3: 0.114 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.095 ms/op
Iteration   1: 0.103 ms/op
Iteration   2: 0.104 ms/op
Iteration   3: 0.107 ms/op
Iteration   4: 0.116 ms/op
Iteration   5: 0.122 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.110 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.103, 0.110, 0.122), stdev = 0.009
  CI (99.9%): [0.078, 0.143] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 29.49% complete, ETA 21:40:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.137 ms/op
# Warmup Iteration   2: 0.118 ms/op
# Warmup Iteration   3: 0.099 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.101 ms/op
Iteration   1: 0.098 ms/op
Iteration   2: 0.104 ms/op
Iteration   3: 0.106 ms/op
Iteration   4: 0.132 ms/op
Iteration   5: 0.129 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.114 ±(99.9%) 0.060 ms/op [Average]
  (min, avg, max) = (0.098, 0.114, 0.132), stdev = 0.016
  CI (99.9%): [0.054, 0.174] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 29.57% complete, ETA 21:35:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.141 ms/op
# Warmup Iteration   2: 0.120 ms/op
# Warmup Iteration   3: 0.103 ms/op
# Warmup Iteration   4: 0.104 ms/op
# Warmup Iteration   5: 0.097 ms/op
Iteration   1: 0.104 ms/op
Iteration   2: 0.106 ms/op
Iteration   3: 0.109 ms/op
Iteration   4: 0.135 ms/op
Iteration   5: 0.123 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.116 ±(99.9%) 0.052 ms/op [Average]
  (min, avg, max) = (0.104, 0.116, 0.135), stdev = 0.014
  CI (99.9%): [0.063, 0.168] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 29.65% complete, ETA 21:30:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.127 ms/op
# Warmup Iteration   2: 0.094 ms/op
# Warmup Iteration   3: 0.096 ms/op
# Warmup Iteration   4: 0.105 ms/op
# Warmup Iteration   5: 0.098 ms/op
Iteration   1: 0.094 ms/op
Iteration   2: 0.114 ms/op
Iteration   3: 0.127 ms/op
Iteration   4: 0.139 ms/op
Iteration   5: 0.126 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.120 ±(99.9%) 0.066 ms/op [Average]
  (min, avg, max) = (0.094, 0.120, 0.139), stdev = 0.017
  CI (99.9%): [0.054, 0.186] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 29.73% complete, ETA 21:26:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.122 ms/op
# Warmup Iteration   2: 0.092 ms/op
# Warmup Iteration   3: 0.097 ms/op
# Warmup Iteration   4: 0.100 ms/op
# Warmup Iteration   5: 0.096 ms/op
Iteration   1: 0.101 ms/op
Iteration   2: 0.106 ms/op
Iteration   3: 0.151 ms/op
Iteration   4: 0.131 ms/op
Iteration   5: 0.129 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.123 ±(99.9%) 0.078 ms/op [Average]
  (min, avg, max) = (0.101, 0.123, 0.151), stdev = 0.020
  CI (99.9%): [0.045, 0.202] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 29.81% complete, ETA 21:22:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.295 ms/op
# Warmup Iteration   2: 0.228 ms/op
# Warmup Iteration   3: 0.220 ms/op
# Warmup Iteration   4: 0.206 ms/op
# Warmup Iteration   5: 0.199 ms/op
Iteration   1: 0.214 ms/op
Iteration   2: 0.236 ms/op
Iteration   3: 0.258 ms/op
Iteration   4: 0.290 ms/op
Iteration   5: 0.250 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.250 ±(99.9%) 0.109 ms/op [Average]
  (min, avg, max) = (0.214, 0.250, 0.290), stdev = 0.028
  CI (99.9%): [0.140, 0.359] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 29.89% complete, ETA 21:17:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.274 ms/op
# Warmup Iteration   2: 0.204 ms/op
# Warmup Iteration   3: 0.222 ms/op
# Warmup Iteration   4: 0.220 ms/op
# Warmup Iteration   5: 0.201 ms/op
Iteration   1: 0.214 ms/op
Iteration   2: 0.221 ms/op
Iteration   3: 0.264 ms/op
Iteration   4: 0.297 ms/op
Iteration   5: 0.254 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.250 ±(99.9%) 0.130 ms/op [Average]
  (min, avg, max) = (0.214, 0.250, 0.297), stdev = 0.034
  CI (99.9%): [0.120, 0.380] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 29.97% complete, ETA 21:13:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.297 ms/op
# Warmup Iteration   2: 0.237 ms/op
# Warmup Iteration   3: 0.228 ms/op
# Warmup Iteration   4: 0.239 ms/op
# Warmup Iteration   5: 0.219 ms/op
Iteration   1: 0.218 ms/op
Iteration   2: 0.220 ms/op
Iteration   3: 0.306 ms/op
Iteration   4: 0.289 ms/op
Iteration   5: 0.244 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.255 ±(99.9%) 0.154 ms/op [Average]
  (min, avg, max) = (0.218, 0.255, 0.306), stdev = 0.040
  CI (99.9%): [0.102, 0.409] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 30.05% complete, ETA 21:08:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.319 ms/op
# Warmup Iteration   2: 0.224 ms/op
# Warmup Iteration   3: 0.255 ms/op
# Warmup Iteration   4: 0.250 ms/op
# Warmup Iteration   5: 0.228 ms/op
Iteration   1: 0.230 ms/op
Iteration   2: 0.231 ms/op
Iteration   3: 0.305 ms/op
Iteration   4: 0.311 ms/op
Iteration   5: 0.261 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.268 ±(99.9%) 0.150 ms/op [Average]
  (min, avg, max) = (0.230, 0.268, 0.311), stdev = 0.039
  CI (99.9%): [0.118, 0.418] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 30.13% complete, ETA 21:04:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.376 ms/op
# Warmup Iteration   2: 0.214 ms/op
# Warmup Iteration   3: 0.232 ms/op
# Warmup Iteration   4: 0.245 ms/op
# Warmup Iteration   5: 0.232 ms/op
Iteration   1: 0.244 ms/op
Iteration   2: 0.243 ms/op
Iteration   3: 0.460 ms/op
Iteration   4: 0.288 ms/op
Iteration   5: 0.272 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.301 ±(99.9%) 0.349 ms/op [Average]
  (min, avg, max) = (0.243, 0.301, 0.460), stdev = 0.091
  CI (99.9%): [? 0, 0.650] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 30.21% complete, ETA 20:59:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.367 ms/op
# Warmup Iteration   2: 0.211 ms/op
# Warmup Iteration   3: 0.245 ms/op
# Warmup Iteration   4: 0.246 ms/op
# Warmup Iteration   5: 0.239 ms/op
Iteration   1: 0.239 ms/op
Iteration   2: 0.251 ms/op
Iteration   3: 0.436 ms/op
Iteration   4: 0.265 ms/op
Iteration   5: 0.272 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.292 ±(99.9%) 0.314 ms/op [Average]
  (min, avg, max) = (0.239, 0.292, 0.436), stdev = 0.081
  CI (99.9%): [? 0, 0.606] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 30.29% complete, ETA 20:55:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.594 ms/op
# Warmup Iteration   2: 0.416 ms/op
# Warmup Iteration   3: 0.437 ms/op
# Warmup Iteration   4: 0.448 ms/op
# Warmup Iteration   5: 0.410 ms/op
Iteration   1: 0.410 ms/op
Iteration   2: 0.454 ms/op
Iteration   3: 0.502 ms/op
Iteration   4: 0.533 ms/op
Iteration   5: 0.504 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.481 ±(99.9%) 0.187 ms/op [Average]
  (min, avg, max) = (0.410, 0.481, 0.533), stdev = 0.049
  CI (99.9%): [0.294, 0.668] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 30.37% complete, ETA 20:51:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.573 ms/op
# Warmup Iteration   2: 0.480 ms/op
# Warmup Iteration   3: 0.436 ms/op
# Warmup Iteration   4: 0.429 ms/op
# Warmup Iteration   5: 0.435 ms/op
Iteration   1: 0.414 ms/op
Iteration   2: 0.426 ms/op
Iteration   3: 0.465 ms/op
Iteration   4: 0.466 ms/op
Iteration   5: 0.522 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.459 ±(99.9%) 0.162 ms/op [Average]
  (min, avg, max) = (0.414, 0.459, 0.522), stdev = 0.042
  CI (99.9%): [0.297, 0.621] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 30.45% complete, ETA 20:46:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.528 ms/op
# Warmup Iteration   2: 0.427 ms/op
# Warmup Iteration   3: 0.388 ms/op
# Warmup Iteration   4: 0.396 ms/op
# Warmup Iteration   5: 0.372 ms/op
Iteration   1: 0.394 ms/op
Iteration   2: 0.401 ms/op
Iteration   3: 0.416 ms/op
Iteration   4: 0.516 ms/op
Iteration   5: 0.533 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.452 ±(99.9%) 0.258 ms/op [Average]
  (min, avg, max) = (0.394, 0.452, 0.533), stdev = 0.067
  CI (99.9%): [0.194, 0.710] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 30.53% complete, ETA 20:42:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.572 ms/op
# Warmup Iteration   2: 0.459 ms/op
# Warmup Iteration   3: 0.394 ms/op
# Warmup Iteration   4: 0.402 ms/op
# Warmup Iteration   5: 0.398 ms/op
Iteration   1: 0.377 ms/op
Iteration   2: 0.396 ms/op
Iteration   3: 0.408 ms/op
Iteration   4: 0.520 ms/op
Iteration   5: 0.470 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.434 ±(99.9%) 0.228 ms/op [Average]
  (min, avg, max) = (0.377, 0.434, 0.520), stdev = 0.059
  CI (99.9%): [0.206, 0.662] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 30.61% complete, ETA 20:38:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.554 ms/op
# Warmup Iteration   2: 0.388 ms/op
# Warmup Iteration   3: 0.407 ms/op
# Warmup Iteration   4: 0.430 ms/op
# Warmup Iteration   5: 0.384 ms/op
Iteration   1: 0.401 ms/op
Iteration   2: 0.431 ms/op
Iteration   3: 0.519 ms/op
Iteration   4: 0.470 ms/op
Iteration   5: 0.547 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.473 ±(99.9%) 0.232 ms/op [Average]
  (min, avg, max) = (0.401, 0.473, 0.547), stdev = 0.060
  CI (99.9%): [0.242, 0.705] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 30.69% complete, ETA 20:34:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.509 ms/op
# Warmup Iteration   2: 0.382 ms/op
# Warmup Iteration   3: 0.405 ms/op
# Warmup Iteration   4: 0.417 ms/op
# Warmup Iteration   5: 0.389 ms/op
Iteration   1: 0.398 ms/op
Iteration   2: 0.441 ms/op
Iteration   3: 0.639 ms/op
Iteration   4: 0.526 ms/op
Iteration   5: 0.540 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.509 ±(99.9%) 0.360 ms/op [Average]
  (min, avg, max) = (0.398, 0.509, 0.639), stdev = 0.094
  CI (99.9%): [0.149, 0.869] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 30.77% complete, ETA 20:29:51
# Fork: 1 of 1
# Warmup Iteration   1: 1.137 ms/op
# Warmup Iteration   2: 0.880 ms/op
# Warmup Iteration   3: 0.823 ms/op
# Warmup Iteration   4: 0.804 ms/op
# Warmup Iteration   5: 0.781 ms/op
Iteration   1: 0.781 ms/op
Iteration   2: 0.864 ms/op
Iteration   3: 1.049 ms/op
Iteration   4: 1.131 ms/op
Iteration   5: 1.010 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.967 ±(99.9%) 0.547 ms/op [Average]
  (min, avg, max) = (0.781, 0.967, 1.131), stdev = 0.142
  CI (99.9%): [0.419, 1.514] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 30.85% complete, ETA 20:25:38
# Fork: 1 of 1
# Warmup Iteration   1: 1.108 ms/op
# Warmup Iteration   2: 0.960 ms/op
# Warmup Iteration   3: 0.842 ms/op
# Warmup Iteration   4: 0.903 ms/op
# Warmup Iteration   5: 0.831 ms/op
Iteration   1: 0.877 ms/op
Iteration   2: 0.864 ms/op
Iteration   3: 1.102 ms/op
Iteration   4: 1.110 ms/op
Iteration   5: 1.129 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.016 ±(99.9%) 0.515 ms/op [Average]
  (min, avg, max) = (0.864, 1.016, 1.129), stdev = 0.134
  CI (99.9%): [0.502, 1.531] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 30.93% complete, ETA 20:21:27
# Fork: 1 of 1
# Warmup Iteration   1: 1.279 ms/op
# Warmup Iteration   2: 0.905 ms/op
# Warmup Iteration   3: 0.825 ms/op
# Warmup Iteration   4: 0.878 ms/op
# Warmup Iteration   5: 0.892 ms/op
Iteration   1: 0.858 ms/op
Iteration   2: 0.926 ms/op
Iteration   3: 1.098 ms/op
Iteration   4: 1.111 ms/op
Iteration   5: 0.971 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.993 ±(99.9%) 0.422 ms/op [Average]
  (min, avg, max) = (0.858, 0.993, 1.111), stdev = 0.110
  CI (99.9%): [0.571, 1.415] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 31.01% complete, ETA 20:17:16
# Fork: 1 of 1
# Warmup Iteration   1: 1.279 ms/op
# Warmup Iteration   2: 0.901 ms/op
# Warmup Iteration   3: 0.973 ms/op
# Warmup Iteration   4: 0.926 ms/op
# Warmup Iteration   5: 0.864 ms/op
Iteration   1: 0.805 ms/op
Iteration   2: 0.865 ms/op
Iteration   3: 1.046 ms/op
Iteration   4: 1.190 ms/op
Iteration   5: 1.078 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.997 ±(99.9%) 0.610 ms/op [Average]
  (min, avg, max) = (0.805, 0.997, 1.190), stdev = 0.159
  CI (99.9%): [0.387, 1.607] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 31.09% complete, ETA 20:13:07
# Fork: 1 of 1
# Warmup Iteration   1: 1.027 ms/op
# Warmup Iteration   2: 0.768 ms/op
# Warmup Iteration   3: 0.770 ms/op
# Warmup Iteration   4: 0.795 ms/op
# Warmup Iteration   5: 0.777 ms/op
Iteration   1: 0.771 ms/op
Iteration   2: 0.888 ms/op
Iteration   3: 1.191 ms/op
Iteration   4: 1.024 ms/op
Iteration   5: 1.084 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  0.992 ±(99.9%) 0.635 ms/op [Average]
  (min, avg, max) = (0.771, 0.992, 1.191), stdev = 0.165
  CI (99.9%): [0.357, 1.626] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 31.17% complete, ETA 20:09:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.974 ms/op
# Warmup Iteration   2: 0.759 ms/op
# Warmup Iteration   3: 0.788 ms/op
# Warmup Iteration   4: 0.876 ms/op
# Warmup Iteration   5: 0.824 ms/op
Iteration   1: 0.851 ms/op
Iteration   2: 0.912 ms/op
Iteration   3: 1.302 ms/op
Iteration   4: 1.002 ms/op
Iteration   5: 0.939 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.001 ±(99.9%) 0.680 ms/op [Average]
  (min, avg, max) = (0.851, 1.001, 1.302), stdev = 0.177
  CI (99.9%): [0.321, 1.681] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 31.25% complete, ETA 20:04:56
# Fork: 1 of 1
# Warmup Iteration   1: 2.268 ms/op
# Warmup Iteration   2: 1.632 ms/op
# Warmup Iteration   3: 1.694 ms/op
# Warmup Iteration   4: 1.567 ms/op
# Warmup Iteration   5: 1.429 ms/op
Iteration   1: 1.541 ms/op
Iteration   2: 1.607 ms/op
Iteration   3: 1.796 ms/op
Iteration   4: 2.101 ms/op
Iteration   5: 2.122 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.833 ±(99.9%) 1.044 ms/op [Average]
  (min, avg, max) = (1.541, 1.833, 2.122), stdev = 0.271
  CI (99.9%): [0.790, 2.877] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 31.33% complete, ETA 20:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 2.454 ms/op
# Warmup Iteration   2: 1.688 ms/op
# Warmup Iteration   3: 1.649 ms/op
# Warmup Iteration   4: 1.574 ms/op
# Warmup Iteration   5: 1.459 ms/op
Iteration   1: 1.535 ms/op
Iteration   2: 1.587 ms/op
Iteration   3: 1.659 ms/op
Iteration   4: 2.219 ms/op
Iteration   5: 2.105 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.821 ±(99.9%) 1.221 ms/op [Average]
  (min, avg, max) = (1.535, 1.821, 2.219), stdev = 0.317
  CI (99.9%): [0.600, 3.042] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 31.41% complete, ETA 19:56:46
# Fork: 1 of 1
# Warmup Iteration   1: 2.615 ms/op
# Warmup Iteration   2: 1.790 ms/op
# Warmup Iteration   3: 1.697 ms/op
# Warmup Iteration   4: 1.658 ms/op
# Warmup Iteration   5: 1.616 ms/op
Iteration   1: 1.602 ms/op
Iteration   2: 1.763 ms/op
Iteration   3: 1.919 ms/op
Iteration   4: 2.135 ms/op
Iteration   5: 2.264 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.937 ±(99.9%) 1.034 ms/op [Average]
  (min, avg, max) = (1.602, 1.937, 2.264), stdev = 0.269
  CI (99.9%): [0.902, 2.971] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 31.49% complete, ETA 19:52:43
# Fork: 1 of 1
# Warmup Iteration   1: 2.100 ms/op
# Warmup Iteration   2: 1.792 ms/op
# Warmup Iteration   3: 1.595 ms/op
# Warmup Iteration   4: 1.718 ms/op
# Warmup Iteration   5: 1.594 ms/op
Iteration   1: 1.590 ms/op
Iteration   2: 1.762 ms/op
Iteration   3: 1.981 ms/op
Iteration   4: 2.385 ms/op
Iteration   5: 2.014 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.947 ±(99.9%) 1.155 ms/op [Average]
  (min, avg, max) = (1.590, 1.947, 2.385), stdev = 0.300
  CI (99.9%): [0.792, 3.101] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 31.57% complete, ETA 19:48:41
# Fork: 1 of 1
# Warmup Iteration   1: 1.963 ms/op
# Warmup Iteration   2: 1.596 ms/op
# Warmup Iteration   3: 1.619 ms/op
# Warmup Iteration   4: 1.812 ms/op
# Warmup Iteration   5: 1.707 ms/op
Iteration   1: 1.653 ms/op
Iteration   2: 2.105 ms/op
Iteration   3: 2.474 ms/op
Iteration   4: 1.996 ms/op
Iteration   5: 2.198 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  2.085 ±(99.9%) 1.154 ms/op [Average]
  (min, avg, max) = (1.653, 2.085, 2.474), stdev = 0.300
  CI (99.9%): [0.931, 3.239] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 31.65% complete, ETA 19:44:42
# Fork: 1 of 1
# Warmup Iteration   1: 1.983 ms/op
# Warmup Iteration   2: 1.591 ms/op
# Warmup Iteration   3: 1.774 ms/op
# Warmup Iteration   4: 1.802 ms/op
# Warmup Iteration   5: 1.692 ms/op
Iteration   1: 1.668 ms/op
Iteration   2: 1.797 ms/op
Iteration   3: 2.332 ms/op
Iteration   4: 2.087 ms/op
Iteration   5: 2.104 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark":
  1.998 ±(99.9%) 1.019 ms/op [Average]
  (min, avg, max) = (1.668, 1.998, 2.332), stdev = 0.265
  CI (99.9%): [0.979, 3.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 31.73% complete, ETA 19:40:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 31.81% complete, ETA 19:36:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 31.89% complete, ETA 19:32:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 31.97% complete, ETA 19:28:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 32.05% complete, ETA 19:24:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 32.13% complete, ETA 19:21:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 32.21% complete, ETA 19:17:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 32.29% complete, ETA 19:13:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 32.37% complete, ETA 19:09:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 32.45% complete, ETA 19:05:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 32.53% complete, ETA 19:01:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 32.61% complete, ETA 18:57:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10?³, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 32.69% complete, ETA 18:54:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.001
  CI (99.9%): [0.001, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 32.77% complete, ETA 18:50:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.001
  CI (99.9%): [0.001, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 32.85% complete, ETA 18:46:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.001, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 32.93% complete, ETA 18:42:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.001
  CI (99.9%): [? 10?³, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 33.01% complete, ETA 18:39:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.001
  CI (99.9%): [? 10??, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 33.09% complete, ETA 18:35:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.001
  CI (99.9%): [? 10?³, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 33.17% complete, ETA 18:31:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.012 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.016), stdev = 0.003
  CI (99.9%): [? 10??, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 33.25% complete, ETA 18:28:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.012 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.016), stdev = 0.003
  CI (99.9%): [? 0, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 33.33% complete, ETA 18:24:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.012 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.016), stdev = 0.003
  CI (99.9%): [? 0, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 33.41% complete, ETA 18:21:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.012 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.016), stdev = 0.003
  CI (99.9%): [? 0, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 33.49% complete, ETA 18:17:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.015 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.012 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.015), stdev = 0.003
  CI (99.9%): [0.001, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 33.57% complete, ETA 18:13:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.012 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.016), stdev = 0.003
  CI (99.9%): [? 10??, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 33.65% complete, ETA 18:10:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.024 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.019, 0.024, 0.030), stdev = 0.005
  CI (99.9%): [0.004, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 33.73% complete, ETA 18:06:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.032 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.026 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.020, 0.026, 0.032), stdev = 0.006
  CI (99.9%): [0.004, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 33.81% complete, ETA 18:03:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.024 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.019, 0.024, 0.031), stdev = 0.006
  CI (99.9%): [0.002, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 33.89% complete, ETA 17:59:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.019 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.023 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.018, 0.023, 0.029), stdev = 0.005
  CI (99.9%): [0.003, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 33.97% complete, ETA 17:56:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.023 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.018, 0.023, 0.029), stdev = 0.006
  CI (99.9%): [0.001, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 34.05% complete, ETA 17:52:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.024 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.024 ±(99.9%) 0.023 ms/op [Average]
  (min, avg, max) = (0.018, 0.024, 0.030), stdev = 0.006
  CI (99.9%): [0.001, 0.046] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 34.13% complete, ETA 17:49:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.038 ms/op
Iteration   2: 0.038 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.065 ms/op
Iteration   5: 0.064 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.049 ±(99.9%) 0.052 ms/op [Average]
  (min, avg, max) = (0.038, 0.049, 0.065), stdev = 0.014
  CI (99.9%): [? 0, 0.102] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 34.21% complete, ETA 17:45:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.038 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.065 ms/op
Iteration   5: 0.062 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.049 ±(99.9%) 0.051 ms/op [Average]
  (min, avg, max) = (0.037, 0.049, 0.065), stdev = 0.013
  CI (99.9%): [? 0, 0.100] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 34.29% complete, ETA 17:42:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.038 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.037 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.046 ms/op
Iteration   4: 0.060 ms/op
Iteration   5: 0.060 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.048 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (0.037, 0.048, 0.060), stdev = 0.011
  CI (99.9%): [0.004, 0.092] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 34.38% complete, ETA 17:38:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.038 ms/op
Iteration   1: 0.037 ms/op
Iteration   2: 0.038 ms/op
Iteration   3: 0.042 ms/op
Iteration   4: 0.065 ms/op
Iteration   5: 0.060 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.049 ±(99.9%) 0.051 ms/op [Average]
  (min, avg, max) = (0.037, 0.049, 0.065), stdev = 0.013
  CI (99.9%): [? 0, 0.099] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 34.46% complete, ETA 17:35:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.037 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.046 ms/op
Iteration   4: 0.064 ms/op
Iteration   5: 0.058 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.048 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (0.037, 0.048, 0.064), stdev = 0.012
  CI (99.9%): [0.001, 0.096] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 34.54% complete, ETA 17:31:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.049 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.037 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.047 ms/op
Iteration   4: 0.056 ms/op
Iteration   5: 0.058 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.047 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.037, 0.047, 0.058), stdev = 0.010
  CI (99.9%): [0.008, 0.085] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 34.62% complete, ETA 17:28:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.096 ms/op
# Warmup Iteration   2: 0.074 ms/op
# Warmup Iteration   3: 0.075 ms/op
# Warmup Iteration   4: 0.074 ms/op
# Warmup Iteration   5: 0.074 ms/op
Iteration   1: 0.074 ms/op
Iteration   2: 0.075 ms/op
Iteration   3: 0.096 ms/op
Iteration   4: 0.124 ms/op
Iteration   5: 0.117 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.097 ±(99.9%) 0.088 ms/op [Average]
  (min, avg, max) = (0.074, 0.097, 0.124), stdev = 0.023
  CI (99.9%): [0.009, 0.185] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 34.70% complete, ETA 17:25:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.091 ms/op
# Warmup Iteration   2: 0.074 ms/op
# Warmup Iteration   3: 0.074 ms/op
# Warmup Iteration   4: 0.075 ms/op
# Warmup Iteration   5: 0.076 ms/op
Iteration   1: 0.076 ms/op
Iteration   2: 0.077 ms/op
Iteration   3: 0.093 ms/op
Iteration   4: 0.126 ms/op
Iteration   5: 0.126 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.100 ±(99.9%) 0.096 ms/op [Average]
  (min, avg, max) = (0.076, 0.100, 0.126), stdev = 0.025
  CI (99.9%): [0.004, 0.196] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 34.78% complete, ETA 17:21:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ms/op
# Warmup Iteration   2: 0.073 ms/op
# Warmup Iteration   3: 0.075 ms/op
# Warmup Iteration   4: 0.077 ms/op
# Warmup Iteration   5: 0.079 ms/op
Iteration   1: 0.080 ms/op
Iteration   2: 0.079 ms/op
Iteration   3: 0.100 ms/op
Iteration   4: 0.128 ms/op
Iteration   5: 0.124 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.102 ±(99.9%) 0.091 ms/op [Average]
  (min, avg, max) = (0.079, 0.102, 0.128), stdev = 0.024
  CI (99.9%): [0.012, 0.193] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 34.86% complete, ETA 17:18:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.090 ms/op
# Warmup Iteration   2: 0.074 ms/op
# Warmup Iteration   3: 0.076 ms/op
# Warmup Iteration   4: 0.078 ms/op
# Warmup Iteration   5: 0.075 ms/op
Iteration   1: 0.073 ms/op
Iteration   2: 0.073 ms/op
Iteration   3: 0.091 ms/op
Iteration   4: 0.123 ms/op
Iteration   5: 0.124 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.097 ±(99.9%) 0.097 ms/op [Average]
  (min, avg, max) = (0.073, 0.097, 0.124), stdev = 0.025
  CI (99.9%): [? 0, 0.194] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 34.94% complete, ETA 17:15:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.100 ms/op
# Warmup Iteration   2: 0.072 ms/op
# Warmup Iteration   3: 0.072 ms/op
# Warmup Iteration   4: 0.070 ms/op
# Warmup Iteration   5: 0.070 ms/op
Iteration   1: 0.070 ms/op
Iteration   2: 0.070 ms/op
Iteration   3: 0.097 ms/op
Iteration   4: 0.108 ms/op
Iteration   5: 0.108 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.091 ±(99.9%) 0.075 ms/op [Average]
  (min, avg, max) = (0.070, 0.091, 0.108), stdev = 0.019
  CI (99.9%): [0.016, 0.166] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 35.02% complete, ETA 17:11:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.098 ms/op
# Warmup Iteration   2: 0.071 ms/op
# Warmup Iteration   3: 0.071 ms/op
# Warmup Iteration   4: 0.070 ms/op
# Warmup Iteration   5: 0.070 ms/op
Iteration   1: 0.071 ms/op
Iteration   2: 0.070 ms/op
Iteration   3: 0.086 ms/op
Iteration   4: 0.113 ms/op
Iteration   5: 0.108 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.090 ±(99.9%) 0.078 ms/op [Average]
  (min, avg, max) = (0.070, 0.090, 0.113), stdev = 0.020
  CI (99.9%): [0.012, 0.167] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 35.10% complete, ETA 17:08:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.182 ms/op
# Warmup Iteration   2: 0.151 ms/op
# Warmup Iteration   3: 0.149 ms/op
# Warmup Iteration   4: 0.151 ms/op
# Warmup Iteration   5: 0.150 ms/op
Iteration   1: 0.150 ms/op
Iteration   2: 0.150 ms/op
Iteration   3: 0.176 ms/op
Iteration   4: 0.247 ms/op
Iteration   5: 0.258 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.196 ±(99.9%) 0.203 ms/op [Average]
  (min, avg, max) = (0.150, 0.196, 0.258), stdev = 0.053
  CI (99.9%): [? 0, 0.399] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 35.18% complete, ETA 17:05:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.183 ms/op
# Warmup Iteration   2: 0.145 ms/op
# Warmup Iteration   3: 0.146 ms/op
# Warmup Iteration   4: 0.146 ms/op
# Warmup Iteration   5: 0.148 ms/op
Iteration   1: 0.144 ms/op
Iteration   2: 0.144 ms/op
Iteration   3: 0.167 ms/op
Iteration   4: 0.237 ms/op
Iteration   5: 0.245 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.187 ±(99.9%) 0.192 ms/op [Average]
  (min, avg, max) = (0.144, 0.187, 0.245), stdev = 0.050
  CI (99.9%): [? 0, 0.380] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 35.26% complete, ETA 17:02:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.178 ms/op
# Warmup Iteration   2: 0.147 ms/op
# Warmup Iteration   3: 0.149 ms/op
# Warmup Iteration   4: 0.145 ms/op
# Warmup Iteration   5: 0.145 ms/op
Iteration   1: 0.146 ms/op
Iteration   2: 0.144 ms/op
Iteration   3: 0.173 ms/op
Iteration   4: 0.256 ms/op
Iteration   5: 0.241 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.192 ±(99.9%) 0.205 ms/op [Average]
  (min, avg, max) = (0.144, 0.192, 0.256), stdev = 0.053
  CI (99.9%): [? 0, 0.396] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 35.34% complete, ETA 16:58:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.184 ms/op
# Warmup Iteration   2: 0.148 ms/op
# Warmup Iteration   3: 0.148 ms/op
# Warmup Iteration   4: 0.148 ms/op
# Warmup Iteration   5: 0.149 ms/op
Iteration   1: 0.149 ms/op
Iteration   2: 0.149 ms/op
Iteration   3: 0.174 ms/op
Iteration   4: 0.239 ms/op
Iteration   5: 0.244 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.191 ±(99.9%) 0.182 ms/op [Average]
  (min, avg, max) = (0.149, 0.191, 0.244), stdev = 0.047
  CI (99.9%): [0.009, 0.372] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 35.42% complete, ETA 16:55:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.194 ms/op
# Warmup Iteration   2: 0.146 ms/op
# Warmup Iteration   3: 0.145 ms/op
# Warmup Iteration   4: 0.148 ms/op
# Warmup Iteration   5: 0.145 ms/op
Iteration   1: 0.145 ms/op
Iteration   2: 0.146 ms/op
Iteration   3: 0.178 ms/op
Iteration   4: 0.235 ms/op
Iteration   5: 0.232 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.187 ±(99.9%) 0.170 ms/op [Average]
  (min, avg, max) = (0.145, 0.187, 0.235), stdev = 0.044
  CI (99.9%): [0.017, 0.357] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 35.50% complete, ETA 16:52:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.196 ms/op
# Warmup Iteration   2: 0.147 ms/op
# Warmup Iteration   3: 0.148 ms/op
# Warmup Iteration   4: 0.148 ms/op
# Warmup Iteration   5: 0.148 ms/op
Iteration   1: 0.147 ms/op
Iteration   2: 0.148 ms/op
Iteration   3: 0.185 ms/op
Iteration   4: 0.234 ms/op
Iteration   5: 0.230 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.189 ±(99.9%) 0.164 ms/op [Average]
  (min, avg, max) = (0.147, 0.189, 0.234), stdev = 0.043
  CI (99.9%): [0.025, 0.352] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 35.58% complete, ETA 16:49:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.378 ms/op
# Warmup Iteration   2: 0.303 ms/op
# Warmup Iteration   3: 0.298 ms/op
# Warmup Iteration   4: 0.295 ms/op
# Warmup Iteration   5: 0.297 ms/op
Iteration   1: 0.298 ms/op
Iteration   2: 0.298 ms/op
Iteration   3: 0.341 ms/op
Iteration   4: 0.500 ms/op
Iteration   5: 0.498 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.387 ±(99.9%) 0.399 ms/op [Average]
  (min, avg, max) = (0.298, 0.387, 0.500), stdev = 0.104
  CI (99.9%): [? 0, 0.785] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 35.66% complete, ETA 16:45:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.350 ms/op
# Warmup Iteration   2: 0.287 ms/op
# Warmup Iteration   3: 0.286 ms/op
# Warmup Iteration   4: 0.289 ms/op
# Warmup Iteration   5: 0.298 ms/op
Iteration   1: 0.295 ms/op
Iteration   2: 0.299 ms/op
Iteration   3: 0.376 ms/op
Iteration   4: 0.505 ms/op
Iteration   5: 0.507 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.396 ±(99.9%) 0.404 ms/op [Average]
  (min, avg, max) = (0.295, 0.396, 0.507), stdev = 0.105
  CI (99.9%): [? 0, 0.800] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 35.74% complete, ETA 16:42:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.379 ms/op
# Warmup Iteration   2: 0.298 ms/op
# Warmup Iteration   3: 0.295 ms/op
# Warmup Iteration   4: 0.295 ms/op
# Warmup Iteration   5: 0.303 ms/op
Iteration   1: 0.311 ms/op
Iteration   2: 0.305 ms/op
Iteration   3: 0.392 ms/op
Iteration   4: 0.499 ms/op
Iteration   5: 0.483 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.398 ±(99.9%) 0.353 ms/op [Average]
  (min, avg, max) = (0.305, 0.398, 0.499), stdev = 0.092
  CI (99.9%): [0.044, 0.751] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 35.82% complete, ETA 16:39:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.356 ms/op
# Warmup Iteration   2: 0.288 ms/op
# Warmup Iteration   3: 0.301 ms/op
# Warmup Iteration   4: 0.314 ms/op
# Warmup Iteration   5: 0.315 ms/op
Iteration   1: 0.314 ms/op
Iteration   2: 0.314 ms/op
Iteration   3: 0.392 ms/op
Iteration   4: 0.500 ms/op
Iteration   5: 0.505 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.405 ±(99.9%) 0.365 ms/op [Average]
  (min, avg, max) = (0.314, 0.405, 0.505), stdev = 0.095
  CI (99.9%): [0.040, 0.770] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 35.90% complete, ETA 16:36:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.398 ms/op
# Warmup Iteration   2: 0.289 ms/op
# Warmup Iteration   3: 0.281 ms/op
# Warmup Iteration   4: 0.284 ms/op
# Warmup Iteration   5: 0.286 ms/op
Iteration   1: 0.284 ms/op
Iteration   2: 0.312 ms/op
Iteration   3: 0.472 ms/op
Iteration   4: 0.439 ms/op
Iteration   5: 0.447 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.391 ±(99.9%) 0.332 ms/op [Average]
  (min, avg, max) = (0.284, 0.391, 0.472), stdev = 0.086
  CI (99.9%): [0.059, 0.722] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 35.98% complete, ETA 16:33:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.379 ms/op
# Warmup Iteration   2: 0.282 ms/op
# Warmup Iteration   3: 0.277 ms/op
# Warmup Iteration   4: 0.281 ms/op
# Warmup Iteration   5: 0.280 ms/op
Iteration   1: 0.283 ms/op
Iteration   2: 0.281 ms/op
Iteration   3: 0.388 ms/op
Iteration   4: 0.420 ms/op
Iteration   5: 0.462 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.367 ±(99.9%) 0.314 ms/op [Average]
  (min, avg, max) = (0.281, 0.367, 0.462), stdev = 0.082
  CI (99.9%): [0.053, 0.681] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 36.06% complete, ETA 16:30:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.765 ms/op
# Warmup Iteration   2: 0.601 ms/op
# Warmup Iteration   3: 0.601 ms/op
# Warmup Iteration   4: 0.599 ms/op
# Warmup Iteration   5: 0.601 ms/op
Iteration   1: 0.600 ms/op
Iteration   2: 0.597 ms/op
Iteration   3: 0.711 ms/op
Iteration   4: 1.014 ms/op
Iteration   5: 0.973 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.779 ±(99.9%) 0.777 ms/op [Average]
  (min, avg, max) = (0.597, 0.779, 1.014), stdev = 0.202
  CI (99.9%): [0.002, 1.556] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 36.14% complete, ETA 16:26:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.725 ms/op
# Warmup Iteration   2: 0.598 ms/op
# Warmup Iteration   3: 0.599 ms/op
# Warmup Iteration   4: 0.592 ms/op
# Warmup Iteration   5: 0.594 ms/op
Iteration   1: 0.594 ms/op
Iteration   2: 0.591 ms/op
Iteration   3: 0.696 ms/op
Iteration   4: 0.962 ms/op
Iteration   5: 0.962 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.761 ±(99.9%) 0.725 ms/op [Average]
  (min, avg, max) = (0.591, 0.761, 0.962), stdev = 0.188
  CI (99.9%): [0.036, 1.487] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 36.22% complete, ETA 16:23:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.706 ms/op
# Warmup Iteration   2: 0.578 ms/op
# Warmup Iteration   3: 0.571 ms/op
# Warmup Iteration   4: 0.570 ms/op
# Warmup Iteration   5: 0.576 ms/op
Iteration   1: 0.574 ms/op
Iteration   2: 0.567 ms/op
Iteration   3: 0.665 ms/op
Iteration   4: 0.946 ms/op
Iteration   5: 0.968 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.744 ±(99.9%) 0.765 ms/op [Average]
  (min, avg, max) = (0.567, 0.744, 0.968), stdev = 0.199
  CI (99.9%): [? 0, 1.508] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 36.30% complete, ETA 16:20:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.730 ms/op
# Warmup Iteration   2: 0.592 ms/op
# Warmup Iteration   3: 0.592 ms/op
# Warmup Iteration   4: 0.590 ms/op
# Warmup Iteration   5: 0.592 ms/op
Iteration   1: 0.593 ms/op
Iteration   2: 0.592 ms/op
Iteration   3: 0.711 ms/op
Iteration   4: 1.005 ms/op
Iteration   5: 0.968 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.774 ±(99.9%) 0.772 ms/op [Average]
  (min, avg, max) = (0.592, 0.774, 1.005), stdev = 0.201
  CI (99.9%): [0.002, 1.546] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 36.38% complete, ETA 16:17:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.849 ms/op
# Warmup Iteration   2: 0.573 ms/op
# Warmup Iteration   3: 0.565 ms/op
# Warmup Iteration   4: 0.561 ms/op
# Warmup Iteration   5: 0.560 ms/op
Iteration   1: 0.561 ms/op
Iteration   2: 0.562 ms/op
Iteration   3: 0.717 ms/op
Iteration   4: 0.945 ms/op
Iteration   5: 0.891 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.735 ±(99.9%) 0.690 ms/op [Average]
  (min, avg, max) = (0.561, 0.735, 0.945), stdev = 0.179
  CI (99.9%): [0.045, 1.426] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 36.46% complete, ETA 16:14:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.789 ms/op
# Warmup Iteration   2: 0.569 ms/op
# Warmup Iteration   3: 0.559 ms/op
# Warmup Iteration   4: 0.564 ms/op
# Warmup Iteration   5: 0.561 ms/op
Iteration   1: 0.558 ms/op
Iteration   2: 0.568 ms/op
Iteration   3: 0.754 ms/op
Iteration   4: 0.918 ms/op
Iteration   5: 0.935 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.747 ±(99.9%) 0.700 ms/op [Average]
  (min, avg, max) = (0.558, 0.747, 0.935), stdev = 0.182
  CI (99.9%): [0.046, 1.447] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 36.54% complete, ETA 16:11:33
# Fork: 1 of 1
# Warmup Iteration   1: 1.348 ms/op
# Warmup Iteration   2: 1.100 ms/op
# Warmup Iteration   3: 1.103 ms/op
# Warmup Iteration   4: 1.103 ms/op
# Warmup Iteration   5: 1.098 ms/op
Iteration   1: 1.101 ms/op
Iteration   2: 1.099 ms/op
Iteration   3: 1.313 ms/op
Iteration   4: 1.952 ms/op
Iteration   5: 1.976 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.488 ±(99.9%) 1.706 ms/op [Average]
  (min, avg, max) = (1.099, 1.488, 1.976), stdev = 0.443
  CI (99.9%): [? 0, 3.194] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 36.62% complete, ETA 16:08:30
# Fork: 1 of 1
# Warmup Iteration   1: 1.466 ms/op
# Warmup Iteration   2: 1.132 ms/op
# Warmup Iteration   3: 1.131 ms/op
# Warmup Iteration   4: 1.128 ms/op
# Warmup Iteration   5: 1.136 ms/op
Iteration   1: 1.125 ms/op
Iteration   2: 1.133 ms/op
Iteration   3: 1.405 ms/op
Iteration   4: 1.915 ms/op
Iteration   5: 1.850 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.486 ±(99.9%) 1.464 ms/op [Average]
  (min, avg, max) = (1.125, 1.486, 1.915), stdev = 0.380
  CI (99.9%): [0.022, 2.949] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 36.70% complete, ETA 16:05:28
# Fork: 1 of 1
# Warmup Iteration   1: 1.476 ms/op
# Warmup Iteration   2: 1.197 ms/op
# Warmup Iteration   3: 1.188 ms/op
# Warmup Iteration   4: 1.187 ms/op
# Warmup Iteration   5: 1.194 ms/op
Iteration   1: 1.177 ms/op
Iteration   2: 1.189 ms/op
Iteration   3: 1.422 ms/op
Iteration   4: 2.008 ms/op
Iteration   5: 1.878 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.535 ±(99.9%) 1.494 ms/op [Average]
  (min, avg, max) = (1.177, 1.535, 2.008), stdev = 0.388
  CI (99.9%): [0.041, 3.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 36.78% complete, ETA 16:02:27
# Fork: 1 of 1
# Warmup Iteration   1: 1.456 ms/op
# Warmup Iteration   2: 1.112 ms/op
# Warmup Iteration   3: 1.103 ms/op
# Warmup Iteration   4: 1.148 ms/op
# Warmup Iteration   5: 1.149 ms/op
Iteration   1: 1.184 ms/op
Iteration   2: 1.187 ms/op
Iteration   3: 1.379 ms/op
Iteration   4: 1.918 ms/op
Iteration   5: 1.889 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.512 ±(99.9%) 1.413 ms/op [Average]
  (min, avg, max) = (1.184, 1.512, 1.918), stdev = 0.367
  CI (99.9%): [0.099, 2.924] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 36.86% complete, ETA 15:59:26
# Fork: 1 of 1
# Warmup Iteration   1: 1.569 ms/op
# Warmup Iteration   2: 1.189 ms/op
# Warmup Iteration   3: 1.185 ms/op
# Warmup Iteration   4: 1.169 ms/op
# Warmup Iteration   5: 1.177 ms/op
Iteration   1: 1.183 ms/op
Iteration   2: 1.180 ms/op
Iteration   3: 1.524 ms/op
Iteration   4: 1.994 ms/op
Iteration   5: 1.963 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.569 ±(99.9%) 1.538 ms/op [Average]
  (min, avg, max) = (1.180, 1.569, 1.994), stdev = 0.399
  CI (99.9%): [0.031, 3.107] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 10, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 36.94% complete, ETA 15:56:27
# Fork: 1 of 1
# Warmup Iteration   1: 1.551 ms/op
# Warmup Iteration   2: 1.126 ms/op
# Warmup Iteration   3: 1.121 ms/op
# Warmup Iteration   4: 1.122 ms/op
# Warmup Iteration   5: 1.119 ms/op
Iteration   1: 1.136 ms/op
Iteration   2: 1.136 ms/op
Iteration   3: 1.503 ms/op
Iteration   4: 1.926 ms/op
Iteration   5: 1.840 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.508 ±(99.9%) 1.443 ms/op [Average]
  (min, avg, max) = (1.136, 1.508, 1.926), stdev = 0.375
  CI (99.9%): [0.065, 2.951] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 2)

# Run progress: 37.02% complete, ETA 15:53:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 32, nValues = 3)

# Run progress: 37.10% complete, ETA 15:50:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 2)

# Run progress: 37.18% complete, ETA 15:47:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 1000, nValues = 3)

# Run progress: 37.26% complete, ETA 15:44:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 2)

# Run progress: 37.34% complete, ETA 15:41:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16, nKeys = 100000, nValues = 3)

# Run progress: 37.42% complete, ETA 15:38:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 2)

# Run progress: 37.50% complete, ETA 15:35:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 32, nValues = 3)

# Run progress: 37.58% complete, ETA 15:32:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 2)

# Run progress: 37.66% complete, ETA 15:30:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 1000, nValues = 3)

# Run progress: 37.74% complete, ETA 15:27:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 2)

# Run progress: 37.82% complete, ETA 15:24:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10??, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 32, nKeys = 100000, nValues = 3)

# Run progress: 37.90% complete, ETA 15:21:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 2)

# Run progress: 37.98% complete, ETA 15:18:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [? 10?³, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 32, nValues = 3)

# Run progress: 38.06% complete, ETA 15:15:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.013] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 2)

# Run progress: 38.14% complete, ETA 15:13:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 1000, nValues = 3)

# Run progress: 38.22% complete, ETA 15:10:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.008), stdev = 0.001
  CI (99.9%): [? 10??, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 2)

# Run progress: 38.30% complete, ETA 15:07:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.007), stdev = 0.002
  CI (99.9%): [? 10??, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 64, nKeys = 100000, nValues = 3)

# Run progress: 38.38% complete, ETA 15:04:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.006 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.007), stdev = 0.002
  CI (99.9%): [? 10??, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 2)

# Run progress: 38.46% complete, ETA 15:01:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.012 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.009, 0.012, 0.016), stdev = 0.003
  CI (99.9%): [? 0, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 32, nValues = 3)

# Run progress: 38.54% complete, ETA 14:59:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.013 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.009, 0.013, 0.017), stdev = 0.003
  CI (99.9%): [? 0, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 2)

# Run progress: 38.62% complete, ETA 14:56:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.013 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.016), stdev = 0.003
  CI (99.9%): [0.002, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 1000, nValues = 3)

# Run progress: 38.70% complete, ETA 14:53:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.013 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.016), stdev = 0.003
  CI (99.9%): [0.003, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 2)

# Run progress: 38.78% complete, ETA 14:50:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.013 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.017), stdev = 0.003
  CI (99.9%): [0.001, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 128, nKeys = 100000, nValues = 3)

# Run progress: 38.86% complete, ETA 14:48:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.009 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.013 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.009, 0.013, 0.016), stdev = 0.003
  CI (99.9%): [0.001, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 2)

# Run progress: 38.94% complete, ETA 14:45:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.024 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.018, 0.024, 0.033), stdev = 0.007
  CI (99.9%): [? 0, 0.051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 32, nValues = 3)

# Run progress: 39.02% complete, ETA 14:42:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.022 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.024 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.018, 0.024, 0.031), stdev = 0.006
  CI (99.9%): [? 0, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 2)

# Run progress: 39.10% complete, ETA 14:40:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.022 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.017 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.017 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.023 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.017, 0.023, 0.031), stdev = 0.007
  CI (99.9%): [? 0, 0.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 1000, nValues = 3)

# Run progress: 39.18% complete, ETA 14:37:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.023 ms/op
Iteration   4: 0.033 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.025 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.019, 0.025, 0.033), stdev = 0.006
  CI (99.9%): [? 0, 0.050] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 2)

# Run progress: 39.26% complete, ETA 14:34:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.024 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.017, 0.024, 0.031), stdev = 0.006
  CI (99.9%): [? 0, 0.049] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 256, nKeys = 100000, nValues = 3)

# Run progress: 39.34% complete, ETA 14:32:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.018 ms/op
# Warmup Iteration   5: 0.018 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.032 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.026 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.019, 0.026, 0.032), stdev = 0.007
  CI (99.9%): [0.001, 0.052] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 2)

# Run progress: 39.42% complete, ETA 14:29:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.044 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.059 ms/op
Iteration   5: 0.061 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.047 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (0.036, 0.047, 0.061), stdev = 0.012
  CI (99.9%): [? 0, 0.095] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 32, nValues = 3)

# Run progress: 39.50% complete, ETA 14:26:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.038 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.037 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.059 ms/op
Iteration   5: 0.059 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.047 ±(99.9%) 0.042 ms/op [Average]
  (min, avg, max) = (0.037, 0.047, 0.059), stdev = 0.011
  CI (99.9%): [0.005, 0.089] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 2)

# Run progress: 39.58% complete, ETA 14:24:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.043 ms/op
# Warmup Iteration   2: 0.035 ms/op
# Warmup Iteration   3: 0.035 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.037 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.045 ms/op
Iteration   4: 0.057 ms/op
Iteration   5: 0.063 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.048 ±(99.9%) 0.046 ms/op [Average]
  (min, avg, max) = (0.037, 0.048, 0.063), stdev = 0.012
  CI (99.9%): [0.002, 0.094] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 1000, nValues = 3)

# Run progress: 39.66% complete, ETA 14:21:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.038 ms/op
# Warmup Iteration   3: 0.038 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.037 ms/op
Iteration   1: 0.038 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.062 ms/op
Iteration   5: 0.064 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.049 ±(99.9%) 0.051 ms/op [Average]
  (min, avg, max) = (0.037, 0.049, 0.064), stdev = 0.013
  CI (99.9%): [? 0, 0.100] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 2)

# Run progress: 39.74% complete, ETA 14:18:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.060 ms/op
# Warmup Iteration   2: 0.035 ms/op
# Warmup Iteration   3: 0.035 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.035 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.061 ms/op
Iteration   4: 0.054 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.047 ±(99.9%) 0.044 ms/op [Average]
  (min, avg, max) = (0.035, 0.047, 0.061), stdev = 0.011
  CI (99.9%): [0.004, 0.091] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 512, nKeys = 100000, nValues = 3)

# Run progress: 39.82% complete, ETA 14:16:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.059 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.036 ms/op
# Warmup Iteration   5: 0.036 ms/op
Iteration   1: 0.036 ms/op
Iteration   2: 0.037 ms/op
Iteration   3: 0.063 ms/op
Iteration   4: 0.057 ms/op
Iteration   5: 0.055 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.050 ±(99.9%) 0.046 ms/op [Average]
  (min, avg, max) = (0.036, 0.050, 0.063), stdev = 0.012
  CI (99.9%): [0.003, 0.096] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 2)

# Run progress: 39.90% complete, ETA 14:13:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.099 ms/op
# Warmup Iteration   2: 0.074 ms/op
# Warmup Iteration   3: 0.073 ms/op
# Warmup Iteration   4: 0.073 ms/op
# Warmup Iteration   5: 0.074 ms/op
Iteration   1: 0.072 ms/op
Iteration   2: 0.073 ms/op
Iteration   3: 0.086 ms/op
Iteration   4: 0.133 ms/op
Iteration   5: 0.128 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.098 ±(99.9%) 0.115 ms/op [Average]
  (min, avg, max) = (0.072, 0.098, 0.133), stdev = 0.030
  CI (99.9%): [? 0, 0.213] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 32, nValues = 3)

# Run progress: 39.98% complete, ETA 14:11:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.094 ms/op
# Warmup Iteration   2: 0.073 ms/op
# Warmup Iteration   3: 0.075 ms/op
# Warmup Iteration   4: 0.073 ms/op
# Warmup Iteration   5: 0.074 ms/op
Iteration   1: 0.072 ms/op
Iteration   2: 0.073 ms/op
Iteration   3: 0.085 ms/op
Iteration   4: 0.121 ms/op
Iteration   5: 0.115 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.093 ±(99.9%) 0.090 ms/op [Average]
  (min, avg, max) = (0.072, 0.093, 0.121), stdev = 0.023
  CI (99.9%): [0.003, 0.184] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 2)

# Run progress: 40.06% complete, ETA 14:08:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.096 ms/op
# Warmup Iteration   2: 0.075 ms/op
# Warmup Iteration   3: 0.075 ms/op
# Warmup Iteration   4: 0.073 ms/op
# Warmup Iteration   5: 0.074 ms/op
Iteration   1: 0.074 ms/op
Iteration   2: 0.074 ms/op
Iteration   3: 0.089 ms/op
Iteration   4: 0.130 ms/op
Iteration   5: 0.121 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.098 ±(99.9%) 0.102 ms/op [Average]
  (min, avg, max) = (0.074, 0.098, 0.130), stdev = 0.026
  CI (99.9%): [? 0, 0.200] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 1000, nValues = 3)

# Run progress: 40.14% complete, ETA 14:06:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.096 ms/op
# Warmup Iteration   2: 0.073 ms/op
# Warmup Iteration   3: 0.072 ms/op
# Warmup Iteration   4: 0.072 ms/op
# Warmup Iteration   5: 0.073 ms/op
Iteration   1: 0.073 ms/op
Iteration   2: 0.073 ms/op
Iteration   3: 0.089 ms/op
Iteration   4: 0.125 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.097 ±(99.9%) 0.103 ms/op [Average]
  (min, avg, max) = (0.073, 0.097, 0.127), stdev = 0.027
  CI (99.9%): [? 0, 0.201] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 2)

# Run progress: 40.22% complete, ETA 14:03:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.108 ms/op
# Warmup Iteration   2: 0.069 ms/op
# Warmup Iteration   3: 0.070 ms/op
# Warmup Iteration   4: 0.070 ms/op
# Warmup Iteration   5: 0.070 ms/op
Iteration   1: 0.069 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.117 ms/op
Iteration   4: 0.116 ms/op
Iteration   5: 0.112 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.097 ±(99.9%) 0.094 ms/op [Average]
  (min, avg, max) = (0.069, 0.097, 0.117), stdev = 0.024
  CI (99.9%): [0.003, 0.191] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 1024, nKeys = 100000, nValues = 3)

# Run progress: 40.30% complete, ETA 14:00:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.108 ms/op
# Warmup Iteration   2: 0.070 ms/op
# Warmup Iteration   3: 0.070 ms/op
# Warmup Iteration   4: 0.073 ms/op
# Warmup Iteration   5: 0.075 ms/op
Iteration   1: 0.073 ms/op
Iteration   2: 0.074 ms/op
Iteration   3: 0.114 ms/op
Iteration   4: 0.119 ms/op
Iteration   5: 0.104 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.097 ±(99.9%) 0.084 ms/op [Average]
  (min, avg, max) = (0.073, 0.097, 0.119), stdev = 0.022
  CI (99.9%): [0.013, 0.181] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 2)

# Run progress: 40.38% complete, ETA 13:58:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.186 ms/op
# Warmup Iteration   2: 0.149 ms/op
# Warmup Iteration   3: 0.151 ms/op
# Warmup Iteration   4: 0.149 ms/op
# Warmup Iteration   5: 0.150 ms/op
Iteration   1: 0.148 ms/op
Iteration   2: 0.149 ms/op
Iteration   3: 0.178 ms/op
Iteration   4: 0.249 ms/op
Iteration   5: 0.250 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.195 ±(99.9%) 0.198 ms/op [Average]
  (min, avg, max) = (0.148, 0.195, 0.250), stdev = 0.051
  CI (99.9%): [? 0, 0.393] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 32, nValues = 3)

# Run progress: 40.46% complete, ETA 13:55:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.190 ms/op
# Warmup Iteration   2: 0.149 ms/op
# Warmup Iteration   3: 0.148 ms/op
# Warmup Iteration   4: 0.150 ms/op
# Warmup Iteration   5: 0.149 ms/op
Iteration   1: 0.150 ms/op
Iteration   2: 0.147 ms/op
Iteration   3: 0.180 ms/op
Iteration   4: 0.249 ms/op
Iteration   5: 0.261 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.197 ±(99.9%) 0.208 ms/op [Average]
  (min, avg, max) = (0.147, 0.197, 0.261), stdev = 0.054
  CI (99.9%): [? 0, 0.405] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 2)

# Run progress: 40.54% complete, ETA 13:53:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.188 ms/op
# Warmup Iteration   2: 0.148 ms/op
# Warmup Iteration   3: 0.149 ms/op
# Warmup Iteration   4: 0.149 ms/op
# Warmup Iteration   5: 0.151 ms/op
Iteration   1: 0.149 ms/op
Iteration   2: 0.150 ms/op
Iteration   3: 0.176 ms/op
Iteration   4: 0.255 ms/op
Iteration   5: 0.245 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.195 ±(99.9%) 0.198 ms/op [Average]
  (min, avg, max) = (0.149, 0.195, 0.255), stdev = 0.051
  CI (99.9%): [? 0, 0.393] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 1000, nValues = 3)

# Run progress: 40.63% complete, ETA 13:50:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.184 ms/op
# Warmup Iteration   2: 0.148 ms/op
# Warmup Iteration   3: 0.148 ms/op
# Warmup Iteration   4: 0.146 ms/op
# Warmup Iteration   5: 0.146 ms/op
Iteration   1: 0.146 ms/op
Iteration   2: 0.146 ms/op
Iteration   3: 0.182 ms/op
Iteration   4: 0.245 ms/op
Iteration   5: 0.255 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.195 ±(99.9%) 0.203 ms/op [Average]
  (min, avg, max) = (0.146, 0.195, 0.255), stdev = 0.053
  CI (99.9%): [? 0, 0.398] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 2)

# Run progress: 40.71% complete, ETA 13:48:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.213 ms/op
# Warmup Iteration   2: 0.139 ms/op
# Warmup Iteration   3: 0.139 ms/op
# Warmup Iteration   4: 0.145 ms/op
# Warmup Iteration   5: 0.152 ms/op
Iteration   1: 0.154 ms/op
Iteration   2: 0.154 ms/op
Iteration   3: 0.289 ms/op
Iteration   4: 0.236 ms/op
Iteration   5: 0.221 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.211 ±(99.9%) 0.223 ms/op [Average]
  (min, avg, max) = (0.154, 0.211, 0.289), stdev = 0.058
  CI (99.9%): [? 0, 0.433] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 2048, nKeys = 100000, nValues = 3)

# Run progress: 40.79% complete, ETA 13:45:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.213 ms/op
# Warmup Iteration   2: 0.137 ms/op
# Warmup Iteration   3: 0.146 ms/op
# Warmup Iteration   4: 0.152 ms/op
# Warmup Iteration   5: 0.152 ms/op
Iteration   1: 0.150 ms/op
Iteration   2: 0.158 ms/op
Iteration   3: 0.275 ms/op
Iteration   4: 0.237 ms/op
Iteration   5: 0.210 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.206 ±(99.9%) 0.204 ms/op [Average]
  (min, avg, max) = (0.150, 0.206, 0.275), stdev = 0.053
  CI (99.9%): [0.002, 0.410] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 2)

# Run progress: 40.87% complete, ETA 13:43:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.364 ms/op
# Warmup Iteration   2: 0.288 ms/op
# Warmup Iteration   3: 0.314 ms/op
# Warmup Iteration   4: 0.321 ms/op
# Warmup Iteration   5: 0.321 ms/op
Iteration   1: 0.320 ms/op
Iteration   2: 0.320 ms/op
Iteration   3: 0.406 ms/op
Iteration   4: 0.519 ms/op
Iteration   5: 0.441 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.401 ±(99.9%) 0.325 ms/op [Average]
  (min, avg, max) = (0.320, 0.401, 0.519), stdev = 0.084
  CI (99.9%): [0.076, 0.726] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 32, nValues = 3)

# Run progress: 40.95% complete, ETA 13:40:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.370 ms/op
# Warmup Iteration   2: 0.301 ms/op
# Warmup Iteration   3: 0.298 ms/op
# Warmup Iteration   4: 0.301 ms/op
# Warmup Iteration   5: 0.302 ms/op
Iteration   1: 0.303 ms/op
Iteration   2: 0.300 ms/op
Iteration   3: 0.370 ms/op
Iteration   4: 0.486 ms/op
Iteration   5: 0.482 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.388 ±(99.9%) 0.355 ms/op [Average]
  (min, avg, max) = (0.300, 0.388, 0.486), stdev = 0.092
  CI (99.9%): [0.033, 0.743] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 2)

# Run progress: 41.03% complete, ETA 13:38:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.366 ms/op
# Warmup Iteration   2: 0.301 ms/op
# Warmup Iteration   3: 0.301 ms/op
# Warmup Iteration   4: 0.292 ms/op
# Warmup Iteration   5: 0.291 ms/op
Iteration   1: 0.295 ms/op
Iteration   2: 0.302 ms/op
Iteration   3: 0.366 ms/op
Iteration   4: 0.511 ms/op
Iteration   5: 0.451 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.385 ±(99.9%) 0.363 ms/op [Average]
  (min, avg, max) = (0.295, 0.385, 0.511), stdev = 0.094
  CI (99.9%): [0.022, 0.748] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 1000, nValues = 3)

# Run progress: 41.11% complete, ETA 13:36:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.370 ms/op
# Warmup Iteration   2: 0.289 ms/op
# Warmup Iteration   3: 0.293 ms/op
# Warmup Iteration   4: 0.293 ms/op
# Warmup Iteration   5: 0.296 ms/op
Iteration   1: 0.292 ms/op
Iteration   2: 0.291 ms/op
Iteration   3: 0.353 ms/op
Iteration   4: 0.525 ms/op
Iteration   5: 0.498 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.392 ±(99.9%) 0.434 ms/op [Average]
  (min, avg, max) = (0.291, 0.392, 0.525), stdev = 0.113
  CI (99.9%): [? 0, 0.825] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 2)

# Run progress: 41.19% complete, ETA 13:33:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.363 ms/op
# Warmup Iteration   2: 0.280 ms/op
# Warmup Iteration   3: 0.276 ms/op
# Warmup Iteration   4: 0.271 ms/op
# Warmup Iteration   5: 0.273 ms/op
Iteration   1: 0.275 ms/op
Iteration   2: 0.279 ms/op
Iteration   3: 0.479 ms/op
Iteration   4: 0.467 ms/op
Iteration   5: 0.453 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.390 ±(99.9%) 0.401 ms/op [Average]
  (min, avg, max) = (0.275, 0.390, 0.479), stdev = 0.104
  CI (99.9%): [? 0, 0.792] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 4096, nKeys = 100000, nValues = 3)

# Run progress: 41.27% complete, ETA 13:31:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.424 ms/op
# Warmup Iteration   2: 0.275 ms/op
# Warmup Iteration   3: 0.272 ms/op
# Warmup Iteration   4: 0.271 ms/op
# Warmup Iteration   5: 0.275 ms/op
Iteration   1: 0.272 ms/op
Iteration   2: 0.279 ms/op
Iteration   3: 0.456 ms/op
Iteration   4: 0.484 ms/op
Iteration   5: 0.434 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.385 ±(99.9%) 0.391 ms/op [Average]
  (min, avg, max) = (0.272, 0.385, 0.484), stdev = 0.101
  CI (99.9%): [? 0, 0.776] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 2)

# Run progress: 41.35% complete, ETA 13:28:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.755 ms/op
# Warmup Iteration   2: 0.555 ms/op
# Warmup Iteration   3: 0.559 ms/op
# Warmup Iteration   4: 0.567 ms/op
# Warmup Iteration   5: 0.569 ms/op
Iteration   1: 0.570 ms/op
Iteration   2: 0.565 ms/op
Iteration   3: 0.666 ms/op
Iteration   4: 1.046 ms/op
Iteration   5: 0.974 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.764 ±(99.9%) 0.884 ms/op [Average]
  (min, avg, max) = (0.565, 0.764, 1.046), stdev = 0.230
  CI (99.9%): [? 0, 1.648] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 32, nValues = 3)

# Run progress: 41.43% complete, ETA 13:26:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.745 ms/op
# Warmup Iteration   2: 0.597 ms/op
# Warmup Iteration   3: 0.597 ms/op
# Warmup Iteration   4: 0.591 ms/op
# Warmup Iteration   5: 0.598 ms/op
Iteration   1: 0.599 ms/op
Iteration   2: 0.591 ms/op
Iteration   3: 0.692 ms/op
Iteration   4: 0.995 ms/op
Iteration   5: 0.954 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.766 ±(99.9%) 0.750 ms/op [Average]
  (min, avg, max) = (0.591, 0.766, 0.995), stdev = 0.195
  CI (99.9%): [0.016, 1.516] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 2)

# Run progress: 41.51% complete, ETA 13:23:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.764 ms/op
# Warmup Iteration   2: 0.616 ms/op
# Warmup Iteration   3: 0.595 ms/op
# Warmup Iteration   4: 0.593 ms/op
# Warmup Iteration   5: 0.606 ms/op
Iteration   1: 0.595 ms/op
Iteration   2: 0.599 ms/op
Iteration   3: 0.713 ms/op
Iteration   4: 0.955 ms/op
Iteration   5: 0.966 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.766 ±(99.9%) 0.709 ms/op [Average]
  (min, avg, max) = (0.595, 0.766, 0.966), stdev = 0.184
  CI (99.9%): [0.057, 1.474] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 1000, nValues = 3)

# Run progress: 41.59% complete, ETA 13:21:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.745 ms/op
# Warmup Iteration   2: 0.600 ms/op
# Warmup Iteration   3: 0.597 ms/op
# Warmup Iteration   4: 0.594 ms/op
# Warmup Iteration   5: 0.595 ms/op
Iteration   1: 0.589 ms/op
Iteration   2: 0.589 ms/op
Iteration   3: 0.703 ms/op
Iteration   4: 0.875 ms/op
Iteration   5: 1.053 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.762 ±(99.9%) 0.772 ms/op [Average]
  (min, avg, max) = (0.589, 0.762, 1.053), stdev = 0.201
  CI (99.9%): [? 0, 1.534] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 2)

# Run progress: 41.67% complete, ETA 13:19:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.910 ms/op
# Warmup Iteration   2: 0.593 ms/op
# Warmup Iteration   3: 0.587 ms/op
# Warmup Iteration   4: 0.591 ms/op
# Warmup Iteration   5: 0.594 ms/op
Iteration   1: 0.584 ms/op
Iteration   2: 0.605 ms/op
Iteration   3: 1.032 ms/op
Iteration   4: 1.037 ms/op
Iteration   5: 0.934 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.838 ±(99.9%) 0.873 ms/op [Average]
  (min, avg, max) = (0.584, 0.838, 1.037), stdev = 0.227
  CI (99.9%): [? 0, 1.711] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 8192, nKeys = 100000, nValues = 3)

# Run progress: 41.75% complete, ETA 13:16:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.875 ms/op
# Warmup Iteration   2: 0.565 ms/op
# Warmup Iteration   3: 0.559 ms/op
# Warmup Iteration   4: 0.552 ms/op
# Warmup Iteration   5: 0.560 ms/op
Iteration   1: 0.556 ms/op
Iteration   2: 0.562 ms/op
Iteration   3: 0.864 ms/op
Iteration   4: 0.777 ms/op
Iteration   5: 0.875 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  0.727 ±(99.9%) 0.608 ms/op [Average]
  (min, avg, max) = (0.556, 0.727, 0.875), stdev = 0.158
  CI (99.9%): [0.119, 1.335] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 2)

# Run progress: 41.83% complete, ETA 13:14:25
# Fork: 1 of 1
# Warmup Iteration   1: 1.536 ms/op
# Warmup Iteration   2: 1.190 ms/op
# Warmup Iteration   3: 1.188 ms/op
# Warmup Iteration   4: 1.195 ms/op
# Warmup Iteration   5: 1.189 ms/op
Iteration   1: 1.185 ms/op
Iteration   2: 1.188 ms/op
Iteration   3: 1.393 ms/op
Iteration   4: 2.091 ms/op
Iteration   5: 1.848 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.541 ±(99.9%) 1.576 ms/op [Average]
  (min, avg, max) = (1.185, 1.541, 2.091), stdev = 0.409
  CI (99.9%): [? 0, 3.117] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 32, nValues = 3)

# Run progress: 41.91% complete, ETA 13:12:03
# Fork: 1 of 1
# Warmup Iteration   1: 1.432 ms/op
# Warmup Iteration   2: 1.129 ms/op
# Warmup Iteration   3: 1.153 ms/op
# Warmup Iteration   4: 1.146 ms/op
# Warmup Iteration   5: 1.194 ms/op
Iteration   1: 1.147 ms/op
Iteration   2: 1.117 ms/op
Iteration   3: 1.322 ms/op
Iteration   4: 1.913 ms/op
Iteration   5: 1.855 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.471 ±(99.9%) 1.485 ms/op [Average]
  (min, avg, max) = (1.117, 1.471, 1.913), stdev = 0.386
  CI (99.9%): [? 0, 2.956] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 2)

# Run progress: 41.99% complete, ETA 13:09:41
# Fork: 1 of 1
# Warmup Iteration   1: 1.455 ms/op
# Warmup Iteration   2: 1.149 ms/op
# Warmup Iteration   3: 1.178 ms/op
# Warmup Iteration   4: 1.126 ms/op
# Warmup Iteration   5: 1.133 ms/op
Iteration   1: 1.140 ms/op
Iteration   2: 1.131 ms/op
Iteration   3: 1.412 ms/op
Iteration   4: 2.062 ms/op
Iteration   5: 1.785 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.506 ±(99.9%) 1.577 ms/op [Average]
  (min, avg, max) = (1.131, 1.506, 2.062), stdev = 0.410
  CI (99.9%): [? 0, 3.083] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 1000, nValues = 3)

# Run progress: 42.07% complete, ETA 13:07:20
# Fork: 1 of 1
# Warmup Iteration   1: 1.507 ms/op
# Warmup Iteration   2: 1.198 ms/op
# Warmup Iteration   3: 1.202 ms/op
# Warmup Iteration   4: 1.206 ms/op
# Warmup Iteration   5: 1.196 ms/op
Iteration   1: 1.183 ms/op
Iteration   2: 1.180 ms/op
Iteration   3: 1.366 ms/op
Iteration   4: 1.988 ms/op
Iteration   5: 1.855 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.514 ±(99.9%) 1.472 ms/op [Average]
  (min, avg, max) = (1.180, 1.514, 1.988), stdev = 0.382
  CI (99.9%): [0.042, 2.986] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 2)

# Run progress: 42.15% complete, ETA 13:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 1.893 ms/op
# Warmup Iteration   2: 1.098 ms/op
# Warmup Iteration   3: 1.086 ms/op
# Warmup Iteration   4: 1.088 ms/op
# Warmup Iteration   5: 1.094 ms/op
Iteration   1: 1.083 ms/op
Iteration   2: 1.110 ms/op
Iteration   3: 2.031 ms/op
Iteration   4: 1.805 ms/op
Iteration   5: 1.642 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.534 ±(99.9%) 1.628 ms/op [Average]
  (min, avg, max) = (1.083, 1.534, 2.031), stdev = 0.423
  CI (99.9%): [? 0, 3.163] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark
# Parameters: (nCommit = 100, nGetDiffCursor = 16384, nKeys = 100000, nValues = 3)

# Run progress: 42.23% complete, ETA 13:02:40
# Fork: 1 of 1
# Warmup Iteration   1: 1.771 ms/op
# Warmup Iteration   2: 1.114 ms/op
# Warmup Iteration   3: 1.101 ms/op
# Warmup Iteration   4: 1.096 ms/op
# Warmup Iteration   5: 1.100 ms/op
Iteration   1: 1.107 ms/op
Iteration   2: 1.106 ms/op
Iteration   3: 1.877 ms/op
Iteration   4: 1.716 ms/op
Iteration   5: 1.755 ms/op


Result "tools.refinery.store.map.benchmarks.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark":
  1.512 ±(99.9%) 1.444 ms/op [Average]
  (min, avg, max) = (1.106, 1.512, 1.877), stdev = 0.375
  CI (99.9%): [0.068, 2.956] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 42.31% complete, ETA 13:00:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 42.39% complete, ETA 12:58:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 42.47% complete, ETA 12:55:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 42.55% complete, ETA 12:53:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 42.63% complete, ETA 12:51:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 42.71% complete, ETA 12:48:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 42.79% complete, ETA 12:46:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 42.87% complete, ETA 12:44:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 42.95% complete, ETA 12:42:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 43.03% complete, ETA 12:39:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 43.11% complete, ETA 12:37:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 43.19% complete, ETA 12:35:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 43.27% complete, ETA 12:33:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 43.35% complete, ETA 12:30:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 43.43% complete, ETA 12:28:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 43.51% complete, ETA 12:26:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 43.59% complete, ETA 12:24:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 43.67% complete, ETA 12:22:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 43.75% complete, ETA 12:19:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.010 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.006, 0.010, 0.016), stdev = 0.004
  CI (99.9%): [? 0, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 43.83% complete, ETA 12:17:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.010 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.006, 0.010, 0.017), stdev = 0.004
  CI (99.9%): [? 0, 0.026] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 43.91% complete, ETA 12:15:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.017 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.012, 0.017, 0.022), stdev = 0.004
  CI (99.9%): [0.001, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 43.99% complete, ETA 12:13:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.018 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.012, 0.018, 0.031), stdev = 0.008
  CI (99.9%): [? 0, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 44.07% complete, ETA 12:11:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.031 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.027 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.055 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.036 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (0.024, 0.036, 0.055), stdev = 0.013
  CI (99.9%): [? 0, 0.085] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 44.15% complete, ETA 12:09:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.055 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.036 ±(99.9%) 0.048 ms/op [Average]
  (min, avg, max) = (0.023, 0.036, 0.055), stdev = 0.012
  CI (99.9%): [? 0, 0.084] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 44.23% complete, ETA 12:07:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.057 ms/op
# Warmup Iteration   2: 0.061 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.055 ms/op
Iteration   1: 0.056 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.064 ms/op
Iteration   4: 0.083 ms/op
Iteration   5: 0.134 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.077 ±(99.9%) 0.133 ms/op [Average]
  (min, avg, max) = (0.048, 0.077, 0.134), stdev = 0.034
  CI (99.9%): [? 0, 0.210] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 44.31% complete, ETA 12:04:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.054 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.055 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.063 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.093 ms/op
Iteration   5: 0.084 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.069 ±(99.9%) 0.073 ms/op [Average]
  (min, avg, max) = (0.047, 0.069, 0.093), stdev = 0.019
  CI (99.9%): [? 0, 0.142] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 44.39% complete, ETA 12:02:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.117 ms/op
# Warmup Iteration   2: 0.123 ms/op
# Warmup Iteration   3: 0.107 ms/op
# Warmup Iteration   4: 0.095 ms/op
# Warmup Iteration   5: 0.112 ms/op
Iteration   1: 0.094 ms/op
Iteration   2: 0.121 ms/op
Iteration   3: 0.110 ms/op
Iteration   4: 0.169 ms/op
Iteration   5: 0.247 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.148 ±(99.9%) 0.239 ms/op [Average]
  (min, avg, max) = (0.094, 0.148, 0.247), stdev = 0.062
  CI (99.9%): [? 0, 0.387] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 44.47% complete, ETA 12:00:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.117 ms/op
# Warmup Iteration   2: 0.127 ms/op
# Warmup Iteration   3: 0.108 ms/op
# Warmup Iteration   4: 0.095 ms/op
# Warmup Iteration   5: 0.109 ms/op
Iteration   1: 0.096 ms/op
Iteration   2: 0.119 ms/op
Iteration   3: 0.113 ms/op
Iteration   4: 0.156 ms/op
Iteration   5: 0.235 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.144 ±(99.9%) 0.214 ms/op [Average]
  (min, avg, max) = (0.096, 0.144, 0.235), stdev = 0.056
  CI (99.9%): [? 0, 0.358] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 44.55% complete, ETA 11:58:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.244 ms/op
# Warmup Iteration   2: 0.235 ms/op
# Warmup Iteration   3: 0.213 ms/op
# Warmup Iteration   4: 0.192 ms/op
# Warmup Iteration   5: 0.223 ms/op
Iteration   1: 0.193 ms/op
Iteration   2: 0.259 ms/op
Iteration   3: 0.229 ms/op
Iteration   4: 0.314 ms/op
Iteration   5: 0.333 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.266 ±(99.9%) 0.224 ms/op [Average]
  (min, avg, max) = (0.193, 0.266, 0.333), stdev = 0.058
  CI (99.9%): [0.041, 0.490] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 44.63% complete, ETA 11:56:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.241 ms/op
# Warmup Iteration   2: 0.242 ms/op
# Warmup Iteration   3: 0.214 ms/op
# Warmup Iteration   4: 0.194 ms/op
# Warmup Iteration   5: 0.220 ms/op
Iteration   1: 0.194 ms/op
Iteration   2: 0.241 ms/op
Iteration   3: 0.235 ms/op
Iteration   4: 0.321 ms/op
Iteration   5: 0.453 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.289 ±(99.9%) 0.395 ms/op [Average]
  (min, avg, max) = (0.194, 0.289, 0.453), stdev = 0.103
  CI (99.9%): [? 0, 0.684] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 44.71% complete, ETA 11:54:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 44.79% complete, ETA 11:52:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 44.87% complete, ETA 11:50:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 44.95% complete, ETA 11:48:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 45.03% complete, ETA 11:46:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 45.11% complete, ETA 11:44:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 45.19% complete, ETA 11:42:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 45.27% complete, ETA 11:40:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 45.35% complete, ETA 11:37:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 45.43% complete, ETA 11:35:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 45.51% complete, ETA 11:33:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 45.59% complete, ETA 11:31:51
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 45.67% complete, ETA 11:29:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 45.75% complete, ETA 11:27:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 45.83% complete, ETA 11:25:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 45.91% complete, ETA 11:23:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 45.99% complete, ETA 11:21:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 46.07% complete, ETA 11:19:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 46.15% complete, ETA 11:17:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.010 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.006, 0.010, 0.017), stdev = 0.005
  CI (99.9%): [? 0, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 46.23% complete, ETA 11:15:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.009 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.013), stdev = 0.003
  CI (99.9%): [? 0, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 46.31% complete, ETA 11:13:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.018 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.012, 0.018, 0.030), stdev = 0.007
  CI (99.9%): [? 0, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 46.39% complete, ETA 11:12:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.019 ±(99.9%) 0.027 ms/op [Average]
  (min, avg, max) = (0.012, 0.019, 0.030), stdev = 0.007
  CI (99.9%): [? 0, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 46.47% complete, ETA 11:10:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.035 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.024, 0.035, 0.046), stdev = 0.010
  CI (99.9%): [? 0, 0.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 46.55% complete, ETA 11:08:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.032 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.041 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.033 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.024, 0.033, 0.042), stdev = 0.008
  CI (99.9%): [0.002, 0.064] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 46.63% complete, ETA 11:06:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.060 ms/op
# Warmup Iteration   2: 0.062 ms/op
# Warmup Iteration   3: 0.055 ms/op
# Warmup Iteration   4: 0.049 ms/op
# Warmup Iteration   5: 0.058 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.062 ms/op
Iteration   3: 0.058 ms/op
Iteration   4: 0.082 ms/op
Iteration   5: 0.083 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.067 ±(99.9%) 0.059 ms/op [Average]
  (min, avg, max) = (0.049, 0.067, 0.083), stdev = 0.015
  CI (99.9%): [0.008, 0.125] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 46.71% complete, ETA 11:04:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.060 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.061 ms/op
# Warmup Iteration   4: 0.053 ms/op
# Warmup Iteration   5: 0.061 ms/op
Iteration   1: 0.053 ms/op
Iteration   2: 0.064 ms/op
Iteration   3: 0.065 ms/op
Iteration   4: 0.092 ms/op
Iteration   5: 0.090 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.073 ±(99.9%) 0.067 ms/op [Average]
  (min, avg, max) = (0.053, 0.073, 0.092), stdev = 0.017
  CI (99.9%): [0.006, 0.140] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 46.79% complete, ETA 11:02:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.125 ms/op
# Warmup Iteration   2: 0.118 ms/op
# Warmup Iteration   3: 0.107 ms/op
# Warmup Iteration   4: 0.098 ms/op
# Warmup Iteration   5: 0.113 ms/op
Iteration   1: 0.098 ms/op
Iteration   2: 0.117 ms/op
Iteration   3: 0.114 ms/op
Iteration   4: 0.147 ms/op
Iteration   5: 0.221 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.139 ±(99.9%) 0.189 ms/op [Average]
  (min, avg, max) = (0.098, 0.139, 0.221), stdev = 0.049
  CI (99.9%): [? 0, 0.328] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 46.88% complete, ETA 11:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.126 ms/op
# Warmup Iteration   2: 0.120 ms/op
# Warmup Iteration   3: 0.125 ms/op
# Warmup Iteration   4: 0.126 ms/op
# Warmup Iteration   5: 0.126 ms/op
Iteration   1: 0.106 ms/op
Iteration   2: 0.132 ms/op
Iteration   3: 0.126 ms/op
Iteration   4: 0.195 ms/op
Iteration   5: 0.172 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.146 ±(99.9%) 0.139 ms/op [Average]
  (min, avg, max) = (0.106, 0.146, 0.195), stdev = 0.036
  CI (99.9%): [0.007, 0.286] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 46.96% complete, ETA 10:58:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.254 ms/op
# Warmup Iteration   2: 0.231 ms/op
# Warmup Iteration   3: 0.230 ms/op
# Warmup Iteration   4: 0.193 ms/op
# Warmup Iteration   5: 0.222 ms/op
Iteration   1: 0.193 ms/op
Iteration   2: 0.236 ms/op
Iteration   3: 0.227 ms/op
Iteration   4: 0.321 ms/op
Iteration   5: 0.317 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.259 ±(99.9%) 0.220 ms/op [Average]
  (min, avg, max) = (0.193, 0.259, 0.321), stdev = 0.057
  CI (99.9%): [0.039, 0.478] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 47.04% complete, ETA 10:56:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.248 ms/op
# Warmup Iteration   2: 0.241 ms/op
# Warmup Iteration   3: 0.213 ms/op
# Warmup Iteration   4: 0.192 ms/op
# Warmup Iteration   5: 0.225 ms/op
Iteration   1: 0.193 ms/op
Iteration   2: 0.238 ms/op
Iteration   3: 0.232 ms/op
Iteration   4: 0.316 ms/op
Iteration   5: 0.430 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.282 ±(99.9%) 0.362 ms/op [Average]
  (min, avg, max) = (0.193, 0.282, 0.430), stdev = 0.094
  CI (99.9%): [? 0, 0.644] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 47.12% complete, ETA 10:54:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 47.20% complete, ETA 10:52:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 47.28% complete, ETA 10:50:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 47.36% complete, ETA 10:49:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 47.44% complete, ETA 10:47:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 47.52% complete, ETA 10:45:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 47.60% complete, ETA 10:43:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 47.68% complete, ETA 10:41:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 47.76% complete, ETA 10:39:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 47.84% complete, ETA 10:37:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 47.92% complete, ETA 10:35:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 48.00% complete, ETA 10:34:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 48.08% complete, ETA 10:32:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 48.16% complete, ETA 10:30:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 48.24% complete, ETA 10:28:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 48.32% complete, ETA 10:26:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 48.40% complete, ETA 10:25:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 48.48% complete, ETA 10:23:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 48.56% complete, ETA 10:21:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.009 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.016), stdev = 0.004
  CI (99.9%): [? 0, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 48.64% complete, ETA 10:19:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.008 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [0.002, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 48.72% complete, ETA 10:17:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.018 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.012, 0.018, 0.030), stdev = 0.007
  CI (99.9%): [? 0, 0.046] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 48.80% complete, ETA 10:16:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.018 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.012, 0.018, 0.028), stdev = 0.006
  CI (99.9%): [? 0, 0.042] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 48.88% complete, ETA 10:14:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.026 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.036 ±(99.9%) 0.043 ms/op [Average]
  (min, avg, max) = (0.024, 0.036, 0.050), stdev = 0.011
  CI (99.9%): [? 0, 0.078] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 48.96% complete, ETA 10:12:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.027 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.027 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.058 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.037 ±(99.9%) 0.052 ms/op [Average]
  (min, avg, max) = (0.024, 0.037, 0.058), stdev = 0.013
  CI (99.9%): [? 0, 0.089] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 49.04% complete, ETA 10:10:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.053 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.053 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.057 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.061 ms/op
Iteration   4: 0.081 ms/op
Iteration   5: 0.114 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.072 ±(99.9%) 0.102 ms/op [Average]
  (min, avg, max) = (0.047, 0.072, 0.114), stdev = 0.026
  CI (99.9%): [? 0, 0.174] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 49.12% complete, ETA 10:08:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.055 ms/op
# Warmup Iteration   2: 0.061 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.050 ms/op
# Warmup Iteration   5: 0.055 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.058 ms/op
Iteration   3: 0.069 ms/op
Iteration   4: 0.080 ms/op
Iteration   5: 0.092 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.070 ±(99.9%) 0.064 ms/op [Average]
  (min, avg, max) = (0.050, 0.070, 0.092), stdev = 0.017
  CI (99.9%): [0.005, 0.134] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 49.20% complete, ETA 10:07:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.104 ms/op
# Warmup Iteration   2: 0.105 ms/op
# Warmup Iteration   3: 0.107 ms/op
# Warmup Iteration   4: 0.107 ms/op
# Warmup Iteration   5: 0.097 ms/op
Iteration   1: 0.115 ms/op
Iteration   2: 0.096 ms/op
Iteration   3: 0.123 ms/op
Iteration   4: 0.177 ms/op
Iteration   5: 0.275 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.157 ±(99.9%) 0.280 ms/op [Average]
  (min, avg, max) = (0.096, 0.157, 0.275), stdev = 0.073
  CI (99.9%): [? 0, 0.437] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 49.28% complete, ETA 10:05:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.106 ms/op
# Warmup Iteration   2: 0.132 ms/op
# Warmup Iteration   3: 0.122 ms/op
# Warmup Iteration   4: 0.098 ms/op
# Warmup Iteration   5: 0.107 ms/op
Iteration   1: 0.097 ms/op
Iteration   2: 0.113 ms/op
Iteration   3: 0.132 ms/op
Iteration   4: 0.160 ms/op
Iteration   5: 0.171 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.135 ±(99.9%) 0.119 ms/op [Average]
  (min, avg, max) = (0.097, 0.135, 0.171), stdev = 0.031
  CI (99.9%): [0.016, 0.254] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 49.36% complete, ETA 10:03:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.212 ms/op
# Warmup Iteration   2: 0.228 ms/op
# Warmup Iteration   3: 0.211 ms/op
# Warmup Iteration   4: 0.215 ms/op
# Warmup Iteration   5: 0.193 ms/op
Iteration   1: 0.225 ms/op
Iteration   2: 0.195 ms/op
Iteration   3: 0.259 ms/op
Iteration   4: 0.307 ms/op
Iteration   5: 0.487 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.295 ±(99.9%) 0.444 ms/op [Average]
  (min, avg, max) = (0.195, 0.295, 0.487), stdev = 0.115
  CI (99.9%): [? 0, 0.739] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 49.44% complete, ETA 10:01:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.221 ms/op
# Warmup Iteration   2: 0.246 ms/op
# Warmup Iteration   3: 0.213 ms/op
# Warmup Iteration   4: 0.196 ms/op
# Warmup Iteration   5: 0.218 ms/op
Iteration   1: 0.198 ms/op
Iteration   2: 0.223 ms/op
Iteration   3: 0.263 ms/op
Iteration   4: 0.351 ms/op
Iteration   5: 0.334 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.274 ±(99.9%) 0.259 ms/op [Average]
  (min, avg, max) = (0.198, 0.274, 0.351), stdev = 0.067
  CI (99.9%): [0.015, 0.533] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 49.52% complete, ETA 10:00:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 49.60% complete, ETA 09:58:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 49.68% complete, ETA 09:56:41
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 49.76% complete, ETA 09:54:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 49.84% complete, ETA 09:53:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 49.92% complete, ETA 09:51:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 50.00% complete, ETA 09:49:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 50.08% complete, ETA 09:48:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 50.16% complete, ETA 09:46:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 50.24% complete, ETA 09:44:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 50.32% complete, ETA 09:42:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 50.40% complete, ETA 09:41:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 50.48% complete, ETA 09:39:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 50.56% complete, ETA 09:37:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 50.64% complete, ETA 09:36:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 50.72% complete, ETA 09:34:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 50.80% complete, ETA 09:32:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 50.88% complete, ETA 09:31:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 50.96% complete, ETA 09:29:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.009 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.014), stdev = 0.003
  CI (99.9%): [? 0, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 51.04% complete, ETA 09:27:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.009 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.015), stdev = 0.003
  CI (99.9%): [? 0, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 51.12% complete, ETA 09:26:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.019 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.012, 0.019, 0.030), stdev = 0.007
  CI (99.9%): [? 0, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 51.20% complete, ETA 09:24:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.016 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.018 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.012, 0.018, 0.031), stdev = 0.008
  CI (99.9%): [? 0, 0.048] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 51.28% complete, ETA 09:23:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.034 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.024, 0.034, 0.045), stdev = 0.009
  CI (99.9%): [? 0, 0.069] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 51.36% complete, ETA 09:21:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.028 ms/op
# Warmup Iteration   3: 0.029 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.054 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.035 ±(99.9%) 0.049 ms/op [Average]
  (min, avg, max) = (0.024, 0.035, 0.054), stdev = 0.013
  CI (99.9%): [? 0, 0.084] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 51.44% complete, ETA 09:19:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.065 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.056 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.054 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.062 ms/op
Iteration   3: 0.063 ms/op
Iteration   4: 0.084 ms/op
Iteration   5: 0.081 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.068 ±(99.9%) 0.058 ms/op [Average]
  (min, avg, max) = (0.048, 0.068, 0.084), stdev = 0.015
  CI (99.9%): [0.010, 0.125] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 51.52% complete, ETA 09:18:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 ms/op
# Warmup Iteration   2: 0.060 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.048 ms/op
# Warmup Iteration   5: 0.054 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.082 ms/op
Iteration   5: 0.117 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.072 ±(99.9%) 0.107 ms/op [Average]
  (min, avg, max) = (0.048, 0.072, 0.117), stdev = 0.028
  CI (99.9%): [? 0, 0.179] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 51.60% complete, ETA 09:16:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.124 ms/op
# Warmup Iteration   2: 0.119 ms/op
# Warmup Iteration   3: 0.107 ms/op
# Warmup Iteration   4: 0.098 ms/op
# Warmup Iteration   5: 0.112 ms/op
Iteration   1: 0.097 ms/op
Iteration   2: 0.120 ms/op
Iteration   3: 0.117 ms/op
Iteration   4: 0.173 ms/op
Iteration   5: 0.155 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.133 ±(99.9%) 0.119 ms/op [Average]
  (min, avg, max) = (0.097, 0.133, 0.173), stdev = 0.031
  CI (99.9%): [0.014, 0.251] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 51.68% complete, ETA 09:14:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.125 ms/op
# Warmup Iteration   2: 0.118 ms/op
# Warmup Iteration   3: 0.108 ms/op
# Warmup Iteration   4: 0.098 ms/op
# Warmup Iteration   5: 0.113 ms/op
Iteration   1: 0.099 ms/op
Iteration   2: 0.125 ms/op
Iteration   3: 0.117 ms/op
Iteration   4: 0.173 ms/op
Iteration   5: 0.162 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.135 ±(99.9%) 0.121 ms/op [Average]
  (min, avg, max) = (0.099, 0.135, 0.173), stdev = 0.031
  CI (99.9%): [0.015, 0.256] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 51.76% complete, ETA 09:13:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.240 ms/op
# Warmup Iteration   2: 0.232 ms/op
# Warmup Iteration   3: 0.215 ms/op
# Warmup Iteration   4: 0.193 ms/op
# Warmup Iteration   5: 0.222 ms/op
Iteration   1: 0.194 ms/op
Iteration   2: 0.236 ms/op
Iteration   3: 0.217 ms/op
Iteration   4: 0.326 ms/op
Iteration   5: 0.476 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.290 ±(99.9%) 0.445 ms/op [Average]
  (min, avg, max) = (0.194, 0.290, 0.476), stdev = 0.116
  CI (99.9%): [? 0, 0.735] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 51.84% complete, ETA 09:11:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.254 ms/op
# Warmup Iteration   2: 0.230 ms/op
# Warmup Iteration   3: 0.226 ms/op
# Warmup Iteration   4: 0.193 ms/op
# Warmup Iteration   5: 0.224 ms/op
Iteration   1: 0.193 ms/op
Iteration   2: 0.240 ms/op
Iteration   3: 0.223 ms/op
Iteration   4: 0.362 ms/op
Iteration   5: 0.336 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.271 ±(99.9%) 0.284 ms/op [Average]
  (min, avg, max) = (0.193, 0.271, 0.362), stdev = 0.074
  CI (99.9%): [? 0, 0.554] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 51.92% complete, ETA 09:10:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 52.00% complete, ETA 09:08:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 52.08% complete, ETA 09:06:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 52.16% complete, ETA 09:05:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 52.24% complete, ETA 09:03:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 52.32% complete, ETA 09:02:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 52.40% complete, ETA 09:00:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 52.48% complete, ETA 08:59:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 52.56% complete, ETA 08:57:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 52.64% complete, ETA 08:55:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 52.72% complete, ETA 08:54:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 52.80% complete, ETA 08:52:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 52.88% complete, ETA 08:51:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 52.96% complete, ETA 08:49:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 53.04% complete, ETA 08:48:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 53.13% complete, ETA 08:46:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 53.21% complete, ETA 08:45:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.008 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.008), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 53.29% complete, ETA 08:43:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 53.37% complete, ETA 08:42:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.008 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.009 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.011), stdev = 0.002
  CI (99.9%): [? 10?³, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 53.45% complete, ETA 08:40:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.009 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.015), stdev = 0.004
  CI (99.9%): [? 0, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 53.53% complete, ETA 08:38:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.019 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.012, 0.019, 0.029), stdev = 0.007
  CI (99.9%): [? 0, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 53.61% complete, ETA 08:37:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.018 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.012, 0.018, 0.026), stdev = 0.006
  CI (99.9%): [? 0, 0.040] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 53.69% complete, ETA 08:35:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.030 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.052 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.036 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (0.024, 0.036, 0.052), stdev = 0.012
  CI (99.9%): [? 0, 0.081] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 53.77% complete, ETA 08:34:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.031 ms/op
# Warmup Iteration   2: 0.030 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.028 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.030 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.034 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.025, 0.034, 0.045), stdev = 0.008
  CI (99.9%): [0.003, 0.064] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 53.85% complete, ETA 08:32:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.061 ms/op
# Warmup Iteration   2: 0.059 ms/op
# Warmup Iteration   3: 0.053 ms/op
# Warmup Iteration   4: 0.049 ms/op
# Warmup Iteration   5: 0.055 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.058 ms/op
Iteration   3: 0.058 ms/op
Iteration   4: 0.081 ms/op
Iteration   5: 0.114 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.072 ±(99.9%) 0.102 ms/op [Average]
  (min, avg, max) = (0.049, 0.072, 0.114), stdev = 0.026
  CI (99.9%): [? 0, 0.174] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 53.93% complete, ETA 08:31:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.062 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.054 ms/op
# Warmup Iteration   4: 0.049 ms/op
# Warmup Iteration   5: 0.056 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.061 ms/op
Iteration   3: 0.057 ms/op
Iteration   4: 0.084 ms/op
Iteration   5: 0.089 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.068 ±(99.9%) 0.068 ms/op [Average]
  (min, avg, max) = (0.049, 0.068, 0.089), stdev = 0.018
  CI (99.9%): [? 10?³, 0.135] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 54.01% complete, ETA 08:29:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.127 ms/op
# Warmup Iteration   2: 0.117 ms/op
# Warmup Iteration   3: 0.108 ms/op
# Warmup Iteration   4: 0.099 ms/op
# Warmup Iteration   5: 0.113 ms/op
Iteration   1: 0.098 ms/op
Iteration   2: 0.124 ms/op
Iteration   3: 0.119 ms/op
Iteration   4: 0.174 ms/op
Iteration   5: 0.152 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.134 ±(99.9%) 0.115 ms/op [Average]
  (min, avg, max) = (0.098, 0.134, 0.174), stdev = 0.030
  CI (99.9%): [0.019, 0.248] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 54.09% complete, ETA 08:28:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.124 ms/op
# Warmup Iteration   2: 0.118 ms/op
# Warmup Iteration   3: 0.109 ms/op
# Warmup Iteration   4: 0.099 ms/op
# Warmup Iteration   5: 0.113 ms/op
Iteration   1: 0.097 ms/op
Iteration   2: 0.124 ms/op
Iteration   3: 0.115 ms/op
Iteration   4: 0.164 ms/op
Iteration   5: 0.200 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.140 ±(99.9%) 0.159 ms/op [Average]
  (min, avg, max) = (0.097, 0.140, 0.200), stdev = 0.041
  CI (99.9%): [? 0, 0.299] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 54.17% complete, ETA 08:27:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.246 ms/op
# Warmup Iteration   2: 0.231 ms/op
# Warmup Iteration   3: 0.216 ms/op
# Warmup Iteration   4: 0.194 ms/op
# Warmup Iteration   5: 0.230 ms/op
Iteration   1: 0.197 ms/op
Iteration   2: 0.246 ms/op
Iteration   3: 0.240 ms/op
Iteration   4: 0.343 ms/op
Iteration   5: 0.298 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.265 ±(99.9%) 0.218 ms/op [Average]
  (min, avg, max) = (0.197, 0.265, 0.343), stdev = 0.057
  CI (99.9%): [0.047, 0.483] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 54.25% complete, ETA 08:25:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.248 ms/op
# Warmup Iteration   2: 0.235 ms/op
# Warmup Iteration   3: 0.221 ms/op
# Warmup Iteration   4: 0.193 ms/op
# Warmup Iteration   5: 0.229 ms/op
Iteration   1: 0.194 ms/op
Iteration   2: 0.250 ms/op
Iteration   3: 0.243 ms/op
Iteration   4: 0.372 ms/op
Iteration   5: 0.331 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.278 ±(99.9%) 0.277 ms/op [Average]
  (min, avg, max) = (0.194, 0.278, 0.372), stdev = 0.072
  CI (99.9%): [0.001, 0.555] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 54.33% complete, ETA 08:24:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:97)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 54.41% complete, ETA 08:22:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:97)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 54.49% complete, ETA 08:21:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:97)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 54.57% complete, ETA 08:19:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3512)
	at java.base/java.util.Arrays.copyOf(Arrays.java:3481)
	at java.base/java.util.ArrayList.grow(ArrayList.java:237)
	at java.base/java.util.ArrayList.grow(ArrayList.java:244)
	at java.base/java.util.ArrayList.add(ArrayList.java:454)
	at java.base/java.util.ArrayList.add(ArrayList.java:467)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:97)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.baselineRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_baselineRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 54.65% complete, ETA 08:18:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 54.73% complete, ETA 08:16:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 54.81% complete, ETA 08:15:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 54.89% complete, ETA 08:13:42
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 54.97% complete, ETA 08:12:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 55.05% complete, ETA 08:10:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 55.13% complete, ETA 08:09:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 55.21% complete, ETA 08:07:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 55.29% complete, ETA 08:06:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 55.37% complete, ETA 08:05:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 55.45% complete, ETA 08:03:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 55.53% complete, ETA 08:02:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 55.61% complete, ETA 08:00:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 55.69% complete, ETA 07:59:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 55.77% complete, ETA 07:58:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.010 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.006, 0.010, 0.015), stdev = 0.003
  CI (99.9%): [? 0, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 55.85% complete, ETA 07:56:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.011 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.010 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.006, 0.010, 0.014), stdev = 0.003
  CI (99.9%): [? 0, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 55.93% complete, ETA 07:55:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.014 ms/op
# Warmup Iteration   2: 0.014 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.019 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.013, 0.019, 0.025), stdev = 0.005
  CI (99.9%): [0.001, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 56.01% complete, ETA 07:53:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.020 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.018 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.012, 0.018, 0.027), stdev = 0.006
  CI (99.9%): [? 0, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 56.09% complete, ETA 07:52:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.041 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.054 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.038 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (0.025, 0.038, 0.054), stdev = 0.012
  CI (99.9%): [? 0, 0.083] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 56.17% complete, ETA 07:51:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.027 ms/op
# Warmup Iteration   3: 0.027 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.056 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.039 ±(99.9%) 0.046 ms/op [Average]
  (min, avg, max) = (0.025, 0.039, 0.056), stdev = 0.012
  CI (99.9%): [? 0, 0.085] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 56.25% complete, ETA 07:49:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.052 ms/op
# Warmup Iteration   2: 0.052 ms/op
# Warmup Iteration   3: 0.052 ms/op
# Warmup Iteration   4: 0.054 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.059 ms/op
Iteration   2: 0.048 ms/op
Iteration   3: 0.080 ms/op
Iteration   4: 0.083 ms/op
Iteration   5: 0.122 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.078 ±(99.9%) 0.109 ms/op [Average]
  (min, avg, max) = (0.048, 0.078, 0.122), stdev = 0.028
  CI (99.9%): [? 0, 0.187] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 56.33% complete, ETA 07:48:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.053 ms/op
# Warmup Iteration   2: 0.053 ms/op
# Warmup Iteration   3: 0.054 ms/op
# Warmup Iteration   4: 0.054 ms/op
# Warmup Iteration   5: 0.048 ms/op
Iteration   1: 0.061 ms/op
Iteration   2: 0.051 ms/op
Iteration   3: 0.088 ms/op
Iteration   4: 0.086 ms/op
Iteration   5: 0.084 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.074 ±(99.9%) 0.065 ms/op [Average]
  (min, avg, max) = (0.051, 0.074, 0.088), stdev = 0.017
  CI (99.9%): [0.009, 0.139] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 56.41% complete, ETA 07:46:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.102 ms/op
# Warmup Iteration   2: 0.105 ms/op
# Warmup Iteration   3: 0.105 ms/op
# Warmup Iteration   4: 0.110 ms/op
# Warmup Iteration   5: 0.096 ms/op
Iteration   1: 0.119 ms/op
Iteration   2: 0.096 ms/op
Iteration   3: 0.169 ms/op
Iteration   4: 0.171 ms/op
Iteration   5: 0.224 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.156 ±(99.9%) 0.192 ms/op [Average]
  (min, avg, max) = (0.096, 0.156, 0.224), stdev = 0.050
  CI (99.9%): [? 0, 0.348] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 56.49% complete, ETA 07:45:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.103 ms/op
# Warmup Iteration   2: 0.126 ms/op
# Warmup Iteration   3: 0.106 ms/op
# Warmup Iteration   4: 0.097 ms/op
# Warmup Iteration   5: 0.110 ms/op
Iteration   1: 0.113 ms/op
Iteration   2: 0.099 ms/op
Iteration   3: 0.173 ms/op
Iteration   4: 0.171 ms/op
Iteration   5: 0.159 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.143 ±(99.9%) 0.133 ms/op [Average]
  (min, avg, max) = (0.099, 0.143, 0.173), stdev = 0.034
  CI (99.9%): [0.010, 0.276] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 56.57% complete, ETA 07:44:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.206 ms/op
# Warmup Iteration   2: 0.213 ms/op
# Warmup Iteration   3: 0.212 ms/op
# Warmup Iteration   4: 0.222 ms/op
# Warmup Iteration   5: 0.195 ms/op
Iteration   1: 0.238 ms/op
Iteration   2: 0.195 ms/op
Iteration   3: 0.325 ms/op
Iteration   4: 0.348 ms/op
Iteration   5: 0.438 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.309 ±(99.9%) 0.368 ms/op [Average]
  (min, avg, max) = (0.195, 0.309, 0.438), stdev = 0.096
  CI (99.9%): [? 0, 0.677] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 56.65% complete, ETA 07:42:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.211 ms/op
# Warmup Iteration   2: 0.209 ms/op
# Warmup Iteration   3: 0.207 ms/op
# Warmup Iteration   4: 0.219 ms/op
# Warmup Iteration   5: 0.194 ms/op
Iteration   1: 0.239 ms/op
Iteration   2: 0.195 ms/op
Iteration   3: 0.338 ms/op
Iteration   4: 0.320 ms/op
Iteration   5: 0.473 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark":
  0.313 ±(99.9%) 0.411 ms/op [Average]
  (min, avg, max) = (0.195, 0.313, 0.473), stdev = 0.107
  CI (99.9%): [? 0, 0.724] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 56.73% complete, ETA 07:41:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 56.81% complete, ETA 07:40:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 56.89% complete, ETA 07:38:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 56.97% complete, ETA 07:37:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 57.05% complete, ETA 07:36:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 57.13% complete, ETA 07:34:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 57.21% complete, ETA 07:33:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 57.29% complete, ETA 07:31:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 57.37% complete, ETA 07:30:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 57.45% complete, ETA 07:29:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 57.53% complete, ETA 07:27:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 57.61% complete, ETA 07:26:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 57.69% complete, ETA 07:25:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 57.77% complete, ETA 07:23:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 57.85% complete, ETA 07:22:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 57.93% complete, ETA 07:21:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 58.01% complete, ETA 07:19:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 58.09% complete, ETA 07:18:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 58.17% complete, ETA 07:17:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.008 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.011), stdev = 0.002
  CI (99.9%): [? 0, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 58.25% complete, ETA 07:15:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.007 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 58.33% complete, ETA 07:14:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.015 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.011, 0.015, 0.019), stdev = 0.004
  CI (99.9%): [? 0, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 58.41% complete, ETA 07:13:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.015 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.011, 0.015, 0.021), stdev = 0.005
  CI (99.9%): [? 0, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 58.49% complete, ETA 07:12:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.029 ±(99.9%) 0.028 ms/op [Average]
  (min, avg, max) = (0.023, 0.029, 0.037), stdev = 0.007
  CI (99.9%): [0.001, 0.057] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 58.57% complete, ETA 07:10:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.041 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.032 ±(99.9%) 0.042 ms/op [Average]
  (min, avg, max) = (0.023, 0.032, 0.045), stdev = 0.011
  CI (99.9%): [? 0, 0.073] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 58.65% complete, ETA 07:09:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.046 ms/op
Iteration   2: 0.046 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.079 ms/op
Iteration   5: 0.085 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.062 ±(99.9%) 0.072 ms/op [Average]
  (min, avg, max) = (0.046, 0.062, 0.085), stdev = 0.019
  CI (99.9%): [? 0, 0.134] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 58.73% complete, ETA 07:08:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.046 ms/op
Iteration   2: 0.046 ms/op
Iteration   3: 0.049 ms/op
Iteration   4: 0.082 ms/op
Iteration   5: 0.084 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.061 ±(99.9%) 0.076 ms/op [Average]
  (min, avg, max) = (0.046, 0.061, 0.084), stdev = 0.020
  CI (99.9%): [? 0, 0.138] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 58.81% complete, ETA 07:06:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ms/op
# Warmup Iteration   2: 0.090 ms/op
# Warmup Iteration   3: 0.092 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.091 ms/op
Iteration   1: 0.089 ms/op
Iteration   2: 0.090 ms/op
Iteration   3: 0.109 ms/op
Iteration   4: 0.157 ms/op
Iteration   5: 0.139 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.117 ±(99.9%) 0.117 ms/op [Average]
  (min, avg, max) = (0.089, 0.117, 0.157), stdev = 0.030
  CI (99.9%): [? 0, 0.234] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 58.89% complete, ETA 07:05:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ms/op
# Warmup Iteration   2: 0.090 ms/op
# Warmup Iteration   3: 0.090 ms/op
# Warmup Iteration   4: 0.089 ms/op
# Warmup Iteration   5: 0.090 ms/op
Iteration   1: 0.092 ms/op
Iteration   2: 0.090 ms/op
Iteration   3: 0.104 ms/op
Iteration   4: 0.149 ms/op
Iteration   5: 0.153 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.118 ±(99.9%) 0.119 ms/op [Average]
  (min, avg, max) = (0.090, 0.118, 0.153), stdev = 0.031
  CI (99.9%): [? 0, 0.237] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 58.97% complete, ETA 07:04:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.184 ms/op
# Warmup Iteration   2: 0.182 ms/op
# Warmup Iteration   3: 0.179 ms/op
# Warmup Iteration   4: 0.178 ms/op
# Warmup Iteration   5: 0.178 ms/op
Iteration   1: 0.181 ms/op
Iteration   2: 0.181 ms/op
Iteration   3: 0.212 ms/op
Iteration   4: 0.307 ms/op
Iteration   5: 0.308 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.238 ±(99.9%) 0.250 ms/op [Average]
  (min, avg, max) = (0.181, 0.238, 0.308), stdev = 0.065
  CI (99.9%): [? 0, 0.488] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 59.05% complete, ETA 07:03:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.179 ms/op
# Warmup Iteration   2: 0.181 ms/op
# Warmup Iteration   3: 0.181 ms/op
# Warmup Iteration   4: 0.178 ms/op
# Warmup Iteration   5: 0.178 ms/op
Iteration   1: 0.180 ms/op
Iteration   2: 0.181 ms/op
Iteration   3: 0.210 ms/op
Iteration   4: 0.310 ms/op
Iteration   5: 0.321 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.240 ±(99.9%) 0.269 ms/op [Average]
  (min, avg, max) = (0.180, 0.240, 0.321), stdev = 0.070
  CI (99.9%): [? 0, 0.509] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 59.13% complete, ETA 07:01:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 59.21% complete, ETA 07:00:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 59.29% complete, ETA 06:59:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 59.38% complete, ETA 06:57:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 59.46% complete, ETA 06:56:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 59.54% complete, ETA 06:55:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 59.62% complete, ETA 06:54:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 59.70% complete, ETA 06:52:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 59.78% complete, ETA 06:51:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 59.86% complete, ETA 06:50:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 59.94% complete, ETA 06:49:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 60.02% complete, ETA 06:47:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 60.10% complete, ETA 06:46:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 60.18% complete, ETA 06:45:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 60.26% complete, ETA 06:44:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 60.34% complete, ETA 06:42:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 60.42% complete, ETA 06:41:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 60.50% complete, ETA 06:40:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 60.58% complete, ETA 06:39:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.007 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.009), stdev = 0.002
  CI (99.9%): [? 10??, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 60.66% complete, ETA 06:37:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.007 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.007, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 60.74% complete, ETA 06:36:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.015 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.011, 0.015, 0.019), stdev = 0.004
  CI (99.9%): [? 10?³, 0.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 60.82% complete, ETA 06:35:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.017 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.014 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.011, 0.014, 0.019), stdev = 0.004
  CI (99.9%): [0.001, 0.028] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 60.90% complete, ETA 06:34:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.040 ms/op
Iteration   5: 0.038 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.030 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.023, 0.030, 0.040), stdev = 0.008
  CI (99.9%): [? 0, 0.062] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 60.98% complete, ETA 06:33:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.030 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.023, 0.030, 0.042), stdev = 0.009
  CI (99.9%): [? 0, 0.064] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 61.06% complete, ETA 06:31:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.075 ms/op
Iteration   5: 0.072 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.058 ±(99.9%) 0.057 ms/op [Average]
  (min, avg, max) = (0.045, 0.058, 0.075), stdev = 0.015
  CI (99.9%): [? 10?³, 0.115] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 61.14% complete, ETA 06:30:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.044 ms/op
# Warmup Iteration   4: 0.044 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.075 ms/op
Iteration   5: 0.075 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.058 ±(99.9%) 0.059 ms/op [Average]
  (min, avg, max) = (0.045, 0.058, 0.075), stdev = 0.015
  CI (99.9%): [? 0, 0.118] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 61.22% complete, ETA 06:29:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.091 ms/op
# Warmup Iteration   2: 0.090 ms/op
# Warmup Iteration   3: 0.090 ms/op
# Warmup Iteration   4: 0.091 ms/op
# Warmup Iteration   5: 0.091 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.089 ms/op
Iteration   3: 0.104 ms/op
Iteration   4: 0.162 ms/op
Iteration   5: 0.155 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.120 ±(99.9%) 0.137 ms/op [Average]
  (min, avg, max) = (0.089, 0.120, 0.162), stdev = 0.036
  CI (99.9%): [? 0, 0.257] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 61.30% complete, ETA 06:28:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.089 ms/op
# Warmup Iteration   3: 0.090 ms/op
# Warmup Iteration   4: 0.090 ms/op
# Warmup Iteration   5: 0.089 ms/op
Iteration   1: 0.090 ms/op
Iteration   2: 0.090 ms/op
Iteration   3: 0.104 ms/op
Iteration   4: 0.137 ms/op
Iteration   5: 0.142 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.113 ±(99.9%) 0.098 ms/op [Average]
  (min, avg, max) = (0.090, 0.113, 0.142), stdev = 0.025
  CI (99.9%): [0.015, 0.210] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 61.38% complete, ETA 06:27:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.184 ms/op
# Warmup Iteration   2: 0.178 ms/op
# Warmup Iteration   3: 0.180 ms/op
# Warmup Iteration   4: 0.181 ms/op
# Warmup Iteration   5: 0.182 ms/op
Iteration   1: 0.180 ms/op
Iteration   2: 0.183 ms/op
Iteration   3: 0.202 ms/op
Iteration   4: 0.284 ms/op
Iteration   5: 0.315 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.233 ±(99.9%) 0.241 ms/op [Average]
  (min, avg, max) = (0.180, 0.233, 0.315), stdev = 0.063
  CI (99.9%): [? 0, 0.474] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 61.46% complete, ETA 06:25:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.184 ms/op
# Warmup Iteration   2: 0.181 ms/op
# Warmup Iteration   3: 0.180 ms/op
# Warmup Iteration   4: 0.182 ms/op
# Warmup Iteration   5: 0.181 ms/op
Iteration   1: 0.181 ms/op
Iteration   2: 0.178 ms/op
Iteration   3: 0.215 ms/op
Iteration   4: 0.281 ms/op
Iteration   5: 0.302 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.231 ±(99.9%) 0.220 ms/op [Average]
  (min, avg, max) = (0.178, 0.231, 0.302), stdev = 0.057
  CI (99.9%): [0.011, 0.451] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 61.54% complete, ETA 06:24:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 61.62% complete, ETA 06:23:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 61.70% complete, ETA 06:22:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 61.78% complete, ETA 06:21:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 61.86% complete, ETA 06:19:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 61.94% complete, ETA 06:18:44
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 62.02% complete, ETA 06:17:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 62.10% complete, ETA 06:16:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 62.18% complete, ETA 06:15:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 62.26% complete, ETA 06:14:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 62.34% complete, ETA 06:12:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 62.42% complete, ETA 06:11:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 62.50% complete, ETA 06:10:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 62.58% complete, ETA 06:09:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 62.66% complete, ETA 06:08:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 62.74% complete, ETA 06:07:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 62.82% complete, ETA 06:05:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 62.90% complete, ETA 06:04:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 62.98% complete, ETA 06:03:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.008 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 63.06% complete, ETA 06:02:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [? 0, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 63.14% complete, ETA 06:01:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.018 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.015 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.011, 0.015, 0.019), stdev = 0.004
  CI (99.9%): [? 10?³, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 63.22% complete, ETA 06:00:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.019 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.015 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.011, 0.015, 0.019), stdev = 0.004
  CI (99.9%): [? 0, 0.030] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 63.30% complete, ETA 05:59:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.022 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.036 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.031 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.022, 0.031, 0.042), stdev = 0.008
  CI (99.9%): [? 0, 0.063] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 63.38% complete, ETA 05:57:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.037 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.030 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.023, 0.030, 0.039), stdev = 0.008
  CI (99.9%): [0.001, 0.060] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 63.46% complete, ETA 05:56:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.061 ms/op
Iteration   4: 0.081 ms/op
Iteration   5: 0.077 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.062 ±(99.9%) 0.065 ms/op [Average]
  (min, avg, max) = (0.045, 0.062, 0.081), stdev = 0.017
  CI (99.9%): [? 0, 0.127] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 63.54% complete, ETA 05:55:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.059 ms/op
Iteration   4: 0.074 ms/op
Iteration   5: 0.076 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.060 ±(99.9%) 0.059 ms/op [Average]
  (min, avg, max) = (0.045, 0.060, 0.076), stdev = 0.015
  CI (99.9%): [0.001, 0.118] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 63.62% complete, ETA 05:54:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.094 ms/op
# Warmup Iteration   2: 0.092 ms/op
# Warmup Iteration   3: 0.092 ms/op
# Warmup Iteration   4: 0.091 ms/op
# Warmup Iteration   5: 0.093 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.092 ms/op
Iteration   3: 0.124 ms/op
Iteration   4: 0.159 ms/op
Iteration   5: 0.153 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.124 ±(99.9%) 0.124 ms/op [Average]
  (min, avg, max) = (0.091, 0.124, 0.159), stdev = 0.032
  CI (99.9%): [? 0, 0.248] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 63.70% complete, ETA 05:53:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ms/op
# Warmup Iteration   2: 0.091 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.091 ms/op
# Warmup Iteration   5: 0.092 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.092 ms/op
Iteration   3: 0.126 ms/op
Iteration   4: 0.167 ms/op
Iteration   5: 0.155 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.126 ±(99.9%) 0.135 ms/op [Average]
  (min, avg, max) = (0.091, 0.126, 0.167), stdev = 0.035
  CI (99.9%): [? 0, 0.261] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 63.78% complete, ETA 05:52:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.185 ms/op
# Warmup Iteration   2: 0.184 ms/op
# Warmup Iteration   3: 0.184 ms/op
# Warmup Iteration   4: 0.185 ms/op
# Warmup Iteration   5: 0.181 ms/op
Iteration   1: 0.184 ms/op
Iteration   2: 0.182 ms/op
Iteration   3: 0.233 ms/op
Iteration   4: 0.272 ms/op
Iteration   5: 0.357 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.246 ±(99.9%) 0.280 ms/op [Average]
  (min, avg, max) = (0.182, 0.246, 0.357), stdev = 0.073
  CI (99.9%): [? 0, 0.525] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 63.86% complete, ETA 05:51:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.185 ms/op
# Warmup Iteration   2: 0.182 ms/op
# Warmup Iteration   3: 0.184 ms/op
# Warmup Iteration   4: 0.183 ms/op
# Warmup Iteration   5: 0.186 ms/op
Iteration   1: 0.185 ms/op
Iteration   2: 0.184 ms/op
Iteration   3: 0.235 ms/op
Iteration   4: 0.345 ms/op
Iteration   5: 0.311 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.252 ±(99.9%) 0.283 ms/op [Average]
  (min, avg, max) = (0.184, 0.252, 0.345), stdev = 0.073
  CI (99.9%): [? 0, 0.535] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 63.94% complete, ETA 05:50:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 64.02% complete, ETA 05:48:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 64.10% complete, ETA 05:47:50
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 64.18% complete, ETA 05:46:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 64.26% complete, ETA 05:45:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 64.34% complete, ETA 05:44:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 64.42% complete, ETA 05:43:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 64.50% complete, ETA 05:42:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 64.58% complete, ETA 05:41:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 64.66% complete, ETA 05:40:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 64.74% complete, ETA 05:39:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 64.82% complete, ETA 05:37:54
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 64.90% complete, ETA 05:36:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 64.98% complete, ETA 05:35:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 65.06% complete, ETA 05:34:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 65.14% complete, ETA 05:33:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 65.22% complete, ETA 05:32:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 65.30% complete, ETA 05:31:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 65.38% complete, ETA 05:30:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.008 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.011), stdev = 0.002
  CI (99.9%): [? 0, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 65.46% complete, ETA 05:29:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.008 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.011), stdev = 0.002
  CI (99.9%): [? 0, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 65.54% complete, ETA 05:28:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.015 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.011, 0.015, 0.021), stdev = 0.005
  CI (99.9%): [? 0, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 65.63% complete, ETA 05:27:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.015 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.011, 0.015, 0.021), stdev = 0.005
  CI (99.9%): [? 0, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 65.71% complete, ETA 05:26:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.042 ms/op
Iteration   5: 0.044 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.032 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.023, 0.032, 0.044), stdev = 0.010
  CI (99.9%): [? 0, 0.071] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 65.79% complete, ETA 05:24:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.029 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.023, 0.029, 0.039), stdev = 0.008
  CI (99.9%): [? 0, 0.059] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 65.87% complete, ETA 05:23:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.046 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.079 ms/op
Iteration   5: 0.087 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.062 ±(99.9%) 0.077 ms/op [Average]
  (min, avg, max) = (0.045, 0.062, 0.087), stdev = 0.020
  CI (99.9%): [? 0, 0.139] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 65.95% complete, ETA 05:22:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.044 ms/op
Iteration   3: 0.053 ms/op
Iteration   4: 0.081 ms/op
Iteration   5: 0.091 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.063 ±(99.9%) 0.083 ms/op [Average]
  (min, avg, max) = (0.044, 0.063, 0.091), stdev = 0.022
  CI (99.9%): [? 0, 0.146] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 66.03% complete, ETA 05:21:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.090 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.092 ms/op
# Warmup Iteration   5: 0.091 ms/op
Iteration   1: 0.089 ms/op
Iteration   2: 0.089 ms/op
Iteration   3: 0.108 ms/op
Iteration   4: 0.160 ms/op
Iteration   5: 0.173 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.124 ±(99.9%) 0.155 ms/op [Average]
  (min, avg, max) = (0.089, 0.124, 0.173), stdev = 0.040
  CI (99.9%): [? 0, 0.279] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 66.11% complete, ETA 05:20:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.092 ms/op
# Warmup Iteration   2: 0.091 ms/op
# Warmup Iteration   3: 0.090 ms/op
# Warmup Iteration   4: 0.091 ms/op
# Warmup Iteration   5: 0.091 ms/op
Iteration   1: 0.090 ms/op
Iteration   2: 0.091 ms/op
Iteration   3: 0.106 ms/op
Iteration   4: 0.166 ms/op
Iteration   5: 0.148 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.120 ±(99.9%) 0.134 ms/op [Average]
  (min, avg, max) = (0.090, 0.120, 0.166), stdev = 0.035
  CI (99.9%): [? 0, 0.254] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 66.19% complete, ETA 05:19:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.182 ms/op
# Warmup Iteration   2: 0.181 ms/op
# Warmup Iteration   3: 0.180 ms/op
# Warmup Iteration   4: 0.178 ms/op
# Warmup Iteration   5: 0.180 ms/op
Iteration   1: 0.181 ms/op
Iteration   2: 0.180 ms/op
Iteration   3: 0.218 ms/op
Iteration   4: 0.314 ms/op
Iteration   5: 0.304 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.239 ±(99.9%) 0.252 ms/op [Average]
  (min, avg, max) = (0.180, 0.239, 0.314), stdev = 0.066
  CI (99.9%): [? 0, 0.492] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 66.27% complete, ETA 05:18:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.181 ms/op
# Warmup Iteration   2: 0.181 ms/op
# Warmup Iteration   3: 0.182 ms/op
# Warmup Iteration   4: 0.178 ms/op
# Warmup Iteration   5: 0.182 ms/op
Iteration   1: 0.179 ms/op
Iteration   2: 0.182 ms/op
Iteration   3: 0.210 ms/op
Iteration   4: 0.317 ms/op
Iteration   5: 0.280 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.234 ±(99.9%) 0.238 ms/op [Average]
  (min, avg, max) = (0.179, 0.234, 0.317), stdev = 0.062
  CI (99.9%): [? 0, 0.472] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 66.35% complete, ETA 05:17:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 66.43% complete, ETA 05:16:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 66.51% complete, ETA 05:15:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 66.59% complete, ETA 05:14:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 66.67% complete, ETA 05:13:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 66.75% complete, ETA 05:12:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 66.83% complete, ETA 05:11:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 66.91% complete, ETA 05:10:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 66.99% complete, ETA 05:09:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 67.07% complete, ETA 05:08:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 67.15% complete, ETA 05:07:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 67.23% complete, ETA 05:06:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 67.31% complete, ETA 05:05:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 67.39% complete, ETA 05:04:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 67.47% complete, ETA 05:03:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 67.55% complete, ETA 05:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 67.63% complete, ETA 05:00:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 67.71% complete, ETA 04:59:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 67.79% complete, ETA 04:58:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.008 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.011), stdev = 0.002
  CI (99.9%): [? 0, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 67.87% complete, ETA 04:57:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.008 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.011), stdev = 0.002
  CI (99.9%): [? 0, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 67.95% complete, ETA 04:56:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.015 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.011, 0.015, 0.020), stdev = 0.005
  CI (99.9%): [? 0, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 68.03% complete, ETA 04:55:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.015 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.011, 0.015, 0.022), stdev = 0.004
  CI (99.9%): [? 0, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 68.11% complete, ETA 04:54:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.036 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.030 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (0.023, 0.030, 0.039), stdev = 0.007
  CI (99.9%): [0.001, 0.058] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 68.19% complete, ETA 04:53:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.028 ms/op
Iteration   4: 0.039 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.031 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.023, 0.031, 0.043), stdev = 0.009
  CI (99.9%): [? 0, 0.067] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 68.27% complete, ETA 04:52:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.046 ms/op
Iteration   3: 0.054 ms/op
Iteration   4: 0.081 ms/op
Iteration   5: 0.083 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.062 ±(99.9%) 0.071 ms/op [Average]
  (min, avg, max) = (0.046, 0.062, 0.083), stdev = 0.019
  CI (99.9%): [? 0, 0.134] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 68.35% complete, ETA 04:51:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.052 ms/op
Iteration   4: 0.075 ms/op
Iteration   5: 0.079 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.059 ±(99.9%) 0.064 ms/op [Average]
  (min, avg, max) = (0.045, 0.059, 0.079), stdev = 0.017
  CI (99.9%): [? 0, 0.123] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 68.43% complete, ETA 04:50:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.091 ms/op
# Warmup Iteration   2: 0.090 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.091 ms/op
# Warmup Iteration   5: 0.091 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.091 ms/op
Iteration   3: 0.107 ms/op
Iteration   4: 0.170 ms/op
Iteration   5: 0.153 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.122 ±(99.9%) 0.142 ms/op [Average]
  (min, avg, max) = (0.091, 0.122, 0.170), stdev = 0.037
  CI (99.9%): [? 0, 0.264] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 68.51% complete, ETA 04:49:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.092 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.091 ms/op
# Warmup Iteration   5: 0.090 ms/op
Iteration   1: 0.093 ms/op
Iteration   2: 0.092 ms/op
Iteration   3: 0.107 ms/op
Iteration   4: 0.149 ms/op
Iteration   5: 0.142 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.117 ±(99.9%) 0.105 ms/op [Average]
  (min, avg, max) = (0.092, 0.117, 0.149), stdev = 0.027
  CI (99.9%): [0.012, 0.221] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 68.59% complete, ETA 04:48:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.185 ms/op
# Warmup Iteration   2: 0.181 ms/op
# Warmup Iteration   3: 0.183 ms/op
# Warmup Iteration   4: 0.186 ms/op
# Warmup Iteration   5: 0.183 ms/op
Iteration   1: 0.179 ms/op
Iteration   2: 0.182 ms/op
Iteration   3: 0.219 ms/op
Iteration   4: 0.332 ms/op
Iteration   5: 0.334 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.249 ±(99.9%) 0.300 ms/op [Average]
  (min, avg, max) = (0.179, 0.249, 0.334), stdev = 0.078
  CI (99.9%): [? 0, 0.549] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 68.67% complete, ETA 04:47:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.183 ms/op
# Warmup Iteration   2: 0.184 ms/op
# Warmup Iteration   3: 0.182 ms/op
# Warmup Iteration   4: 0.184 ms/op
# Warmup Iteration   5: 0.181 ms/op
Iteration   1: 0.180 ms/op
Iteration   2: 0.182 ms/op
Iteration   3: 0.212 ms/op
Iteration   4: 0.338 ms/op
Iteration   5: 0.333 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.249 ±(99.9%) 0.308 ms/op [Average]
  (min, avg, max) = (0.180, 0.249, 0.338), stdev = 0.080
  CI (99.9%): [? 0, 0.557] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 68.75% complete, ETA 04:46:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 68.83% complete, ETA 04:45:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 68.91% complete, ETA 04:44:57
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 68.99% complete, ETA 04:43:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 69.07% complete, ETA 04:42:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 69.15% complete, ETA 04:42:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 69.23% complete, ETA 04:41:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 69.31% complete, ETA 04:40:04
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 69.39% complete, ETA 04:39:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 69.47% complete, ETA 04:38:07
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 69.55% complete, ETA 04:37:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 69.63% complete, ETA 04:36:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 69.71% complete, ETA 04:35:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 69.79% complete, ETA 04:34:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 69.87% complete, ETA 04:33:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 69.95% complete, ETA 04:32:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 70.03% complete, ETA 04:31:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 10??, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 70.11% complete, ETA 04:30:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 10??, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 70.19% complete, ETA 04:29:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.009), stdev = 0.002
  CI (99.9%): [? 10??, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 70.27% complete, ETA 04:28:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.009 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.008 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.009), stdev = 0.002
  CI (99.9%): [? 10?³, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 70.35% complete, ETA 04:27:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.016 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.011, 0.016, 0.021), stdev = 0.004
  CI (99.9%): [? 0, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 70.43% complete, ETA 04:26:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.011 ms/op
# Warmup Iteration   2: 0.011 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.011 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.011 ms/op
Iteration   2: 0.011 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.020 ms/op
Iteration   5: 0.019 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.016 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.011, 0.016, 0.020), stdev = 0.004
  CI (99.9%): [? 0, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 70.51% complete, ETA 04:25:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.022 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.022 ms/op
Iteration   3: 0.037 ms/op
Iteration   4: 0.038 ms/op
Iteration   5: 0.040 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.032 ±(99.9%) 0.034 ms/op [Average]
  (min, avg, max) = (0.022, 0.032, 0.040), stdev = 0.009
  CI (99.9%): [? 0, 0.065] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 70.59% complete, ETA 04:24:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.022 ms/op
# Warmup Iteration   3: 0.022 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.023 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.041 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.040 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.034 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.023, 0.034, 0.045), stdev = 0.011
  CI (99.9%): [? 0, 0.075] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 70.67% complete, ETA 04:23:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.044 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.046 ms/op
Iteration   2: 0.045 ms/op
Iteration   3: 0.073 ms/op
Iteration   4: 0.080 ms/op
Iteration   5: 0.076 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.064 ±(99.9%) 0.065 ms/op [Average]
  (min, avg, max) = (0.045, 0.064, 0.080), stdev = 0.017
  CI (99.9%): [? 0, 0.129] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 70.75% complete, ETA 04:22:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.045 ms/op
# Warmup Iteration   3: 0.045 ms/op
# Warmup Iteration   4: 0.045 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.045 ms/op
Iteration   2: 0.046 ms/op
Iteration   3: 0.078 ms/op
Iteration   4: 0.071 ms/op
Iteration   5: 0.076 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.063 ±(99.9%) 0.063 ms/op [Average]
  (min, avg, max) = (0.045, 0.063, 0.078), stdev = 0.016
  CI (99.9%): [? 10??, 0.126] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 70.83% complete, ETA 04:21:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.112 ms/op
# Warmup Iteration   2: 0.110 ms/op
# Warmup Iteration   3: 0.109 ms/op
# Warmup Iteration   4: 0.112 ms/op
# Warmup Iteration   5: 0.110 ms/op
Iteration   1: 0.112 ms/op
Iteration   2: 0.112 ms/op
Iteration   3: 0.180 ms/op
Iteration   4: 0.191 ms/op
Iteration   5: 0.208 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.161 ±(99.9%) 0.174 ms/op [Average]
  (min, avg, max) = (0.112, 0.161, 0.208), stdev = 0.045
  CI (99.9%): [? 0, 0.335] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 70.91% complete, ETA 04:20:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.095 ms/op
# Warmup Iteration   2: 0.093 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.092 ms/op
# Warmup Iteration   5: 0.090 ms/op
Iteration   1: 0.089 ms/op
Iteration   2: 0.092 ms/op
Iteration   3: 0.154 ms/op
Iteration   4: 0.158 ms/op
Iteration   5: 0.162 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.131 ±(99.9%) 0.143 ms/op [Average]
  (min, avg, max) = (0.089, 0.131, 0.162), stdev = 0.037
  CI (99.9%): [? 0, 0.274] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 70.99% complete, ETA 04:20:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.184 ms/op
# Warmup Iteration   2: 0.182 ms/op
# Warmup Iteration   3: 0.182 ms/op
# Warmup Iteration   4: 0.179 ms/op
# Warmup Iteration   5: 0.182 ms/op
Iteration   1: 0.181 ms/op
Iteration   2: 0.185 ms/op
Iteration   3: 0.321 ms/op
Iteration   4: 0.341 ms/op
Iteration   5: 0.343 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.274 ±(99.9%) 0.322 ms/op [Average]
  (min, avg, max) = (0.181, 0.274, 0.343), stdev = 0.084
  CI (99.9%): [? 0, 0.596] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 71.07% complete, ETA 04:19:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.186 ms/op
# Warmup Iteration   2: 0.183 ms/op
# Warmup Iteration   3: 0.183 ms/op
# Warmup Iteration   4: 0.182 ms/op
# Warmup Iteration   5: 0.182 ms/op
Iteration   1: 0.184 ms/op
Iteration   2: 0.186 ms/op
Iteration   3: 0.335 ms/op
Iteration   4: 0.346 ms/op
Iteration   5: 0.286 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark":
  0.267 ±(99.9%) 0.302 ms/op [Average]
  (min, avg, max) = (0.184, 0.267, 0.346), stdev = 0.079
  CI (99.9%): [? 0, 0.570] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 71.15% complete, ETA 04:18:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 71.23% complete, ETA 04:17:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 71.31% complete, ETA 04:16:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 71.39% complete, ETA 04:15:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.002 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 71.47% complete, ETA 04:14:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 71.55% complete, ETA 04:13:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 71.63% complete, ETA 04:12:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 71.71% complete, ETA 04:11:39
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 71.79% complete, ETA 04:10:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 71.88% complete, ETA 04:09:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 71.96% complete, ETA 04:08:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 72.04% complete, ETA 04:07:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 72.12% complete, ETA 04:07:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.002, 0.004, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 72.20% complete, ETA 04:06:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.006 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.006), stdev = 0.002
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 72.28% complete, ETA 04:05:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.007 ±(99.9%) 0.014 ms/op [Average]
  (min, avg, max) = (0.004, 0.007, 0.013), stdev = 0.004
  CI (99.9%): [? 0, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 72.36% complete, ETA 04:04:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.011), stdev = 0.003
  CI (99.9%): [? 0, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 72.44% complete, ETA 04:03:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.014 ±(99.9%) 0.033 ms/op [Average]
  (min, avg, max) = (0.008, 0.014, 0.029), stdev = 0.008
  CI (99.9%): [? 0, 0.047] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 72.52% complete, ETA 04:02:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.008 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.013 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.008, 0.013, 0.027), stdev = 0.008
  CI (99.9%): [? 0, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 72.60% complete, ETA 04:01:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.021 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.025 ±(99.9%) 0.053 ms/op [Average]
  (min, avg, max) = (0.017, 0.025, 0.049), stdev = 0.014
  CI (99.9%): [? 0, 0.078] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 72.68% complete, ETA 04:00:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.021 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.024 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.017, 0.024, 0.043), stdev = 0.011
  CI (99.9%): [? 0, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 72.76% complete, ETA 03:59:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.033 ms/op
# Warmup Iteration   3: 0.035 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.040 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.143 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.058 ±(99.9%) 0.186 ms/op [Average]
  (min, avg, max) = (0.030, 0.058, 0.143), stdev = 0.048
  CI (99.9%): [? 0, 0.244] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 72.84% complete, ETA 03:58:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.033 ms/op
# Warmup Iteration   3: 0.034 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.035 ms/op
Iteration   1: 0.033 ms/op
Iteration   2: 0.033 ms/op
Iteration   3: 0.042 ms/op
Iteration   4: 0.129 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.057 ±(99.9%) 0.156 ms/op [Average]
  (min, avg, max) = (0.033, 0.057, 0.129), stdev = 0.041
  CI (99.9%): [? 0, 0.214] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 72.92% complete, ETA 03:58:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.065 ms/op
# Warmup Iteration   2: 0.068 ms/op
# Warmup Iteration   3: 0.072 ms/op
# Warmup Iteration   4: 0.063 ms/op
# Warmup Iteration   5: 0.083 ms/op
Iteration   1: 0.061 ms/op
Iteration   2: 0.066 ms/op
Iteration   3: 0.066 ms/op
Iteration   4: 0.303 ms/op
Iteration   5: 0.108 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.121 ±(99.9%) 0.399 ms/op [Average]
  (min, avg, max) = (0.061, 0.121, 0.303), stdev = 0.104
  CI (99.9%): [? 0, 0.519] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 73.00% complete, ETA 03:57:09
# Fork: 1 of 1
# Warmup Iteration   1: 0.066 ms/op
# Warmup Iteration   2: 0.067 ms/op
# Warmup Iteration   3: 0.071 ms/op
# Warmup Iteration   4: 0.063 ms/op
# Warmup Iteration   5: 0.080 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.063 ms/op
Iteration   3: 0.073 ms/op
Iteration   4: 0.220 ms/op
Iteration   5: 0.101 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.104 ±(99.9%) 0.256 ms/op [Average]
  (min, avg, max) = (0.063, 0.104, 0.220), stdev = 0.067
  CI (99.9%): [? 0, 0.360] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 73.08% complete, ETA 03:56:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.134 ms/op
# Warmup Iteration   2: 0.137 ms/op
# Warmup Iteration   3: 0.141 ms/op
# Warmup Iteration   4: 0.129 ms/op
# Warmup Iteration   5: 0.165 ms/op
Iteration   1: 0.125 ms/op
Iteration   2: 0.129 ms/op
Iteration   3: 0.137 ms/op
Iteration   4: 0.419 ms/op
Iteration   5: 0.179 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.198 ±(99.9%) 0.483 ms/op [Average]
  (min, avg, max) = (0.125, 0.198, 0.419), stdev = 0.126
  CI (99.9%): [? 0, 0.681] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 73.16% complete, ETA 03:55:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.132 ms/op
# Warmup Iteration   2: 0.135 ms/op
# Warmup Iteration   3: 0.142 ms/op
# Warmup Iteration   4: 0.124 ms/op
# Warmup Iteration   5: 0.158 ms/op
Iteration   1: 0.128 ms/op
Iteration   2: 0.129 ms/op
Iteration   3: 0.147 ms/op
Iteration   4: 0.426 ms/op
Iteration   5: 0.180 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.202 ±(99.9%) 0.490 ms/op [Average]
  (min, avg, max) = (0.128, 0.202, 0.426), stdev = 0.127
  CI (99.9%): [? 0, 0.692] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 73.24% complete, ETA 03:54:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.274 ms/op
# Warmup Iteration   2: 0.279 ms/op
# Warmup Iteration   3: 0.281 ms/op
# Warmup Iteration   4: 0.260 ms/op
# Warmup Iteration   5: 0.333 ms/op
Iteration   1: 0.248 ms/op
Iteration   2: 0.254 ms/op
Iteration   3: 0.287 ms/op
Iteration   4: 0.891 ms/op
Iteration   5: 0.381 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.412 ±(99.9%) 1.050 ms/op [Average]
  (min, avg, max) = (0.248, 0.412, 0.891), stdev = 0.273
  CI (99.9%): [? 0, 1.462] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 73.32% complete, ETA 03:53:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.264 ms/op
# Warmup Iteration   2: 0.276 ms/op
# Warmup Iteration   3: 0.282 ms/op
# Warmup Iteration   4: 0.258 ms/op
# Warmup Iteration   5: 0.340 ms/op
Iteration   1: 0.251 ms/op
Iteration   2: 0.261 ms/op
Iteration   3: 0.271 ms/op
Iteration   4: 0.845 ms/op
Iteration   5: 0.430 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.412 ±(99.9%) 0.975 ms/op [Average]
  (min, avg, max) = (0.251, 0.412, 0.845), stdev = 0.253
  CI (99.9%): [? 0, 1.387] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 73.40% complete, ETA 03:52:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.543 ms/op
# Warmup Iteration   2: 0.552 ms/op
# Warmup Iteration   3: 0.559 ms/op
# Warmup Iteration   4: 0.499 ms/op
# Warmup Iteration   5: 0.683 ms/op
Iteration   1: 0.478 ms/op
Iteration   2: 0.479 ms/op
Iteration   3: 0.579 ms/op
Iteration   4: 1.897 ms/op
Iteration   5: 0.828 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.852 ±(99.9%) 2.315 ms/op [Average]
  (min, avg, max) = (0.478, 0.852, 1.897), stdev = 0.601
  CI (99.9%): [? 0, 3.167] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 73.48% complete, ETA 03:51:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.568 ms/op
# Warmup Iteration   2: 0.527 ms/op
# Warmup Iteration   3: 0.517 ms/op
# Warmup Iteration   4: 0.614 ms/op
# Warmup Iteration   5: 0.484 ms/op
Iteration   1: 0.511 ms/op
Iteration   2: 0.488 ms/op
Iteration   3: 0.937 ms/op
Iteration   4: 0.840 ms/op
Iteration   5: 0.835 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.722 ±(99.9%) 0.799 ms/op [Average]
  (min, avg, max) = (0.488, 0.722, 0.937), stdev = 0.208
  CI (99.9%): [? 0, 1.522] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 73.56% complete, ETA 03:50:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 73.64% complete, ETA 03:50:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 73.72% complete, ETA 03:49:09
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 73.80% complete, ETA 03:48:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 73.88% complete, ETA 03:47:24
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 73.96% complete, ETA 03:46:32
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 74.04% complete, ETA 03:45:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 74.12% complete, ETA 03:44:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 74.20% complete, ETA 03:43:56
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 74.28% complete, ETA 03:43:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 74.36% complete, ETA 03:42:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 74.44% complete, ETA 03:41:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 74.52% complete, ETA 03:40:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 74.60% complete, ETA 03:39:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 74.68% complete, ETA 03:38:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.005 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.001, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 74.76% complete, ETA 03:37:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.001, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 74.84% complete, ETA 03:37:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.028 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.014 ±(99.9%) 0.031 ms/op [Average]
  (min, avg, max) = (0.008, 0.014, 0.028), stdev = 0.008
  CI (99.9%): [? 0, 0.045] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 74.92% complete, ETA 03:36:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.009 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.012 ±(99.9%) 0.024 ms/op [Average]
  (min, avg, max) = (0.008, 0.012, 0.023), stdev = 0.006
  CI (99.9%): [? 0, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 75.00% complete, ETA 03:35:18
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.028 ms/op
Iteration   5: 0.042 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.025 ±(99.9%) 0.042 ms/op [Average]
  (min, avg, max) = (0.016, 0.025, 0.042), stdev = 0.011
  CI (99.9%): [? 0, 0.067] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 75.08% complete, ETA 03:34:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.019 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.016 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.024 ±(99.9%) 0.041 ms/op [Average]
  (min, avg, max) = (0.016, 0.024, 0.041), stdev = 0.011
  CI (99.9%): [? 0, 0.064] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 75.16% complete, ETA 03:33:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.036 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.033 ms/op
Iteration   2: 0.035 ms/op
Iteration   3: 0.039 ms/op
Iteration   4: 0.054 ms/op
Iteration   5: 0.101 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.053 ±(99.9%) 0.110 ms/op [Average]
  (min, avg, max) = (0.033, 0.053, 0.101), stdev = 0.029
  CI (99.9%): [? 0, 0.162] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 75.24% complete, ETA 03:32:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.037 ms/op
# Warmup Iteration   2: 0.035 ms/op
# Warmup Iteration   3: 0.035 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.033 ms/op
Iteration   2: 0.036 ms/op
Iteration   3: 0.041 ms/op
Iteration   4: 0.057 ms/op
Iteration   5: 0.110 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.055 ±(99.9%) 0.123 ms/op [Average]
  (min, avg, max) = (0.033, 0.055, 0.110), stdev = 0.032
  CI (99.9%): [? 0, 0.178] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 75.32% complete, ETA 03:31:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ms/op
# Warmup Iteration   2: 0.074 ms/op
# Warmup Iteration   3: 0.074 ms/op
# Warmup Iteration   4: 0.066 ms/op
# Warmup Iteration   5: 0.085 ms/op
Iteration   1: 0.064 ms/op
Iteration   2: 0.068 ms/op
Iteration   3: 0.076 ms/op
Iteration   4: 0.103 ms/op
Iteration   5: 0.298 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.122 ±(99.9%) 0.383 ms/op [Average]
  (min, avg, max) = (0.064, 0.122, 0.298), stdev = 0.099
  CI (99.9%): [? 0, 0.505] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 75.40% complete, ETA 03:31:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.070 ms/op
# Warmup Iteration   2: 0.071 ms/op
# Warmup Iteration   3: 0.072 ms/op
# Warmup Iteration   4: 0.067 ms/op
# Warmup Iteration   5: 0.086 ms/op
Iteration   1: 0.063 ms/op
Iteration   2: 0.065 ms/op
Iteration   3: 0.075 ms/op
Iteration   4: 0.174 ms/op
Iteration   5: 0.092 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.094 ±(99.9%) 0.178 ms/op [Average]
  (min, avg, max) = (0.063, 0.094, 0.174), stdev = 0.046
  CI (99.9%): [? 0, 0.272] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 75.48% complete, ETA 03:30:10
# Fork: 1 of 1
# Warmup Iteration   1: 0.171 ms/op
# Warmup Iteration   2: 0.164 ms/op
# Warmup Iteration   3: 0.166 ms/op
# Warmup Iteration   4: 0.157 ms/op
# Warmup Iteration   5: 0.180 ms/op
Iteration   1: 0.158 ms/op
Iteration   2: 0.158 ms/op
Iteration   3: 0.178 ms/op
Iteration   4: 0.223 ms/op
Iteration   5: 0.227 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.189 ±(99.9%) 0.131 ms/op [Average]
  (min, avg, max) = (0.158, 0.189, 0.227), stdev = 0.034
  CI (99.9%): [0.058, 0.319] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 75.56% complete, ETA 03:29:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.147 ms/op
# Warmup Iteration   2: 0.142 ms/op
# Warmup Iteration   3: 0.143 ms/op
# Warmup Iteration   4: 0.135 ms/op
# Warmup Iteration   5: 0.168 ms/op
Iteration   1: 0.127 ms/op
Iteration   2: 0.131 ms/op
Iteration   3: 0.139 ms/op
Iteration   4: 0.331 ms/op
Iteration   5: 0.216 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.189 ±(99.9%) 0.337 ms/op [Average]
  (min, avg, max) = (0.127, 0.189, 0.331), stdev = 0.087
  CI (99.9%): [? 0, 0.525] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 75.64% complete, ETA 03:28:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.283 ms/op
# Warmup Iteration   2: 0.275 ms/op
# Warmup Iteration   3: 0.288 ms/op
# Warmup Iteration   4: 0.259 ms/op
# Warmup Iteration   5: 0.337 ms/op
Iteration   1: 0.255 ms/op
Iteration   2: 0.261 ms/op
Iteration   3: 0.285 ms/op
Iteration   4: 0.734 ms/op
Iteration   5: 0.365 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.380 ±(99.9%) 0.781 ms/op [Average]
  (min, avg, max) = (0.255, 0.380, 0.734), stdev = 0.203
  CI (99.9%): [? 0, 1.161] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 75.72% complete, ETA 03:27:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.293 ms/op
# Warmup Iteration   2: 0.281 ms/op
# Warmup Iteration   3: 0.285 ms/op
# Warmup Iteration   4: 0.267 ms/op
# Warmup Iteration   5: 0.330 ms/op
Iteration   1: 0.257 ms/op
Iteration   2: 0.245 ms/op
Iteration   3: 0.286 ms/op
Iteration   4: 0.839 ms/op
Iteration   5: 0.384 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.402 ±(99.9%) 0.964 ms/op [Average]
  (min, avg, max) = (0.245, 0.402, 0.839), stdev = 0.250
  CI (99.9%): [? 0, 1.366] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 75.80% complete, ETA 03:26:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.578 ms/op
# Warmup Iteration   2: 0.552 ms/op
# Warmup Iteration   3: 0.569 ms/op
# Warmup Iteration   4: 0.517 ms/op
# Warmup Iteration   5: 0.699 ms/op
Iteration   1: 0.499 ms/op
Iteration   2: 0.492 ms/op
Iteration   3: 0.560 ms/op
Iteration   4: 1.679 ms/op
Iteration   5: 0.732 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.792 ±(99.9%) 1.944 ms/op [Average]
  (min, avg, max) = (0.492, 0.792, 1.679), stdev = 0.505
  CI (99.9%): [? 0, 2.737] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 75.88% complete, ETA 03:25:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.577 ms/op
# Warmup Iteration   2: 0.570 ms/op
# Warmup Iteration   3: 0.579 ms/op
# Warmup Iteration   4: 0.534 ms/op
# Warmup Iteration   5: 0.688 ms/op
Iteration   1: 0.507 ms/op
Iteration   2: 0.553 ms/op
Iteration   3: 0.619 ms/op
Iteration   4: 1.149 ms/op
Iteration   5: 0.903 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.746 ±(99.9%) 1.050 ms/op [Average]
  (min, avg, max) = (0.507, 0.746, 1.149), stdev = 0.273
  CI (99.9%): [? 0, 1.796] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 75.96% complete, ETA 03:25:06
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.002 ms/op
Iteration   4: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.014] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 76.04% complete, ETA 03:24:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.003, 0.007), stdev = 0.003
  CI (99.9%): [? 0, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 76.12% complete, ETA 03:23:27
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.003 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 76.20% complete, ETA 03:22:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 76.28% complete, ETA 03:21:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 76.36% complete, ETA 03:21:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 76.44% complete, ETA 03:20:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 76.52% complete, ETA 03:19:21
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 76.60% complete, ETA 03:18:31
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 76.68% complete, ETA 03:17:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 76.76% complete, ETA 03:16:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 76.84% complete, ETA 03:16:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 76.92% complete, ETA 03:15:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 77.00% complete, ETA 03:14:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.007 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 77.08% complete, ETA 03:13:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.008 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.007 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.004, 0.007, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 77.16% complete, ETA 03:12:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.005 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.005, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.003, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 77.24% complete, ETA 03:11:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.013 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.010, 0.013, 0.016), stdev = 0.003
  CI (99.9%): [0.002, 0.024] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 77.32% complete, ETA 03:11:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.010 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.015 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.012 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.010, 0.012, 0.015), stdev = 0.002
  CI (99.9%): [0.003, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 77.40% complete, ETA 03:10:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.020 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.034 ms/op
Iteration   5: 0.031 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.026 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.019, 0.026, 0.034), stdev = 0.007
  CI (99.9%): [0.001, 0.051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 77.48% complete, ETA 03:09:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.019 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.019 ms/op
Iteration   3: 0.026 ms/op
Iteration   4: 0.030 ms/op
Iteration   5: 0.030 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.025 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.019, 0.025, 0.030), stdev = 0.006
  CI (99.9%): [0.004, 0.046] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 77.56% complete, ETA 03:08:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.036 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.035 ms/op
# Warmup Iteration   5: 0.045 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.071 ms/op
Iteration   5: 0.054 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.046 ±(99.9%) 0.064 ms/op [Average]
  (min, avg, max) = (0.031, 0.046, 0.071), stdev = 0.017
  CI (99.9%): [? 0, 0.110] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 77.64% complete, ETA 03:07:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.033 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.043 ms/op
Iteration   1: 0.035 ms/op
Iteration   2: 0.033 ms/op
Iteration   3: 0.043 ms/op
Iteration   4: 0.076 ms/op
Iteration   5: 0.051 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.048 ±(99.9%) 0.068 ms/op [Average]
  (min, avg, max) = (0.033, 0.048, 0.076), stdev = 0.018
  CI (99.9%): [? 0, 0.116] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 77.72% complete, ETA 03:07:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.078 ms/op
# Warmup Iteration   2: 0.079 ms/op
# Warmup Iteration   3: 0.085 ms/op
# Warmup Iteration   4: 0.078 ms/op
# Warmup Iteration   5: 0.097 ms/op
Iteration   1: 0.076 ms/op
Iteration   2: 0.079 ms/op
Iteration   3: 0.105 ms/op
Iteration   4: 0.126 ms/op
Iteration   5: 0.127 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.103 ±(99.9%) 0.095 ms/op [Average]
  (min, avg, max) = (0.076, 0.103, 0.127), stdev = 0.025
  CI (99.9%): [0.008, 0.197] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 77.80% complete, ETA 03:06:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.078 ms/op
# Warmup Iteration   2: 0.081 ms/op
# Warmup Iteration   3: 0.082 ms/op
# Warmup Iteration   4: 0.078 ms/op
# Warmup Iteration   5: 0.098 ms/op
Iteration   1: 0.078 ms/op
Iteration   2: 0.078 ms/op
Iteration   3: 0.092 ms/op
Iteration   4: 0.115 ms/op
Iteration   5: 0.111 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.095 ±(99.9%) 0.067 ms/op [Average]
  (min, avg, max) = (0.078, 0.095, 0.115), stdev = 0.017
  CI (99.9%): [0.028, 0.162] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 77.88% complete, ETA 03:05:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.137 ms/op
# Warmup Iteration   2: 0.142 ms/op
# Warmup Iteration   3: 0.149 ms/op
# Warmup Iteration   4: 0.150 ms/op
# Warmup Iteration   5: 0.168 ms/op
Iteration   1: 0.136 ms/op
Iteration   2: 0.131 ms/op
Iteration   3: 0.198 ms/op
Iteration   4: 0.199 ms/op
Iteration   5: 0.382 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.209 ±(99.9%) 0.392 ms/op [Average]
  (min, avg, max) = (0.131, 0.209, 0.382), stdev = 0.102
  CI (99.9%): [? 0, 0.601] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 77.96% complete, ETA 03:04:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.161 ms/op
# Warmup Iteration   2: 0.160 ms/op
# Warmup Iteration   3: 0.161 ms/op
# Warmup Iteration   4: 0.159 ms/op
# Warmup Iteration   5: 0.180 ms/op
Iteration   1: 0.157 ms/op
Iteration   2: 0.150 ms/op
Iteration   3: 0.202 ms/op
Iteration   4: 0.258 ms/op
Iteration   5: 0.224 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.198 ±(99.9%) 0.175 ms/op [Average]
  (min, avg, max) = (0.150, 0.198, 0.258), stdev = 0.046
  CI (99.9%): [0.023, 0.374] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 78.04% complete, ETA 03:03:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.270 ms/op
# Warmup Iteration   2: 0.290 ms/op
# Warmup Iteration   3: 0.286 ms/op
# Warmup Iteration   4: 0.264 ms/op
# Warmup Iteration   5: 0.357 ms/op
Iteration   1: 0.259 ms/op
Iteration   2: 0.264 ms/op
Iteration   3: 0.351 ms/op
Iteration   4: 0.420 ms/op
Iteration   5: 1.093 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.477 ±(99.9%) 1.349 ms/op [Average]
  (min, avg, max) = (0.259, 0.477, 1.093), stdev = 0.350
  CI (99.9%): [? 0, 1.827] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 78.13% complete, ETA 03:03:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.306 ms/op
# Warmup Iteration   2: 0.311 ms/op
# Warmup Iteration   3: 0.336 ms/op
# Warmup Iteration   4: 0.295 ms/op
# Warmup Iteration   5: 0.354 ms/op
Iteration   1: 0.317 ms/op
Iteration   2: 0.282 ms/op
Iteration   3: 0.385 ms/op
Iteration   4: 0.436 ms/op
Iteration   5: 0.540 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.392 ±(99.9%) 0.393 ms/op [Average]
  (min, avg, max) = (0.282, 0.392, 0.540), stdev = 0.102
  CI (99.9%): [? 0, 0.785] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 78.21% complete, ETA 03:02:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.630 ms/op
# Warmup Iteration   2: 0.644 ms/op
# Warmup Iteration   3: 0.661 ms/op
# Warmup Iteration   4: 0.640 ms/op
# Warmup Iteration   5: 0.730 ms/op
Iteration   1: 0.600 ms/op
Iteration   2: 0.623 ms/op
Iteration   3: 0.831 ms/op
Iteration   4: 0.945 ms/op
Iteration   5: 1.031 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.806 ±(99.9%) 0.737 ms/op [Average]
  (min, avg, max) = (0.600, 0.806, 1.031), stdev = 0.191
  CI (99.9%): [0.069, 1.543] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 78.29% complete, ETA 03:01:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.550 ms/op
# Warmup Iteration   2: 0.517 ms/op
# Warmup Iteration   3: 0.587 ms/op
# Warmup Iteration   4: 0.526 ms/op
# Warmup Iteration   5: 0.639 ms/op
Iteration   1: 0.570 ms/op
Iteration   2: 0.506 ms/op
Iteration   3: 0.706 ms/op
Iteration   4: 1.152 ms/op
Iteration   5: 0.709 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.729 ±(99.9%) 0.972 ms/op [Average]
  (min, avg, max) = (0.506, 0.729, 1.152), stdev = 0.252
  CI (99.9%): [? 0, 1.700] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 78.37% complete, ETA 03:00:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 78.45% complete, ETA 02:59:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 78.53% complete, ETA 02:58:59
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 78.61% complete, ETA 02:58:11
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 78.69% complete, ETA 02:57:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 78.77% complete, ETA 02:56:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 78.85% complete, ETA 02:55:48
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 78.93% complete, ETA 02:55:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 79.01% complete, ETA 02:54:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 79.09% complete, ETA 02:53:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 79.17% complete, ETA 02:52:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 79.25% complete, ETA 02:51:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.009 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.001, 0.003, 0.009), stdev = 0.003
  CI (99.9%): [? 0, 0.016] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 79.33% complete, ETA 02:51:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 10?³, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 79.41% complete, ETA 02:50:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.002, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 79.49% complete, ETA 02:49:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.007 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.004, 0.007, 0.013), stdev = 0.004
  CI (99.9%): [? 0, 0.022] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 79.57% complete, ETA 02:48:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.005 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 79.65% complete, ETA 02:47:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.027 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.014 ±(99.9%) 0.030 ms/op [Average]
  (min, avg, max) = (0.008, 0.014, 0.027), stdev = 0.008
  CI (99.9%): [? 0, 0.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 79.73% complete, ETA 02:47:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.009 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.012 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.008, 0.012, 0.021), stdev = 0.006
  CI (99.9%): [? 0, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 79.81% complete, ETA 02:46:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.020 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.017 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.024 ±(99.9%) 0.055 ms/op [Average]
  (min, avg, max) = (0.015, 0.024, 0.049), stdev = 0.014
  CI (99.9%): [? 0, 0.079] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 79.89% complete, ETA 02:45:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.018 ms/op
# Warmup Iteration   2: 0.017 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.017 ms/op
Iteration   2: 0.017 ms/op
Iteration   3: 0.019 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.025 ±(99.9%) 0.046 ms/op [Average]
  (min, avg, max) = (0.017, 0.025, 0.045), stdev = 0.012
  CI (99.9%): [? 0, 0.071] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 79.97% complete, ETA 02:44:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.036 ms/op
# Warmup Iteration   2: 0.033 ms/op
# Warmup Iteration   3: 0.032 ms/op
# Warmup Iteration   4: 0.037 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.031 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.057 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.044 ±(99.9%) 0.047 ms/op [Average]
  (min, avg, max) = (0.031, 0.044, 0.057), stdev = 0.012
  CI (99.9%): [? 0, 0.091] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 80.05% complete, ETA 02:44:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.038 ms/op
# Warmup Iteration   2: 0.035 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.041 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.033 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.088 ms/op
Iteration   5: 0.055 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.049 ±(99.9%) 0.092 ms/op [Average]
  (min, avg, max) = (0.032, 0.049, 0.088), stdev = 0.024
  CI (99.9%): [? 0, 0.141] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 80.13% complete, ETA 02:43:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.067 ms/op
# Warmup Iteration   2: 0.068 ms/op
# Warmup Iteration   3: 0.071 ms/op
# Warmup Iteration   4: 0.062 ms/op
# Warmup Iteration   5: 0.077 ms/op
Iteration   1: 0.064 ms/op
Iteration   2: 0.062 ms/op
Iteration   3: 0.078 ms/op
Iteration   4: 0.218 ms/op
Iteration   5: 0.096 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.103 ±(99.9%) 0.251 ms/op [Average]
  (min, avg, max) = (0.062, 0.103, 0.218), stdev = 0.065
  CI (99.9%): [? 0, 0.355] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 80.21% complete, ETA 02:42:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.066 ms/op
# Warmup Iteration   2: 0.065 ms/op
# Warmup Iteration   3: 0.071 ms/op
# Warmup Iteration   4: 0.063 ms/op
# Warmup Iteration   5: 0.084 ms/op
Iteration   1: 0.062 ms/op
Iteration   2: 0.063 ms/op
Iteration   3: 0.072 ms/op
Iteration   4: 0.210 ms/op
Iteration   5: 0.100 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.101 ±(99.9%) 0.241 ms/op [Average]
  (min, avg, max) = (0.062, 0.101, 0.210), stdev = 0.063
  CI (99.9%): [? 0, 0.342] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 80.29% complete, ETA 02:41:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.138 ms/op
# Warmup Iteration   2: 0.138 ms/op
# Warmup Iteration   3: 0.135 ms/op
# Warmup Iteration   4: 0.125 ms/op
# Warmup Iteration   5: 0.164 ms/op
Iteration   1: 0.122 ms/op
Iteration   2: 0.127 ms/op
Iteration   3: 0.133 ms/op
Iteration   4: 0.496 ms/op
Iteration   5: 0.189 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.214 ±(99.9%) 0.616 ms/op [Average]
  (min, avg, max) = (0.122, 0.214, 0.496), stdev = 0.160
  CI (99.9%): [? 0, 0.829] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 80.37% complete, ETA 02:40:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.135 ms/op
# Warmup Iteration   2: 0.138 ms/op
# Warmup Iteration   3: 0.136 ms/op
# Warmup Iteration   4: 0.123 ms/op
# Warmup Iteration   5: 0.157 ms/op
Iteration   1: 0.124 ms/op
Iteration   2: 0.126 ms/op
Iteration   3: 0.136 ms/op
Iteration   4: 0.511 ms/op
Iteration   5: 0.176 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.215 ±(99.9%) 0.644 ms/op [Average]
  (min, avg, max) = (0.124, 0.215, 0.511), stdev = 0.167
  CI (99.9%): [? 0, 0.859] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 80.45% complete, ETA 02:40:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.272 ms/op
# Warmup Iteration   2: 0.262 ms/op
# Warmup Iteration   3: 0.281 ms/op
# Warmup Iteration   4: 0.248 ms/op
# Warmup Iteration   5: 0.320 ms/op
Iteration   1: 0.241 ms/op
Iteration   2: 0.274 ms/op
Iteration   3: 0.265 ms/op
Iteration   4: 0.741 ms/op
Iteration   5: 0.413 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.387 ±(99.9%) 0.805 ms/op [Average]
  (min, avg, max) = (0.241, 0.387, 0.741), stdev = 0.209
  CI (99.9%): [? 0, 1.192] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 80.53% complete, ETA 02:39:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.282 ms/op
# Warmup Iteration   2: 0.263 ms/op
# Warmup Iteration   3: 0.257 ms/op
# Warmup Iteration   4: 0.294 ms/op
# Warmup Iteration   5: 0.254 ms/op
Iteration   1: 0.256 ms/op
Iteration   2: 0.234 ms/op
Iteration   3: 0.458 ms/op
Iteration   4: 0.452 ms/op
Iteration   5: 0.421 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.364 ±(99.9%) 0.423 ms/op [Average]
  (min, avg, max) = (0.234, 0.364, 0.458), stdev = 0.110
  CI (99.9%): [? 0, 0.787] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 80.61% complete, ETA 02:38:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.580 ms/op
# Warmup Iteration   2: 0.539 ms/op
# Warmup Iteration   3: 0.563 ms/op
# Warmup Iteration   4: 0.507 ms/op
# Warmup Iteration   5: 0.662 ms/op
Iteration   1: 0.507 ms/op
Iteration   2: 0.516 ms/op
Iteration   3: 0.584 ms/op
Iteration   4: 1.374 ms/op
Iteration   5: 0.733 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.743 ±(99.9%) 1.404 ms/op [Average]
  (min, avg, max) = (0.507, 0.743, 1.374), stdev = 0.365
  CI (99.9%): [? 0, 2.147] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 80.69% complete, ETA 02:37:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.675 ms/op
# Warmup Iteration   2: 0.760 ms/op
# Warmup Iteration   3: 0.813 ms/op
# Warmup Iteration   4: 0.718 ms/op
# Warmup Iteration   5: 0.714 ms/op
Iteration   1: 0.819 ms/op
Iteration   2: 0.758 ms/op
Iteration   3: 0.845 ms/op
Iteration   4: 1.082 ms/op
Iteration   5: 1.102 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.921 ±(99.9%) 0.613 ms/op [Average]
  (min, avg, max) = (0.758, 0.921, 1.102), stdev = 0.159
  CI (99.9%): [0.309, 1.534] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 80.77% complete, ETA 02:37:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.001 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 80.85% complete, ETA 02:36:17
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: 0.010 ms/op
Iteration   2: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.010 ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 80.93% complete, ETA 02:35:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 81.01% complete, ETA 02:34:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: <failure>

java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.resize(HashMap.java:702)
	at java.base/java.util.HashMap.putVal(HashMap.java:661)
	at java.base/java.util.HashMap.put(HashMap.java:610)
	at tools.refinery.store.map.VersionedMapStoreImpl.commit(VersionedMapStoreImpl.java:120)
	at tools.refinery.store.map.internal.VersionedMapImpl.commit(VersionedMapImpl.java:121)
	at tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark(ImmutableRestoreBenchmark.java:46)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_avgt_jmhStub(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:237)
	at tools.refinery.store.map.benchmarks.restore.jmh_generated.ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.immutableRestoreAndCommitBenchmark_AverageTime(ImmutableRestoreBenchmark_immutableRestoreAndCommitBenchmark_jmhTest.java:177)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 81.09% complete, ETA 02:34:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 81.17% complete, ETA 02:33:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 81.25% complete, ETA 02:32:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10??, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 81.33% complete, ETA 02:31:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 81.41% complete, ETA 02:30:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 81.49% complete, ETA 02:30:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 81.57% complete, ETA 02:29:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 81.65% complete, ETA 02:28:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 81.73% complete, ETA 02:27:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.004 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.002, 0.004, 0.007), stdev = 0.002
  CI (99.9%): [? 0, 0.012] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 81.81% complete, ETA 02:27:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 81.89% complete, ETA 02:26:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.013), stdev = 0.004
  CI (99.9%): [? 0, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 81.97% complete, ETA 02:25:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.005 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.005 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.006 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.004, 0.006, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 82.05% complete, ETA 02:24:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.012 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.008, 0.012, 0.022), stdev = 0.006
  CI (99.9%): [? 0, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 82.13% complete, ETA 02:24:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.009 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.011 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.013 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.008, 0.013, 0.024), stdev = 0.007
  CI (99.9%): [? 0, 0.038] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 82.21% complete, ETA 02:23:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.017 ms/op
# Warmup Iteration   5: 0.019 ms/op
Iteration   1: 0.018 ms/op
Iteration   2: 0.016 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.049 ms/op
Iteration   5: 0.026 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.025 ±(99.9%) 0.053 ms/op [Average]
  (min, avg, max) = (0.016, 0.025, 0.049), stdev = 0.014
  CI (99.9%): [? 0, 0.078] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 82.29% complete, ETA 02:22:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.017 ms/op
# Warmup Iteration   2: 0.018 ms/op
# Warmup Iteration   3: 0.018 ms/op
# Warmup Iteration   4: 0.016 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.018 ms/op
Iteration   4: 0.060 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.027 ±(99.9%) 0.073 ms/op [Average]
  (min, avg, max) = (0.015, 0.027, 0.060), stdev = 0.019
  CI (99.9%): [? 0, 0.099] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 82.37% complete, ETA 02:21:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.034 ms/op
# Warmup Iteration   2: 0.034 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.033 ms/op
# Warmup Iteration   5: 0.042 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.036 ms/op
Iteration   4: 0.084 ms/op
Iteration   5: 0.053 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.048 ±(99.9%) 0.085 ms/op [Average]
  (min, avg, max) = (0.032, 0.048, 0.084), stdev = 0.022
  CI (99.9%): [? 0, 0.133] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 82.45% complete, ETA 02:21:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.035 ms/op
# Warmup Iteration   2: 0.035 ms/op
# Warmup Iteration   3: 0.037 ms/op
# Warmup Iteration   4: 0.032 ms/op
# Warmup Iteration   5: 0.042 ms/op
Iteration   1: 0.032 ms/op
Iteration   2: 0.032 ms/op
Iteration   3: 0.038 ms/op
Iteration   4: 0.090 ms/op
Iteration   5: 0.056 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.050 ±(99.9%) 0.095 ms/op [Average]
  (min, avg, max) = (0.032, 0.050, 0.090), stdev = 0.025
  CI (99.9%): [? 0, 0.145] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 82.53% complete, ETA 02:20:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.074 ms/op
# Warmup Iteration   2: 0.071 ms/op
# Warmup Iteration   3: 0.072 ms/op
# Warmup Iteration   4: 0.068 ms/op
# Warmup Iteration   5: 0.089 ms/op
Iteration   1: 0.064 ms/op
Iteration   2: 0.069 ms/op
Iteration   3: 0.080 ms/op
Iteration   4: 0.095 ms/op
Iteration   5: 0.202 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.102 ±(99.9%) 0.220 ms/op [Average]
  (min, avg, max) = (0.064, 0.102, 0.202), stdev = 0.057
  CI (99.9%): [? 0, 0.322] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 82.61% complete, ETA 02:19:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.069 ms/op
# Warmup Iteration   2: 0.070 ms/op
# Warmup Iteration   3: 0.073 ms/op
# Warmup Iteration   4: 0.066 ms/op
# Warmup Iteration   5: 0.083 ms/op
Iteration   1: 0.068 ms/op
Iteration   2: 0.067 ms/op
Iteration   3: 0.076 ms/op
Iteration   4: 0.150 ms/op
Iteration   5: 0.107 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.094 ±(99.9%) 0.137 ms/op [Average]
  (min, avg, max) = (0.067, 0.094, 0.150), stdev = 0.036
  CI (99.9%): [? 0, 0.230] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 82.69% complete, ETA 02:19:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.140 ms/op
# Warmup Iteration   2: 0.145 ms/op
# Warmup Iteration   3: 0.144 ms/op
# Warmup Iteration   4: 0.133 ms/op
# Warmup Iteration   5: 0.163 ms/op
Iteration   1: 0.125 ms/op
Iteration   2: 0.131 ms/op
Iteration   3: 0.160 ms/op
Iteration   4: 0.280 ms/op
Iteration   5: 0.201 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.179 ±(99.9%) 0.245 ms/op [Average]
  (min, avg, max) = (0.125, 0.179, 0.280), stdev = 0.064
  CI (99.9%): [? 0, 0.424] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 82.77% complete, ETA 02:18:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.139 ms/op
# Warmup Iteration   2: 0.141 ms/op
# Warmup Iteration   3: 0.144 ms/op
# Warmup Iteration   4: 0.135 ms/op
# Warmup Iteration   5: 0.174 ms/op
Iteration   1: 0.124 ms/op
Iteration   2: 0.143 ms/op
Iteration   3: 0.151 ms/op
Iteration   4: 0.232 ms/op
Iteration   5: 0.430 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.216 ±(99.9%) 0.488 ms/op [Average]
  (min, avg, max) = (0.124, 0.216, 0.430), stdev = 0.127
  CI (99.9%): [? 0, 0.704] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 82.85% complete, ETA 02:17:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.298 ms/op
# Warmup Iteration   2: 0.281 ms/op
# Warmup Iteration   3: 0.290 ms/op
# Warmup Iteration   4: 0.269 ms/op
# Warmup Iteration   5: 0.349 ms/op
Iteration   1: 0.251 ms/op
Iteration   2: 0.276 ms/op
Iteration   3: 0.314 ms/op
Iteration   4: 0.437 ms/op
Iteration   5: 0.743 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.404 ±(99.9%) 0.780 ms/op [Average]
  (min, avg, max) = (0.251, 0.404, 0.743), stdev = 0.202
  CI (99.9%): [? 0, 1.184] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 82.93% complete, ETA 02:16:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.278 ms/op
# Warmup Iteration   2: 0.287 ms/op
# Warmup Iteration   3: 0.293 ms/op
# Warmup Iteration   4: 0.272 ms/op
# Warmup Iteration   5: 0.359 ms/op
Iteration   1: 0.258 ms/op
Iteration   2: 0.271 ms/op
Iteration   3: 0.305 ms/op
Iteration   4: 0.384 ms/op
Iteration   5: 0.912 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.426 ±(99.9%) 1.064 ms/op [Average]
  (min, avg, max) = (0.258, 0.426, 0.912), stdev = 0.276
  CI (99.9%): [? 0, 1.490] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 83.01% complete, ETA 02:16:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.574 ms/op
# Warmup Iteration   2: 0.560 ms/op
# Warmup Iteration   3: 0.577 ms/op
# Warmup Iteration   4: 0.535 ms/op
# Warmup Iteration   5: 0.704 ms/op
Iteration   1: 0.506 ms/op
Iteration   2: 0.540 ms/op
Iteration   3: 0.606 ms/op
Iteration   4: 0.884 ms/op
Iteration   5: 1.660 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.839 ±(99.9%) 1.857 ms/op [Average]
  (min, avg, max) = (0.506, 0.839, 1.660), stdev = 0.482
  CI (99.9%): [? 0, 2.696] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 83.09% complete, ETA 02:15:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.578 ms/op
# Warmup Iteration   2: 0.570 ms/op
# Warmup Iteration   3: 0.580 ms/op
# Warmup Iteration   4: 0.539 ms/op
# Warmup Iteration   5: 0.700 ms/op
Iteration   1: 0.502 ms/op
Iteration   2: 0.542 ms/op
Iteration   3: 0.592 ms/op
Iteration   4: 0.973 ms/op
Iteration   5: 1.575 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.837 ±(99.9%) 1.746 ms/op [Average]
  (min, avg, max) = (0.502, 0.837, 1.575), stdev = 0.453
  CI (99.9%): [? 0, 2.582] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 83.17% complete, ETA 02:14:36
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.026 ms/op
Iteration   5: 0.077 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.024 ±(99.9%) 0.122 ms/op [Average]
  (min, avg, max) = (? 10??, 0.024, 0.077), stdev = 0.032
  CI (99.9%): [? 0, 0.146] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 83.25% complete, ETA 02:13:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.035 ms/op
Iteration   5: 
Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark-jmh-worker-1"

Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread "JMH-Shutdown-Timeout"
<binary link had failed, forked VM corrupted the stream? Use EXTRA verbose to print exception>
<forked VM failed with exit code 1>
<stdout last='20 lines'>
</stdout>
<stderr last='20 lines'>

Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark-jmh-worker-1"

Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread "JMH-Shutdown-Timeout"
</stderr>

# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 83.25% complete, ETA 02:13:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.018 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.005 ±(99.9%) 0.029 ms/op [Average]
  (min, avg, max) = (? 10??, 0.005, 0.018), stdev = 0.008
  CI (99.9%): [? 0, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 83.33% complete, ETA 02:13:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: 0.001 ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.015 ms/op [Average]
  (min, avg, max) = (? 10??, 0.003, 0.010), stdev = 0.004
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 83.41% complete, ETA 02:12:41
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: 0.001 ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 83.49% complete, ETA 02:11:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 83.57% complete, ETA 02:11:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 83.65% complete, ETA 02:10:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 83.73% complete, ETA 02:09:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 83.81% complete, ETA 02:09:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 83.89% complete, ETA 02:08:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 83.97% complete, ETA 02:07:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.002 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 84.05% complete, ETA 02:06:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.004 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 84.13% complete, ETA 02:06:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.003 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [? 0, 0.007] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 84.21% complete, ETA 02:05:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.005 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.017 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.008 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.004, 0.008, 0.017), stdev = 0.005
  CI (99.9%): [? 0, 0.027] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 84.29% complete, ETA 02:04:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.005 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.007 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.007 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.004, 0.007, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 84.38% complete, ETA 02:04:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.010 ms/op
# Warmup Iteration   2: 0.010 ms/op
# Warmup Iteration   3: 0.010 ms/op
# Warmup Iteration   4: 0.010 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.010 ms/op
Iteration   3: 0.013 ms/op
Iteration   4: 0.016 ms/op
Iteration   5: 0.016 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.013 ±(99.9%) 0.012 ms/op [Average]
  (min, avg, max) = (0.009, 0.013, 0.016), stdev = 0.003
  CI (99.9%): [0.001, 0.025] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 84.46% complete, ETA 02:03:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 ms/op
# Warmup Iteration   2: 0.009 ms/op
# Warmup Iteration   3: 0.008 ms/op
# Warmup Iteration   4: 0.009 ms/op
# Warmup Iteration   5: 0.010 ms/op
Iteration   1: 0.009 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.013 ±(99.9%) 0.021 ms/op [Average]
  (min, avg, max) = (0.008, 0.013, 0.022), stdev = 0.005
  CI (99.9%): [? 0, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 84.54% complete, ETA 02:02:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.019 ms/op
# Warmup Iteration   2: 0.021 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.020 ms/op
Iteration   2: 0.018 ms/op
Iteration   3: 0.030 ms/op
Iteration   4: 0.029 ms/op
Iteration   5: 0.032 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.026 ±(99.9%) 0.025 ms/op [Average]
  (min, avg, max) = (0.018, 0.026, 0.032), stdev = 0.007
  CI (99.9%): [? 10?³, 0.051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 84.62% complete, ETA 02:01:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.020 ms/op
# Warmup Iteration   2: 0.020 ms/op
# Warmup Iteration   3: 0.021 ms/op
# Warmup Iteration   4: 0.020 ms/op
# Warmup Iteration   5: 0.022 ms/op
Iteration   1: 0.019 ms/op
Iteration   2: 0.021 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.031 ms/op
Iteration   5: 0.029 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.025 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.019, 0.025, 0.031), stdev = 0.005
  CI (99.9%): [0.005, 0.046] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 84.70% complete, ETA 02:01:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.033 ms/op
# Warmup Iteration   2: 0.037 ms/op
# Warmup Iteration   3: 0.036 ms/op
# Warmup Iteration   4: 0.034 ms/op
# Warmup Iteration   5: 0.038 ms/op
Iteration   1: 0.033 ms/op
Iteration   2: 0.034 ms/op
Iteration   3: 0.046 ms/op
Iteration   4: 0.053 ms/op
Iteration   5: 0.099 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.053 ±(99.9%) 0.104 ms/op [Average]
  (min, avg, max) = (0.033, 0.053, 0.099), stdev = 0.027
  CI (99.9%): [? 0, 0.157] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 84.78% complete, ETA 02:00:28
# Fork: 1 of 1
# Warmup Iteration   1: 0.039 ms/op
# Warmup Iteration   2: 0.040 ms/op
# Warmup Iteration   3: 0.042 ms/op
# Warmup Iteration   4: 0.040 ms/op
# Warmup Iteration   5: 0.044 ms/op
Iteration   1: 0.038 ms/op
Iteration   2: 0.042 ms/op
Iteration   3: 0.055 ms/op
Iteration   4: 0.053 ms/op
Iteration   5: 0.063 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.050 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.038, 0.050, 0.063), stdev = 0.010
  CI (99.9%): [0.011, 0.090] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 84.86% complete, ETA 01:59:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.077 ms/op
# Warmup Iteration   2: 0.080 ms/op
# Warmup Iteration   3: 0.083 ms/op
# Warmup Iteration   4: 0.080 ms/op
# Warmup Iteration   5: 0.094 ms/op
Iteration   1: 0.083 ms/op
Iteration   2: 0.072 ms/op
Iteration   3: 0.127 ms/op
Iteration   4: 0.123 ms/op
Iteration   5: 0.110 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.103 ±(99.9%) 0.093 ms/op [Average]
  (min, avg, max) = (0.072, 0.103, 0.127), stdev = 0.024
  CI (99.9%): [0.010, 0.196] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 84.94% complete, ETA 01:59:03
# Fork: 1 of 1
# Warmup Iteration   1: 0.066 ms/op
# Warmup Iteration   2: 0.074 ms/op
# Warmup Iteration   3: 0.070 ms/op
# Warmup Iteration   4: 0.067 ms/op
# Warmup Iteration   5: 0.078 ms/op
Iteration   1: 0.067 ms/op
Iteration   2: 0.069 ms/op
Iteration   3: 0.094 ms/op
Iteration   4: 0.113 ms/op
Iteration   5: 0.229 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.115 ±(99.9%) 0.257 ms/op [Average]
  (min, avg, max) = (0.067, 0.115, 0.229), stdev = 0.067
  CI (99.9%): [? 0, 0.372] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 85.02% complete, ETA 01:58:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.159 ms/op
# Warmup Iteration   2: 0.165 ms/op
# Warmup Iteration   3: 0.169 ms/op
# Warmup Iteration   4: 0.166 ms/op
# Warmup Iteration   5: 0.188 ms/op
Iteration   1: 0.162 ms/op
Iteration   2: 0.146 ms/op
Iteration   3: 0.270 ms/op
Iteration   4: 0.236 ms/op
Iteration   5: 0.249 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.213 ±(99.9%) 0.212 ms/op [Average]
  (min, avg, max) = (0.146, 0.213, 0.270), stdev = 0.055
  CI (99.9%): [0.001, 0.425] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 85.10% complete, ETA 01:57:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.134 ms/op
# Warmup Iteration   2: 0.145 ms/op
# Warmup Iteration   3: 0.140 ms/op
# Warmup Iteration   4: 0.134 ms/op
# Warmup Iteration   5: 0.155 ms/op
Iteration   1: 0.133 ms/op
Iteration   2: 0.139 ms/op
Iteration   3: 0.198 ms/op
Iteration   4: 0.191 ms/op
Iteration   5: 0.289 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.190 ±(99.9%) 0.242 ms/op [Average]
  (min, avg, max) = (0.133, 0.190, 0.289), stdev = 0.063
  CI (99.9%): [? 0, 0.432] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 85.18% complete, ETA 01:56:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.297 ms/op
# Warmup Iteration   2: 0.328 ms/op
# Warmup Iteration   3: 0.327 ms/op
# Warmup Iteration   4: 0.315 ms/op
# Warmup Iteration   5: 0.354 ms/op
Iteration   1: 0.307 ms/op
Iteration   2: 0.324 ms/op
Iteration   3: 0.393 ms/op
Iteration   4: 0.445 ms/op
Iteration   5: 0.447 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.383 ±(99.9%) 0.255 ms/op [Average]
  (min, avg, max) = (0.307, 0.383, 0.447), stdev = 0.066
  CI (99.9%): [0.129, 0.638] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 85.26% complete, ETA 01:56:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.328 ms/op
# Warmup Iteration   2: 0.320 ms/op
# Warmup Iteration   3: 0.345 ms/op
# Warmup Iteration   4: 0.325 ms/op
# Warmup Iteration   5: 0.347 ms/op
Iteration   1: 0.331 ms/op
Iteration   2: 0.321 ms/op
Iteration   3: 0.472 ms/op
Iteration   4: 0.479 ms/op
Iteration   5: 0.464 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.413 ±(99.9%) 0.308 ms/op [Average]
  (min, avg, max) = (0.321, 0.413, 0.479), stdev = 0.080
  CI (99.9%): [0.105, 0.722] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 85.34% complete, ETA 01:55:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.551 ms/op
# Warmup Iteration   2: 0.555 ms/op
# Warmup Iteration   3: 0.509 ms/op
# Warmup Iteration   4: 0.622 ms/op
# Warmup Iteration   5: 0.512 ms/op
Iteration   1: 0.568 ms/op
Iteration   2: 0.569 ms/op
Iteration   3: 0.884 ms/op
Iteration   4: 1.255 ms/op
Iteration   5: 0.899 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.835 ±(99.9%) 1.099 ms/op [Average]
  (min, avg, max) = (0.568, 0.835, 1.255), stdev = 0.285
  CI (99.9%): [? 0, 1.934] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 85.42% complete, ETA 01:54:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.619 ms/op
# Warmup Iteration   2: 0.633 ms/op
# Warmup Iteration   3: 0.664 ms/op
# Warmup Iteration   4: 0.645 ms/op
# Warmup Iteration   5: 0.716 ms/op
Iteration   1: 0.616 ms/op
Iteration   2: 0.643 ms/op
Iteration   3: 0.849 ms/op
Iteration   4: 0.869 ms/op
Iteration   5: 0.958 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark":
  0.787 ±(99.9%) 0.577 ms/op [Average]
  (min, avg, max) = (0.616, 0.787, 0.958), stdev = 0.150
  CI (99.9%): [0.210, 1.364] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 85.50% complete, ETA 01:54:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 85.58% complete, ETA 01:53:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 85.66% complete, ETA 01:52:41
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 85.74% complete, ETA 01:51:58
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 85.82% complete, ETA 01:51:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 85.90% complete, ETA 01:50:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 85.98% complete, ETA 01:49:52
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 86.06% complete, ETA 01:49:10
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 86.14% complete, ETA 01:48:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 86.22% complete, ETA 01:47:46
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 86.30% complete, ETA 01:47:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 86.38% complete, ETA 01:46:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 86.46% complete, ETA 01:45:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 86.54% complete, ETA 01:44:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 86.62% complete, ETA 01:44:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 86.70% complete, ETA 01:43:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.004 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 86.78% complete, ETA 01:42:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.008 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 86.86% complete, ETA 01:42:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.009 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 86.94% complete, ETA 01:41:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.016 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.013, 0.016, 0.023), stdev = 0.005
  CI (99.9%): [? 0, 0.035] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 87.02% complete, ETA 01:40:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.016 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.022), stdev = 0.005
  CI (99.9%): [? 0, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 87.10% complete, ETA 01:40:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.024 ms/op
# Warmup Iteration   5: 0.024 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.023 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.031 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.023, 0.031, 0.043), stdev = 0.009
  CI (99.9%): [? 0, 0.066] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 87.18% complete, ETA 01:39:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.023 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.024 ms/op
Iteration   3: 0.027 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.039 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.031 ±(99.9%) 0.032 ms/op [Average]
  (min, avg, max) = (0.024, 0.031, 0.041), stdev = 0.008
  CI (99.9%): [? 0, 0.063] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 87.26% complete, ETA 01:38:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.061 ms/op
Iteration   4: 0.085 ms/op
Iteration   5: 0.089 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.066 ±(99.9%) 0.074 ms/op [Average]
  (min, avg, max) = (0.048, 0.066, 0.089), stdev = 0.019
  CI (99.9%): [? 0, 0.141] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 87.34% complete, ETA 01:38:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.058 ms/op
Iteration   4: 0.088 ms/op
Iteration   5: 0.079 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.065 ±(99.9%) 0.070 ms/op [Average]
  (min, avg, max) = (0.047, 0.065, 0.088), stdev = 0.018
  CI (99.9%): [? 0, 0.135] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 87.42% complete, ETA 01:37:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.095 ms/op
# Warmup Iteration   2: 0.092 ms/op
# Warmup Iteration   3: 0.093 ms/op
# Warmup Iteration   4: 0.093 ms/op
# Warmup Iteration   5: 0.092 ms/op
Iteration   1: 0.093 ms/op
Iteration   2: 0.092 ms/op
Iteration   3: 0.107 ms/op
Iteration   4: 0.166 ms/op
Iteration   5: 0.162 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.124 ±(99.9%) 0.143 ms/op [Average]
  (min, avg, max) = (0.092, 0.124, 0.166), stdev = 0.037
  CI (99.9%): [? 0, 0.267] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 87.50% complete, ETA 01:36:42
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.092 ms/op
# Warmup Iteration   3: 0.093 ms/op
# Warmup Iteration   4: 0.093 ms/op
# Warmup Iteration   5: 0.093 ms/op
Iteration   1: 0.094 ms/op
Iteration   2: 0.091 ms/op
Iteration   3: 0.103 ms/op
Iteration   4: 0.153 ms/op
Iteration   5: 0.151 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.118 ±(99.9%) 0.120 ms/op [Average]
  (min, avg, max) = (0.091, 0.118, 0.153), stdev = 0.031
  CI (99.9%): [? 0, 0.238] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 87.58% complete, ETA 01:36:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.189 ms/op
# Warmup Iteration   2: 0.182 ms/op
# Warmup Iteration   3: 0.184 ms/op
# Warmup Iteration   4: 0.186 ms/op
# Warmup Iteration   5: 0.183 ms/op
Iteration   1: 0.184 ms/op
Iteration   2: 0.183 ms/op
Iteration   3: 0.218 ms/op
Iteration   4: 0.277 ms/op
Iteration   5: 0.304 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.233 ±(99.9%) 0.212 ms/op [Average]
  (min, avg, max) = (0.183, 0.233, 0.304), stdev = 0.055
  CI (99.9%): [0.021, 0.445] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 87.66% complete, ETA 01:35:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.188 ms/op
# Warmup Iteration   2: 0.186 ms/op
# Warmup Iteration   3: 0.185 ms/op
# Warmup Iteration   4: 0.187 ms/op
# Warmup Iteration   5: 0.186 ms/op
Iteration   1: 0.186 ms/op
Iteration   2: 0.183 ms/op
Iteration   3: 0.218 ms/op
Iteration   4: 0.362 ms/op
Iteration   5: 0.342 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.258 ±(99.9%) 0.335 ms/op [Average]
  (min, avg, max) = (0.183, 0.258, 0.362), stdev = 0.087
  CI (99.9%): [? 0, 0.594] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 87.74% complete, ETA 01:34:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.382 ms/op
# Warmup Iteration   2: 0.372 ms/op
# Warmup Iteration   3: 0.377 ms/op
# Warmup Iteration   4: 0.370 ms/op
# Warmup Iteration   5: 0.379 ms/op
Iteration   1: 0.368 ms/op
Iteration   2: 0.364 ms/op
Iteration   3: 0.424 ms/op
Iteration   4: 0.605 ms/op
Iteration   5: 0.606 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.474 ±(99.9%) 0.474 ms/op [Average]
  (min, avg, max) = (0.364, 0.474, 0.606), stdev = 0.123
  CI (99.9%): [? 0, 0.947] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 87.82% complete, ETA 01:33:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.377 ms/op
# Warmup Iteration   2: 0.374 ms/op
# Warmup Iteration   3: 0.374 ms/op
# Warmup Iteration   4: 0.367 ms/op
# Warmup Iteration   5: 0.366 ms/op
Iteration   1: 0.374 ms/op
Iteration   2: 0.374 ms/op
Iteration   3: 0.435 ms/op
Iteration   4: 0.759 ms/op
Iteration   5: 0.675 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.523 ±(99.9%) 0.697 ms/op [Average]
  (min, avg, max) = (0.374, 0.523, 0.759), stdev = 0.181
  CI (99.9%): [? 0, 1.220] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 87.90% complete, ETA 01:33:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 87.98% complete, ETA 01:32:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 88.06% complete, ETA 01:31:56
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 88.14% complete, ETA 01:31:16
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 88.22% complete, ETA 01:30:35
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 88.30% complete, ETA 01:29:55
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 88.38% complete, ETA 01:29:14
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 88.46% complete, ETA 01:28:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 88.54% complete, ETA 01:27:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 88.62% complete, ETA 01:27:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 88.70% complete, ETA 01:26:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 88.78% complete, ETA 01:25:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 88.86% complete, ETA 01:25:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 88.94% complete, ETA 01:24:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 89.02% complete, ETA 01:23:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 89.10% complete, ETA 01:23:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.005 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [? 0, 0.008] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 89.18% complete, ETA 01:22:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.010 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.008 ±(99.9%) 0.008 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.010), stdev = 0.002
  CI (99.9%): [? 10??, 0.015] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 89.26% complete, ETA 01:21:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.008 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.012), stdev = 0.002
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 89.34% complete, ETA 01:21:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.022 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.017 ±(99.9%) 0.019 ms/op [Average]
  (min, avg, max) = (0.012, 0.017, 0.022), stdev = 0.005
  CI (99.9%): [? 0, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 89.42% complete, ETA 01:20:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.016 ±(99.9%) 0.018 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.021), stdev = 0.005
  CI (99.9%): [? 0, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 89.50% complete, ETA 01:19:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.040 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.033 ±(99.9%) 0.035 ms/op [Average]
  (min, avg, max) = (0.025, 0.033, 0.045), stdev = 0.009
  CI (99.9%): [? 0, 0.068] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 89.58% complete, ETA 01:19:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.026 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.041 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.034 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.025, 0.034, 0.046), stdev = 0.009
  CI (99.9%): [? 0, 0.070] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 89.66% complete, ETA 01:18:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.047 ms/op
# Warmup Iteration   3: 0.047 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.047 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.077 ms/op
Iteration   5: 0.079 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.061 ±(99.9%) 0.059 ms/op [Average]
  (min, avg, max) = (0.047, 0.061, 0.079), stdev = 0.015
  CI (99.9%): [0.002, 0.120] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 89.74% complete, ETA 01:17:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.047 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.060 ms/op
Iteration   4: 0.088 ms/op
Iteration   5: 0.092 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.068 ±(99.9%) 0.080 ms/op [Average]
  (min, avg, max) = (0.048, 0.068, 0.092), stdev = 0.021
  CI (99.9%): [? 0, 0.147] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 89.82% complete, ETA 01:17:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.095 ms/op
# Warmup Iteration   2: 0.093 ms/op
# Warmup Iteration   3: 0.093 ms/op
# Warmup Iteration   4: 0.092 ms/op
# Warmup Iteration   5: 0.092 ms/op
Iteration   1: 0.094 ms/op
Iteration   2: 0.093 ms/op
Iteration   3: 0.106 ms/op
Iteration   4: 0.178 ms/op
Iteration   5: 0.163 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.127 ±(99.9%) 0.156 ms/op [Average]
  (min, avg, max) = (0.093, 0.127, 0.178), stdev = 0.040
  CI (99.9%): [? 0, 0.283] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 89.90% complete, ETA 01:16:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.093 ms/op
# Warmup Iteration   2: 0.093 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.093 ms/op
# Warmup Iteration   5: 0.091 ms/op
Iteration   1: 0.092 ms/op
Iteration   2: 0.092 ms/op
Iteration   3: 0.105 ms/op
Iteration   4: 0.168 ms/op
Iteration   5: 0.158 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.123 ±(99.9%) 0.142 ms/op [Average]
  (min, avg, max) = (0.092, 0.123, 0.168), stdev = 0.037
  CI (99.9%): [? 0, 0.265] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 89.98% complete, ETA 01:15:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.186 ms/op
# Warmup Iteration   2: 0.184 ms/op
# Warmup Iteration   3: 0.181 ms/op
# Warmup Iteration   4: 0.181 ms/op
# Warmup Iteration   5: 0.183 ms/op
Iteration   1: 0.184 ms/op
Iteration   2: 0.182 ms/op
Iteration   3: 0.220 ms/op
Iteration   4: 0.309 ms/op
Iteration   5: 0.348 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.249 ±(99.9%) 0.292 ms/op [Average]
  (min, avg, max) = (0.182, 0.249, 0.348), stdev = 0.076
  CI (99.9%): [? 0, 0.540] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 90.06% complete, ETA 01:15:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.191 ms/op
# Warmup Iteration   2: 0.186 ms/op
# Warmup Iteration   3: 0.182 ms/op
# Warmup Iteration   4: 0.187 ms/op
# Warmup Iteration   5: 0.182 ms/op
Iteration   1: 0.181 ms/op
Iteration   2: 0.185 ms/op
Iteration   3: 0.210 ms/op
Iteration   4: 0.311 ms/op
Iteration   5: 0.323 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.242 ±(99.9%) 0.267 ms/op [Average]
  (min, avg, max) = (0.181, 0.242, 0.323), stdev = 0.069
  CI (99.9%): [? 0, 0.509] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 90.14% complete, ETA 01:14:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.379 ms/op
# Warmup Iteration   2: 0.365 ms/op
# Warmup Iteration   3: 0.368 ms/op
# Warmup Iteration   4: 0.364 ms/op
# Warmup Iteration   5: 0.373 ms/op
Iteration   1: 0.362 ms/op
Iteration   2: 0.364 ms/op
Iteration   3: 0.426 ms/op
Iteration   4: 0.664 ms/op
Iteration   5: 0.610 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.485 ±(99.9%) 0.548 ms/op [Average]
  (min, avg, max) = (0.362, 0.485, 0.664), stdev = 0.142
  CI (99.9%): [? 0, 1.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 90.22% complete, ETA 01:13:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.369 ms/op
# Warmup Iteration   2: 0.364 ms/op
# Warmup Iteration   3: 0.364 ms/op
# Warmup Iteration   4: 0.370 ms/op
# Warmup Iteration   5: 0.368 ms/op
Iteration   1: 0.365 ms/op
Iteration   2: 0.362 ms/op
Iteration   3: 0.436 ms/op
Iteration   4: 0.609 ms/op
Iteration   5: 0.691 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.493 ±(99.9%) 0.576 ms/op [Average]
  (min, avg, max) = (0.362, 0.493, 0.691), stdev = 0.150
  CI (99.9%): [? 0, 1.069] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 90.30% complete, ETA 01:13:20
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 90.38% complete, ETA 01:12:40
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 90.46% complete, ETA 01:12:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 90.54% complete, ETA 01:11:22
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 90.63% complete, ETA 01:10:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 90.71% complete, ETA 01:10:05
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 90.79% complete, ETA 01:09:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 90.87% complete, ETA 01:08:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 90.95% complete, ETA 01:08:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 91.03% complete, ETA 01:07:29
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 91.11% complete, ETA 01:06:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 91.19% complete, ETA 01:06:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 91.27% complete, ETA 01:05:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 91.35% complete, ETA 01:04:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 91.43% complete, ETA 01:04:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 91.51% complete, ETA 01:03:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.004 ms/op
# Warmup Iteration   2: 0.004 ms/op
# Warmup Iteration   3: 0.004 ms/op
# Warmup Iteration   4: 0.004 ms/op
# Warmup Iteration   5: 0.004 ms/op
Iteration   1: 0.004 ms/op
Iteration   2: 0.004 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.007 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [? 0, 0.011] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 91.59% complete, ETA 01:03:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.008 ms/op
# Warmup Iteration   5: 0.008 ms/op
Iteration   1: 0.008 ms/op
Iteration   2: 0.008 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.013 ms/op
Iteration   5: 0.013 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.011 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.008, 0.011, 0.013), stdev = 0.003
  CI (99.9%): [? 0, 0.021] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 91.67% complete, ETA 01:02:22
# Fork: 1 of 1
# Warmup Iteration   1: 0.007 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.014 ms/op
Iteration   5: 0.014 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.010 ±(99.9%) 0.013 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.014), stdev = 0.003
  CI (99.9%): [? 0, 0.023] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 91.75% complete, ETA 01:01:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.017 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.012, 0.017, 0.021), stdev = 0.004
  CI (99.9%): [? 0, 0.034] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 91.83% complete, ETA 01:01:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.012 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.016 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.023 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.017 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.012, 0.017, 0.023), stdev = 0.006
  CI (99.9%): [? 0, 0.039] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 91.91% complete, ETA 01:00:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.025 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.025 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.026 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.032 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.035 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.025, 0.035, 0.047), stdev = 0.010
  CI (99.9%): [? 0, 0.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 91.99% complete, ETA 00:59:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.034 ms/op
Iteration   4: 0.043 ms/op
Iteration   5: 0.045 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.035 ±(99.9%) 0.036 ms/op [Average]
  (min, avg, max) = (0.025, 0.035, 0.045), stdev = 0.009
  CI (99.9%): [? 0, 0.071] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 92.07% complete, ETA 00:59:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.050 ms/op
# Warmup Iteration   2: 0.050 ms/op
# Warmup Iteration   3: 0.049 ms/op
# Warmup Iteration   4: 0.049 ms/op
# Warmup Iteration   5: 0.050 ms/op
Iteration   1: 0.051 ms/op
Iteration   2: 0.054 ms/op
Iteration   3: 0.070 ms/op
Iteration   4: 0.095 ms/op
Iteration   5: 0.098 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.074 ±(99.9%) 0.085 ms/op [Average]
  (min, avg, max) = (0.051, 0.074, 0.098), stdev = 0.022
  CI (99.9%): [? 0, 0.159] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 92.15% complete, ETA 00:58:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.046 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.047 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.067 ms/op
Iteration   4: 0.078 ms/op
Iteration   5: 0.093 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.067 ±(99.9%) 0.075 ms/op [Average]
  (min, avg, max) = (0.047, 0.067, 0.093), stdev = 0.019
  CI (99.9%): [? 0, 0.142] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 92.23% complete, ETA 00:57:55
# Fork: 1 of 1
# Warmup Iteration   1: 0.101 ms/op
# Warmup Iteration   2: 0.100 ms/op
# Warmup Iteration   3: 0.100 ms/op
# Warmup Iteration   4: 0.098 ms/op
# Warmup Iteration   5: 0.098 ms/op
Iteration   1: 0.099 ms/op
Iteration   2: 0.101 ms/op
Iteration   3: 0.129 ms/op
Iteration   4: 0.186 ms/op
Iteration   5: 0.176 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.138 ±(99.9%) 0.158 ms/op [Average]
  (min, avg, max) = (0.099, 0.138, 0.186), stdev = 0.041
  CI (99.9%): [? 0, 0.296] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 92.31% complete, ETA 00:57:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.117 ms/op
# Warmup Iteration   2: 0.113 ms/op
# Warmup Iteration   3: 0.111 ms/op
# Warmup Iteration   4: 0.111 ms/op
# Warmup Iteration   5: 0.114 ms/op
Iteration   1: 0.111 ms/op
Iteration   2: 0.111 ms/op
Iteration   3: 0.142 ms/op
Iteration   4: 0.188 ms/op
Iteration   5: 0.196 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.149 ±(99.9%) 0.157 ms/op [Average]
  (min, avg, max) = (0.111, 0.149, 0.196), stdev = 0.041
  CI (99.9%): [? 0, 0.307] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 92.39% complete, ETA 00:56:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.208 ms/op
# Warmup Iteration   2: 0.203 ms/op
# Warmup Iteration   3: 0.202 ms/op
# Warmup Iteration   4: 0.197 ms/op
# Warmup Iteration   5: 0.197 ms/op
Iteration   1: 0.198 ms/op
Iteration   2: 0.197 ms/op
Iteration   3: 0.258 ms/op
Iteration   4: 0.350 ms/op
Iteration   5: 0.366 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.274 ±(99.9%) 0.311 ms/op [Average]
  (min, avg, max) = (0.197, 0.274, 0.366), stdev = 0.081
  CI (99.9%): [? 0, 0.585] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 92.47% complete, ETA 00:56:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.203 ms/op
# Warmup Iteration   2: 0.199 ms/op
# Warmup Iteration   3: 0.200 ms/op
# Warmup Iteration   4: 0.201 ms/op
# Warmup Iteration   5: 0.199 ms/op
Iteration   1: 0.196 ms/op
Iteration   2: 0.201 ms/op
Iteration   3: 0.243 ms/op
Iteration   4: 0.360 ms/op
Iteration   5: 0.344 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.269 ±(99.9%) 0.301 ms/op [Average]
  (min, avg, max) = (0.196, 0.269, 0.360), stdev = 0.078
  CI (99.9%): [? 0, 0.570] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 92.55% complete, ETA 00:55:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.413 ms/op
# Warmup Iteration   2: 0.403 ms/op
# Warmup Iteration   3: 0.397 ms/op
# Warmup Iteration   4: 0.396 ms/op
# Warmup Iteration   5: 0.392 ms/op
Iteration   1: 0.396 ms/op
Iteration   2: 0.395 ms/op
Iteration   3: 0.497 ms/op
Iteration   4: 0.686 ms/op
Iteration   5: 0.740 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.543 ±(99.9%) 0.623 ms/op [Average]
  (min, avg, max) = (0.395, 0.543, 0.740), stdev = 0.162
  CI (99.9%): [? 0, 1.166] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 10, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 92.63% complete, ETA 00:54:46
# Fork: 1 of 1
# Warmup Iteration   1: 0.376 ms/op
# Warmup Iteration   2: 0.367 ms/op
# Warmup Iteration   3: 0.366 ms/op
# Warmup Iteration   4: 0.363 ms/op
# Warmup Iteration   5: 0.362 ms/op
Iteration   1: 0.361 ms/op
Iteration   2: 0.366 ms/op
Iteration   3: 0.472 ms/op
Iteration   4: 0.635 ms/op
Iteration   5: 0.635 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.494 ±(99.9%) 0.525 ms/op [Average]
  (min, avg, max) = (0.361, 0.494, 0.635), stdev = 0.136
  CI (99.9%): [? 0, 1.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 2)

# Run progress: 92.71% complete, ETA 00:54:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1, nValues = 3)

# Run progress: 92.79% complete, ETA 00:53:30
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 2)

# Run progress: 92.87% complete, ETA 00:52:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2, nValues = 3)

# Run progress: 92.95% complete, ETA 00:52:15
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 2)

# Run progress: 93.03% complete, ETA 00:51:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4, nValues = 3)

# Run progress: 93.11% complete, ETA 00:51:00
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 2)

# Run progress: 93.19% complete, ETA 00:50:23
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8, nValues = 3)

# Run progress: 93.27% complete, ETA 00:49:45
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 2)

# Run progress: 93.35% complete, ETA 00:49:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16, nValues = 3)

# Run progress: 93.43% complete, ETA 00:48:31
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 2)

# Run progress: 93.51% complete, ETA 00:47:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 10??, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 32, nValues = 3)

# Run progress: 93.59% complete, ETA 00:47:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 2)

# Run progress: 93.67% complete, ETA 00:46:39
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 64, nValues = 3)

# Run progress: 93.75% complete, ETA 00:46:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 2)

# Run progress: 93.83% complete, ETA 00:45:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 128, nValues = 3)

# Run progress: 93.91% complete, ETA 00:44:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.004 ±(99.9%) 0.004 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 2)

# Run progress: 93.99% complete, ETA 00:44:11
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.009 ±(99.9%) 0.011 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 256, nValues = 3)

# Run progress: 94.07% complete, ETA 00:43:34
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.008 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.009 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.011), stdev = 0.003
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 2)

# Run progress: 94.15% complete, ETA 00:42:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.013 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.017 ±(99.9%) 0.017 ms/op [Average]
  (min, avg, max) = (0.013, 0.017, 0.021), stdev = 0.004
  CI (99.9%): [? 10??, 0.033] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 512, nValues = 3)

# Run progress: 94.23% complete, ETA 00:42:20
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.012 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.021 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.017 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.012, 0.017, 0.024), stdev = 0.005
  CI (99.9%): [? 0, 0.037] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 2)

# Run progress: 94.31% complete, ETA 00:41:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.026 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.047 ms/op
Iteration   5: 0.044 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.035 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.025, 0.035, 0.047), stdev = 0.010
  CI (99.9%): [? 0, 0.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 1024, nValues = 3)

# Run progress: 94.39% complete, ETA 00:41:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.024 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.026 ms/op
Iteration   3: 0.031 ms/op
Iteration   4: 0.048 ms/op
Iteration   5: 0.048 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.036 ±(99.9%) 0.045 ms/op [Average]
  (min, avg, max) = (0.025, 0.036, 0.048), stdev = 0.012
  CI (99.9%): [? 0, 0.080] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 2)

# Run progress: 94.47% complete, ETA 00:40:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.048 ms/op
# Warmup Iteration   3: 0.047 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.059 ms/op
Iteration   4: 0.100 ms/op
Iteration   5: 0.086 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.069 ±(99.9%) 0.089 ms/op [Average]
  (min, avg, max) = (0.049, 0.069, 0.100), stdev = 0.023
  CI (99.9%): [? 0, 0.157] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 2048, nValues = 3)

# Run progress: 94.55% complete, ETA 00:39:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.047 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.049 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.059 ms/op
Iteration   4: 0.079 ms/op
Iteration   5: 0.089 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.065 ±(99.9%) 0.069 ms/op [Average]
  (min, avg, max) = (0.049, 0.065, 0.089), stdev = 0.018
  CI (99.9%): [? 0, 0.134] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 2)

# Run progress: 94.63% complete, ETA 00:39:17
# Fork: 1 of 1
# Warmup Iteration   1: 0.095 ms/op
# Warmup Iteration   2: 0.095 ms/op
# Warmup Iteration   3: 0.092 ms/op
# Warmup Iteration   4: 0.091 ms/op
# Warmup Iteration   5: 0.092 ms/op
Iteration   1: 0.093 ms/op
Iteration   2: 0.092 ms/op
Iteration   3: 0.108 ms/op
Iteration   4: 0.160 ms/op
Iteration   5: 0.170 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.125 ±(99.9%) 0.144 ms/op [Average]
  (min, avg, max) = (0.092, 0.125, 0.170), stdev = 0.037
  CI (99.9%): [? 0, 0.269] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 4096, nValues = 3)

# Run progress: 94.71% complete, ETA 00:38:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.096 ms/op
# Warmup Iteration   2: 0.091 ms/op
# Warmup Iteration   3: 0.093 ms/op
# Warmup Iteration   4: 0.092 ms/op
# Warmup Iteration   5: 0.092 ms/op
Iteration   1: 0.094 ms/op
Iteration   2: 0.092 ms/op
Iteration   3: 0.108 ms/op
Iteration   4: 0.164 ms/op
Iteration   5: 0.167 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.125 ±(99.9%) 0.144 ms/op [Average]
  (min, avg, max) = (0.092, 0.125, 0.167), stdev = 0.037
  CI (99.9%): [? 0, 0.268] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 2)

# Run progress: 94.79% complete, ETA 00:38:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.188 ms/op
# Warmup Iteration   2: 0.185 ms/op
# Warmup Iteration   3: 0.183 ms/op
# Warmup Iteration   4: 0.184 ms/op
# Warmup Iteration   5: 0.184 ms/op
Iteration   1: 0.183 ms/op
Iteration   2: 0.187 ms/op
Iteration   3: 0.217 ms/op
Iteration   4: 0.347 ms/op
Iteration   5: 0.358 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.259 ±(99.9%) 0.334 ms/op [Average]
  (min, avg, max) = (0.183, 0.259, 0.358), stdev = 0.087
  CI (99.9%): [? 0, 0.592] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 8192, nValues = 3)

# Run progress: 94.87% complete, ETA 00:37:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.190 ms/op
# Warmup Iteration   2: 0.187 ms/op
# Warmup Iteration   3: 0.183 ms/op
# Warmup Iteration   4: 0.186 ms/op
# Warmup Iteration   5: 0.185 ms/op
Iteration   1: 0.186 ms/op
Iteration   2: 0.183 ms/op
Iteration   3: 0.213 ms/op
Iteration   4: 0.320 ms/op
Iteration   5: 0.329 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.246 ±(99.9%) 0.279 ms/op [Average]
  (min, avg, max) = (0.183, 0.246, 0.329), stdev = 0.073
  CI (99.9%): [? 0, 0.525] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 2)

# Run progress: 94.95% complete, ETA 00:36:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.383 ms/op
# Warmup Iteration   2: 0.367 ms/op
# Warmup Iteration   3: 0.366 ms/op
# Warmup Iteration   4: 0.367 ms/op
# Warmup Iteration   5: 0.371 ms/op
Iteration   1: 0.371 ms/op
Iteration   2: 0.371 ms/op
Iteration   3: 0.423 ms/op
Iteration   4: 0.675 ms/op
Iteration   5: 0.681 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.504 ±(99.9%) 0.617 ms/op [Average]
  (min, avg, max) = (0.371, 0.504, 0.681), stdev = 0.160
  CI (99.9%): [? 0, 1.121] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 32, nRestore = 16384, nValues = 3)

# Run progress: 95.03% complete, ETA 00:36:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.386 ms/op
# Warmup Iteration   2: 0.374 ms/op
# Warmup Iteration   3: 0.368 ms/op
# Warmup Iteration   4: 0.374 ms/op
# Warmup Iteration   5: 0.373 ms/op
Iteration   1: 0.374 ms/op
Iteration   2: 0.372 ms/op
Iteration   3: 0.439 ms/op
Iteration   4: 0.713 ms/op
Iteration   5: 0.701 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.520 ±(99.9%) 0.668 ms/op [Average]
  (min, avg, max) = (0.372, 0.520, 0.713), stdev = 0.173
  CI (99.9%): [? 0, 1.187] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 2)

# Run progress: 95.11% complete, ETA 00:35:38
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1, nValues = 3)

# Run progress: 95.19% complete, ETA 00:35:02
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 2)

# Run progress: 95.27% complete, ETA 00:34:26
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2, nValues = 3)

# Run progress: 95.35% complete, ETA 00:33:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 2)

# Run progress: 95.43% complete, ETA 00:33:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4, nValues = 3)

# Run progress: 95.51% complete, ETA 00:32:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 2)

# Run progress: 95.59% complete, ETA 00:32:01
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8, nValues = 3)

# Run progress: 95.67% complete, ETA 00:31:25
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 2)

# Run progress: 95.75% complete, ETA 00:30:49
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16, nValues = 3)

# Run progress: 95.83% complete, ETA 00:30:13
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 2)

# Run progress: 95.91% complete, ETA 00:29:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 32, nValues = 3)

# Run progress: 95.99% complete, ETA 00:29:01
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.002] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 2)

# Run progress: 96.07% complete, ETA 00:28:25
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 10??, 0.004] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 64, nValues = 3)

# Run progress: 96.15% complete, ETA 00:27:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 2)

# Run progress: 96.23% complete, ETA 00:27:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.006 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.010] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 128, nValues = 3)

# Run progress: 96.31% complete, ETA 00:26:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.004 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 2)

# Run progress: 96.39% complete, ETA 00:26:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.010 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.008 ±(99.9%) 0.009 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.011), stdev = 0.002
  CI (99.9%): [? 0, 0.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 256, nValues = 3)

# Run progress: 96.47% complete, ETA 00:25:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.006 ms/op
Iteration   3: 0.007 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.008 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.006, 0.008, 0.011), stdev = 0.003
  CI (99.9%): [? 0, 0.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 2)

# Run progress: 96.55% complete, ETA 00:24:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.011 ms/op
# Warmup Iteration   4: 0.012 ms/op
# Warmup Iteration   5: 0.012 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.014 ms/op
Iteration   4: 0.023 ms/op
Iteration   5: 0.022 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.017 ±(99.9%) 0.020 ms/op [Average]
  (min, avg, max) = (0.012, 0.017, 0.023), stdev = 0.005
  CI (99.9%): [? 0, 0.036] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 512, nValues = 3)

# Run progress: 96.63% complete, ETA 00:24:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.012 ms/op
# Warmup Iteration   2: 0.012 ms/op
# Warmup Iteration   3: 0.013 ms/op
# Warmup Iteration   4: 0.013 ms/op
# Warmup Iteration   5: 0.013 ms/op
Iteration   1: 0.013 ms/op
Iteration   2: 0.012 ms/op
Iteration   3: 0.015 ms/op
Iteration   4: 0.021 ms/op
Iteration   5: 0.020 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.016 ±(99.9%) 0.016 ms/op [Average]
  (min, avg, max) = (0.012, 0.016, 0.021), stdev = 0.004
  CI (99.9%): [? 10?³, 0.032] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 2)

# Run progress: 96.71% complete, ETA 00:23:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.024 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.025 ms/op
# Warmup Iteration   5: 0.025 ms/op
Iteration   1: 0.025 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.043 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.033 ±(99.9%) 0.038 ms/op [Average]
  (min, avg, max) = (0.025, 0.033, 0.045), stdev = 0.010
  CI (99.9%): [? 0, 0.071] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 1024, nValues = 3)

# Run progress: 96.79% complete, ETA 00:23:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.023 ms/op
# Warmup Iteration   2: 0.023 ms/op
# Warmup Iteration   3: 0.024 ms/op
# Warmup Iteration   4: 0.023 ms/op
# Warmup Iteration   5: 0.023 ms/op
Iteration   1: 0.024 ms/op
Iteration   2: 0.025 ms/op
Iteration   3: 0.029 ms/op
Iteration   4: 0.044 ms/op
Iteration   5: 0.046 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.033 ±(99.9%) 0.040 ms/op [Average]
  (min, avg, max) = (0.024, 0.033, 0.046), stdev = 0.010
  CI (99.9%): [? 0, 0.074] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 2)

# Run progress: 96.88% complete, ETA 00:22:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.047 ms/op
# Warmup Iteration   2: 0.047 ms/op
# Warmup Iteration   3: 0.046 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.046 ms/op
Iteration   1: 0.048 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.056 ms/op
Iteration   4: 0.096 ms/op
Iteration   5: 0.090 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.068 ±(99.9%) 0.089 ms/op [Average]
  (min, avg, max) = (0.048, 0.068, 0.096), stdev = 0.023
  CI (99.9%): [? 0, 0.157] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 2048, nValues = 3)

# Run progress: 96.96% complete, ETA 00:21:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.048 ms/op
# Warmup Iteration   2: 0.046 ms/op
# Warmup Iteration   3: 0.047 ms/op
# Warmup Iteration   4: 0.046 ms/op
# Warmup Iteration   5: 0.047 ms/op
Iteration   1: 0.050 ms/op
Iteration   2: 0.050 ms/op
Iteration   3: 0.060 ms/op
Iteration   4: 0.086 ms/op
Iteration   5: 0.085 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.066 ±(99.9%) 0.070 ms/op [Average]
  (min, avg, max) = (0.050, 0.066, 0.086), stdev = 0.018
  CI (99.9%): [? 0, 0.136] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 2)

# Run progress: 97.04% complete, ETA 00:21:19
# Fork: 1 of 1
# Warmup Iteration   1: 0.096 ms/op
# Warmup Iteration   2: 0.094 ms/op
# Warmup Iteration   3: 0.092 ms/op
# Warmup Iteration   4: 0.092 ms/op
# Warmup Iteration   5: 0.092 ms/op
Iteration   1: 0.093 ms/op
Iteration   2: 0.094 ms/op
Iteration   3: 0.113 ms/op
Iteration   4: 0.158 ms/op
Iteration   5: 0.170 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.125 ±(99.9%) 0.139 ms/op [Average]
  (min, avg, max) = (0.093, 0.125, 0.170), stdev = 0.036
  CI (99.9%): [? 0, 0.264] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 4096, nValues = 3)

# Run progress: 97.12% complete, ETA 00:20:43
# Fork: 1 of 1
# Warmup Iteration   1: 0.095 ms/op
# Warmup Iteration   2: 0.092 ms/op
# Warmup Iteration   3: 0.091 ms/op
# Warmup Iteration   4: 0.091 ms/op
# Warmup Iteration   5: 0.091 ms/op
Iteration   1: 0.092 ms/op
Iteration   2: 0.091 ms/op
Iteration   3: 0.104 ms/op
Iteration   4: 0.153 ms/op
Iteration   5: 0.157 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.119 ±(99.9%) 0.127 ms/op [Average]
  (min, avg, max) = (0.091, 0.119, 0.157), stdev = 0.033
  CI (99.9%): [? 0, 0.247] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 2)

# Run progress: 97.20% complete, ETA 00:20:08
# Fork: 1 of 1
# Warmup Iteration   1: 0.186 ms/op
# Warmup Iteration   2: 0.195 ms/op
# Warmup Iteration   3: 0.190 ms/op
# Warmup Iteration   4: 0.185 ms/op
# Warmup Iteration   5: 0.184 ms/op
Iteration   1: 0.181 ms/op
Iteration   2: 0.185 ms/op
Iteration   3: 0.228 ms/op
Iteration   4: 0.364 ms/op
Iteration   5: 0.301 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.252 ±(99.9%) 0.305 ms/op [Average]
  (min, avg, max) = (0.181, 0.252, 0.364), stdev = 0.079
  CI (99.9%): [? 0, 0.557] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 8192, nValues = 3)

# Run progress: 97.28% complete, ETA 00:19:33
# Fork: 1 of 1
# Warmup Iteration   1: 0.190 ms/op
# Warmup Iteration   2: 0.184 ms/op
# Warmup Iteration   3: 0.186 ms/op
# Warmup Iteration   4: 0.187 ms/op
# Warmup Iteration   5: 0.184 ms/op
Iteration   1: 0.184 ms/op
Iteration   2: 0.189 ms/op
Iteration   3: 0.232 ms/op
Iteration   4: 0.331 ms/op
Iteration   5: 0.359 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.259 ±(99.9%) 0.314 ms/op [Average]
  (min, avg, max) = (0.184, 0.259, 0.359), stdev = 0.082
  CI (99.9%): [? 0, 0.573] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 2)

# Run progress: 97.36% complete, ETA 00:18:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.383 ms/op
# Warmup Iteration   2: 0.369 ms/op
# Warmup Iteration   3: 0.369 ms/op
# Warmup Iteration   4: 0.367 ms/op
# Warmup Iteration   5: 0.371 ms/op
Iteration   1: 0.375 ms/op
Iteration   2: 0.367 ms/op
Iteration   3: 0.445 ms/op
Iteration   4: 0.675 ms/op
Iteration   5: 0.619 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.496 ±(99.9%) 0.549 ms/op [Average]
  (min, avg, max) = (0.367, 0.496, 0.675), stdev = 0.142
  CI (99.9%): [? 0, 1.044] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 1000, nRestore = 16384, nValues = 3)

# Run progress: 97.44% complete, ETA 00:18:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.373 ms/op
# Warmup Iteration   2: 0.370 ms/op
# Warmup Iteration   3: 0.370 ms/op
# Warmup Iteration   4: 0.368 ms/op
# Warmup Iteration   5: 0.367 ms/op
Iteration   1: 0.367 ms/op
Iteration   2: 0.371 ms/op
Iteration   3: 0.427 ms/op
Iteration   4: 0.696 ms/op
Iteration   5: 0.627 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.498 ±(99.9%) 0.591 ms/op [Average]
  (min, avg, max) = (0.367, 0.498, 0.696), stdev = 0.153
  CI (99.9%): [? 0, 1.089] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 2)

# Run progress: 97.52% complete, ETA 00:17:47
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1, nValues = 3)

# Run progress: 97.60% complete, ETA 00:17:12
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 2)

# Run progress: 97.68% complete, ETA 00:16:37
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2, nValues = 3)

# Run progress: 97.76% complete, ETA 00:16:03
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 2)

# Run progress: 97.84% complete, ETA 00:15:28
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4, nValues = 3)

# Run progress: 97.92% complete, ETA 00:14:53
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?? ms/op
Iteration   4: ? 10?? ms/op
Iteration   5: ? 10?? ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?? ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 2)

# Run progress: 98.00% complete, ETA 00:14:18
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8, nValues = 3)

# Run progress: 98.08% complete, ETA 00:13:43
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?? ms/op
# Warmup Iteration   2: ? 10?? ms/op
# Warmup Iteration   3: ? 10?? ms/op
# Warmup Iteration   4: ? 10?? ms/op
# Warmup Iteration   5: ? 10?? ms/op
Iteration   1: ? 10?? ms/op
Iteration   2: ? 10?? ms/op
Iteration   3: ? 10?³ ms/op
Iteration   4: ? 10?³ ms/op
Iteration   5: ? 10?³ ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  ? 10?³ ms/op


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 2)

# Run progress: 98.16% complete, ETA 00:13:08
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16, nValues = 3)

# Run progress: 98.24% complete, ETA 00:12:34
# Fork: 1 of 1
# Warmup Iteration   1: ? 10?³ ms/op
# Warmup Iteration   2: ? 10?³ ms/op
# Warmup Iteration   3: ? 10?³ ms/op
# Warmup Iteration   4: ? 10?³ ms/op
# Warmup Iteration   5: ? 10?³ ms/op
Iteration   1: ? 10?³ ms/op
Iteration   2: ? 10?³ ms/op
Iteration   3: 0.001 ms/op
Iteration   4: 0.001 ms/op
Iteration   5: 0.001 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (? 10?³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [? 0, 0.001] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 2)

# Run progress: 98.32% complete, ETA 00:11:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 32, nValues = 3)

# Run progress: 98.40% complete, ETA 00:11:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.001 ms/op
# Warmup Iteration   2: 0.001 ms/op
# Warmup Iteration   3: 0.001 ms/op
# Warmup Iteration   4: 0.001 ms/op
# Warmup Iteration   5: 0.001 ms/op
Iteration   1: 0.001 ms/op
Iteration   2: 0.001 ms/op
Iteration   3: 0.002 ms/op
Iteration   4: 0.002 ms/op
Iteration   5: 0.002 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.001 ±(99.9%) 0.002 ms/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [? 0, 0.003] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 2)

# Run progress: 98.48% complete, ETA 00:10:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.003 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.006] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 64, nValues = 3)

# Run progress: 98.56% complete, ETA 00:10:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.002 ms/op
# Warmup Iteration   2: 0.002 ms/op
# Warmup Iteration   3: 0.002 ms/op
# Warmup Iteration   4: 0.002 ms/op
# Warmup Iteration   5: 0.002 ms/op
Iteration   1: 0.002 ms/op
Iteration   2: 0.002 ms/op
Iteration   3: 0.003 ms/op
Iteration   4: 0.003 ms/op
Iteration   5: 0.003 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.002 ±(99.9%) 0.003 ms/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [? 0, 0.005] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 2)

# Run progress: 98.64% complete, ETA 00:09:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.005 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.004 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 128, nValues = 3)

# Run progress: 98.72% complete, ETA 00:09:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.003 ms/op
# Warmup Iteration   2: 0.003 ms/op
# Warmup Iteration   3: 0.003 ms/op
# Warmup Iteration   4: 0.003 ms/op
# Warmup Iteration   5: 0.003 ms/op
Iteration   1: 0.003 ms/op
Iteration   2: 0.003 ms/op
Iteration   3: 0.006 ms/op
Iteration   4: 0.006 ms/op
Iteration   5: 0.005 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.005 ±(99.9%) 0.005 ms/op [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [? 0, 0.009] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 2)

# Run progress: 98.80% complete, ETA 00:08:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.007 ms/op
# Warmup Iteration   3: 0.007 ms/op
# Warmup Iteration   4: 0.007 ms/op
# Warmup Iteration   5: 0.007 ms/op
Iteration   1: 0.007 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.012 ms/op
Iteration   4: 0.011 ms/op
Iteration   5: 0.012 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.010 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.007, 0.010, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.020] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 256, nValues = 3)

# Run progress: 98.88% complete, ETA 00:07:57
# Fork: 1 of 1
# Warmup Iteration   1: 0.006 ms/op
# Warmup Iteration   2: 0.006 ms/op
# Warmup Iteration   3: 0.006 ms/op
# Warmup Iteration   4: 0.006 ms/op
# Warmup Iteration   5: 0.006 ms/op
Iteration   1: 0.006 ms/op
Iteration   2: 0.007 ms/op
Iteration   3: 0.010 ms/op
Iteration   4: 0.012 ms/op
Iteration   5: 0.011 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.009 ±(99.9%) 0.010 ms/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.012), stdev = 0.003
  CI (99.9%): [? 0, 0.019] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 2)

# Run progress: 98.96% complete, ETA 00:07:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.013 ms/op
# Warmup Iteration   2: 0.013 ms/op
# Warmup Iteration   3: 0.014 ms/op
# Warmup Iteration   4: 0.014 ms/op
# Warmup Iteration   5: 0.014 ms/op
Iteration   1: 0.014 ms/op
Iteration   2: 0.014 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.024 ms/op
Iteration   5: 0.024 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.020 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.014, 0.020, 0.025), stdev = 0.006
  CI (99.9%): [? 0, 0.042] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 512, nValues = 3)

# Run progress: 99.04% complete, ETA 00:06:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.015 ms/op
# Warmup Iteration   2: 0.015 ms/op
# Warmup Iteration   3: 0.015 ms/op
# Warmup Iteration   4: 0.015 ms/op
# Warmup Iteration   5: 0.015 ms/op
Iteration   1: 0.015 ms/op
Iteration   2: 0.015 ms/op
Iteration   3: 0.025 ms/op
Iteration   4: 0.027 ms/op
Iteration   5: 0.025 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.021 ±(99.9%) 0.022 ms/op [Average]
  (min, avg, max) = (0.015, 0.021, 0.027), stdev = 0.006
  CI (99.9%): [? 0, 0.043] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 2)

# Run progress: 99.12% complete, ETA 00:06:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 ms/op
# Warmup Iteration   2: 0.029 ms/op
# Warmup Iteration   3: 0.028 ms/op
# Warmup Iteration   4: 0.029 ms/op
# Warmup Iteration   5: 0.030 ms/op
Iteration   1: 0.030 ms/op
Iteration   2: 0.031 ms/op
Iteration   3: 0.051 ms/op
Iteration   4: 0.045 ms/op
Iteration   5: 0.050 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.041 ±(99.9%) 0.039 ms/op [Average]
  (min, avg, max) = (0.030, 0.041, 0.051), stdev = 0.010
  CI (99.9%): [0.003, 0.080] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 1024, nValues = 3)

# Run progress: 99.20% complete, ETA 00:05:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.026 ms/op
# Warmup Iteration   2: 0.025 ms/op
# Warmup Iteration   3: 0.026 ms/op
# Warmup Iteration   4: 0.027 ms/op
# Warmup Iteration   5: 0.033 ms/op
Iteration   1: 0.028 ms/op
Iteration   2: 0.027 ms/op
Iteration   3: 0.044 ms/op
Iteration   4: 0.050 ms/op
Iteration   5: 0.047 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.039 ±(99.9%) 0.042 ms/op [Average]
  (min, avg, max) = (0.027, 0.039, 0.050), stdev = 0.011
  CI (99.9%): [? 0, 0.081] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 2)

# Run progress: 99.28% complete, ETA 00:05:06
# Fork: 1 of 1
# Warmup Iteration   1: 0.058 ms/op
# Warmup Iteration   2: 0.056 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.056 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.055 ms/op
Iteration   2: 0.060 ms/op
Iteration   3: 0.097 ms/op
Iteration   4: 0.105 ms/op
Iteration   5: 0.106 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.085 ±(99.9%) 0.096 ms/op [Average]
  (min, avg, max) = (0.055, 0.085, 0.106), stdev = 0.025
  CI (99.9%): [? 0, 0.181] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 2048, nValues = 3)

# Run progress: 99.36% complete, ETA 00:04:32
# Fork: 1 of 1
# Warmup Iteration   1: 0.059 ms/op
# Warmup Iteration   2: 0.057 ms/op
# Warmup Iteration   3: 0.057 ms/op
# Warmup Iteration   4: 0.057 ms/op
# Warmup Iteration   5: 0.057 ms/op
Iteration   1: 0.056 ms/op
Iteration   2: 0.059 ms/op
Iteration   3: 0.102 ms/op
Iteration   4: 0.100 ms/op
Iteration   5: 0.104 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.084 ±(99.9%) 0.093 ms/op [Average]
  (min, avg, max) = (0.056, 0.084, 0.104), stdev = 0.024
  CI (99.9%): [? 0, 0.177] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 2)

# Run progress: 99.44% complete, ETA 00:03:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.115 ms/op
# Warmup Iteration   2: 0.114 ms/op
# Warmup Iteration   3: 0.111 ms/op
# Warmup Iteration   4: 0.111 ms/op
# Warmup Iteration   5: 0.113 ms/op
Iteration   1: 0.111 ms/op
Iteration   2: 0.113 ms/op
Iteration   3: 0.229 ms/op
Iteration   4: 0.202 ms/op
Iteration   5: 0.203 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.172 ±(99.9%) 0.214 ms/op [Average]
  (min, avg, max) = (0.111, 0.172, 0.229), stdev = 0.056
  CI (99.9%): [? 0, 0.386] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 4096, nValues = 3)

# Run progress: 99.52% complete, ETA 00:03:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.097 ms/op
# Warmup Iteration   2: 0.093 ms/op
# Warmup Iteration   3: 0.092 ms/op
# Warmup Iteration   4: 0.091 ms/op
# Warmup Iteration   5: 0.093 ms/op
Iteration   1: 0.091 ms/op
Iteration   2: 0.096 ms/op
Iteration   3: 0.172 ms/op
Iteration   4: 0.159 ms/op
Iteration   5: 0.156 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.135 ±(99.9%) 0.148 ms/op [Average]
  (min, avg, max) = (0.091, 0.135, 0.172), stdev = 0.038
  CI (99.9%): [? 0, 0.282] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 2)

# Run progress: 99.60% complete, ETA 00:02:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.233 ms/op
# Warmup Iteration   2: 0.225 ms/op
# Warmup Iteration   3: 0.232 ms/op
# Warmup Iteration   4: 0.227 ms/op
# Warmup Iteration   5: 0.228 ms/op
Iteration   1: 0.234 ms/op
Iteration   2: 0.232 ms/op
Iteration   3: 0.387 ms/op
Iteration   4: 0.422 ms/op
Iteration   5: 0.378 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.330 ±(99.9%) 0.349 ms/op [Average]
  (min, avg, max) = (0.232, 0.330, 0.422), stdev = 0.091
  CI (99.9%): [? 0, 0.680] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 8192, nValues = 3)

# Run progress: 99.68% complete, ETA 00:02:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.235 ms/op
# Warmup Iteration   2: 0.230 ms/op
# Warmup Iteration   3: 0.223 ms/op
# Warmup Iteration   4: 0.226 ms/op
# Warmup Iteration   5: 0.228 ms/op
Iteration   1: 0.225 ms/op
Iteration   2: 0.223 ms/op
Iteration   3: 0.384 ms/op
Iteration   4: 0.394 ms/op
Iteration   5: 0.409 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.327 ±(99.9%) 0.365 ms/op [Average]
  (min, avg, max) = (0.223, 0.327, 0.409), stdev = 0.095
  CI (99.9%): [? 0, 0.692] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 2)

# Run progress: 99.76% complete, ETA 00:01:41
# Fork: 1 of 1
# Warmup Iteration   1: 0.465 ms/op
# Warmup Iteration   2: 0.448 ms/op
# Warmup Iteration   3: 0.444 ms/op
# Warmup Iteration   4: 0.445 ms/op
# Warmup Iteration   5: 0.445 ms/op
Iteration   1: 0.443 ms/op
Iteration   2: 0.451 ms/op
Iteration   3: 0.800 ms/op
Iteration   4: 0.775 ms/op
Iteration   5: 0.835 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.661 ±(99.9%) 0.756 ms/op [Average]
  (min, avg, max) = (0.443, 0.661, 0.835), stdev = 0.196
  CI (99.9%): [? 0, 1.417] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8
# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=GB -Duser.language=en -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark
# Parameters: (nCommit = 100, nKeys = 100000, nRestore = 16384, nValues = 3)

# Run progress: 99.84% complete, ETA 00:01:07
# Fork: 1 of 1
# Warmup Iteration   1: 0.376 ms/op
# Warmup Iteration   2: 0.363 ms/op
# Warmup Iteration   3: 0.371 ms/op
# Warmup Iteration   4: 0.369 ms/op
# Warmup Iteration   5: 0.367 ms/op
Iteration   1: 0.361 ms/op
Iteration   2: 0.387 ms/op
Iteration   3: 0.664 ms/op
Iteration   4: 0.611 ms/op
Iteration   5: 0.648 ms/op


Result "tools.refinery.store.map.benchmarks.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark":
  0.535 ±(99.9%) 0.570 ms/op [Average]
  (min, avg, max) = (0.361, 0.535, 0.664), stdev = 0.148
  CI (99.9%): [? 0, 1.104] (assumes normal distribution)


# Run complete. Total time: 11:44:22

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         (nCommit)  (nGetDiffCursor)  (nKeys)  (nRestore)  (nValues)  Mode  Cnt       Score       Error  Units
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                16       32         N/A          2  avgt    5       0.029 ±     0.035  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                16       32         N/A          3  avgt    5       0.032 ±     0.045  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                16     1000         N/A          2  avgt    5       0.952 ±     1.136  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                16     1000         N/A          3  avgt    5       0.872 ±     0.970  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                16   100000         N/A          2  avgt    5     141.012 ±   140.884  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                16   100000         N/A          3  avgt    5     147.104 ±   166.018  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                32       32         N/A          2  avgt    5       0.063 ±     0.076  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                32       32         N/A          3  avgt    5       0.064 ±     0.085  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                32     1000         N/A          2  avgt    5       1.907 ±     2.744  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                32     1000         N/A          3  avgt    5       1.846 ±     2.226  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                32   100000         N/A          2  avgt    5     282.396 ±   264.535  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                32   100000         N/A          3  avgt    5     297.042 ±   319.505  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                64       32         N/A          2  avgt    5       0.126 ±     0.161  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                64       32         N/A          3  avgt    5       0.122 ±     0.138  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                64     1000         N/A          2  avgt    5       3.545 ±     3.985  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                64     1000         N/A          3  avgt    5       3.558 ±     4.088  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                64   100000         N/A          2  avgt    5     665.170 ±   419.180  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10                64   100000         N/A          3  avgt    5     631.350 ±   469.250  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               128       32         N/A          2  avgt    5       0.247 ±     0.322  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               128       32         N/A          3  avgt    5       0.250 ±     0.341  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               128     1000         N/A          2  avgt    5       7.152 ±     8.028  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               128     1000         N/A          3  avgt    5       7.053 ±     7.161  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               128   100000         N/A          2  avgt    5    1290.278 ±   235.784  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               128   100000         N/A          3  avgt    5    1324.778 ±   298.834  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               256       32         N/A          2  avgt    5       0.504 ±     0.670  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               256       32         N/A          3  avgt    5       0.484 ±     0.622  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               256     1000         N/A          2  avgt    5      14.259 ±    14.268  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               256     1000         N/A          3  avgt    5      14.125 ±    14.170  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               256   100000         N/A          2  avgt    5    2758.577 ±   739.270  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               256   100000         N/A          3  avgt    5    2858.401 ±   327.428  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               512       32         N/A          2  avgt    5       1.033 ±     1.292  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               512       32         N/A          3  avgt    5       0.974 ±     1.233  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               512     1000         N/A          2  avgt    5      31.000 ±    40.783  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               512     1000         N/A          3  avgt    5      29.600 ±    39.259  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               512   100000         N/A          2  avgt    5    5622.392 ±   496.037  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10               512   100000         N/A          3  avgt    5    5431.894 ±   542.334  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              1024       32         N/A          2  avgt    5       2.044 ±     2.719  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              1024       32         N/A          3  avgt    5       2.022 ±     2.704  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              1024     1000         N/A          2  avgt    5      59.155 ±    76.117  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              1024     1000         N/A          3  avgt    5      60.907 ±    75.140  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              1024   100000         N/A          2  avgt    5   11592.765 ±   962.721  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              1024   100000         N/A          3  avgt    5   10949.710 ±   826.502  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              2048       32         N/A          2  avgt    5       4.210 ±     6.105  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              2048       32         N/A          3  avgt    5       4.107 ±     5.632  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              2048     1000         N/A          2  avgt    5     125.407 ±   149.815  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              2048     1000         N/A          3  avgt    5     122.407 ±   150.786  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              2048   100000         N/A          2  avgt    5   22478.148 ±   538.932  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              2048   100000         N/A          3  avgt    5   22404.317 ±  1037.195  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              4096       32         N/A          2  avgt    5       8.478 ±    11.520  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              4096       32         N/A          3  avgt    5       8.335 ±    11.824  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              4096     1000         N/A          2  avgt    5     256.296 ±   327.578  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              4096     1000         N/A          3  avgt    5     259.770 ±   319.600  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              4096   100000         N/A          2  avgt    5   44174.388 ±  2258.595  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              4096   100000         N/A          3  avgt    5   43918.747 ±  1226.032  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              8192       32         N/A          2  avgt    5      16.617 ±    24.278  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              8192       32         N/A          3  avgt    5      17.398 ±    26.882  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              8192     1000         N/A          2  avgt    5     584.367 ±   553.853  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              8192     1000         N/A          3  avgt    5     520.606 ±   631.682  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              8192   100000         N/A          2  avgt    5   91838.277 ±  4461.822  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10              8192   100000         N/A          3  avgt    5   84899.691 ±  1828.866  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10             16384       32         N/A          2  avgt    5      32.928 ±    34.675  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10             16384       32         N/A          3  avgt    5      33.736 ±    45.534  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10             16384     1000         N/A          2  avgt    5    1146.469 ±   774.977  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10             16384     1000         N/A          3  avgt    5    1165.054 ±   786.568  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10             16384   100000         N/A          2  avgt    5  173153.937 ± 11309.788  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark          10             16384   100000         N/A          3  avgt    5  168353.178 ±  2655.920  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                16       32         N/A          2  avgt    5       0.032 ±     0.036  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                16       32         N/A          3  avgt    5       0.029 ±     0.037  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                16     1000         N/A          2  avgt    5       0.911 ±     1.020  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                16     1000         N/A          3  avgt    5       0.964 ±     1.138  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                16   100000         N/A          2  avgt    5     148.130 ±   140.454  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                16   100000         N/A          3  avgt    5     145.003 ±   103.254  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                32       32         N/A          2  avgt    5       0.063 ±     0.080  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                32       32         N/A          3  avgt    5       0.063 ±     0.081  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                32     1000         N/A          2  avgt    5       1.858 ±     2.064  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                32     1000         N/A          3  avgt    5       1.885 ±     2.016  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                32   100000         N/A          2  avgt    5     291.999 ±   219.543  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                32   100000         N/A          3  avgt    5     288.462 ±   198.522  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                64       32         N/A          2  avgt    5       0.126 ±     0.169  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                64       32         N/A          3  avgt    5       0.122 ±     0.139  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                64     1000         N/A          2  avgt    5       3.686 ±     4.371  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                64     1000         N/A          3  avgt    5       3.701 ±     4.193  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                64   100000         N/A          2  avgt    5     671.949 ±   281.612  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100                64   100000         N/A          3  avgt    5     630.488 ±   226.406  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               128       32         N/A          2  avgt    5       0.260 ±     0.352  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               128       32         N/A          3  avgt    5       0.242 ±     0.301  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               128     1000         N/A          2  avgt    5       7.570 ±     9.219  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               128     1000         N/A          3  avgt    5       7.766 ±     9.653  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               128   100000         N/A          2  avgt    5    1314.962 ±   245.266  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               128   100000         N/A          3  avgt    5    1348.311 ±   392.225  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               256       32         N/A          2  avgt    5       0.477 ±     0.598  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               256       32         N/A          3  avgt    5       0.496 ±     0.645  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               256     1000         N/A          2  avgt    5      15.109 ±    18.053  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               256     1000         N/A          3  avgt    5      15.206 ±    18.172  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               256   100000         N/A          2  avgt    5    2658.426 ±   510.834  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               256   100000         N/A          3  avgt    5    2583.316 ±   519.914  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               512       32         N/A          2  avgt    5       1.008 ±     1.259  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               512       32         N/A          3  avgt    5       0.979 ±     1.149  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               512     1000         N/A          2  avgt    5      30.502 ±    37.482  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               512     1000         N/A          3  avgt    5      29.677 ±    32.407  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               512   100000         N/A          2  avgt    5    5627.809 ±   538.752  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100               512   100000         N/A          3  avgt    5    6241.731 ±  2552.847  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              1024       32         N/A          2  avgt    5       2.024 ±     2.562  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              1024       32         N/A          3  avgt    5       1.943 ±     2.414  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              1024     1000         N/A          2  avgt    5      63.946 ±    84.680  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              1024     1000         N/A          3  avgt    5      59.174 ±    66.745  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              1024   100000         N/A          2  avgt    5   11669.791 ±   729.072  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              1024   100000         N/A          3  avgt    5   13331.498 ±  3052.809  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              2048       32         N/A          2  avgt    5       4.322 ±     5.049  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              2048       32         N/A          3  avgt    5       4.166 ±     4.522  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              2048     1000         N/A          2  avgt    5     123.065 ±   132.090  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              2048     1000         N/A          3  avgt    5     121.274 ±   120.166  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              2048   100000         N/A          2  avgt    5   27758.424 ± 10131.301  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              2048   100000         N/A          3  avgt    5   24872.482 ±  5458.534  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              4096       32         N/A          2  avgt    5       8.236 ±    10.282  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              4096       32         N/A          3  avgt    5       7.447 ±     8.033  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              4096     1000         N/A          2  avgt    5     251.377 ±   302.519  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              4096     1000         N/A          3  avgt    5     247.550 ±   282.349  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              4096   100000         N/A          2  avgt    5   51477.222 ± 28763.165  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              4096   100000         N/A          3  avgt    5   50398.437 ± 18369.507  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              8192       32         N/A          2  avgt    5      15.921 ±    18.587  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              8192       32         N/A          3  avgt    5      15.311 ±    17.786  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              8192     1000         N/A          2  avgt    5     461.430 ±   417.930  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              8192     1000         N/A          3  avgt    5     480.110 ±   469.678  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              8192   100000         N/A          2  avgt    5  103905.166 ± 46707.268  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100              8192   100000         N/A          3  avgt    5  103786.750 ± 12659.691  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100             16384       32         N/A          2  avgt    5      30.543 ±    30.744  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100             16384       32         N/A          3  avgt    5      29.302 ±    30.503  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100             16384     1000         N/A          2  avgt    5    1079.040 ±   218.231  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100             16384     1000         N/A          3  avgt    5    1003.931 ±   492.644  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100             16384   100000         N/A          2  avgt    5  207315.430 ± 37517.240  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorAndCommitBenchmark         100             16384   100000         N/A          3  avgt    5  199911.845 ± 18911.291  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                16       32         N/A          2  avgt    5       0.028 ±     0.031  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                16       32         N/A          3  avgt    5       0.029 ±     0.039  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                16     1000         N/A          2  avgt    5       2.208 ±     3.211  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                16     1000         N/A          3  avgt    5       1.815 ±     3.340  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                16   100000         N/A          2  avgt    5     302.812 ±   311.717  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                16   100000         N/A          3  avgt    5     235.226 ±   263.251  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                32       32         N/A          2  avgt    5       0.105 ±     0.161  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                32       32         N/A          3  avgt    5       0.060 ±     0.054  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                32     1000         N/A          2  avgt    5       1.727 ±     1.939  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                32     1000         N/A          3  avgt    5       1.698 ±     1.927  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                32   100000         N/A          2  avgt    5     294.557 ±   321.149  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                32   100000         N/A          3  avgt    5     292.159 ±   296.354  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                64       32         N/A          2  avgt    5       0.131 ±     0.184  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                64       32         N/A          3  avgt    5       0.124 ±     0.163  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                64     1000         N/A          2  avgt    5       3.332 ±     3.097  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                64     1000         N/A          3  avgt    5       3.581 ±     4.700  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                64   100000         N/A          2  avgt    5     655.504 ±   552.996  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10                64   100000         N/A          3  avgt    5     650.985 ±   301.694  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               128       32         N/A          2  avgt    5       0.273 ±     0.237  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               128       32         N/A          3  avgt    5       0.385 ±     0.222  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               128     1000         N/A          2  avgt    5       8.606 ±     7.293  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               128     1000         N/A          3  avgt    5       9.976 ±    11.715  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               128   100000         N/A          2  avgt    5    1439.351 ±   317.830  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               128   100000         N/A          3  avgt    5    1375.342 ±   172.710  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               256       32         N/A          2  avgt    5       0.506 ±     0.626  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               256       32         N/A          3  avgt    5       0.479 ±     0.452  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               256     1000         N/A          2  avgt    5      15.840 ±    22.922  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               256     1000         N/A          3  avgt    5      13.920 ±    15.126  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               256   100000         N/A          2  avgt    5    2665.207 ±   164.254  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               256   100000         N/A          3  avgt    5    2676.126 ±   277.740  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               512       32         N/A          2  avgt    5       1.493 ±     3.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               512       32         N/A          3  avgt    5       1.962 ±     3.683  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               512     1000         N/A          2  avgt    5      87.065 ±    46.920  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               512     1000         N/A          3  avgt    5      59.151 ±    50.280  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               512   100000         N/A          2  avgt    5    5356.888 ±   612.277  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10               512   100000         N/A          3  avgt    5    4974.436 ±   599.241  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              1024       32         N/A          2  avgt    5       1.925 ±     2.193  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              1024       32         N/A          3  avgt    5       2.020 ±     2.734  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              1024     1000         N/A          2  avgt    5      58.994 ±    73.243  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              1024     1000         N/A          3  avgt    5      55.910 ±    63.435  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              1024   100000         N/A          2  avgt    5   10753.770 ±  1009.780  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              1024   100000         N/A          3  avgt    5   11094.412 ±  1307.035  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              2048       32         N/A          2  avgt    5       4.305 ±     4.899  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              2048       32         N/A          3  avgt    5       4.029 ±     4.591  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              2048     1000         N/A          2  avgt    5     132.667 ±   153.250  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              2048     1000         N/A          3  avgt    5     127.553 ±   129.161  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              2048   100000         N/A          2  avgt    5   23874.251 ± 23344.492  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              2048   100000         N/A          3  avgt    5   20802.929 ±  5510.920  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              4096       32         N/A          2  avgt    5       6.669 ±     0.144  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              4096       32         N/A          3  avgt    5       6.434 ±     0.247  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              4096     1000         N/A          2  avgt    5     191.773 ±     5.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              4096     1000         N/A          3  avgt    5     193.609 ±     4.244  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              4096   100000         N/A          2  avgt    5   37520.419 ± 13894.525  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              4096   100000         N/A          3  avgt    5   35852.583 ±  8771.076  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              8192       32         N/A          2  avgt    5      13.291 ±     0.763  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              8192       32         N/A          3  avgt    5      13.289 ±     1.070  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              8192     1000         N/A          2  avgt    5     448.295 ±    64.763  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              8192     1000         N/A          3  avgt    5     464.649 ±    95.404  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              8192   100000         N/A          2  avgt    5   73396.324 ± 21649.863  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10              8192   100000         N/A          3  avgt    5   75479.392 ± 22006.099  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10             16384       32         N/A          2  avgt    5      27.477 ±     1.703  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10             16384       32         N/A          3  avgt    5      28.769 ±     5.669  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10             16384     1000         N/A          2  avgt    5     856.911 ±   127.542  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10             16384     1000         N/A          3  avgt    5     933.242 ±    69.253  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10             16384   100000         N/A          2  avgt    5  204687.790 ± 66616.052  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                   10             16384   100000         N/A          3  avgt    5  182975.915 ± 38085.282  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                16       32         N/A          2  avgt    5       0.030 ±     0.028  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                16       32         N/A          3  avgt    5       0.036 ±     0.048  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                16     1000         N/A          2  avgt    5       1.127 ±     1.173  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                16     1000         N/A          3  avgt    5       1.192 ±     1.354  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                16   100000         N/A          2  avgt    5     245.344 ±   236.031  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                16   100000         N/A          3  avgt    5     294.373 ±   192.938  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                32       32         N/A          2  avgt    5       0.089 ±     0.075  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                32       32         N/A          3  avgt    5       0.078 ±     0.099  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                32     1000         N/A          2  avgt    5       2.191 ±     2.231  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                32     1000         N/A          3  avgt    5       2.462 ±     2.715  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                32   100000         N/A          2  avgt    5     426.806 ±   262.974  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                32   100000         N/A          3  avgt    5     381.457 ±   446.060  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                64       32         N/A          2  avgt    5       0.140 ±     0.139  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                64       32         N/A          3  avgt    5       0.152 ±     0.166  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                64     1000         N/A          2  avgt    5       4.722 ±     5.588  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                64     1000         N/A          3  avgt    5       5.132 ±     5.236  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                64   100000         N/A          2  avgt    5    1005.145 ±   589.614  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100                64   100000         N/A          3  avgt    5     961.838 ±   735.365  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               128       32         N/A          2  avgt    5       0.269 ±     0.242  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               128       32         N/A          3  avgt    5       0.283 ±     0.328  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               128     1000         N/A          2  avgt    5       8.476 ±     7.945  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               128     1000         N/A          3  avgt    5       9.955 ±    10.424  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               128   100000         N/A          2  avgt    5    2022.888 ±   895.376  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               128   100000         N/A          3  avgt    5    2332.545 ±   559.336  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               256       32         N/A          2  avgt    5       0.744 ±     0.482  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               256       32         N/A          3  avgt    5       0.652 ±     0.792  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               256     1000         N/A          2  avgt    5      17.306 ±    17.465  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               256     1000         N/A          3  avgt    5      16.553 ±    17.784  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               256   100000         N/A          2  avgt    5    2906.836 ±   680.438  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               256   100000         N/A          3  avgt    5    2835.531 ±   631.453  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               512       32         N/A          2  avgt    5       1.086 ±     1.154  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               512       32         N/A          3  avgt    5       1.212 ±     1.389  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               512     1000         N/A          2  avgt    5      36.475 ±    27.617  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               512     1000         N/A          3  avgt    5      35.867 ±    35.838  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               512   100000         N/A          2  avgt    5    9432.003 ±  5491.223  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100               512   100000         N/A          3  avgt    5    9210.072 ±  7673.445  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              1024       32         N/A          2  avgt    5       2.752 ±     2.845  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              1024       32         N/A          3  avgt    5       2.177 ±     2.023  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              1024     1000         N/A          2  avgt    5      65.428 ±    36.624  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              1024     1000         N/A          3  avgt    5      72.080 ±    98.589  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              1024   100000         N/A          2  avgt    5   16609.052 ±  6438.159  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              1024   100000         N/A          3  avgt    5   14396.040 ± 17688.661  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              2048       32         N/A          2  avgt    5       3.964 ±     0.353  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              2048       32         N/A          3  avgt    5       3.234 ±     0.202  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              2048     1000         N/A          2  avgt    5     104.921 ±    11.823  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              2048     1000         N/A          3  avgt    5     104.235 ±    18.741  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              2048   100000         N/A          2  avgt    5   26441.152 ±  9810.185  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              2048   100000         N/A          3  avgt    5   25825.711 ± 10462.954  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              4096       32         N/A          2  avgt    5       7.769 ±     6.972  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              4096       32         N/A          3  avgt    5       7.964 ±     9.070  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              4096     1000         N/A          2  avgt    5     249.280 ±   253.840  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              4096     1000         N/A          3  avgt    5     248.586 ±   287.352  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              4096   100000         N/A          2  avgt    5   52915.956 ± 17004.314  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              4096   100000         N/A          3  avgt    5   49128.255 ± 21020.925  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              8192       32         N/A          2  avgt    5      17.146 ±    21.615  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              8192       32         N/A          3  avgt    5      15.892 ±    14.594  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              8192     1000         N/A          2  avgt    5     605.324 ±   588.809  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              8192     1000         N/A          3  avgt    5     502.662 ±   378.215  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              8192   100000         N/A          2  avgt    5  100156.389 ± 28974.739  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100              8192   100000         N/A          3  avgt    5   82029.766 ±  8642.855  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100             16384       32         N/A          2  avgt    5      31.001 ±    36.763  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100             16384       32         N/A          3  avgt    5      30.546 ±    35.039  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100             16384     1000         N/A          2  avgt    5    1042.874 ±   360.383  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100             16384     1000         N/A          3  avgt    5    1069.170 ±   458.276  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100             16384   100000         N/A          2  avgt    5  166193.879 ± 13418.730  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.baselineGetDiffCursorBenchmark                  100             16384   100000         N/A          3  avgt    5  181494.637 ± 39950.689  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                16       32         N/A          2  avgt    5       0.003 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                16       32         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                16     1000         N/A          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                16     1000         N/A          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                16   100000         N/A          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                16   100000         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                32       32         N/A          2  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                32       32         N/A          3  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                32     1000         N/A          2  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                32     1000         N/A          3  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                32   100000         N/A          2  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                32   100000         N/A          3  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                64       32         N/A          2  avgt    5       0.008 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                64       32         N/A          3  avgt    5       0.008 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                64     1000         N/A          2  avgt    5       0.008 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                64     1000         N/A          3  avgt    5       0.008 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                64   100000         N/A          2  avgt    5       0.008 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10                64   100000         N/A          3  avgt    5       0.008 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               128       32         N/A          2  avgt    5       0.015 ±     0.008  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               128       32         N/A          3  avgt    5       0.015 ±     0.008  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               128     1000         N/A          2  avgt    5       0.015 ±     0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               128     1000         N/A          3  avgt    5       0.015 ±     0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               128   100000         N/A          2  avgt    5       0.015 ±     0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               128   100000         N/A          3  avgt    5       0.015 ±     0.008  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               256       32         N/A          2  avgt    5       0.030 ±     0.015  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               256       32         N/A          3  avgt    5       0.031 ±     0.015  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               256     1000         N/A          2  avgt    5       0.032 ±     0.016  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               256     1000         N/A          3  avgt    5       0.032 ±     0.015  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               256   100000         N/A          2  avgt    5       0.034 ±     0.023  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               256   100000         N/A          3  avgt    5       0.039 ±     0.037  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               512       32         N/A          2  avgt    5       0.071 ±     0.046  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               512       32         N/A          3  avgt    5       0.076 ±     0.081  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               512     1000         N/A          2  avgt    5       0.060 ±     0.029  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               512     1000         N/A          3  avgt    5       0.062 ±     0.036  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               512   100000         N/A          2  avgt    5       0.061 ±     0.028  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10               512   100000         N/A          3  avgt    5       0.063 ±     0.033  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              1024       32         N/A          2  avgt    5       0.115 ±     0.052  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              1024       32         N/A          3  avgt    5       0.120 ±     0.063  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              1024     1000         N/A          2  avgt    5       0.117 ±     0.060  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              1024     1000         N/A          3  avgt    5       0.118 ±     0.074  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              1024   100000         N/A          2  avgt    5       0.116 ±     0.048  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              1024   100000         N/A          3  avgt    5       0.120 ±     0.073  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              2048       32         N/A          2  avgt    5       0.259 ±     0.138  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              2048       32         N/A          3  avgt    5       0.251 ±     0.109  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              2048     1000         N/A          2  avgt    5       0.263 ±     0.156  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              2048     1000         N/A          3  avgt    5       0.289 ±     0.247  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              2048   100000         N/A          2  avgt    5       0.241 ±     0.112  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              2048   100000         N/A          3  avgt    5       0.229 ±     0.125  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              4096       32         N/A          2  avgt    5       0.425 ±     0.190  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              4096       32         N/A          3  avgt    5       0.486 ±     0.217  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              4096     1000         N/A          2  avgt    5       0.479 ±     0.258  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              4096     1000         N/A          3  avgt    5       0.487 ±     0.275  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              4096   100000         N/A          2  avgt    5       0.507 ±     0.261  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              4096   100000         N/A          3  avgt    5       0.544 ±     0.397  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              8192       32         N/A          2  avgt    5       0.991 ±     0.493  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              8192       32         N/A          3  avgt    5       0.964 ±     0.405  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              8192     1000         N/A          2  avgt    5       0.859 ±     0.401  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              8192     1000         N/A          3  avgt    5       0.888 ±     0.501  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              8192   100000         N/A          2  avgt    5       0.987 ±     0.526  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10              8192   100000         N/A          3  avgt    5       0.998 ±     0.553  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10             16384       32         N/A          2  avgt    5       2.046 ±     0.949  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10             16384       32         N/A          3  avgt    5       2.056 ±     1.328  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10             16384     1000         N/A          2  avgt    5       2.198 ±     1.344  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10             16384     1000         N/A          3  avgt    5       2.310 ±     1.534  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10             16384   100000         N/A          2  avgt    5       2.109 ±     1.694  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark         10             16384   100000         N/A          3  avgt    5       2.086 ±     1.256  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                16       32         N/A          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                16       32         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                16     1000         N/A          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                16     1000         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                16   100000         N/A          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                16   100000         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                32       32         N/A          2  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                32       32         N/A          3  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                32     1000         N/A          2  avgt    5       0.004 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                32     1000         N/A          3  avgt    5       0.004 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                32   100000         N/A          2  avgt    5       0.004 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                32   100000         N/A          3  avgt    5       0.004 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                64       32         N/A          2  avgt    5       0.007 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                64       32         N/A          3  avgt    5       0.007 ±     0.004  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                64     1000         N/A          2  avgt    5       0.007 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                64     1000         N/A          3  avgt    5       0.007 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                64   100000         N/A          2  avgt    5       0.008 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100                64   100000         N/A          3  avgt    5       0.008 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               128       32         N/A          2  avgt    5       0.015 ±     0.007  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               128       32         N/A          3  avgt    5       0.016 ±     0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               128     1000         N/A          2  avgt    5       0.016 ±     0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               128     1000         N/A          3  avgt    5       0.016 ±     0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               128   100000         N/A          2  avgt    5       0.016 ±     0.009  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               128   100000         N/A          3  avgt    5       0.017 ±     0.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               256       32         N/A          2  avgt    5       0.030 ±     0.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               256       32         N/A          3  avgt    5       0.030 ±     0.018  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               256     1000         N/A          2  avgt    5       0.030 ±     0.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               256     1000         N/A          3  avgt    5       0.030 ±     0.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               256   100000         N/A          2  avgt    5       0.032 ±     0.021  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               256   100000         N/A          3  avgt    5       0.031 ±     0.019  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               512       32         N/A          2  avgt    5       0.064 ±     0.034  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               512       32         N/A          3  avgt    5       0.065 ±     0.030  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               512     1000         N/A          2  avgt    5       0.066 ±     0.042  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               512     1000         N/A          3  avgt    5       0.068 ±     0.042  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               512   100000         N/A          2  avgt    5       0.062 ±     0.029  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100               512   100000         N/A          3  avgt    5       0.060 ±     0.040  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              1024       32         N/A          2  avgt    5       0.111 ±     0.051  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              1024       32         N/A          3  avgt    5       0.110 ±     0.033  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              1024     1000         N/A          2  avgt    5       0.114 ±     0.060  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              1024     1000         N/A          3  avgt    5       0.116 ±     0.052  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              1024   100000         N/A          2  avgt    5       0.120 ±     0.066  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              1024   100000         N/A          3  avgt    5       0.123 ±     0.078  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              2048       32         N/A          2  avgt    5       0.250 ±     0.109  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              2048       32         N/A          3  avgt    5       0.250 ±     0.130  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              2048     1000         N/A          2  avgt    5       0.255 ±     0.154  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              2048     1000         N/A          3  avgt    5       0.268 ±     0.150  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              2048   100000         N/A          2  avgt    5       0.301 ±     0.349  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              2048   100000         N/A          3  avgt    5       0.292 ±     0.314  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              4096       32         N/A          2  avgt    5       0.481 ±     0.187  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              4096       32         N/A          3  avgt    5       0.459 ±     0.162  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              4096     1000         N/A          2  avgt    5       0.452 ±     0.258  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              4096     1000         N/A          3  avgt    5       0.434 ±     0.228  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              4096   100000         N/A          2  avgt    5       0.473 ±     0.232  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              4096   100000         N/A          3  avgt    5       0.509 ±     0.360  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              8192       32         N/A          2  avgt    5       0.967 ±     0.547  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              8192       32         N/A          3  avgt    5       1.016 ±     0.515  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              8192     1000         N/A          2  avgt    5       0.993 ±     0.422  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              8192     1000         N/A          3  avgt    5       0.997 ±     0.610  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              8192   100000         N/A          2  avgt    5       0.992 ±     0.635  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100              8192   100000         N/A          3  avgt    5       1.001 ±     0.680  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100             16384       32         N/A          2  avgt    5       1.833 ±     1.044  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100             16384       32         N/A          3  avgt    5       1.821 ±     1.221  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100             16384     1000         N/A          2  avgt    5       1.937 ±     1.034  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100             16384     1000         N/A          3  avgt    5       1.947 ±     1.155  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100             16384   100000         N/A          2  avgt    5       2.085 ±     1.154  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorAndCommitBenchmark        100             16384   100000         N/A          3  avgt    5       1.998 ±     1.019  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                16       32         N/A          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                16       32         N/A          3  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                16     1000         N/A          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                16     1000         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                16   100000         N/A          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                16   100000         N/A          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                32       32         N/A          2  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                32       32         N/A          3  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                32     1000         N/A          2  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                32     1000         N/A          3  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                32   100000         N/A          2  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                32   100000         N/A          3  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                64       32         N/A          2  avgt    5       0.006 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                64       32         N/A          3  avgt    5       0.006 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                64     1000         N/A          2  avgt    5       0.006 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                64     1000         N/A          3  avgt    5       0.006 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                64   100000         N/A          2  avgt    5       0.006 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10                64   100000         N/A          3  avgt    5       0.006 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               128       32         N/A          2  avgt    5       0.012 ±     0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               128       32         N/A          3  avgt    5       0.012 ±     0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               128     1000         N/A          2  avgt    5       0.012 ±     0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               128     1000         N/A          3  avgt    5       0.012 ±     0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               128   100000         N/A          2  avgt    5       0.012 ±     0.011  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               128   100000         N/A          3  avgt    5       0.012 ±     0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               256       32         N/A          2  avgt    5       0.024 ±     0.021  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               256       32         N/A          3  avgt    5       0.026 ±     0.022  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               256     1000         N/A          2  avgt    5       0.024 ±     0.022  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               256     1000         N/A          3  avgt    5       0.023 ±     0.020  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               256   100000         N/A          2  avgt    5       0.023 ±     0.022  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               256   100000         N/A          3  avgt    5       0.024 ±     0.023  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               512       32         N/A          2  avgt    5       0.049 ±     0.052  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               512       32         N/A          3  avgt    5       0.049 ±     0.051  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               512     1000         N/A          2  avgt    5       0.048 ±     0.044  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               512     1000         N/A          3  avgt    5       0.049 ±     0.051  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               512   100000         N/A          2  avgt    5       0.048 ±     0.048  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10               512   100000         N/A          3  avgt    5       0.047 ±     0.039  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              1024       32         N/A          2  avgt    5       0.097 ±     0.088  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              1024       32         N/A          3  avgt    5       0.100 ±     0.096  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              1024     1000         N/A          2  avgt    5       0.102 ±     0.091  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              1024     1000         N/A          3  avgt    5       0.097 ±     0.097  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              1024   100000         N/A          2  avgt    5       0.091 ±     0.075  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              1024   100000         N/A          3  avgt    5       0.090 ±     0.078  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              2048       32         N/A          2  avgt    5       0.196 ±     0.203  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              2048       32         N/A          3  avgt    5       0.187 ±     0.192  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              2048     1000         N/A          2  avgt    5       0.192 ±     0.205  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              2048     1000         N/A          3  avgt    5       0.191 ±     0.182  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              2048   100000         N/A          2  avgt    5       0.187 ±     0.170  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              2048   100000         N/A          3  avgt    5       0.189 ±     0.164  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              4096       32         N/A          2  avgt    5       0.387 ±     0.399  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              4096       32         N/A          3  avgt    5       0.396 ±     0.404  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              4096     1000         N/A          2  avgt    5       0.398 ±     0.353  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              4096     1000         N/A          3  avgt    5       0.405 ±     0.365  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              4096   100000         N/A          2  avgt    5       0.391 ±     0.332  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              4096   100000         N/A          3  avgt    5       0.367 ±     0.314  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              8192       32         N/A          2  avgt    5       0.779 ±     0.777  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              8192       32         N/A          3  avgt    5       0.761 ±     0.725  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              8192     1000         N/A          2  avgt    5       0.744 ±     0.765  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              8192     1000         N/A          3  avgt    5       0.774 ±     0.772  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              8192   100000         N/A          2  avgt    5       0.735 ±     0.690  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10              8192   100000         N/A          3  avgt    5       0.747 ±     0.700  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10             16384       32         N/A          2  avgt    5       1.488 ±     1.706  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10             16384       32         N/A          3  avgt    5       1.486 ±     1.464  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10             16384     1000         N/A          2  avgt    5       1.535 ±     1.494  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10             16384     1000         N/A          3  avgt    5       1.512 ±     1.413  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10             16384   100000         N/A          2  avgt    5       1.569 ±     1.538  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                  10             16384   100000         N/A          3  avgt    5       1.508 ±     1.443  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                16       32         N/A          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                16       32         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                16     1000         N/A          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                16     1000         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                16   100000         N/A          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                16   100000         N/A          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                32       32         N/A          2  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                32       32         N/A          3  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                32     1000         N/A          2  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                32     1000         N/A          3  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                32   100000         N/A          2  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                32   100000         N/A          3  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                64       32         N/A          2  avgt    5       0.006 ±     0.005  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                64       32         N/A          3  avgt    5       0.006 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                64     1000         N/A          2  avgt    5       0.006 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                64     1000         N/A          3  avgt    5       0.006 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                64   100000         N/A          2  avgt    5       0.006 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100                64   100000         N/A          3  avgt    5       0.006 ±     0.006  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               128       32         N/A          2  avgt    5       0.012 ±     0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               128       32         N/A          3  avgt    5       0.013 ±     0.013  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               128     1000         N/A          2  avgt    5       0.013 ±     0.011  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               128     1000         N/A          3  avgt    5       0.013 ±     0.010  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               128   100000         N/A          2  avgt    5       0.013 ±     0.012  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               128   100000         N/A          3  avgt    5       0.013 ±     0.011  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               256       32         N/A          2  avgt    5       0.024 ±     0.027  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               256       32         N/A          3  avgt    5       0.024 ±     0.024  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               256     1000         N/A          2  avgt    5       0.023 ±     0.025  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               256     1000         N/A          3  avgt    5       0.025 ±     0.025  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               256   100000         N/A          2  avgt    5       0.024 ±     0.025  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               256   100000         N/A          3  avgt    5       0.026 ±     0.025  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               512       32         N/A          2  avgt    5       0.047 ±     0.048  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               512       32         N/A          3  avgt    5       0.047 ±     0.042  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               512     1000         N/A          2  avgt    5       0.048 ±     0.046  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               512     1000         N/A          3  avgt    5       0.049 ±     0.051  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               512   100000         N/A          2  avgt    5       0.047 ±     0.044  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100               512   100000         N/A          3  avgt    5       0.050 ±     0.046  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              1024       32         N/A          2  avgt    5       0.098 ±     0.115  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              1024       32         N/A          3  avgt    5       0.093 ±     0.090  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              1024     1000         N/A          2  avgt    5       0.098 ±     0.102  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              1024     1000         N/A          3  avgt    5       0.097 ±     0.103  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              1024   100000         N/A          2  avgt    5       0.097 ±     0.094  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              1024   100000         N/A          3  avgt    5       0.097 ±     0.084  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              2048       32         N/A          2  avgt    5       0.195 ±     0.198  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              2048       32         N/A          3  avgt    5       0.197 ±     0.208  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              2048     1000         N/A          2  avgt    5       0.195 ±     0.198  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              2048     1000         N/A          3  avgt    5       0.195 ±     0.203  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              2048   100000         N/A          2  avgt    5       0.211 ±     0.223  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              2048   100000         N/A          3  avgt    5       0.206 ±     0.204  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              4096       32         N/A          2  avgt    5       0.401 ±     0.325  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              4096       32         N/A          3  avgt    5       0.388 ±     0.355  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              4096     1000         N/A          2  avgt    5       0.385 ±     0.363  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              4096     1000         N/A          3  avgt    5       0.392 ±     0.434  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              4096   100000         N/A          2  avgt    5       0.390 ±     0.401  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              4096   100000         N/A          3  avgt    5       0.385 ±     0.391  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              8192       32         N/A          2  avgt    5       0.764 ±     0.884  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              8192       32         N/A          3  avgt    5       0.766 ±     0.750  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              8192     1000         N/A          2  avgt    5       0.766 ±     0.709  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              8192     1000         N/A          3  avgt    5       0.762 ±     0.772  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              8192   100000         N/A          2  avgt    5       0.838 ±     0.873  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100              8192   100000         N/A          3  avgt    5       0.727 ±     0.608  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100             16384       32         N/A          2  avgt    5       1.541 ±     1.576  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100             16384       32         N/A          3  avgt    5       1.471 ±     1.485  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100             16384     1000         N/A          2  avgt    5       1.506 ±     1.577  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100             16384     1000         N/A          3  avgt    5       1.514 ±     1.472  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100             16384   100000         N/A          2  avgt    5       1.534 ±     1.628  ms/op
t.r.s.m.b.getdiffcursor.ImmutableGetDiffCursorBenchmark.immutableGetDiffCursorBenchmark                 100             16384   100000         N/A          3  avgt    5       1.512 ±     1.444  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32          64          2  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32          64          3  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32         128          2  avgt    5       0.002 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32         128          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32         256          2  avgt    5       0.005 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32         256          3  avgt    5       0.005 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32         512          2  avgt    5       0.010 ±     0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32         512          3  avgt    5       0.010 ±     0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        1024          2  avgt    5       0.017 ±     0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        1024          3  avgt    5       0.018 ±     0.029  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        2048          2  avgt    5       0.036 ±     0.049  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        2048          3  avgt    5       0.036 ±     0.048  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        4096          2  avgt    5       0.077 ±     0.133  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        4096          3  avgt    5       0.069 ±     0.073  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        8192          2  avgt    5       0.148 ±     0.239  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32        8192          3  avgt    5       0.144 ±     0.214  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32       16384          2  avgt    5       0.266 ±     0.224  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A       32       16384          3  avgt    5       0.289 ±     0.395  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000          64          3  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000         128          2  avgt    5       0.002 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000         128          3  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000         256          2  avgt    5       0.005 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000         256          3  avgt    5       0.005 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000         512          2  avgt    5       0.010 ±     0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000         512          3  avgt    5       0.009 ±     0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        1024          2  avgt    5       0.018 ±     0.027  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        1024          3  avgt    5       0.019 ±     0.027  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        2048          2  avgt    5       0.035 ±     0.039  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        2048          3  avgt    5       0.033 ±     0.031  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        4096          2  avgt    5       0.067 ±     0.059  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        4096          3  avgt    5       0.073 ±     0.067  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        8192          2  avgt    5       0.139 ±     0.189  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000        8192          3  avgt    5       0.146 ±     0.139  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000       16384          2  avgt    5       0.259 ±     0.220  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A     1000       16384          3  avgt    5       0.282 ±     0.362  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000          64          2  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000          64          3  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000         128          2  avgt    5       0.002 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000         128          3  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000         256          2  avgt    5       0.005 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000         256          3  avgt    5       0.005 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000         512          2  avgt    5       0.009 ±     0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000         512          3  avgt    5       0.008 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        1024          2  avgt    5       0.018 ±     0.028  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        1024          3  avgt    5       0.018 ±     0.024  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        2048          2  avgt    5       0.036 ±     0.043  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        2048          3  avgt    5       0.037 ±     0.052  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        4096          2  avgt    5       0.072 ±     0.102  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        4096          3  avgt    5       0.070 ±     0.064  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        8192          2  avgt    5       0.157 ±     0.280  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000        8192          3  avgt    5       0.135 ±     0.119  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000       16384          2  avgt    5       0.295 ±     0.444  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                            10               N/A   100000       16384          3  avgt    5       0.274 ±     0.259  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32          64          2  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32          64          3  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32         128          2  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32         128          3  avgt    5       0.002 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32         256          2  avgt    5       0.005 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32         256          3  avgt    5       0.005 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32         512          2  avgt    5       0.009 ±     0.012  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32         512          3  avgt    5       0.009 ±     0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        1024          2  avgt    5       0.019 ±     0.029  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        1024          3  avgt    5       0.018 ±     0.030  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        2048          2  avgt    5       0.034 ±     0.035  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        2048          3  avgt    5       0.035 ±     0.049  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        4096          2  avgt    5       0.068 ±     0.058  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        4096          3  avgt    5       0.072 ±     0.107  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        8192          2  avgt    5       0.133 ±     0.119  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32        8192          3  avgt    5       0.135 ±     0.121  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32       16384          2  avgt    5       0.290 ±     0.445  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A       32       16384          3  avgt    5       0.271 ±     0.284  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000          64          2  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000         128          2  avgt    5       0.002 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000         128          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000         256          2  avgt    5       0.004 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000         256          3  avgt    5       0.004 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000         512          2  avgt    5       0.009 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000         512          3  avgt    5       0.009 ±     0.014  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        1024          2  avgt    5       0.019 ±     0.028  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        1024          3  avgt    5       0.018 ±     0.022  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        2048          2  avgt    5       0.036 ±     0.045  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        2048          3  avgt    5       0.034 ±     0.030  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        4096          2  avgt    5       0.072 ±     0.102  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        4096          3  avgt    5       0.068 ±     0.068  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        8192          2  avgt    5       0.134 ±     0.115  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000        8192          3  avgt    5       0.140 ±     0.159  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000       16384          2  avgt    5       0.265 ±     0.218  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A     1000       16384          3  avgt    5       0.278 ±     0.277  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000           2          3  avgt           ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000          64          3  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000         128          2  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000         128          3  avgt    5       0.002 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000         256          2  avgt    5       0.005 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000         256          3  avgt    5       0.005 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000         512          2  avgt    5       0.010 ±     0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000         512          3  avgt    5       0.010 ±     0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        1024          2  avgt    5       0.019 ±     0.018  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        1024          3  avgt    5       0.018 ±     0.021  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        2048          2  avgt    5       0.038 ±     0.045  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        2048          3  avgt    5       0.039 ±     0.046  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        4096          2  avgt    5       0.078 ±     0.109  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        4096          3  avgt    5       0.074 ±     0.065  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        8192          2  avgt    5       0.156 ±     0.192  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000        8192          3  avgt    5       0.143 ±     0.133  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000       16384          2  avgt    5       0.309 ±     0.368  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreAndCommitBenchmark                           100               N/A   100000       16384          3  avgt    5       0.313 ±     0.411  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32          32          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32          32          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32         128          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32         128          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32         256          2  avgt    5       0.004 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32         256          3  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32         512          2  avgt    5       0.008 ±     0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32         512          3  avgt    5       0.007 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        1024          2  avgt    5       0.015 ±     0.015  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        1024          3  avgt    5       0.015 ±     0.018  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        2048          2  avgt    5       0.029 ±     0.028  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        2048          3  avgt    5       0.032 ±     0.042  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        4096          2  avgt    5       0.062 ±     0.072  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        4096          3  avgt    5       0.061 ±     0.076  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        8192          2  avgt    5       0.117 ±     0.117  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32        8192          3  avgt    5       0.118 ±     0.119  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32       16384          2  avgt    5       0.238 ±     0.250  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A       32       16384          3  avgt    5       0.240 ±     0.269  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000          32          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000          32          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000         128          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000         128          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000         256          2  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000         256          3  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000         512          2  avgt    5       0.007 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000         512          3  avgt    5       0.007 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        1024          2  avgt    5       0.015 ±     0.014  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        1024          3  avgt    5       0.014 ±     0.014  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        2048          2  avgt    5       0.030 ±     0.032  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        2048          3  avgt    5       0.030 ±     0.034  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        4096          2  avgt    5       0.058 ±     0.057  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        4096          3  avgt    5       0.058 ±     0.059  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        8192          2  avgt    5       0.120 ±     0.137  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000        8192          3  avgt    5       0.113 ±     0.098  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000       16384          2  avgt    5       0.233 ±     0.241  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A     1000       16384          3  avgt    5       0.231 ±     0.220  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000          32          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000          32          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000         128          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000         128          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000         256          2  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000         256          3  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000         512          2  avgt    5       0.008 ±     0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000         512          3  avgt    5       0.008 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        1024          2  avgt    5       0.015 ±     0.015  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        1024          3  avgt    5       0.015 ±     0.015  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        2048          2  avgt    5       0.031 ±     0.032  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        2048          3  avgt    5       0.030 ±     0.029  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        4096          2  avgt    5       0.062 ±     0.065  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        4096          3  avgt    5       0.060 ±     0.059  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        8192          2  avgt    5       0.124 ±     0.124  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000        8192          3  avgt    5       0.126 ±     0.135  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000       16384          2  avgt    5       0.246 ±     0.280  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                     10               N/A   100000       16384          3  avgt    5       0.252 ±     0.283  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32          32          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32          32          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32         128          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32         128          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32         256          2  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32         256          3  avgt    5       0.004 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32         512          2  avgt    5       0.008 ±     0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32         512          3  avgt    5       0.008 ±     0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        1024          2  avgt    5       0.015 ±     0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        1024          3  avgt    5       0.015 ±     0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        2048          2  avgt    5       0.032 ±     0.040  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        2048          3  avgt    5       0.029 ±     0.029  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        4096          2  avgt    5       0.062 ±     0.077  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        4096          3  avgt    5       0.063 ±     0.083  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        8192          2  avgt    5       0.124 ±     0.155  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32        8192          3  avgt    5       0.120 ±     0.134  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32       16384          2  avgt    5       0.239 ±     0.252  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A       32       16384          3  avgt    5       0.234 ±     0.238  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000          32          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000          32          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000         128          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000         128          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000         256          2  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000         256          3  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000         512          2  avgt    5       0.008 ±     0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000         512          3  avgt    5       0.008 ±     0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        1024          2  avgt    5       0.015 ±     0.018  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        1024          3  avgt    5       0.015 ±     0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        2048          2  avgt    5       0.030 ±     0.029  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        2048          3  avgt    5       0.031 ±     0.036  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        4096          2  avgt    5       0.062 ±     0.071  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        4096          3  avgt    5       0.059 ±     0.064  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        8192          2  avgt    5       0.122 ±     0.142  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000        8192          3  avgt    5       0.117 ±     0.105  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000       16384          2  avgt    5       0.249 ±     0.300  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A     1000       16384          3  avgt    5       0.249 ±     0.308  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000          16          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000          16          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000          32          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000          64          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000          64          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000         128          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000         128          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000         256          2  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000         256          3  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000         512          2  avgt    5       0.008 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000         512          3  avgt    5       0.008 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        1024          2  avgt    5       0.016 ±     0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        1024          3  avgt    5       0.016 ±     0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        2048          2  avgt    5       0.032 ±     0.034  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        2048          3  avgt    5       0.034 ±     0.041  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        4096          2  avgt    5       0.064 ±     0.065  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        4096          3  avgt    5       0.063 ±     0.063  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        8192          2  avgt    5       0.161 ±     0.174  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000        8192          3  avgt    5       0.131 ±     0.143  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000       16384          2  avgt    5       0.274 ±     0.322  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.baselineRestoreBenchmark                                    100               N/A   100000       16384          3  avgt    5       0.267 ±     0.302  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           1          2  avgt            0.001              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           1          3  avgt            0.001              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           2          2  avgt    2      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           2          3  avgt    3       0.001 ±     0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           8          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32           8          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32          32          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32          32          3  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32          64          2  avgt    5       0.004 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32          64          3  avgt    5       0.003 ±     0.006  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32         128          2  avgt    5       0.007 ±     0.014  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32         128          3  avgt    5       0.006 ±     0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32         256          2  avgt    5       0.014 ±     0.033  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32         256          3  avgt    5       0.013 ±     0.031  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32         512          2  avgt    5       0.025 ±     0.053  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32         512          3  avgt    5       0.024 ±     0.041  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        1024          2  avgt    5       0.058 ±     0.186  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        1024          3  avgt    5       0.057 ±     0.156  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        2048          2  avgt    5       0.121 ±     0.399  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        2048          3  avgt    5       0.104 ±     0.256  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        4096          2  avgt    5       0.198 ±     0.483  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        4096          3  avgt    5       0.202 ±     0.490  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        8192          2  avgt    5       0.412 ±     1.050  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32        8192          3  avgt    5       0.412 ±     0.975  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32       16384          2  avgt    5       0.852 ±     2.315  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A       32       16384          3  avgt    5       0.722 ±     0.799  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           1          2  avgt            0.001              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           1          3  avgt           ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           2          2  avgt    2      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           2          3  avgt    2      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           8          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000           8          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000          32          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000          32          3  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000          64          2  avgt    5       0.003 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000          64          3  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000         128          2  avgt    5       0.006 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000         128          3  avgt    5       0.006 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000         256          2  avgt    5       0.014 ±     0.031  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000         256          3  avgt    5       0.012 ±     0.024  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000         512          2  avgt    5       0.025 ±     0.042  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000         512          3  avgt    5       0.024 ±     0.041  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        1024          2  avgt    5       0.053 ±     0.110  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        1024          3  avgt    5       0.055 ±     0.123  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        2048          2  avgt    5       0.122 ±     0.383  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        2048          3  avgt    5       0.094 ±     0.178  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        4096          2  avgt    5       0.189 ±     0.131  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        4096          3  avgt    5       0.189 ±     0.337  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        8192          2  avgt    5       0.380 ±     0.781  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000        8192          3  avgt    5       0.402 ±     0.964  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000       16384          2  avgt    5       0.792 ±     1.944  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A     1000       16384          3  avgt    5       0.746 ±     1.050  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           1          2  avgt    3       0.001 ±     0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           1          3  avgt    4       0.003 ±     0.019  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           2          2  avgt    4       0.001 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           2          3  avgt    4       0.001 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           8          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000           8          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000          16          3  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000          32          2  avgt    5       0.002 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000          32          3  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000          64          2  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000          64          3  avgt    5       0.003 ±     0.007  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000         128          2  avgt    5       0.007 ±     0.012  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000         128          3  avgt    5       0.006 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000         256          2  avgt    5       0.013 ±     0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000         256          3  avgt    5       0.012 ±     0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000         512          2  avgt    5       0.026 ±     0.025  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000         512          3  avgt    5       0.025 ±     0.021  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        1024          2  avgt    5       0.046 ±     0.064  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        1024          3  avgt    5       0.048 ±     0.068  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        2048          2  avgt    5       0.103 ±     0.095  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        2048          3  avgt    5       0.095 ±     0.067  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        4096          2  avgt    5       0.209 ±     0.392  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        4096          3  avgt    5       0.198 ±     0.175  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        8192          2  avgt    5       0.477 ±     1.349  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000        8192          3  avgt    5       0.392 ±     0.393  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000       16384          2  avgt    5       0.806 ±     0.737  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                           10               N/A   100000       16384          3  avgt    5       0.729 ±     0.972  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           1          2  avgt            0.001              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           1          3  avgt            0.001              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           2          2  avgt    2      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           2          3  avgt    2      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           8          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32           8          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32          16          3  avgt    5       0.001 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32          32          2  avgt    5       0.002 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32          32          3  avgt    5       0.003 ±     0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32          64          2  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32          64          3  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32         128          2  avgt    5       0.007 ±     0.015  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32         128          3  avgt    5       0.006 ±     0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32         256          2  avgt    5       0.014 ±     0.030  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32         256          3  avgt    5       0.012 ±     0.022  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32         512          2  avgt    5       0.024 ±     0.055  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32         512          3  avgt    5       0.025 ±     0.046  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        1024          2  avgt    5       0.044 ±     0.047  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        1024          3  avgt    5       0.049 ±     0.092  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        2048          2  avgt    5       0.103 ±     0.251  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        2048          3  avgt    5       0.101 ±     0.241  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        4096          2  avgt    5       0.214 ±     0.616  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        4096          3  avgt    5       0.215 ±     0.644  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        8192          2  avgt    5       0.387 ±     0.805  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32        8192          3  avgt    5       0.364 ±     0.423  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32       16384          2  avgt    5       0.743 ±     1.404  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A       32       16384          3  avgt    5       0.921 ±     0.613  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           1          2  avgt            0.001              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           1          3  avgt            0.010              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           2          2  avgt    2      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           2          3  avgt    2      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           8          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000           8          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000          32          2  avgt    5       0.002 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000          32          3  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000          64          2  avgt    5       0.004 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000          64          3  avgt    5       0.003 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000         128          2  avgt    5       0.006 ±     0.015  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000         128          3  avgt    5       0.006 ±     0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000         256          2  avgt    5       0.012 ±     0.022  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000         256          3  avgt    5       0.013 ±     0.025  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000         512          2  avgt    5       0.025 ±     0.053  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000         512          3  avgt    5       0.027 ±     0.073  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        1024          2  avgt    5       0.048 ±     0.085  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        1024          3  avgt    5       0.050 ±     0.095  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        2048          2  avgt    5       0.102 ±     0.220  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        2048          3  avgt    5       0.094 ±     0.137  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        4096          2  avgt    5       0.179 ±     0.245  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        4096          3  avgt    5       0.216 ±     0.488  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        8192          2  avgt    5       0.404 ±     0.780  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000        8192          3  avgt    5       0.426 ±     1.064  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000       16384          2  avgt    5       0.839 ±     1.857  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A     1000       16384          3  avgt    5       0.837 ±     1.746  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000           1          2  avgt    5       0.024 ±     0.122  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000           2          2  avgt    5       0.005 ±     0.029  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000           2          3  avgt    5       0.003 ±     0.015  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000           4          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000           4          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000           8          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000           8          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000          16          2  avgt    5       0.001 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000          16          3  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000          32          2  avgt    5       0.002 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000          32          3  avgt    5       0.002 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000          64          2  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000          64          3  avgt    5       0.003 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000         128          2  avgt    5       0.008 ±     0.020  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000         128          3  avgt    5       0.007 ±     0.012  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000         256          2  avgt    5       0.013 ±     0.012  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000         256          3  avgt    5       0.013 ±     0.021  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000         512          2  avgt    5       0.026 ±     0.025  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000         512          3  avgt    5       0.025 ±     0.020  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        1024          2  avgt    5       0.053 ±     0.104  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        1024          3  avgt    5       0.050 ±     0.039  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        2048          2  avgt    5       0.103 ±     0.093  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        2048          3  avgt    5       0.115 ±     0.257  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        4096          2  avgt    5       0.213 ±     0.212  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        4096          3  avgt    5       0.190 ±     0.242  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        8192          2  avgt    5       0.383 ±     0.255  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000        8192          3  avgt    5       0.413 ±     0.308  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000       16384          2  avgt    5       0.835 ±     1.099  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreAndCommitBenchmark                          100               N/A   100000       16384          3  avgt    5       0.787 ±     0.577  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32          16          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32          64          2  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32          64          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32         128          2  avgt    5       0.004 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32         128          3  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32         256          2  avgt    5       0.008 ±     0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32         256          3  avgt    5       0.009 ±     0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32         512          2  avgt    5       0.016 ±     0.019  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32         512          3  avgt    5       0.016 ±     0.020  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        1024          2  avgt    5       0.031 ±     0.035  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        1024          3  avgt    5       0.031 ±     0.032  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        2048          2  avgt    5       0.066 ±     0.074  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        2048          3  avgt    5       0.065 ±     0.070  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        4096          2  avgt    5       0.124 ±     0.143  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        4096          3  avgt    5       0.118 ±     0.120  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        8192          2  avgt    5       0.233 ±     0.212  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32        8192          3  avgt    5       0.258 ±     0.335  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32       16384          2  avgt    5       0.474 ±     0.474  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A       32       16384          3  avgt    5       0.523 ±     0.697  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000          64          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000          64          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000         128          2  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000         128          3  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000         256          2  avgt    5       0.008 ±     0.008  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000         256          3  avgt    5       0.008 ±     0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000         512          2  avgt    5       0.017 ±     0.019  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000         512          3  avgt    5       0.016 ±     0.018  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        1024          2  avgt    5       0.033 ±     0.035  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        1024          3  avgt    5       0.034 ±     0.036  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        2048          2  avgt    5       0.061 ±     0.059  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        2048          3  avgt    5       0.068 ±     0.080  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        4096          2  avgt    5       0.127 ±     0.156  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        4096          3  avgt    5       0.123 ±     0.142  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        8192          2  avgt    5       0.249 ±     0.292  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000        8192          3  avgt    5       0.242 ±     0.267  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000       16384          2  avgt    5       0.485 ±     0.548  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A     1000       16384          3  avgt    5       0.493 ±     0.576  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000          32          2  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000          64          2  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000          64          3  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000         128          2  avgt    5       0.005 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000         128          3  avgt    5       0.005 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000         256          2  avgt    5       0.011 ±     0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000         256          3  avgt    5       0.010 ±     0.013  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000         512          2  avgt    5       0.017 ±     0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000         512          3  avgt    5       0.017 ±     0.022  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        1024          2  avgt    5       0.035 ±     0.040  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        1024          3  avgt    5       0.035 ±     0.036  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        2048          2  avgt    5       0.074 ±     0.085  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        2048          3  avgt    5       0.067 ±     0.075  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        4096          2  avgt    5       0.138 ±     0.158  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        4096          3  avgt    5       0.149 ±     0.157  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        8192          2  avgt    5       0.274 ±     0.311  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000        8192          3  avgt    5       0.269 ±     0.301  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000       16384          2  avgt    5       0.543 ±     0.623  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                    10               N/A   100000       16384          3  avgt    5       0.494 ±     0.525  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32          64          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32          64          3  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32         128          2  avgt    5       0.004 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32         128          3  avgt    5       0.004 ±     0.004  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32         256          2  avgt    5       0.009 ±     0.011  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32         256          3  avgt    5       0.009 ±     0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32         512          2  avgt    5       0.017 ±     0.017  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32         512          3  avgt    5       0.017 ±     0.020  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        1024          2  avgt    5       0.035 ±     0.039  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        1024          3  avgt    5       0.036 ±     0.045  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        2048          2  avgt    5       0.069 ±     0.089  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        2048          3  avgt    5       0.065 ±     0.069  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        4096          2  avgt    5       0.125 ±     0.144  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        4096          3  avgt    5       0.125 ±     0.144  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        8192          2  avgt    5       0.259 ±     0.334  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32        8192          3  avgt    5       0.246 ±     0.279  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32       16384          2  avgt    5       0.504 ±     0.617  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A       32       16384          3  avgt    5       0.520 ±     0.668  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           8          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000           8          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000          32          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000          32          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000          64          2  avgt    5       0.002 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000          64          3  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000         128          2  avgt    5       0.005 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000         128          3  avgt    5       0.004 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000         256          2  avgt    5       0.008 ±     0.009  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000         256          3  avgt    5       0.008 ±     0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000         512          2  avgt    5       0.017 ±     0.020  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000         512          3  avgt    5       0.016 ±     0.016  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        1024          2  avgt    5       0.033 ±     0.038  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        1024          3  avgt    5       0.033 ±     0.040  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        2048          2  avgt    5       0.068 ±     0.089  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        2048          3  avgt    5       0.066 ±     0.070  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        4096          2  avgt    5       0.125 ±     0.139  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        4096          3  avgt    5       0.119 ±     0.127  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        8192          2  avgt    5       0.252 ±     0.305  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000        8192          3  avgt    5       0.259 ±     0.314  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000       16384          2  avgt    5       0.496 ±     0.549  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A     1000       16384          3  avgt    5       0.498 ±     0.591  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           1          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           1          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           2          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           2          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           4          2  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           4          3  avgt    5      ? 10??              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           8          2  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000           8          3  avgt    5      ? 10?³              ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000          16          2  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000          16          3  avgt    5       0.001 ±     0.001  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000          32          2  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000          32          3  avgt    5       0.001 ±     0.002  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000          64          2  avgt    5       0.003 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000          64          3  avgt    5       0.002 ±     0.003  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000         128          2  avgt    5       0.004 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000         128          3  avgt    5       0.005 ±     0.005  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000         256          2  avgt    5       0.010 ±     0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000         256          3  avgt    5       0.009 ±     0.010  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000         512          2  avgt    5       0.020 ±     0.022  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000         512          3  avgt    5       0.021 ±     0.022  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        1024          2  avgt    5       0.041 ±     0.039  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        1024          3  avgt    5       0.039 ±     0.042  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        2048          2  avgt    5       0.085 ±     0.096  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        2048          3  avgt    5       0.084 ±     0.093  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        4096          2  avgt    5       0.172 ±     0.214  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        4096          3  avgt    5       0.135 ±     0.148  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        8192          2  avgt    5       0.330 ±     0.349  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000        8192          3  avgt    5       0.327 ±     0.365  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000       16384          2  avgt    5       0.661 ±     0.756  ms/op
t.r.s.m.b.restore.ImmutableRestoreBenchmark.immutableRestoreBenchmark                                   100               N/A   100000       16384          3  avgt    5       0.535 ±     0.570  ms/op

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.3.1/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 11h 44m 26s
13 actionable tasks: 2 executed, 11 up-to-date
